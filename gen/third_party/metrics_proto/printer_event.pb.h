// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: printer_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_printer_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_printer_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_printer_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_printer_5fevent_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class PrinterEventProto;
struct PrinterEventProtoDefaultTypeInternal;
extern PrinterEventProtoDefaultTypeInternal _PrinterEventProto_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::PrinterEventProto* Arena::CreateMaybeMessage<::metrics::PrinterEventProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum PrinterEventProto_EventType : int {
  PrinterEventProto_EventType_UNKNOWN = 0,
  PrinterEventProto_EventType_SETUP_AUTOMATIC = 1,
  PrinterEventProto_EventType_SETUP_MANUAL = 2,
  PrinterEventProto_EventType_SETUP_ABANDONED = 3,
  PrinterEventProto_EventType_PRINTER_DELETED = 4
};
bool PrinterEventProto_EventType_IsValid(int value);
constexpr PrinterEventProto_EventType PrinterEventProto_EventType_EventType_MIN = PrinterEventProto_EventType_UNKNOWN;
constexpr PrinterEventProto_EventType PrinterEventProto_EventType_EventType_MAX = PrinterEventProto_EventType_PRINTER_DELETED;
constexpr int PrinterEventProto_EventType_EventType_ARRAYSIZE = PrinterEventProto_EventType_EventType_MAX + 1;

const std::string& PrinterEventProto_EventType_Name(PrinterEventProto_EventType value);
template<typename T>
inline const std::string& PrinterEventProto_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrinterEventProto_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrinterEventProto_EventType_Name.");
  return PrinterEventProto_EventType_Name(static_cast<PrinterEventProto_EventType>(enum_t_value));
}
bool PrinterEventProto_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PrinterEventProto_EventType* value);
// ===================================================================

class PrinterEventProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PrinterEventProto) */ {
 public:
  inline PrinterEventProto() : PrinterEventProto(nullptr) {}
  ~PrinterEventProto() override;
  explicit PROTOBUF_CONSTEXPR PrinterEventProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrinterEventProto(const PrinterEventProto& from);
  PrinterEventProto(PrinterEventProto&& from) noexcept
    : PrinterEventProto() {
    *this = ::std::move(from);
  }

  inline PrinterEventProto& operator=(const PrinterEventProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterEventProto& operator=(PrinterEventProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PrinterEventProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrinterEventProto* internal_default_instance() {
    return reinterpret_cast<const PrinterEventProto*>(
               &_PrinterEventProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrinterEventProto& a, PrinterEventProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PrinterEventProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrinterEventProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrinterEventProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrinterEventProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrinterEventProto& from);
  void MergeFrom(const PrinterEventProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrinterEventProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PrinterEventProto";
  }
  protected:
  explicit PrinterEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PrinterEventProto_EventType EventType;
  static constexpr EventType UNKNOWN =
    PrinterEventProto_EventType_UNKNOWN;
  static constexpr EventType SETUP_AUTOMATIC =
    PrinterEventProto_EventType_SETUP_AUTOMATIC;
  static constexpr EventType SETUP_MANUAL =
    PrinterEventProto_EventType_SETUP_MANUAL;
  static constexpr EventType SETUP_ABANDONED =
    PrinterEventProto_EventType_SETUP_ABANDONED;
  static constexpr EventType PRINTER_DELETED =
    PrinterEventProto_EventType_PRINTER_DELETED;
  static inline bool EventType_IsValid(int value) {
    return PrinterEventProto_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    PrinterEventProto_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    PrinterEventProto_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    PrinterEventProto_EventType_EventType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return PrinterEventProto_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return PrinterEventProto_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsbPrinterManufacturerFieldNumber = 1,
    kUsbPrinterModelFieldNumber = 2,
    kIppMakeAndModelFieldNumber = 5,
    kPpdIdentifierFieldNumber = 7,
    kUsbVendorIdFieldNumber = 3,
    kUsbModelIdFieldNumber = 4,
    kUserPpdFieldNumber = 6,
    kEventTypeFieldNumber = 8,
  };
  // optional string usb_printer_manufacturer = 1;
  bool has_usb_printer_manufacturer() const;
  private:
  bool _internal_has_usb_printer_manufacturer() const;
  public:
  void clear_usb_printer_manufacturer();
  const std::string& usb_printer_manufacturer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usb_printer_manufacturer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usb_printer_manufacturer();
  PROTOBUF_NODISCARD std::string* release_usb_printer_manufacturer();
  void set_allocated_usb_printer_manufacturer(std::string* usb_printer_manufacturer);
  private:
  const std::string& _internal_usb_printer_manufacturer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usb_printer_manufacturer(const std::string& value);
  std::string* _internal_mutable_usb_printer_manufacturer();
  public:

  // optional string usb_printer_model = 2;
  bool has_usb_printer_model() const;
  private:
  bool _internal_has_usb_printer_model() const;
  public:
  void clear_usb_printer_model();
  const std::string& usb_printer_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usb_printer_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usb_printer_model();
  PROTOBUF_NODISCARD std::string* release_usb_printer_model();
  void set_allocated_usb_printer_model(std::string* usb_printer_model);
  private:
  const std::string& _internal_usb_printer_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usb_printer_model(const std::string& value);
  std::string* _internal_mutable_usb_printer_model();
  public:

  // optional string ipp_make_and_model = 5;
  bool has_ipp_make_and_model() const;
  private:
  bool _internal_has_ipp_make_and_model() const;
  public:
  void clear_ipp_make_and_model();
  const std::string& ipp_make_and_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipp_make_and_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipp_make_and_model();
  PROTOBUF_NODISCARD std::string* release_ipp_make_and_model();
  void set_allocated_ipp_make_and_model(std::string* ipp_make_and_model);
  private:
  const std::string& _internal_ipp_make_and_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipp_make_and_model(const std::string& value);
  std::string* _internal_mutable_ipp_make_and_model();
  public:

  // optional string ppd_identifier = 7;
  bool has_ppd_identifier() const;
  private:
  bool _internal_has_ppd_identifier() const;
  public:
  void clear_ppd_identifier();
  const std::string& ppd_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ppd_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ppd_identifier();
  PROTOBUF_NODISCARD std::string* release_ppd_identifier();
  void set_allocated_ppd_identifier(std::string* ppd_identifier);
  private:
  const std::string& _internal_ppd_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ppd_identifier(const std::string& value);
  std::string* _internal_mutable_ppd_identifier();
  public:

  // optional int32 usb_vendor_id = 3;
  bool has_usb_vendor_id() const;
  private:
  bool _internal_has_usb_vendor_id() const;
  public:
  void clear_usb_vendor_id();
  int32_t usb_vendor_id() const;
  void set_usb_vendor_id(int32_t value);
  private:
  int32_t _internal_usb_vendor_id() const;
  void _internal_set_usb_vendor_id(int32_t value);
  public:

  // optional int32 usb_model_id = 4;
  bool has_usb_model_id() const;
  private:
  bool _internal_has_usb_model_id() const;
  public:
  void clear_usb_model_id();
  int32_t usb_model_id() const;
  void set_usb_model_id(int32_t value);
  private:
  int32_t _internal_usb_model_id() const;
  void _internal_set_usb_model_id(int32_t value);
  public:

  // optional bool user_ppd = 6;
  bool has_user_ppd() const;
  private:
  bool _internal_has_user_ppd() const;
  public:
  void clear_user_ppd();
  bool user_ppd() const;
  void set_user_ppd(bool value);
  private:
  bool _internal_user_ppd() const;
  void _internal_set_user_ppd(bool value);
  public:

  // optional .metrics.PrinterEventProto.EventType event_type = 8;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::metrics::PrinterEventProto_EventType event_type() const;
  void set_event_type(::metrics::PrinterEventProto_EventType value);
  private:
  ::metrics::PrinterEventProto_EventType _internal_event_type() const;
  void _internal_set_event_type(::metrics::PrinterEventProto_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PrinterEventProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usb_printer_manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usb_printer_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipp_make_and_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ppd_identifier_;
  int32_t usb_vendor_id_;
  int32_t usb_model_id_;
  bool user_ppd_;
  int event_type_;
  friend struct ::TableStruct_printer_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrinterEventProto

// optional string usb_printer_manufacturer = 1;
inline bool PrinterEventProto::_internal_has_usb_printer_manufacturer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrinterEventProto::has_usb_printer_manufacturer() const {
  return _internal_has_usb_printer_manufacturer();
}
inline void PrinterEventProto::clear_usb_printer_manufacturer() {
  usb_printer_manufacturer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrinterEventProto::usb_printer_manufacturer() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.usb_printer_manufacturer)
  return _internal_usb_printer_manufacturer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterEventProto::set_usb_printer_manufacturer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 usb_printer_manufacturer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.usb_printer_manufacturer)
}
inline std::string* PrinterEventProto::mutable_usb_printer_manufacturer() {
  std::string* _s = _internal_mutable_usb_printer_manufacturer();
  // @@protoc_insertion_point(field_mutable:metrics.PrinterEventProto.usb_printer_manufacturer)
  return _s;
}
inline const std::string& PrinterEventProto::_internal_usb_printer_manufacturer() const {
  return usb_printer_manufacturer_.Get();
}
inline void PrinterEventProto::_internal_set_usb_printer_manufacturer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  usb_printer_manufacturer_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterEventProto::_internal_mutable_usb_printer_manufacturer() {
  _has_bits_[0] |= 0x00000001u;
  return usb_printer_manufacturer_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterEventProto::release_usb_printer_manufacturer() {
  // @@protoc_insertion_point(field_release:metrics.PrinterEventProto.usb_printer_manufacturer)
  if (!_internal_has_usb_printer_manufacturer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = usb_printer_manufacturer_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usb_printer_manufacturer_.IsDefault()) {
    usb_printer_manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterEventProto::set_allocated_usb_printer_manufacturer(std::string* usb_printer_manufacturer) {
  if (usb_printer_manufacturer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  usb_printer_manufacturer_.SetAllocated(usb_printer_manufacturer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usb_printer_manufacturer_.IsDefault()) {
    usb_printer_manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.PrinterEventProto.usb_printer_manufacturer)
}

// optional string usb_printer_model = 2;
inline bool PrinterEventProto::_internal_has_usb_printer_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrinterEventProto::has_usb_printer_model() const {
  return _internal_has_usb_printer_model();
}
inline void PrinterEventProto::clear_usb_printer_model() {
  usb_printer_model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrinterEventProto::usb_printer_model() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.usb_printer_model)
  return _internal_usb_printer_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterEventProto::set_usb_printer_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 usb_printer_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.usb_printer_model)
}
inline std::string* PrinterEventProto::mutable_usb_printer_model() {
  std::string* _s = _internal_mutable_usb_printer_model();
  // @@protoc_insertion_point(field_mutable:metrics.PrinterEventProto.usb_printer_model)
  return _s;
}
inline const std::string& PrinterEventProto::_internal_usb_printer_model() const {
  return usb_printer_model_.Get();
}
inline void PrinterEventProto::_internal_set_usb_printer_model(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  usb_printer_model_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterEventProto::_internal_mutable_usb_printer_model() {
  _has_bits_[0] |= 0x00000002u;
  return usb_printer_model_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterEventProto::release_usb_printer_model() {
  // @@protoc_insertion_point(field_release:metrics.PrinterEventProto.usb_printer_model)
  if (!_internal_has_usb_printer_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = usb_printer_model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usb_printer_model_.IsDefault()) {
    usb_printer_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterEventProto::set_allocated_usb_printer_model(std::string* usb_printer_model) {
  if (usb_printer_model != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  usb_printer_model_.SetAllocated(usb_printer_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usb_printer_model_.IsDefault()) {
    usb_printer_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.PrinterEventProto.usb_printer_model)
}

// optional int32 usb_vendor_id = 3;
inline bool PrinterEventProto::_internal_has_usb_vendor_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PrinterEventProto::has_usb_vendor_id() const {
  return _internal_has_usb_vendor_id();
}
inline void PrinterEventProto::clear_usb_vendor_id() {
  usb_vendor_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t PrinterEventProto::_internal_usb_vendor_id() const {
  return usb_vendor_id_;
}
inline int32_t PrinterEventProto::usb_vendor_id() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.usb_vendor_id)
  return _internal_usb_vendor_id();
}
inline void PrinterEventProto::_internal_set_usb_vendor_id(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  usb_vendor_id_ = value;
}
inline void PrinterEventProto::set_usb_vendor_id(int32_t value) {
  _internal_set_usb_vendor_id(value);
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.usb_vendor_id)
}

// optional int32 usb_model_id = 4;
inline bool PrinterEventProto::_internal_has_usb_model_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PrinterEventProto::has_usb_model_id() const {
  return _internal_has_usb_model_id();
}
inline void PrinterEventProto::clear_usb_model_id() {
  usb_model_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t PrinterEventProto::_internal_usb_model_id() const {
  return usb_model_id_;
}
inline int32_t PrinterEventProto::usb_model_id() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.usb_model_id)
  return _internal_usb_model_id();
}
inline void PrinterEventProto::_internal_set_usb_model_id(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  usb_model_id_ = value;
}
inline void PrinterEventProto::set_usb_model_id(int32_t value) {
  _internal_set_usb_model_id(value);
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.usb_model_id)
}

// optional string ipp_make_and_model = 5;
inline bool PrinterEventProto::_internal_has_ipp_make_and_model() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrinterEventProto::has_ipp_make_and_model() const {
  return _internal_has_ipp_make_and_model();
}
inline void PrinterEventProto::clear_ipp_make_and_model() {
  ipp_make_and_model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PrinterEventProto::ipp_make_and_model() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.ipp_make_and_model)
  return _internal_ipp_make_and_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterEventProto::set_ipp_make_and_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 ipp_make_and_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.ipp_make_and_model)
}
inline std::string* PrinterEventProto::mutable_ipp_make_and_model() {
  std::string* _s = _internal_mutable_ipp_make_and_model();
  // @@protoc_insertion_point(field_mutable:metrics.PrinterEventProto.ipp_make_and_model)
  return _s;
}
inline const std::string& PrinterEventProto::_internal_ipp_make_and_model() const {
  return ipp_make_and_model_.Get();
}
inline void PrinterEventProto::_internal_set_ipp_make_and_model(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ipp_make_and_model_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterEventProto::_internal_mutable_ipp_make_and_model() {
  _has_bits_[0] |= 0x00000004u;
  return ipp_make_and_model_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterEventProto::release_ipp_make_and_model() {
  // @@protoc_insertion_point(field_release:metrics.PrinterEventProto.ipp_make_and_model)
  if (!_internal_has_ipp_make_and_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = ipp_make_and_model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipp_make_and_model_.IsDefault()) {
    ipp_make_and_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterEventProto::set_allocated_ipp_make_and_model(std::string* ipp_make_and_model) {
  if (ipp_make_and_model != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ipp_make_and_model_.SetAllocated(ipp_make_and_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipp_make_and_model_.IsDefault()) {
    ipp_make_and_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.PrinterEventProto.ipp_make_and_model)
}

// optional bool user_ppd = 6;
inline bool PrinterEventProto::_internal_has_user_ppd() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PrinterEventProto::has_user_ppd() const {
  return _internal_has_user_ppd();
}
inline void PrinterEventProto::clear_user_ppd() {
  user_ppd_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PrinterEventProto::_internal_user_ppd() const {
  return user_ppd_;
}
inline bool PrinterEventProto::user_ppd() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.user_ppd)
  return _internal_user_ppd();
}
inline void PrinterEventProto::_internal_set_user_ppd(bool value) {
  _has_bits_[0] |= 0x00000040u;
  user_ppd_ = value;
}
inline void PrinterEventProto::set_user_ppd(bool value) {
  _internal_set_user_ppd(value);
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.user_ppd)
}

// optional string ppd_identifier = 7;
inline bool PrinterEventProto::_internal_has_ppd_identifier() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrinterEventProto::has_ppd_identifier() const {
  return _internal_has_ppd_identifier();
}
inline void PrinterEventProto::clear_ppd_identifier() {
  ppd_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PrinterEventProto::ppd_identifier() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.ppd_identifier)
  return _internal_ppd_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterEventProto::set_ppd_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 ppd_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.ppd_identifier)
}
inline std::string* PrinterEventProto::mutable_ppd_identifier() {
  std::string* _s = _internal_mutable_ppd_identifier();
  // @@protoc_insertion_point(field_mutable:metrics.PrinterEventProto.ppd_identifier)
  return _s;
}
inline const std::string& PrinterEventProto::_internal_ppd_identifier() const {
  return ppd_identifier_.Get();
}
inline void PrinterEventProto::_internal_set_ppd_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ppd_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterEventProto::_internal_mutable_ppd_identifier() {
  _has_bits_[0] |= 0x00000008u;
  return ppd_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterEventProto::release_ppd_identifier() {
  // @@protoc_insertion_point(field_release:metrics.PrinterEventProto.ppd_identifier)
  if (!_internal_has_ppd_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = ppd_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ppd_identifier_.IsDefault()) {
    ppd_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterEventProto::set_allocated_ppd_identifier(std::string* ppd_identifier) {
  if (ppd_identifier != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ppd_identifier_.SetAllocated(ppd_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ppd_identifier_.IsDefault()) {
    ppd_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.PrinterEventProto.ppd_identifier)
}

// optional .metrics.PrinterEventProto.EventType event_type = 8;
inline bool PrinterEventProto::_internal_has_event_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PrinterEventProto::has_event_type() const {
  return _internal_has_event_type();
}
inline void PrinterEventProto::clear_event_type() {
  event_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::metrics::PrinterEventProto_EventType PrinterEventProto::_internal_event_type() const {
  return static_cast< ::metrics::PrinterEventProto_EventType >(event_type_);
}
inline ::metrics::PrinterEventProto_EventType PrinterEventProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.event_type)
  return _internal_event_type();
}
inline void PrinterEventProto::_internal_set_event_type(::metrics::PrinterEventProto_EventType value) {
  assert(::metrics::PrinterEventProto_EventType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  event_type_ = value;
}
inline void PrinterEventProto::set_event_type(::metrics::PrinterEventProto_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.event_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::PrinterEventProto_EventType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_printer_5fevent_2eproto
