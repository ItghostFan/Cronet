// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: translate_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_translate_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_translate_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_translate_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_translate_5fevent_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class TranslateEventProto;
struct TranslateEventProtoDefaultTypeInternal;
extern TranslateEventProtoDefaultTypeInternal _TranslateEventProto_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::TranslateEventProto* Arena::CreateMaybeMessage<::metrics::TranslateEventProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum TranslateEventProto_RankerResponse : int {
  TranslateEventProto_RankerResponse_SHOW = 0,
  TranslateEventProto_RankerResponse_DONT_SHOW = 1,
  TranslateEventProto_RankerResponse_NOT_QUERIED = 2
};
bool TranslateEventProto_RankerResponse_IsValid(int value);
constexpr TranslateEventProto_RankerResponse TranslateEventProto_RankerResponse_RankerResponse_MIN = TranslateEventProto_RankerResponse_SHOW;
constexpr TranslateEventProto_RankerResponse TranslateEventProto_RankerResponse_RankerResponse_MAX = TranslateEventProto_RankerResponse_NOT_QUERIED;
constexpr int TranslateEventProto_RankerResponse_RankerResponse_ARRAYSIZE = TranslateEventProto_RankerResponse_RankerResponse_MAX + 1;

const std::string& TranslateEventProto_RankerResponse_Name(TranslateEventProto_RankerResponse value);
template<typename T>
inline const std::string& TranslateEventProto_RankerResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TranslateEventProto_RankerResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TranslateEventProto_RankerResponse_Name.");
  return TranslateEventProto_RankerResponse_Name(static_cast<TranslateEventProto_RankerResponse>(enum_t_value));
}
bool TranslateEventProto_RankerResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TranslateEventProto_RankerResponse* value);
enum TranslateEventProto_EventType : int {
  TranslateEventProto_EventType_UNKNOWN = 0,
  TranslateEventProto_EventType_USER_DECLINE = 1,
  TranslateEventProto_EventType_USER_ACCEPT = 2,
  TranslateEventProto_EventType_USER_DISMISS = 3,
  TranslateEventProto_EventType_USER_IGNORE = 4,
  TranslateEventProto_EventType_USER_NEVER_TRANSLATE_LANGUAGE = 5,
  TranslateEventProto_EventType_USER_NEVER_TRANSLATE_SITE = 6,
  TranslateEventProto_EventType_USER_ALWAYS_TRANSLATE_LANGUAGE = 7,
  TranslateEventProto_EventType_USER_CONTEXT_MENU_TRANSLATE = 8,
  TranslateEventProto_EventType_USER_REVERT = 9,
  TranslateEventProto_EventType_AUTOMATICALLY_TRANSLATED = 10,
  TranslateEventProto_EventType_AUTO_TRANSLATION_BY_PREF = 25,
  TranslateEventProto_EventType_AUTO_TRANSLATION_BY_LINK = 26,
  TranslateEventProto_EventType_DISABLED_BY_PREF = 11,
  TranslateEventProto_EventType_LANGUAGE_DISABLED_BY_USER_CONFIG = 12,
  TranslateEventProto_EventType_URL_DISABLED_BY_USER_CONFIG = 13,
  TranslateEventProto_EventType_LANGUAGE_DISABLED_BY_AUTO_BLACKLIST = 14,
  TranslateEventProto_EventType_DISABLED_BY_RANKER = 15,
  TranslateEventProto_EventType_UNSUPPORTED_LANGUAGE = 16,
  TranslateEventProto_EventType_UNSUPPORTED_URL = 17,
  TranslateEventProto_EventType_MATCHES_PREVIOUS_LANGUAGE = 18,
  TranslateEventProto_EventType_BROWSER_WINDOW_IS_INVALID = 19,
  TranslateEventProto_EventType_BROWSER_WINDOW_NOT_ACTIVE = 20,
  TranslateEventProto_EventType_BROWSER_WINDOW_IS_MINIMIZED = 21,
  TranslateEventProto_EventType_WEB_CONTENTS_NOT_ACTIVE = 22,
  TranslateEventProto_EventType_EDITABLE_FIELD_IS_ACTIVE = 23,
  TranslateEventProto_EventType_LANGUAGE_IN_ULP = 24,
  TranslateEventProto_EventType_INITIALIZATION_ERROR = 27
};
bool TranslateEventProto_EventType_IsValid(int value);
constexpr TranslateEventProto_EventType TranslateEventProto_EventType_EventType_MIN = TranslateEventProto_EventType_UNKNOWN;
constexpr TranslateEventProto_EventType TranslateEventProto_EventType_EventType_MAX = TranslateEventProto_EventType_INITIALIZATION_ERROR;
constexpr int TranslateEventProto_EventType_EventType_ARRAYSIZE = TranslateEventProto_EventType_EventType_MAX + 1;

const std::string& TranslateEventProto_EventType_Name(TranslateEventProto_EventType value);
template<typename T>
inline const std::string& TranslateEventProto_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TranslateEventProto_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TranslateEventProto_EventType_Name.");
  return TranslateEventProto_EventType_Name(static_cast<TranslateEventProto_EventType>(enum_t_value));
}
bool TranslateEventProto_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TranslateEventProto_EventType* value);
// ===================================================================

class TranslateEventProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.TranslateEventProto) */ {
 public:
  inline TranslateEventProto() : TranslateEventProto(nullptr) {}
  ~TranslateEventProto() override;
  explicit PROTOBUF_CONSTEXPR TranslateEventProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslateEventProto(const TranslateEventProto& from);
  TranslateEventProto(TranslateEventProto&& from) noexcept
    : TranslateEventProto() {
    *this = ::std::move(from);
  }

  inline TranslateEventProto& operator=(const TranslateEventProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslateEventProto& operator=(TranslateEventProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TranslateEventProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TranslateEventProto* internal_default_instance() {
    return reinterpret_cast<const TranslateEventProto*>(
               &_TranslateEventProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TranslateEventProto& a, TranslateEventProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TranslateEventProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslateEventProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslateEventProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslateEventProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TranslateEventProto& from);
  void MergeFrom(const TranslateEventProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TranslateEventProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.TranslateEventProto";
  }
  protected:
  explicit TranslateEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TranslateEventProto_RankerResponse RankerResponse;
  static constexpr RankerResponse SHOW =
    TranslateEventProto_RankerResponse_SHOW;
  static constexpr RankerResponse DONT_SHOW =
    TranslateEventProto_RankerResponse_DONT_SHOW;
  static constexpr RankerResponse NOT_QUERIED =
    TranslateEventProto_RankerResponse_NOT_QUERIED;
  static inline bool RankerResponse_IsValid(int value) {
    return TranslateEventProto_RankerResponse_IsValid(value);
  }
  static constexpr RankerResponse RankerResponse_MIN =
    TranslateEventProto_RankerResponse_RankerResponse_MIN;
  static constexpr RankerResponse RankerResponse_MAX =
    TranslateEventProto_RankerResponse_RankerResponse_MAX;
  static constexpr int RankerResponse_ARRAYSIZE =
    TranslateEventProto_RankerResponse_RankerResponse_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RankerResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RankerResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RankerResponse_Name.");
    return TranslateEventProto_RankerResponse_Name(enum_t_value);
  }
  static inline bool RankerResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RankerResponse* value) {
    return TranslateEventProto_RankerResponse_Parse(name, value);
  }

  typedef TranslateEventProto_EventType EventType;
  static constexpr EventType UNKNOWN =
    TranslateEventProto_EventType_UNKNOWN;
  static constexpr EventType USER_DECLINE =
    TranslateEventProto_EventType_USER_DECLINE;
  static constexpr EventType USER_ACCEPT =
    TranslateEventProto_EventType_USER_ACCEPT;
  static constexpr EventType USER_DISMISS =
    TranslateEventProto_EventType_USER_DISMISS;
  static constexpr EventType USER_IGNORE =
    TranslateEventProto_EventType_USER_IGNORE;
  static constexpr EventType USER_NEVER_TRANSLATE_LANGUAGE =
    TranslateEventProto_EventType_USER_NEVER_TRANSLATE_LANGUAGE;
  static constexpr EventType USER_NEVER_TRANSLATE_SITE =
    TranslateEventProto_EventType_USER_NEVER_TRANSLATE_SITE;
  static constexpr EventType USER_ALWAYS_TRANSLATE_LANGUAGE =
    TranslateEventProto_EventType_USER_ALWAYS_TRANSLATE_LANGUAGE;
  static constexpr EventType USER_CONTEXT_MENU_TRANSLATE =
    TranslateEventProto_EventType_USER_CONTEXT_MENU_TRANSLATE;
  static constexpr EventType USER_REVERT =
    TranslateEventProto_EventType_USER_REVERT;
  static constexpr EventType AUTOMATICALLY_TRANSLATED =
    TranslateEventProto_EventType_AUTOMATICALLY_TRANSLATED;
  static constexpr EventType AUTO_TRANSLATION_BY_PREF =
    TranslateEventProto_EventType_AUTO_TRANSLATION_BY_PREF;
  static constexpr EventType AUTO_TRANSLATION_BY_LINK =
    TranslateEventProto_EventType_AUTO_TRANSLATION_BY_LINK;
  static constexpr EventType DISABLED_BY_PREF =
    TranslateEventProto_EventType_DISABLED_BY_PREF;
  static constexpr EventType LANGUAGE_DISABLED_BY_USER_CONFIG =
    TranslateEventProto_EventType_LANGUAGE_DISABLED_BY_USER_CONFIG;
  static constexpr EventType URL_DISABLED_BY_USER_CONFIG =
    TranslateEventProto_EventType_URL_DISABLED_BY_USER_CONFIG;
  static constexpr EventType LANGUAGE_DISABLED_BY_AUTO_BLACKLIST =
    TranslateEventProto_EventType_LANGUAGE_DISABLED_BY_AUTO_BLACKLIST;
  static constexpr EventType DISABLED_BY_RANKER =
    TranslateEventProto_EventType_DISABLED_BY_RANKER;
  static constexpr EventType UNSUPPORTED_LANGUAGE =
    TranslateEventProto_EventType_UNSUPPORTED_LANGUAGE;
  static constexpr EventType UNSUPPORTED_URL =
    TranslateEventProto_EventType_UNSUPPORTED_URL;
  static constexpr EventType MATCHES_PREVIOUS_LANGUAGE =
    TranslateEventProto_EventType_MATCHES_PREVIOUS_LANGUAGE;
  static constexpr EventType BROWSER_WINDOW_IS_INVALID =
    TranslateEventProto_EventType_BROWSER_WINDOW_IS_INVALID;
  static constexpr EventType BROWSER_WINDOW_NOT_ACTIVE =
    TranslateEventProto_EventType_BROWSER_WINDOW_NOT_ACTIVE;
  static constexpr EventType BROWSER_WINDOW_IS_MINIMIZED =
    TranslateEventProto_EventType_BROWSER_WINDOW_IS_MINIMIZED;
  static constexpr EventType WEB_CONTENTS_NOT_ACTIVE =
    TranslateEventProto_EventType_WEB_CONTENTS_NOT_ACTIVE;
  static constexpr EventType EDITABLE_FIELD_IS_ACTIVE =
    TranslateEventProto_EventType_EDITABLE_FIELD_IS_ACTIVE;
  static constexpr EventType LANGUAGE_IN_ULP =
    TranslateEventProto_EventType_LANGUAGE_IN_ULP;
  static constexpr EventType INITIALIZATION_ERROR =
    TranslateEventProto_EventType_INITIALIZATION_ERROR;
  static inline bool EventType_IsValid(int value) {
    return TranslateEventProto_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    TranslateEventProto_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    TranslateEventProto_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    TranslateEventProto_EventType_EventType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return TranslateEventProto_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return TranslateEventProto_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageListFieldNumber = 6,
    kDecisionOverridesFieldNumber = 15,
    kSourceLanguageFieldNumber = 1,
    kTargetLanguageFieldNumber = 2,
    kModifiedSourceLanguageFieldNumber = 12,
    kModifiedTargetLanguageFieldNumber = 13,
    kCountryFieldNumber = 14,
    kAcceptCountFieldNumber = 3,
    kDeclineCountFieldNumber = 4,
    kIgnoreCountFieldNumber = 5,
    kRankerVersionFieldNumber = 7,
    kRankerRequestTimestampSecFieldNumber = 8,
    kEventTimestampSecFieldNumber = 11,
    kEventTypeFieldNumber = 10,
    kRankerResponseFieldNumber = 9,
  };
  // repeated string language_list = 6;
  int language_list_size() const;
  private:
  int _internal_language_list_size() const;
  public:
  void clear_language_list();
  const std::string& language_list(int index) const;
  std::string* mutable_language_list(int index);
  void set_language_list(int index, const std::string& value);
  void set_language_list(int index, std::string&& value);
  void set_language_list(int index, const char* value);
  void set_language_list(int index, const char* value, size_t size);
  std::string* add_language_list();
  void add_language_list(const std::string& value);
  void add_language_list(std::string&& value);
  void add_language_list(const char* value);
  void add_language_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& language_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_language_list();
  private:
  const std::string& _internal_language_list(int index) const;
  std::string* _internal_add_language_list();
  public:

  // repeated .metrics.TranslateEventProto.EventType decision_overrides = 15;
  int decision_overrides_size() const;
  private:
  int _internal_decision_overrides_size() const;
  public:
  void clear_decision_overrides();
  private:
  ::metrics::TranslateEventProto_EventType _internal_decision_overrides(int index) const;
  void _internal_add_decision_overrides(::metrics::TranslateEventProto_EventType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_decision_overrides();
  public:
  ::metrics::TranslateEventProto_EventType decision_overrides(int index) const;
  void set_decision_overrides(int index, ::metrics::TranslateEventProto_EventType value);
  void add_decision_overrides(::metrics::TranslateEventProto_EventType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& decision_overrides() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_decision_overrides();

  // optional string source_language = 1;
  bool has_source_language() const;
  private:
  bool _internal_has_source_language() const;
  public:
  void clear_source_language();
  const std::string& source_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_language();
  PROTOBUF_NODISCARD std::string* release_source_language();
  void set_allocated_source_language(std::string* source_language);
  private:
  const std::string& _internal_source_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_language(const std::string& value);
  std::string* _internal_mutable_source_language();
  public:

  // optional string target_language = 2;
  bool has_target_language() const;
  private:
  bool _internal_has_target_language() const;
  public:
  void clear_target_language();
  const std::string& target_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_language();
  PROTOBUF_NODISCARD std::string* release_target_language();
  void set_allocated_target_language(std::string* target_language);
  private:
  const std::string& _internal_target_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_language(const std::string& value);
  std::string* _internal_mutable_target_language();
  public:

  // optional string modified_source_language = 12;
  bool has_modified_source_language() const;
  private:
  bool _internal_has_modified_source_language() const;
  public:
  void clear_modified_source_language();
  const std::string& modified_source_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modified_source_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modified_source_language();
  PROTOBUF_NODISCARD std::string* release_modified_source_language();
  void set_allocated_modified_source_language(std::string* modified_source_language);
  private:
  const std::string& _internal_modified_source_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modified_source_language(const std::string& value);
  std::string* _internal_mutable_modified_source_language();
  public:

  // optional string modified_target_language = 13;
  bool has_modified_target_language() const;
  private:
  bool _internal_has_modified_target_language() const;
  public:
  void clear_modified_target_language();
  const std::string& modified_target_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modified_target_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modified_target_language();
  PROTOBUF_NODISCARD std::string* release_modified_target_language();
  void set_allocated_modified_target_language(std::string* modified_target_language);
  private:
  const std::string& _internal_modified_target_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modified_target_language(const std::string& value);
  std::string* _internal_mutable_modified_target_language();
  public:

  // optional string country = 14;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // optional int32 accept_count = 3;
  bool has_accept_count() const;
  private:
  bool _internal_has_accept_count() const;
  public:
  void clear_accept_count();
  int32_t accept_count() const;
  void set_accept_count(int32_t value);
  private:
  int32_t _internal_accept_count() const;
  void _internal_set_accept_count(int32_t value);
  public:

  // optional int32 decline_count = 4;
  bool has_decline_count() const;
  private:
  bool _internal_has_decline_count() const;
  public:
  void clear_decline_count();
  int32_t decline_count() const;
  void set_decline_count(int32_t value);
  private:
  int32_t _internal_decline_count() const;
  void _internal_set_decline_count(int32_t value);
  public:

  // optional int32 ignore_count = 5;
  bool has_ignore_count() const;
  private:
  bool _internal_has_ignore_count() const;
  public:
  void clear_ignore_count();
  int32_t ignore_count() const;
  void set_ignore_count(int32_t value);
  private:
  int32_t _internal_ignore_count() const;
  void _internal_set_ignore_count(int32_t value);
  public:

  // optional uint32 ranker_version = 7;
  bool has_ranker_version() const;
  private:
  bool _internal_has_ranker_version() const;
  public:
  void clear_ranker_version();
  uint32_t ranker_version() const;
  void set_ranker_version(uint32_t value);
  private:
  uint32_t _internal_ranker_version() const;
  void _internal_set_ranker_version(uint32_t value);
  public:

  // optional int64 ranker_request_timestamp_sec = 8;
  bool has_ranker_request_timestamp_sec() const;
  private:
  bool _internal_has_ranker_request_timestamp_sec() const;
  public:
  void clear_ranker_request_timestamp_sec();
  int64_t ranker_request_timestamp_sec() const;
  void set_ranker_request_timestamp_sec(int64_t value);
  private:
  int64_t _internal_ranker_request_timestamp_sec() const;
  void _internal_set_ranker_request_timestamp_sec(int64_t value);
  public:

  // optional int64 event_timestamp_sec = 11;
  bool has_event_timestamp_sec() const;
  private:
  bool _internal_has_event_timestamp_sec() const;
  public:
  void clear_event_timestamp_sec();
  int64_t event_timestamp_sec() const;
  void set_event_timestamp_sec(int64_t value);
  private:
  int64_t _internal_event_timestamp_sec() const;
  void _internal_set_event_timestamp_sec(int64_t value);
  public:

  // optional .metrics.TranslateEventProto.EventType event_type = 10;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::metrics::TranslateEventProto_EventType event_type() const;
  void set_event_type(::metrics::TranslateEventProto_EventType value);
  private:
  ::metrics::TranslateEventProto_EventType _internal_event_type() const;
  void _internal_set_event_type(::metrics::TranslateEventProto_EventType value);
  public:

  // optional .metrics.TranslateEventProto.RankerResponse ranker_response = 9 [default = NOT_QUERIED];
  bool has_ranker_response() const;
  private:
  bool _internal_has_ranker_response() const;
  public:
  void clear_ranker_response();
  ::metrics::TranslateEventProto_RankerResponse ranker_response() const;
  void set_ranker_response(::metrics::TranslateEventProto_RankerResponse value);
  private:
  ::metrics::TranslateEventProto_RankerResponse _internal_ranker_response() const;
  void _internal_set_ranker_response(::metrics::TranslateEventProto_RankerResponse value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.TranslateEventProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> language_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> decision_overrides_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modified_source_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modified_target_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  int32_t accept_count_;
  int32_t decline_count_;
  int32_t ignore_count_;
  uint32_t ranker_version_;
  int64_t ranker_request_timestamp_sec_;
  int64_t event_timestamp_sec_;
  int event_type_;
  int ranker_response_;
  friend struct ::TableStruct_translate_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TranslateEventProto

// optional string source_language = 1;
inline bool TranslateEventProto::_internal_has_source_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TranslateEventProto::has_source_language() const {
  return _internal_has_source_language();
}
inline void TranslateEventProto::clear_source_language() {
  source_language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TranslateEventProto::source_language() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.source_language)
  return _internal_source_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TranslateEventProto::set_source_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.source_language)
}
inline std::string* TranslateEventProto::mutable_source_language() {
  std::string* _s = _internal_mutable_source_language();
  // @@protoc_insertion_point(field_mutable:metrics.TranslateEventProto.source_language)
  return _s;
}
inline const std::string& TranslateEventProto::_internal_source_language() const {
  return source_language_.Get();
}
inline void TranslateEventProto::_internal_set_source_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_language_.Set(value, GetArenaForAllocation());
}
inline std::string* TranslateEventProto::_internal_mutable_source_language() {
  _has_bits_[0] |= 0x00000001u;
  return source_language_.Mutable(GetArenaForAllocation());
}
inline std::string* TranslateEventProto::release_source_language() {
  // @@protoc_insertion_point(field_release:metrics.TranslateEventProto.source_language)
  if (!_internal_has_source_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = source_language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_language_.IsDefault()) {
    source_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TranslateEventProto::set_allocated_source_language(std::string* source_language) {
  if (source_language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_language_.SetAllocated(source_language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_language_.IsDefault()) {
    source_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.TranslateEventProto.source_language)
}

// optional string target_language = 2;
inline bool TranslateEventProto::_internal_has_target_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TranslateEventProto::has_target_language() const {
  return _internal_has_target_language();
}
inline void TranslateEventProto::clear_target_language() {
  target_language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TranslateEventProto::target_language() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.target_language)
  return _internal_target_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TranslateEventProto::set_target_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 target_language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.target_language)
}
inline std::string* TranslateEventProto::mutable_target_language() {
  std::string* _s = _internal_mutable_target_language();
  // @@protoc_insertion_point(field_mutable:metrics.TranslateEventProto.target_language)
  return _s;
}
inline const std::string& TranslateEventProto::_internal_target_language() const {
  return target_language_.Get();
}
inline void TranslateEventProto::_internal_set_target_language(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  target_language_.Set(value, GetArenaForAllocation());
}
inline std::string* TranslateEventProto::_internal_mutable_target_language() {
  _has_bits_[0] |= 0x00000002u;
  return target_language_.Mutable(GetArenaForAllocation());
}
inline std::string* TranslateEventProto::release_target_language() {
  // @@protoc_insertion_point(field_release:metrics.TranslateEventProto.target_language)
  if (!_internal_has_target_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = target_language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_language_.IsDefault()) {
    target_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TranslateEventProto::set_allocated_target_language(std::string* target_language) {
  if (target_language != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_language_.SetAllocated(target_language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_language_.IsDefault()) {
    target_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.TranslateEventProto.target_language)
}

// optional string country = 14;
inline bool TranslateEventProto::_internal_has_country() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TranslateEventProto::has_country() const {
  return _internal_has_country();
}
inline void TranslateEventProto::clear_country() {
  country_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TranslateEventProto::country() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TranslateEventProto::set_country(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.country)
}
inline std::string* TranslateEventProto::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:metrics.TranslateEventProto.country)
  return _s;
}
inline const std::string& TranslateEventProto::_internal_country() const {
  return country_.Get();
}
inline void TranslateEventProto::_internal_set_country(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  country_.Set(value, GetArenaForAllocation());
}
inline std::string* TranslateEventProto::_internal_mutable_country() {
  _has_bits_[0] |= 0x00000010u;
  return country_.Mutable(GetArenaForAllocation());
}
inline std::string* TranslateEventProto::release_country() {
  // @@protoc_insertion_point(field_release:metrics.TranslateEventProto.country)
  if (!_internal_has_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = country_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_.IsDefault()) {
    country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TranslateEventProto::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_.IsDefault()) {
    country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.TranslateEventProto.country)
}

// optional int32 accept_count = 3;
inline bool TranslateEventProto::_internal_has_accept_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TranslateEventProto::has_accept_count() const {
  return _internal_has_accept_count();
}
inline void TranslateEventProto::clear_accept_count() {
  accept_count_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t TranslateEventProto::_internal_accept_count() const {
  return accept_count_;
}
inline int32_t TranslateEventProto::accept_count() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.accept_count)
  return _internal_accept_count();
}
inline void TranslateEventProto::_internal_set_accept_count(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  accept_count_ = value;
}
inline void TranslateEventProto::set_accept_count(int32_t value) {
  _internal_set_accept_count(value);
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.accept_count)
}

// optional int32 decline_count = 4;
inline bool TranslateEventProto::_internal_has_decline_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TranslateEventProto::has_decline_count() const {
  return _internal_has_decline_count();
}
inline void TranslateEventProto::clear_decline_count() {
  decline_count_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t TranslateEventProto::_internal_decline_count() const {
  return decline_count_;
}
inline int32_t TranslateEventProto::decline_count() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.decline_count)
  return _internal_decline_count();
}
inline void TranslateEventProto::_internal_set_decline_count(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  decline_count_ = value;
}
inline void TranslateEventProto::set_decline_count(int32_t value) {
  _internal_set_decline_count(value);
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.decline_count)
}

// optional int32 ignore_count = 5;
inline bool TranslateEventProto::_internal_has_ignore_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TranslateEventProto::has_ignore_count() const {
  return _internal_has_ignore_count();
}
inline void TranslateEventProto::clear_ignore_count() {
  ignore_count_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t TranslateEventProto::_internal_ignore_count() const {
  return ignore_count_;
}
inline int32_t TranslateEventProto::ignore_count() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.ignore_count)
  return _internal_ignore_count();
}
inline void TranslateEventProto::_internal_set_ignore_count(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  ignore_count_ = value;
}
inline void TranslateEventProto::set_ignore_count(int32_t value) {
  _internal_set_ignore_count(value);
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.ignore_count)
}

// repeated string language_list = 6;
inline int TranslateEventProto::_internal_language_list_size() const {
  return language_list_.size();
}
inline int TranslateEventProto::language_list_size() const {
  return _internal_language_list_size();
}
inline void TranslateEventProto::clear_language_list() {
  language_list_.Clear();
}
inline std::string* TranslateEventProto::add_language_list() {
  std::string* _s = _internal_add_language_list();
  // @@protoc_insertion_point(field_add_mutable:metrics.TranslateEventProto.language_list)
  return _s;
}
inline const std::string& TranslateEventProto::_internal_language_list(int index) const {
  return language_list_.Get(index);
}
inline const std::string& TranslateEventProto::language_list(int index) const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.language_list)
  return _internal_language_list(index);
}
inline std::string* TranslateEventProto::mutable_language_list(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.TranslateEventProto.language_list)
  return language_list_.Mutable(index);
}
inline void TranslateEventProto::set_language_list(int index, const std::string& value) {
  language_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.language_list)
}
inline void TranslateEventProto::set_language_list(int index, std::string&& value) {
  language_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.language_list)
}
inline void TranslateEventProto::set_language_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  language_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metrics.TranslateEventProto.language_list)
}
inline void TranslateEventProto::set_language_list(int index, const char* value, size_t size) {
  language_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metrics.TranslateEventProto.language_list)
}
inline std::string* TranslateEventProto::_internal_add_language_list() {
  return language_list_.Add();
}
inline void TranslateEventProto::add_language_list(const std::string& value) {
  language_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metrics.TranslateEventProto.language_list)
}
inline void TranslateEventProto::add_language_list(std::string&& value) {
  language_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metrics.TranslateEventProto.language_list)
}
inline void TranslateEventProto::add_language_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  language_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metrics.TranslateEventProto.language_list)
}
inline void TranslateEventProto::add_language_list(const char* value, size_t size) {
  language_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metrics.TranslateEventProto.language_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TranslateEventProto::language_list() const {
  // @@protoc_insertion_point(field_list:metrics.TranslateEventProto.language_list)
  return language_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TranslateEventProto::mutable_language_list() {
  // @@protoc_insertion_point(field_mutable_list:metrics.TranslateEventProto.language_list)
  return &language_list_;
}

// optional uint32 ranker_version = 7;
inline bool TranslateEventProto::_internal_has_ranker_version() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TranslateEventProto::has_ranker_version() const {
  return _internal_has_ranker_version();
}
inline void TranslateEventProto::clear_ranker_version() {
  ranker_version_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t TranslateEventProto::_internal_ranker_version() const {
  return ranker_version_;
}
inline uint32_t TranslateEventProto::ranker_version() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.ranker_version)
  return _internal_ranker_version();
}
inline void TranslateEventProto::_internal_set_ranker_version(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  ranker_version_ = value;
}
inline void TranslateEventProto::set_ranker_version(uint32_t value) {
  _internal_set_ranker_version(value);
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.ranker_version)
}

// optional int64 ranker_request_timestamp_sec = 8;
inline bool TranslateEventProto::_internal_has_ranker_request_timestamp_sec() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TranslateEventProto::has_ranker_request_timestamp_sec() const {
  return _internal_has_ranker_request_timestamp_sec();
}
inline void TranslateEventProto::clear_ranker_request_timestamp_sec() {
  ranker_request_timestamp_sec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000200u;
}
inline int64_t TranslateEventProto::_internal_ranker_request_timestamp_sec() const {
  return ranker_request_timestamp_sec_;
}
inline int64_t TranslateEventProto::ranker_request_timestamp_sec() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.ranker_request_timestamp_sec)
  return _internal_ranker_request_timestamp_sec();
}
inline void TranslateEventProto::_internal_set_ranker_request_timestamp_sec(int64_t value) {
  _has_bits_[0] |= 0x00000200u;
  ranker_request_timestamp_sec_ = value;
}
inline void TranslateEventProto::set_ranker_request_timestamp_sec(int64_t value) {
  _internal_set_ranker_request_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.ranker_request_timestamp_sec)
}

// optional .metrics.TranslateEventProto.RankerResponse ranker_response = 9 [default = NOT_QUERIED];
inline bool TranslateEventProto::_internal_has_ranker_response() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TranslateEventProto::has_ranker_response() const {
  return _internal_has_ranker_response();
}
inline void TranslateEventProto::clear_ranker_response() {
  ranker_response_ = 2;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::metrics::TranslateEventProto_RankerResponse TranslateEventProto::_internal_ranker_response() const {
  return static_cast< ::metrics::TranslateEventProto_RankerResponse >(ranker_response_);
}
inline ::metrics::TranslateEventProto_RankerResponse TranslateEventProto::ranker_response() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.ranker_response)
  return _internal_ranker_response();
}
inline void TranslateEventProto::_internal_set_ranker_response(::metrics::TranslateEventProto_RankerResponse value) {
  assert(::metrics::TranslateEventProto_RankerResponse_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  ranker_response_ = value;
}
inline void TranslateEventProto::set_ranker_response(::metrics::TranslateEventProto_RankerResponse value) {
  _internal_set_ranker_response(value);
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.ranker_response)
}

// optional .metrics.TranslateEventProto.EventType event_type = 10;
inline bool TranslateEventProto::_internal_has_event_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TranslateEventProto::has_event_type() const {
  return _internal_has_event_type();
}
inline void TranslateEventProto::clear_event_type() {
  event_type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::metrics::TranslateEventProto_EventType TranslateEventProto::_internal_event_type() const {
  return static_cast< ::metrics::TranslateEventProto_EventType >(event_type_);
}
inline ::metrics::TranslateEventProto_EventType TranslateEventProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.event_type)
  return _internal_event_type();
}
inline void TranslateEventProto::_internal_set_event_type(::metrics::TranslateEventProto_EventType value) {
  assert(::metrics::TranslateEventProto_EventType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  event_type_ = value;
}
inline void TranslateEventProto::set_event_type(::metrics::TranslateEventProto_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.event_type)
}

// repeated .metrics.TranslateEventProto.EventType decision_overrides = 15;
inline int TranslateEventProto::_internal_decision_overrides_size() const {
  return decision_overrides_.size();
}
inline int TranslateEventProto::decision_overrides_size() const {
  return _internal_decision_overrides_size();
}
inline void TranslateEventProto::clear_decision_overrides() {
  decision_overrides_.Clear();
}
inline ::metrics::TranslateEventProto_EventType TranslateEventProto::_internal_decision_overrides(int index) const {
  return static_cast< ::metrics::TranslateEventProto_EventType >(decision_overrides_.Get(index));
}
inline ::metrics::TranslateEventProto_EventType TranslateEventProto::decision_overrides(int index) const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.decision_overrides)
  return _internal_decision_overrides(index);
}
inline void TranslateEventProto::set_decision_overrides(int index, ::metrics::TranslateEventProto_EventType value) {
  assert(::metrics::TranslateEventProto_EventType_IsValid(value));
  decision_overrides_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.decision_overrides)
}
inline void TranslateEventProto::_internal_add_decision_overrides(::metrics::TranslateEventProto_EventType value) {
  assert(::metrics::TranslateEventProto_EventType_IsValid(value));
  decision_overrides_.Add(value);
}
inline void TranslateEventProto::add_decision_overrides(::metrics::TranslateEventProto_EventType value) {
  _internal_add_decision_overrides(value);
  // @@protoc_insertion_point(field_add:metrics.TranslateEventProto.decision_overrides)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TranslateEventProto::decision_overrides() const {
  // @@protoc_insertion_point(field_list:metrics.TranslateEventProto.decision_overrides)
  return decision_overrides_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TranslateEventProto::_internal_mutable_decision_overrides() {
  return &decision_overrides_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TranslateEventProto::mutable_decision_overrides() {
  // @@protoc_insertion_point(field_mutable_list:metrics.TranslateEventProto.decision_overrides)
  return _internal_mutable_decision_overrides();
}

// optional int64 event_timestamp_sec = 11;
inline bool TranslateEventProto::_internal_has_event_timestamp_sec() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TranslateEventProto::has_event_timestamp_sec() const {
  return _internal_has_event_timestamp_sec();
}
inline void TranslateEventProto::clear_event_timestamp_sec() {
  event_timestamp_sec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000400u;
}
inline int64_t TranslateEventProto::_internal_event_timestamp_sec() const {
  return event_timestamp_sec_;
}
inline int64_t TranslateEventProto::event_timestamp_sec() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.event_timestamp_sec)
  return _internal_event_timestamp_sec();
}
inline void TranslateEventProto::_internal_set_event_timestamp_sec(int64_t value) {
  _has_bits_[0] |= 0x00000400u;
  event_timestamp_sec_ = value;
}
inline void TranslateEventProto::set_event_timestamp_sec(int64_t value) {
  _internal_set_event_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.event_timestamp_sec)
}

// optional string modified_source_language = 12;
inline bool TranslateEventProto::_internal_has_modified_source_language() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TranslateEventProto::has_modified_source_language() const {
  return _internal_has_modified_source_language();
}
inline void TranslateEventProto::clear_modified_source_language() {
  modified_source_language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TranslateEventProto::modified_source_language() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.modified_source_language)
  return _internal_modified_source_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TranslateEventProto::set_modified_source_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 modified_source_language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.modified_source_language)
}
inline std::string* TranslateEventProto::mutable_modified_source_language() {
  std::string* _s = _internal_mutable_modified_source_language();
  // @@protoc_insertion_point(field_mutable:metrics.TranslateEventProto.modified_source_language)
  return _s;
}
inline const std::string& TranslateEventProto::_internal_modified_source_language() const {
  return modified_source_language_.Get();
}
inline void TranslateEventProto::_internal_set_modified_source_language(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  modified_source_language_.Set(value, GetArenaForAllocation());
}
inline std::string* TranslateEventProto::_internal_mutable_modified_source_language() {
  _has_bits_[0] |= 0x00000004u;
  return modified_source_language_.Mutable(GetArenaForAllocation());
}
inline std::string* TranslateEventProto::release_modified_source_language() {
  // @@protoc_insertion_point(field_release:metrics.TranslateEventProto.modified_source_language)
  if (!_internal_has_modified_source_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = modified_source_language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modified_source_language_.IsDefault()) {
    modified_source_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TranslateEventProto::set_allocated_modified_source_language(std::string* modified_source_language) {
  if (modified_source_language != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  modified_source_language_.SetAllocated(modified_source_language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modified_source_language_.IsDefault()) {
    modified_source_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.TranslateEventProto.modified_source_language)
}

// optional string modified_target_language = 13;
inline bool TranslateEventProto::_internal_has_modified_target_language() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TranslateEventProto::has_modified_target_language() const {
  return _internal_has_modified_target_language();
}
inline void TranslateEventProto::clear_modified_target_language() {
  modified_target_language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TranslateEventProto::modified_target_language() const {
  // @@protoc_insertion_point(field_get:metrics.TranslateEventProto.modified_target_language)
  return _internal_modified_target_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TranslateEventProto::set_modified_target_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 modified_target_language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.TranslateEventProto.modified_target_language)
}
inline std::string* TranslateEventProto::mutable_modified_target_language() {
  std::string* _s = _internal_mutable_modified_target_language();
  // @@protoc_insertion_point(field_mutable:metrics.TranslateEventProto.modified_target_language)
  return _s;
}
inline const std::string& TranslateEventProto::_internal_modified_target_language() const {
  return modified_target_language_.Get();
}
inline void TranslateEventProto::_internal_set_modified_target_language(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  modified_target_language_.Set(value, GetArenaForAllocation());
}
inline std::string* TranslateEventProto::_internal_mutable_modified_target_language() {
  _has_bits_[0] |= 0x00000008u;
  return modified_target_language_.Mutable(GetArenaForAllocation());
}
inline std::string* TranslateEventProto::release_modified_target_language() {
  // @@protoc_insertion_point(field_release:metrics.TranslateEventProto.modified_target_language)
  if (!_internal_has_modified_target_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = modified_target_language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modified_target_language_.IsDefault()) {
    modified_target_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TranslateEventProto::set_allocated_modified_target_language(std::string* modified_target_language) {
  if (modified_target_language != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  modified_target_language_.SetAllocated(modified_target_language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modified_target_language_.IsDefault()) {
    modified_target_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.TranslateEventProto.modified_target_language)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::TranslateEventProto_RankerResponse> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::TranslateEventProto_EventType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_translate_5fevent_2eproto
