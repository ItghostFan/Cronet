// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_user_metrics_extension.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chrome_5fuser_5fmetrics_5fextension_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chrome_5fuser_5fmetrics_5fextension_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "cast_logs.pb.h"
#include "chrome_os_app_list_launch_event.pb.h"
#include "custom_tab_session.pb.h"
#include "histogram_event.pb.h"
#include "omnibox_event.pb.h"
#include "printer_event.pb.h"
#include "reporting_info.pb.h"
#include "sampled_profile.pb.h"
#include "structured_data.pb.h"
#include "system_profile.pb.h"
#include "trace_log.pb.h"
#include "translate_event.pb.h"
#include "user_action_event.pb.h"
#include "user_demographics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chrome_5fuser_5fmetrics_5fextension_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chrome_5fuser_5fmetrics_5fextension_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class ChromeUserMetricsExtension;
struct ChromeUserMetricsExtensionDefaultTypeInternal;
extern ChromeUserMetricsExtensionDefaultTypeInternal _ChromeUserMetricsExtension_default_instance_;
class ChromeUserMetricsExtension_RealLocalTime;
struct ChromeUserMetricsExtension_RealLocalTimeDefaultTypeInternal;
extern ChromeUserMetricsExtension_RealLocalTimeDefaultTypeInternal _ChromeUserMetricsExtension_RealLocalTime_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::ChromeUserMetricsExtension* Arena::CreateMaybeMessage<::metrics::ChromeUserMetricsExtension>(Arena*);
template<> ::metrics::ChromeUserMetricsExtension_RealLocalTime* Arena::CreateMaybeMessage<::metrics::ChromeUserMetricsExtension_RealLocalTime>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum ChromeUserMetricsExtension_RealLocalTime_TimeSource : int {
  ChromeUserMetricsExtension_RealLocalTime_TimeSource_UNSPECIFIED = 0,
  ChromeUserMetricsExtension_RealLocalTime_TimeSource_CLIENT_CLOCK = 1,
  ChromeUserMetricsExtension_RealLocalTime_TimeSource_NETWORK_TIME_CLOCK = 2
};
bool ChromeUserMetricsExtension_RealLocalTime_TimeSource_IsValid(int value);
constexpr ChromeUserMetricsExtension_RealLocalTime_TimeSource ChromeUserMetricsExtension_RealLocalTime_TimeSource_TimeSource_MIN = ChromeUserMetricsExtension_RealLocalTime_TimeSource_UNSPECIFIED;
constexpr ChromeUserMetricsExtension_RealLocalTime_TimeSource ChromeUserMetricsExtension_RealLocalTime_TimeSource_TimeSource_MAX = ChromeUserMetricsExtension_RealLocalTime_TimeSource_NETWORK_TIME_CLOCK;
constexpr int ChromeUserMetricsExtension_RealLocalTime_TimeSource_TimeSource_ARRAYSIZE = ChromeUserMetricsExtension_RealLocalTime_TimeSource_TimeSource_MAX + 1;

const std::string& ChromeUserMetricsExtension_RealLocalTime_TimeSource_Name(ChromeUserMetricsExtension_RealLocalTime_TimeSource value);
template<typename T>
inline const std::string& ChromeUserMetricsExtension_RealLocalTime_TimeSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeUserMetricsExtension_RealLocalTime_TimeSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeUserMetricsExtension_RealLocalTime_TimeSource_Name.");
  return ChromeUserMetricsExtension_RealLocalTime_TimeSource_Name(static_cast<ChromeUserMetricsExtension_RealLocalTime_TimeSource>(enum_t_value));
}
bool ChromeUserMetricsExtension_RealLocalTime_TimeSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeUserMetricsExtension_RealLocalTime_TimeSource* value);
enum ChromeUserMetricsExtension_Product : int {
  ChromeUserMetricsExtension_Product_CHROME = 0,
  ChromeUserMetricsExtension_Product_ANDROID_WEBVIEW = 20,
  ChromeUserMetricsExtension_Product_CAST_ASSISTANT = 25,
  ChromeUserMetricsExtension_Product_CAST = 35,
  ChromeUserMetricsExtension_Product_ANDROID_WEBLAYER = 56
};
bool ChromeUserMetricsExtension_Product_IsValid(int value);
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension_Product_Product_MIN = ChromeUserMetricsExtension_Product_CHROME;
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension_Product_Product_MAX = ChromeUserMetricsExtension_Product_ANDROID_WEBLAYER;
constexpr int ChromeUserMetricsExtension_Product_Product_ARRAYSIZE = ChromeUserMetricsExtension_Product_Product_MAX + 1;

const std::string& ChromeUserMetricsExtension_Product_Name(ChromeUserMetricsExtension_Product value);
template<typename T>
inline const std::string& ChromeUserMetricsExtension_Product_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeUserMetricsExtension_Product>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeUserMetricsExtension_Product_Name.");
  return ChromeUserMetricsExtension_Product_Name(static_cast<ChromeUserMetricsExtension_Product>(enum_t_value));
}
bool ChromeUserMetricsExtension_Product_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeUserMetricsExtension_Product* value);
// ===================================================================

class ChromeUserMetricsExtension_RealLocalTime final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.ChromeUserMetricsExtension.RealLocalTime) */ {
 public:
  inline ChromeUserMetricsExtension_RealLocalTime() : ChromeUserMetricsExtension_RealLocalTime(nullptr) {}
  ~ChromeUserMetricsExtension_RealLocalTime() override;
  explicit PROTOBUF_CONSTEXPR ChromeUserMetricsExtension_RealLocalTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeUserMetricsExtension_RealLocalTime(const ChromeUserMetricsExtension_RealLocalTime& from);
  ChromeUserMetricsExtension_RealLocalTime(ChromeUserMetricsExtension_RealLocalTime&& from) noexcept
    : ChromeUserMetricsExtension_RealLocalTime() {
    *this = ::std::move(from);
  }

  inline ChromeUserMetricsExtension_RealLocalTime& operator=(const ChromeUserMetricsExtension_RealLocalTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeUserMetricsExtension_RealLocalTime& operator=(ChromeUserMetricsExtension_RealLocalTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeUserMetricsExtension_RealLocalTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeUserMetricsExtension_RealLocalTime* internal_default_instance() {
    return reinterpret_cast<const ChromeUserMetricsExtension_RealLocalTime*>(
               &_ChromeUserMetricsExtension_RealLocalTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeUserMetricsExtension_RealLocalTime& a, ChromeUserMetricsExtension_RealLocalTime& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeUserMetricsExtension_RealLocalTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeUserMetricsExtension_RealLocalTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeUserMetricsExtension_RealLocalTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeUserMetricsExtension_RealLocalTime>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeUserMetricsExtension_RealLocalTime& from);
  void MergeFrom(const ChromeUserMetricsExtension_RealLocalTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeUserMetricsExtension_RealLocalTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.ChromeUserMetricsExtension.RealLocalTime";
  }
  protected:
  explicit ChromeUserMetricsExtension_RealLocalTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeUserMetricsExtension_RealLocalTime_TimeSource TimeSource;
  static constexpr TimeSource UNSPECIFIED =
    ChromeUserMetricsExtension_RealLocalTime_TimeSource_UNSPECIFIED;
  static constexpr TimeSource CLIENT_CLOCK =
    ChromeUserMetricsExtension_RealLocalTime_TimeSource_CLIENT_CLOCK;
  static constexpr TimeSource NETWORK_TIME_CLOCK =
    ChromeUserMetricsExtension_RealLocalTime_TimeSource_NETWORK_TIME_CLOCK;
  static inline bool TimeSource_IsValid(int value) {
    return ChromeUserMetricsExtension_RealLocalTime_TimeSource_IsValid(value);
  }
  static constexpr TimeSource TimeSource_MIN =
    ChromeUserMetricsExtension_RealLocalTime_TimeSource_TimeSource_MIN;
  static constexpr TimeSource TimeSource_MAX =
    ChromeUserMetricsExtension_RealLocalTime_TimeSource_TimeSource_MAX;
  static constexpr int TimeSource_ARRAYSIZE =
    ChromeUserMetricsExtension_RealLocalTime_TimeSource_TimeSource_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TimeSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TimeSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TimeSource_Name.");
    return ChromeUserMetricsExtension_RealLocalTime_TimeSource_Name(enum_t_value);
  }
  static inline bool TimeSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TimeSource* value) {
    return ChromeUserMetricsExtension_RealLocalTime_TimeSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSecFieldNumber = 2,
    kTimeSourceFieldNumber = 1,
    kTimeZoneOffsetFromGmtSecFieldNumber = 3,
  };
  // optional int64 time_sec = 2;
  bool has_time_sec() const;
  private:
  bool _internal_has_time_sec() const;
  public:
  void clear_time_sec();
  int64_t time_sec() const;
  void set_time_sec(int64_t value);
  private:
  int64_t _internal_time_sec() const;
  void _internal_set_time_sec(int64_t value);
  public:

  // optional .metrics.ChromeUserMetricsExtension.RealLocalTime.TimeSource time_source = 1;
  bool has_time_source() const;
  private:
  bool _internal_has_time_source() const;
  public:
  void clear_time_source();
  ::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource time_source() const;
  void set_time_source(::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource value);
  private:
  ::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource _internal_time_source() const;
  void _internal_set_time_source(::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource value);
  public:

  // optional int32 time_zone_offset_from_gmt_sec = 3;
  bool has_time_zone_offset_from_gmt_sec() const;
  private:
  bool _internal_has_time_zone_offset_from_gmt_sec() const;
  public:
  void clear_time_zone_offset_from_gmt_sec();
  int32_t time_zone_offset_from_gmt_sec() const;
  void set_time_zone_offset_from_gmt_sec(int32_t value);
  private:
  int32_t _internal_time_zone_offset_from_gmt_sec() const;
  void _internal_set_time_zone_offset_from_gmt_sec(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.ChromeUserMetricsExtension.RealLocalTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t time_sec_;
  int time_source_;
  int32_t time_zone_offset_from_gmt_sec_;
  friend struct ::TableStruct_chrome_5fuser_5fmetrics_5fextension_2eproto;
};
// -------------------------------------------------------------------

class ChromeUserMetricsExtension final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.ChromeUserMetricsExtension) */ {
 public:
  inline ChromeUserMetricsExtension() : ChromeUserMetricsExtension(nullptr) {}
  ~ChromeUserMetricsExtension() override;
  explicit PROTOBUF_CONSTEXPR ChromeUserMetricsExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeUserMetricsExtension(const ChromeUserMetricsExtension& from);
  ChromeUserMetricsExtension(ChromeUserMetricsExtension&& from) noexcept
    : ChromeUserMetricsExtension() {
    *this = ::std::move(from);
  }

  inline ChromeUserMetricsExtension& operator=(const ChromeUserMetricsExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeUserMetricsExtension& operator=(ChromeUserMetricsExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeUserMetricsExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeUserMetricsExtension* internal_default_instance() {
    return reinterpret_cast<const ChromeUserMetricsExtension*>(
               &_ChromeUserMetricsExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeUserMetricsExtension& a, ChromeUserMetricsExtension& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeUserMetricsExtension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeUserMetricsExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeUserMetricsExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeUserMetricsExtension>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeUserMetricsExtension& from);
  void MergeFrom(const ChromeUserMetricsExtension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeUserMetricsExtension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.ChromeUserMetricsExtension";
  }
  protected:
  explicit ChromeUserMetricsExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeUserMetricsExtension_RealLocalTime RealLocalTime;

  typedef ChromeUserMetricsExtension_Product Product;
  static constexpr Product CHROME =
    ChromeUserMetricsExtension_Product_CHROME;
  static constexpr Product ANDROID_WEBVIEW =
    ChromeUserMetricsExtension_Product_ANDROID_WEBVIEW;
  static constexpr Product CAST_ASSISTANT =
    ChromeUserMetricsExtension_Product_CAST_ASSISTANT;
  static constexpr Product CAST =
    ChromeUserMetricsExtension_Product_CAST;
  static constexpr Product ANDROID_WEBLAYER =
    ChromeUserMetricsExtension_Product_ANDROID_WEBLAYER;
  static inline bool Product_IsValid(int value) {
    return ChromeUserMetricsExtension_Product_IsValid(value);
  }
  static constexpr Product Product_MIN =
    ChromeUserMetricsExtension_Product_Product_MIN;
  static constexpr Product Product_MAX =
    ChromeUserMetricsExtension_Product_Product_MAX;
  static constexpr int Product_ARRAYSIZE =
    ChromeUserMetricsExtension_Product_Product_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Product_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Product>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Product_Name.");
    return ChromeUserMetricsExtension_Product_Name(enum_t_value);
  }
  static inline bool Product_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Product* value) {
    return ChromeUserMetricsExtension_Product_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserActionEventFieldNumber = 4,
    kOmniboxEventFieldNumber = 5,
    kHistogramEventFieldNumber = 6,
    kSampledProfileFieldNumber = 11,
    kTranslateEventFieldNumber = 15,
    kPrinterEventFieldNumber = 16,
    kTraceLogFieldNumber = 19,
    kChromeOsAppListLaunchEventFieldNumber = 20,
    kSystemProfileFieldNumber = 3,
    kCastLogsFieldNumber = 12,
    kReportingInfoFieldNumber = 17,
    kUserDemographicsFieldNumber = 21,
    kStructuredDataFieldNumber = 23,
    kTimeLogCreatedFieldNumber = 25,
    kTimeLogClosedFieldNumber = 26,
    kCustomTabSessionFieldNumber = 27,
    kClientIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kProductFieldNumber = 10,
    kUserIdFieldNumber = 24,
    kRecordIdFieldNumber = 28,
  };
  // repeated .metrics.UserActionEventProto user_action_event = 4;
  int user_action_event_size() const;
  private:
  int _internal_user_action_event_size() const;
  public:
  void clear_user_action_event();
  ::metrics::UserActionEventProto* mutable_user_action_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::UserActionEventProto >*
      mutable_user_action_event();
  private:
  const ::metrics::UserActionEventProto& _internal_user_action_event(int index) const;
  ::metrics::UserActionEventProto* _internal_add_user_action_event();
  public:
  const ::metrics::UserActionEventProto& user_action_event(int index) const;
  ::metrics::UserActionEventProto* add_user_action_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::UserActionEventProto >&
      user_action_event() const;

  // repeated .metrics.OmniboxEventProto omnibox_event = 5;
  int omnibox_event_size() const;
  private:
  int _internal_omnibox_event_size() const;
  public:
  void clear_omnibox_event();
  ::metrics::OmniboxEventProto* mutable_omnibox_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto >*
      mutable_omnibox_event();
  private:
  const ::metrics::OmniboxEventProto& _internal_omnibox_event(int index) const;
  ::metrics::OmniboxEventProto* _internal_add_omnibox_event();
  public:
  const ::metrics::OmniboxEventProto& omnibox_event(int index) const;
  ::metrics::OmniboxEventProto* add_omnibox_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto >&
      omnibox_event() const;

  // repeated .metrics.HistogramEventProto histogram_event = 6;
  int histogram_event_size() const;
  private:
  int _internal_histogram_event_size() const;
  public:
  void clear_histogram_event();
  ::metrics::HistogramEventProto* mutable_histogram_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::HistogramEventProto >*
      mutable_histogram_event();
  private:
  const ::metrics::HistogramEventProto& _internal_histogram_event(int index) const;
  ::metrics::HistogramEventProto* _internal_add_histogram_event();
  public:
  const ::metrics::HistogramEventProto& histogram_event(int index) const;
  ::metrics::HistogramEventProto* add_histogram_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::HistogramEventProto >&
      histogram_event() const;

  // repeated .metrics.SampledProfile sampled_profile = 11;
  int sampled_profile_size() const;
  private:
  int _internal_sampled_profile_size() const;
  public:
  void clear_sampled_profile();
  ::metrics::SampledProfile* mutable_sampled_profile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SampledProfile >*
      mutable_sampled_profile();
  private:
  const ::metrics::SampledProfile& _internal_sampled_profile(int index) const;
  ::metrics::SampledProfile* _internal_add_sampled_profile();
  public:
  const ::metrics::SampledProfile& sampled_profile(int index) const;
  ::metrics::SampledProfile* add_sampled_profile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SampledProfile >&
      sampled_profile() const;

  // repeated .metrics.TranslateEventProto translate_event = 15;
  int translate_event_size() const;
  private:
  int _internal_translate_event_size() const;
  public:
  void clear_translate_event();
  ::metrics::TranslateEventProto* mutable_translate_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TranslateEventProto >*
      mutable_translate_event();
  private:
  const ::metrics::TranslateEventProto& _internal_translate_event(int index) const;
  ::metrics::TranslateEventProto* _internal_add_translate_event();
  public:
  const ::metrics::TranslateEventProto& translate_event(int index) const;
  ::metrics::TranslateEventProto* add_translate_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TranslateEventProto >&
      translate_event() const;

  // repeated .metrics.PrinterEventProto printer_event = 16;
  int printer_event_size() const;
  private:
  int _internal_printer_event_size() const;
  public:
  void clear_printer_event();
  ::metrics::PrinterEventProto* mutable_printer_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PrinterEventProto >*
      mutable_printer_event();
  private:
  const ::metrics::PrinterEventProto& _internal_printer_event(int index) const;
  ::metrics::PrinterEventProto* _internal_add_printer_event();
  public:
  const ::metrics::PrinterEventProto& printer_event(int index) const;
  ::metrics::PrinterEventProto* add_printer_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PrinterEventProto >&
      printer_event() const;

  // repeated .metrics.TraceLog trace_log = 19;
  int trace_log_size() const;
  private:
  int _internal_trace_log_size() const;
  public:
  void clear_trace_log();
  ::metrics::TraceLog* mutable_trace_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TraceLog >*
      mutable_trace_log();
  private:
  const ::metrics::TraceLog& _internal_trace_log(int index) const;
  ::metrics::TraceLog* _internal_add_trace_log();
  public:
  const ::metrics::TraceLog& trace_log(int index) const;
  ::metrics::TraceLog* add_trace_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TraceLog >&
      trace_log() const;

  // repeated .metrics.ChromeOSAppListLaunchEventProto chrome_os_app_list_launch_event = 20;
  int chrome_os_app_list_launch_event_size() const;
  private:
  int _internal_chrome_os_app_list_launch_event_size() const;
  public:
  void clear_chrome_os_app_list_launch_event();
  ::metrics::ChromeOSAppListLaunchEventProto* mutable_chrome_os_app_list_launch_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeOSAppListLaunchEventProto >*
      mutable_chrome_os_app_list_launch_event();
  private:
  const ::metrics::ChromeOSAppListLaunchEventProto& _internal_chrome_os_app_list_launch_event(int index) const;
  ::metrics::ChromeOSAppListLaunchEventProto* _internal_add_chrome_os_app_list_launch_event();
  public:
  const ::metrics::ChromeOSAppListLaunchEventProto& chrome_os_app_list_launch_event(int index) const;
  ::metrics::ChromeOSAppListLaunchEventProto* add_chrome_os_app_list_launch_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeOSAppListLaunchEventProto >&
      chrome_os_app_list_launch_event() const;

  // optional .metrics.SystemProfileProto system_profile = 3;
  bool has_system_profile() const;
  private:
  bool _internal_has_system_profile() const;
  public:
  void clear_system_profile();
  const ::metrics::SystemProfileProto& system_profile() const;
  PROTOBUF_NODISCARD ::metrics::SystemProfileProto* release_system_profile();
  ::metrics::SystemProfileProto* mutable_system_profile();
  void set_allocated_system_profile(::metrics::SystemProfileProto* system_profile);
  private:
  const ::metrics::SystemProfileProto& _internal_system_profile() const;
  ::metrics::SystemProfileProto* _internal_mutable_system_profile();
  public:
  void unsafe_arena_set_allocated_system_profile(
      ::metrics::SystemProfileProto* system_profile);
  ::metrics::SystemProfileProto* unsafe_arena_release_system_profile();

  // optional .metrics.CastLogsProto cast_logs = 12;
  bool has_cast_logs() const;
  private:
  bool _internal_has_cast_logs() const;
  public:
  void clear_cast_logs();
  const ::metrics::CastLogsProto& cast_logs() const;
  PROTOBUF_NODISCARD ::metrics::CastLogsProto* release_cast_logs();
  ::metrics::CastLogsProto* mutable_cast_logs();
  void set_allocated_cast_logs(::metrics::CastLogsProto* cast_logs);
  private:
  const ::metrics::CastLogsProto& _internal_cast_logs() const;
  ::metrics::CastLogsProto* _internal_mutable_cast_logs();
  public:
  void unsafe_arena_set_allocated_cast_logs(
      ::metrics::CastLogsProto* cast_logs);
  ::metrics::CastLogsProto* unsafe_arena_release_cast_logs();

  // optional .metrics.ReportingInfo reporting_info = 17;
  bool has_reporting_info() const;
  private:
  bool _internal_has_reporting_info() const;
  public:
  void clear_reporting_info();
  const ::metrics::ReportingInfo& reporting_info() const;
  PROTOBUF_NODISCARD ::metrics::ReportingInfo* release_reporting_info();
  ::metrics::ReportingInfo* mutable_reporting_info();
  void set_allocated_reporting_info(::metrics::ReportingInfo* reporting_info);
  private:
  const ::metrics::ReportingInfo& _internal_reporting_info() const;
  ::metrics::ReportingInfo* _internal_mutable_reporting_info();
  public:
  void unsafe_arena_set_allocated_reporting_info(
      ::metrics::ReportingInfo* reporting_info);
  ::metrics::ReportingInfo* unsafe_arena_release_reporting_info();

  // optional .metrics.UserDemographicsProto user_demographics = 21;
  bool has_user_demographics() const;
  private:
  bool _internal_has_user_demographics() const;
  public:
  void clear_user_demographics();
  const ::metrics::UserDemographicsProto& user_demographics() const;
  PROTOBUF_NODISCARD ::metrics::UserDemographicsProto* release_user_demographics();
  ::metrics::UserDemographicsProto* mutable_user_demographics();
  void set_allocated_user_demographics(::metrics::UserDemographicsProto* user_demographics);
  private:
  const ::metrics::UserDemographicsProto& _internal_user_demographics() const;
  ::metrics::UserDemographicsProto* _internal_mutable_user_demographics();
  public:
  void unsafe_arena_set_allocated_user_demographics(
      ::metrics::UserDemographicsProto* user_demographics);
  ::metrics::UserDemographicsProto* unsafe_arena_release_user_demographics();

  // optional .metrics.StructuredDataProto structured_data = 23;
  bool has_structured_data() const;
  private:
  bool _internal_has_structured_data() const;
  public:
  void clear_structured_data();
  const ::metrics::StructuredDataProto& structured_data() const;
  PROTOBUF_NODISCARD ::metrics::StructuredDataProto* release_structured_data();
  ::metrics::StructuredDataProto* mutable_structured_data();
  void set_allocated_structured_data(::metrics::StructuredDataProto* structured_data);
  private:
  const ::metrics::StructuredDataProto& _internal_structured_data() const;
  ::metrics::StructuredDataProto* _internal_mutable_structured_data();
  public:
  void unsafe_arena_set_allocated_structured_data(
      ::metrics::StructuredDataProto* structured_data);
  ::metrics::StructuredDataProto* unsafe_arena_release_structured_data();

  // optional .metrics.ChromeUserMetricsExtension.RealLocalTime time_log_created = 25;
  bool has_time_log_created() const;
  private:
  bool _internal_has_time_log_created() const;
  public:
  void clear_time_log_created();
  const ::metrics::ChromeUserMetricsExtension_RealLocalTime& time_log_created() const;
  PROTOBUF_NODISCARD ::metrics::ChromeUserMetricsExtension_RealLocalTime* release_time_log_created();
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* mutable_time_log_created();
  void set_allocated_time_log_created(::metrics::ChromeUserMetricsExtension_RealLocalTime* time_log_created);
  private:
  const ::metrics::ChromeUserMetricsExtension_RealLocalTime& _internal_time_log_created() const;
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* _internal_mutable_time_log_created();
  public:
  void unsafe_arena_set_allocated_time_log_created(
      ::metrics::ChromeUserMetricsExtension_RealLocalTime* time_log_created);
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* unsafe_arena_release_time_log_created();

  // optional .metrics.ChromeUserMetricsExtension.RealLocalTime time_log_closed = 26;
  bool has_time_log_closed() const;
  private:
  bool _internal_has_time_log_closed() const;
  public:
  void clear_time_log_closed();
  const ::metrics::ChromeUserMetricsExtension_RealLocalTime& time_log_closed() const;
  PROTOBUF_NODISCARD ::metrics::ChromeUserMetricsExtension_RealLocalTime* release_time_log_closed();
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* mutable_time_log_closed();
  void set_allocated_time_log_closed(::metrics::ChromeUserMetricsExtension_RealLocalTime* time_log_closed);
  private:
  const ::metrics::ChromeUserMetricsExtension_RealLocalTime& _internal_time_log_closed() const;
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* _internal_mutable_time_log_closed();
  public:
  void unsafe_arena_set_allocated_time_log_closed(
      ::metrics::ChromeUserMetricsExtension_RealLocalTime* time_log_closed);
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* unsafe_arena_release_time_log_closed();

  // optional .metrics.CustomTabSessionProto custom_tab_session = 27;
  bool has_custom_tab_session() const;
  private:
  bool _internal_has_custom_tab_session() const;
  public:
  void clear_custom_tab_session();
  const ::metrics::CustomTabSessionProto& custom_tab_session() const;
  PROTOBUF_NODISCARD ::metrics::CustomTabSessionProto* release_custom_tab_session();
  ::metrics::CustomTabSessionProto* mutable_custom_tab_session();
  void set_allocated_custom_tab_session(::metrics::CustomTabSessionProto* custom_tab_session);
  private:
  const ::metrics::CustomTabSessionProto& _internal_custom_tab_session() const;
  ::metrics::CustomTabSessionProto* _internal_mutable_custom_tab_session();
  public:
  void unsafe_arena_set_allocated_custom_tab_session(
      ::metrics::CustomTabSessionProto* custom_tab_session);
  ::metrics::CustomTabSessionProto* unsafe_arena_release_custom_tab_session();

  // optional fixed64 client_id = 1;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // optional int32 session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // optional int32 product = 10 [default = 0];
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  int32_t product() const;
  void set_product(int32_t value);
  private:
  int32_t _internal_product() const;
  void _internal_set_product(int32_t value);
  public:

  // optional fixed64 user_id = 24;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // optional int64 record_id = 28;
  bool has_record_id() const;
  private:
  bool _internal_has_record_id() const;
  public:
  void clear_record_id();
  int64_t record_id() const;
  void set_record_id(int64_t value);
  private:
  int64_t _internal_record_id() const;
  void _internal_set_record_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.ChromeUserMetricsExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::UserActionEventProto > user_action_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto > omnibox_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::HistogramEventProto > histogram_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SampledProfile > sampled_profile_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TranslateEventProto > translate_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PrinterEventProto > printer_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TraceLog > trace_log_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeOSAppListLaunchEventProto > chrome_os_app_list_launch_event_;
  ::metrics::SystemProfileProto* system_profile_;
  ::metrics::CastLogsProto* cast_logs_;
  ::metrics::ReportingInfo* reporting_info_;
  ::metrics::UserDemographicsProto* user_demographics_;
  ::metrics::StructuredDataProto* structured_data_;
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* time_log_created_;
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* time_log_closed_;
  ::metrics::CustomTabSessionProto* custom_tab_session_;
  uint64_t client_id_;
  int32_t session_id_;
  int32_t product_;
  uint64_t user_id_;
  int64_t record_id_;
  friend struct ::TableStruct_chrome_5fuser_5fmetrics_5fextension_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeUserMetricsExtension_RealLocalTime

// optional .metrics.ChromeUserMetricsExtension.RealLocalTime.TimeSource time_source = 1;
inline bool ChromeUserMetricsExtension_RealLocalTime::_internal_has_time_source() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeUserMetricsExtension_RealLocalTime::has_time_source() const {
  return _internal_has_time_source();
}
inline void ChromeUserMetricsExtension_RealLocalTime::clear_time_source() {
  time_source_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource ChromeUserMetricsExtension_RealLocalTime::_internal_time_source() const {
  return static_cast< ::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource >(time_source_);
}
inline ::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource ChromeUserMetricsExtension_RealLocalTime::time_source() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.RealLocalTime.time_source)
  return _internal_time_source();
}
inline void ChromeUserMetricsExtension_RealLocalTime::_internal_set_time_source(::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource value) {
  assert(::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  time_source_ = value;
}
inline void ChromeUserMetricsExtension_RealLocalTime::set_time_source(::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource value) {
  _internal_set_time_source(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.RealLocalTime.time_source)
}

// optional int64 time_sec = 2;
inline bool ChromeUserMetricsExtension_RealLocalTime::_internal_has_time_sec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeUserMetricsExtension_RealLocalTime::has_time_sec() const {
  return _internal_has_time_sec();
}
inline void ChromeUserMetricsExtension_RealLocalTime::clear_time_sec() {
  time_sec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ChromeUserMetricsExtension_RealLocalTime::_internal_time_sec() const {
  return time_sec_;
}
inline int64_t ChromeUserMetricsExtension_RealLocalTime::time_sec() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.RealLocalTime.time_sec)
  return _internal_time_sec();
}
inline void ChromeUserMetricsExtension_RealLocalTime::_internal_set_time_sec(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  time_sec_ = value;
}
inline void ChromeUserMetricsExtension_RealLocalTime::set_time_sec(int64_t value) {
  _internal_set_time_sec(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.RealLocalTime.time_sec)
}

// optional int32 time_zone_offset_from_gmt_sec = 3;
inline bool ChromeUserMetricsExtension_RealLocalTime::_internal_has_time_zone_offset_from_gmt_sec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeUserMetricsExtension_RealLocalTime::has_time_zone_offset_from_gmt_sec() const {
  return _internal_has_time_zone_offset_from_gmt_sec();
}
inline void ChromeUserMetricsExtension_RealLocalTime::clear_time_zone_offset_from_gmt_sec() {
  time_zone_offset_from_gmt_sec_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ChromeUserMetricsExtension_RealLocalTime::_internal_time_zone_offset_from_gmt_sec() const {
  return time_zone_offset_from_gmt_sec_;
}
inline int32_t ChromeUserMetricsExtension_RealLocalTime::time_zone_offset_from_gmt_sec() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.RealLocalTime.time_zone_offset_from_gmt_sec)
  return _internal_time_zone_offset_from_gmt_sec();
}
inline void ChromeUserMetricsExtension_RealLocalTime::_internal_set_time_zone_offset_from_gmt_sec(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_zone_offset_from_gmt_sec_ = value;
}
inline void ChromeUserMetricsExtension_RealLocalTime::set_time_zone_offset_from_gmt_sec(int32_t value) {
  _internal_set_time_zone_offset_from_gmt_sec(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.RealLocalTime.time_zone_offset_from_gmt_sec)
}

// -------------------------------------------------------------------

// ChromeUserMetricsExtension

// optional int32 product = 10 [default = 0];
inline bool ChromeUserMetricsExtension::_internal_has_product() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChromeUserMetricsExtension::has_product() const {
  return _internal_has_product();
}
inline void ChromeUserMetricsExtension::clear_product() {
  product_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t ChromeUserMetricsExtension::_internal_product() const {
  return product_;
}
inline int32_t ChromeUserMetricsExtension::product() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.product)
  return _internal_product();
}
inline void ChromeUserMetricsExtension::_internal_set_product(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  product_ = value;
}
inline void ChromeUserMetricsExtension::set_product(int32_t value) {
  _internal_set_product(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.product)
}

// optional fixed64 client_id = 1;
inline bool ChromeUserMetricsExtension::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChromeUserMetricsExtension::has_client_id() const {
  return _internal_has_client_id();
}
inline void ChromeUserMetricsExtension::clear_client_id() {
  client_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t ChromeUserMetricsExtension::_internal_client_id() const {
  return client_id_;
}
inline uint64_t ChromeUserMetricsExtension::client_id() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.client_id)
  return _internal_client_id();
}
inline void ChromeUserMetricsExtension::_internal_set_client_id(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  client_id_ = value;
}
inline void ChromeUserMetricsExtension::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.client_id)
}

// optional int32 session_id = 2;
inline bool ChromeUserMetricsExtension::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChromeUserMetricsExtension::has_session_id() const {
  return _internal_has_session_id();
}
inline void ChromeUserMetricsExtension::clear_session_id() {
  session_id_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t ChromeUserMetricsExtension::_internal_session_id() const {
  return session_id_;
}
inline int32_t ChromeUserMetricsExtension::session_id() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.session_id)
  return _internal_session_id();
}
inline void ChromeUserMetricsExtension::_internal_set_session_id(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  session_id_ = value;
}
inline void ChromeUserMetricsExtension::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.session_id)
}

// optional fixed64 user_id = 24;
inline bool ChromeUserMetricsExtension::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChromeUserMetricsExtension::has_user_id() const {
  return _internal_has_user_id();
}
inline void ChromeUserMetricsExtension::clear_user_id() {
  user_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline uint64_t ChromeUserMetricsExtension::_internal_user_id() const {
  return user_id_;
}
inline uint64_t ChromeUserMetricsExtension::user_id() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.user_id)
  return _internal_user_id();
}
inline void ChromeUserMetricsExtension::_internal_set_user_id(uint64_t value) {
  _has_bits_[0] |= 0x00000800u;
  user_id_ = value;
}
inline void ChromeUserMetricsExtension::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.user_id)
}

// optional int64 record_id = 28;
inline bool ChromeUserMetricsExtension::_internal_has_record_id() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChromeUserMetricsExtension::has_record_id() const {
  return _internal_has_record_id();
}
inline void ChromeUserMetricsExtension::clear_record_id() {
  record_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00001000u;
}
inline int64_t ChromeUserMetricsExtension::_internal_record_id() const {
  return record_id_;
}
inline int64_t ChromeUserMetricsExtension::record_id() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.record_id)
  return _internal_record_id();
}
inline void ChromeUserMetricsExtension::_internal_set_record_id(int64_t value) {
  _has_bits_[0] |= 0x00001000u;
  record_id_ = value;
}
inline void ChromeUserMetricsExtension::set_record_id(int64_t value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.record_id)
}

// optional .metrics.ChromeUserMetricsExtension.RealLocalTime time_log_created = 25;
inline bool ChromeUserMetricsExtension::_internal_has_time_log_created() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || time_log_created_ != nullptr);
  return value;
}
inline bool ChromeUserMetricsExtension::has_time_log_created() const {
  return _internal_has_time_log_created();
}
inline void ChromeUserMetricsExtension::clear_time_log_created() {
  if (time_log_created_ != nullptr) time_log_created_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::metrics::ChromeUserMetricsExtension_RealLocalTime& ChromeUserMetricsExtension::_internal_time_log_created() const {
  const ::metrics::ChromeUserMetricsExtension_RealLocalTime* p = time_log_created_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::ChromeUserMetricsExtension_RealLocalTime&>(
      ::metrics::_ChromeUserMetricsExtension_RealLocalTime_default_instance_);
}
inline const ::metrics::ChromeUserMetricsExtension_RealLocalTime& ChromeUserMetricsExtension::time_log_created() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.time_log_created)
  return _internal_time_log_created();
}
inline void ChromeUserMetricsExtension::unsafe_arena_set_allocated_time_log_created(
    ::metrics::ChromeUserMetricsExtension_RealLocalTime* time_log_created) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_log_created_);
  }
  time_log_created_ = time_log_created;
  if (time_log_created) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.ChromeUserMetricsExtension.time_log_created)
}
inline ::metrics::ChromeUserMetricsExtension_RealLocalTime* ChromeUserMetricsExtension::release_time_log_created() {
  _has_bits_[0] &= ~0x00000020u;
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* temp = time_log_created_;
  time_log_created_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::ChromeUserMetricsExtension_RealLocalTime* ChromeUserMetricsExtension::unsafe_arena_release_time_log_created() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.time_log_created)
  _has_bits_[0] &= ~0x00000020u;
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* temp = time_log_created_;
  time_log_created_ = nullptr;
  return temp;
}
inline ::metrics::ChromeUserMetricsExtension_RealLocalTime* ChromeUserMetricsExtension::_internal_mutable_time_log_created() {
  _has_bits_[0] |= 0x00000020u;
  if (time_log_created_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::ChromeUserMetricsExtension_RealLocalTime>(GetArenaForAllocation());
    time_log_created_ = p;
  }
  return time_log_created_;
}
inline ::metrics::ChromeUserMetricsExtension_RealLocalTime* ChromeUserMetricsExtension::mutable_time_log_created() {
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* _msg = _internal_mutable_time_log_created();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.time_log_created)
  return _msg;
}
inline void ChromeUserMetricsExtension::set_allocated_time_log_created(::metrics::ChromeUserMetricsExtension_RealLocalTime* time_log_created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete time_log_created_;
  }
  if (time_log_created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_log_created);
    if (message_arena != submessage_arena) {
      time_log_created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_log_created, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  time_log_created_ = time_log_created;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.time_log_created)
}

// optional .metrics.ChromeUserMetricsExtension.RealLocalTime time_log_closed = 26;
inline bool ChromeUserMetricsExtension::_internal_has_time_log_closed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || time_log_closed_ != nullptr);
  return value;
}
inline bool ChromeUserMetricsExtension::has_time_log_closed() const {
  return _internal_has_time_log_closed();
}
inline void ChromeUserMetricsExtension::clear_time_log_closed() {
  if (time_log_closed_ != nullptr) time_log_closed_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::metrics::ChromeUserMetricsExtension_RealLocalTime& ChromeUserMetricsExtension::_internal_time_log_closed() const {
  const ::metrics::ChromeUserMetricsExtension_RealLocalTime* p = time_log_closed_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::ChromeUserMetricsExtension_RealLocalTime&>(
      ::metrics::_ChromeUserMetricsExtension_RealLocalTime_default_instance_);
}
inline const ::metrics::ChromeUserMetricsExtension_RealLocalTime& ChromeUserMetricsExtension::time_log_closed() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.time_log_closed)
  return _internal_time_log_closed();
}
inline void ChromeUserMetricsExtension::unsafe_arena_set_allocated_time_log_closed(
    ::metrics::ChromeUserMetricsExtension_RealLocalTime* time_log_closed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_log_closed_);
  }
  time_log_closed_ = time_log_closed;
  if (time_log_closed) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.ChromeUserMetricsExtension.time_log_closed)
}
inline ::metrics::ChromeUserMetricsExtension_RealLocalTime* ChromeUserMetricsExtension::release_time_log_closed() {
  _has_bits_[0] &= ~0x00000040u;
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* temp = time_log_closed_;
  time_log_closed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::ChromeUserMetricsExtension_RealLocalTime* ChromeUserMetricsExtension::unsafe_arena_release_time_log_closed() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.time_log_closed)
  _has_bits_[0] &= ~0x00000040u;
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* temp = time_log_closed_;
  time_log_closed_ = nullptr;
  return temp;
}
inline ::metrics::ChromeUserMetricsExtension_RealLocalTime* ChromeUserMetricsExtension::_internal_mutable_time_log_closed() {
  _has_bits_[0] |= 0x00000040u;
  if (time_log_closed_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::ChromeUserMetricsExtension_RealLocalTime>(GetArenaForAllocation());
    time_log_closed_ = p;
  }
  return time_log_closed_;
}
inline ::metrics::ChromeUserMetricsExtension_RealLocalTime* ChromeUserMetricsExtension::mutable_time_log_closed() {
  ::metrics::ChromeUserMetricsExtension_RealLocalTime* _msg = _internal_mutable_time_log_closed();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.time_log_closed)
  return _msg;
}
inline void ChromeUserMetricsExtension::set_allocated_time_log_closed(::metrics::ChromeUserMetricsExtension_RealLocalTime* time_log_closed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete time_log_closed_;
  }
  if (time_log_closed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_log_closed);
    if (message_arena != submessage_arena) {
      time_log_closed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_log_closed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  time_log_closed_ = time_log_closed;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.time_log_closed)
}

// optional .metrics.SystemProfileProto system_profile = 3;
inline bool ChromeUserMetricsExtension::_internal_has_system_profile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || system_profile_ != nullptr);
  return value;
}
inline bool ChromeUserMetricsExtension::has_system_profile() const {
  return _internal_has_system_profile();
}
inline const ::metrics::SystemProfileProto& ChromeUserMetricsExtension::_internal_system_profile() const {
  const ::metrics::SystemProfileProto* p = system_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::SystemProfileProto&>(
      ::metrics::_SystemProfileProto_default_instance_);
}
inline const ::metrics::SystemProfileProto& ChromeUserMetricsExtension::system_profile() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.system_profile)
  return _internal_system_profile();
}
inline void ChromeUserMetricsExtension::unsafe_arena_set_allocated_system_profile(
    ::metrics::SystemProfileProto* system_profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_profile_);
  }
  system_profile_ = system_profile;
  if (system_profile) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.ChromeUserMetricsExtension.system_profile)
}
inline ::metrics::SystemProfileProto* ChromeUserMetricsExtension::release_system_profile() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::SystemProfileProto* temp = system_profile_;
  system_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::SystemProfileProto* ChromeUserMetricsExtension::unsafe_arena_release_system_profile() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.system_profile)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::SystemProfileProto* temp = system_profile_;
  system_profile_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto* ChromeUserMetricsExtension::_internal_mutable_system_profile() {
  _has_bits_[0] |= 0x00000001u;
  if (system_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto>(GetArenaForAllocation());
    system_profile_ = p;
  }
  return system_profile_;
}
inline ::metrics::SystemProfileProto* ChromeUserMetricsExtension::mutable_system_profile() {
  ::metrics::SystemProfileProto* _msg = _internal_mutable_system_profile();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.system_profile)
  return _msg;
}
inline void ChromeUserMetricsExtension::set_allocated_system_profile(::metrics::SystemProfileProto* system_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_profile_);
  }
  if (system_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_profile));
    if (message_arena != submessage_arena) {
      system_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  system_profile_ = system_profile;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.system_profile)
}

// optional .metrics.UserDemographicsProto user_demographics = 21;
inline bool ChromeUserMetricsExtension::_internal_has_user_demographics() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || user_demographics_ != nullptr);
  return value;
}
inline bool ChromeUserMetricsExtension::has_user_demographics() const {
  return _internal_has_user_demographics();
}
inline const ::metrics::UserDemographicsProto& ChromeUserMetricsExtension::_internal_user_demographics() const {
  const ::metrics::UserDemographicsProto* p = user_demographics_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::UserDemographicsProto&>(
      ::metrics::_UserDemographicsProto_default_instance_);
}
inline const ::metrics::UserDemographicsProto& ChromeUserMetricsExtension::user_demographics() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.user_demographics)
  return _internal_user_demographics();
}
inline void ChromeUserMetricsExtension::unsafe_arena_set_allocated_user_demographics(
    ::metrics::UserDemographicsProto* user_demographics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_demographics_);
  }
  user_demographics_ = user_demographics;
  if (user_demographics) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.ChromeUserMetricsExtension.user_demographics)
}
inline ::metrics::UserDemographicsProto* ChromeUserMetricsExtension::release_user_demographics() {
  _has_bits_[0] &= ~0x00000008u;
  ::metrics::UserDemographicsProto* temp = user_demographics_;
  user_demographics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::UserDemographicsProto* ChromeUserMetricsExtension::unsafe_arena_release_user_demographics() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.user_demographics)
  _has_bits_[0] &= ~0x00000008u;
  ::metrics::UserDemographicsProto* temp = user_demographics_;
  user_demographics_ = nullptr;
  return temp;
}
inline ::metrics::UserDemographicsProto* ChromeUserMetricsExtension::_internal_mutable_user_demographics() {
  _has_bits_[0] |= 0x00000008u;
  if (user_demographics_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::UserDemographicsProto>(GetArenaForAllocation());
    user_demographics_ = p;
  }
  return user_demographics_;
}
inline ::metrics::UserDemographicsProto* ChromeUserMetricsExtension::mutable_user_demographics() {
  ::metrics::UserDemographicsProto* _msg = _internal_mutable_user_demographics();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.user_demographics)
  return _msg;
}
inline void ChromeUserMetricsExtension::set_allocated_user_demographics(::metrics::UserDemographicsProto* user_demographics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_demographics_);
  }
  if (user_demographics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_demographics));
    if (message_arena != submessage_arena) {
      user_demographics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_demographics, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_demographics_ = user_demographics;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.user_demographics)
}

// repeated .metrics.UserActionEventProto user_action_event = 4;
inline int ChromeUserMetricsExtension::_internal_user_action_event_size() const {
  return user_action_event_.size();
}
inline int ChromeUserMetricsExtension::user_action_event_size() const {
  return _internal_user_action_event_size();
}
inline ::metrics::UserActionEventProto* ChromeUserMetricsExtension::mutable_user_action_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.user_action_event)
  return user_action_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::UserActionEventProto >*
ChromeUserMetricsExtension::mutable_user_action_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.user_action_event)
  return &user_action_event_;
}
inline const ::metrics::UserActionEventProto& ChromeUserMetricsExtension::_internal_user_action_event(int index) const {
  return user_action_event_.Get(index);
}
inline const ::metrics::UserActionEventProto& ChromeUserMetricsExtension::user_action_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.user_action_event)
  return _internal_user_action_event(index);
}
inline ::metrics::UserActionEventProto* ChromeUserMetricsExtension::_internal_add_user_action_event() {
  return user_action_event_.Add();
}
inline ::metrics::UserActionEventProto* ChromeUserMetricsExtension::add_user_action_event() {
  ::metrics::UserActionEventProto* _add = _internal_add_user_action_event();
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.user_action_event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::UserActionEventProto >&
ChromeUserMetricsExtension::user_action_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.user_action_event)
  return user_action_event_;
}

// repeated .metrics.OmniboxEventProto omnibox_event = 5;
inline int ChromeUserMetricsExtension::_internal_omnibox_event_size() const {
  return omnibox_event_.size();
}
inline int ChromeUserMetricsExtension::omnibox_event_size() const {
  return _internal_omnibox_event_size();
}
inline ::metrics::OmniboxEventProto* ChromeUserMetricsExtension::mutable_omnibox_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.omnibox_event)
  return omnibox_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto >*
ChromeUserMetricsExtension::mutable_omnibox_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.omnibox_event)
  return &omnibox_event_;
}
inline const ::metrics::OmniboxEventProto& ChromeUserMetricsExtension::_internal_omnibox_event(int index) const {
  return omnibox_event_.Get(index);
}
inline const ::metrics::OmniboxEventProto& ChromeUserMetricsExtension::omnibox_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.omnibox_event)
  return _internal_omnibox_event(index);
}
inline ::metrics::OmniboxEventProto* ChromeUserMetricsExtension::_internal_add_omnibox_event() {
  return omnibox_event_.Add();
}
inline ::metrics::OmniboxEventProto* ChromeUserMetricsExtension::add_omnibox_event() {
  ::metrics::OmniboxEventProto* _add = _internal_add_omnibox_event();
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.omnibox_event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto >&
ChromeUserMetricsExtension::omnibox_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.omnibox_event)
  return omnibox_event_;
}

// repeated .metrics.HistogramEventProto histogram_event = 6;
inline int ChromeUserMetricsExtension::_internal_histogram_event_size() const {
  return histogram_event_.size();
}
inline int ChromeUserMetricsExtension::histogram_event_size() const {
  return _internal_histogram_event_size();
}
inline ::metrics::HistogramEventProto* ChromeUserMetricsExtension::mutable_histogram_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.histogram_event)
  return histogram_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::HistogramEventProto >*
ChromeUserMetricsExtension::mutable_histogram_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.histogram_event)
  return &histogram_event_;
}
inline const ::metrics::HistogramEventProto& ChromeUserMetricsExtension::_internal_histogram_event(int index) const {
  return histogram_event_.Get(index);
}
inline const ::metrics::HistogramEventProto& ChromeUserMetricsExtension::histogram_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.histogram_event)
  return _internal_histogram_event(index);
}
inline ::metrics::HistogramEventProto* ChromeUserMetricsExtension::_internal_add_histogram_event() {
  return histogram_event_.Add();
}
inline ::metrics::HistogramEventProto* ChromeUserMetricsExtension::add_histogram_event() {
  ::metrics::HistogramEventProto* _add = _internal_add_histogram_event();
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.histogram_event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::HistogramEventProto >&
ChromeUserMetricsExtension::histogram_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.histogram_event)
  return histogram_event_;
}

// repeated .metrics.TranslateEventProto translate_event = 15;
inline int ChromeUserMetricsExtension::_internal_translate_event_size() const {
  return translate_event_.size();
}
inline int ChromeUserMetricsExtension::translate_event_size() const {
  return _internal_translate_event_size();
}
inline ::metrics::TranslateEventProto* ChromeUserMetricsExtension::mutable_translate_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.translate_event)
  return translate_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TranslateEventProto >*
ChromeUserMetricsExtension::mutable_translate_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.translate_event)
  return &translate_event_;
}
inline const ::metrics::TranslateEventProto& ChromeUserMetricsExtension::_internal_translate_event(int index) const {
  return translate_event_.Get(index);
}
inline const ::metrics::TranslateEventProto& ChromeUserMetricsExtension::translate_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.translate_event)
  return _internal_translate_event(index);
}
inline ::metrics::TranslateEventProto* ChromeUserMetricsExtension::_internal_add_translate_event() {
  return translate_event_.Add();
}
inline ::metrics::TranslateEventProto* ChromeUserMetricsExtension::add_translate_event() {
  ::metrics::TranslateEventProto* _add = _internal_add_translate_event();
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.translate_event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TranslateEventProto >&
ChromeUserMetricsExtension::translate_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.translate_event)
  return translate_event_;
}

// repeated .metrics.PrinterEventProto printer_event = 16;
inline int ChromeUserMetricsExtension::_internal_printer_event_size() const {
  return printer_event_.size();
}
inline int ChromeUserMetricsExtension::printer_event_size() const {
  return _internal_printer_event_size();
}
inline ::metrics::PrinterEventProto* ChromeUserMetricsExtension::mutable_printer_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.printer_event)
  return printer_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PrinterEventProto >*
ChromeUserMetricsExtension::mutable_printer_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.printer_event)
  return &printer_event_;
}
inline const ::metrics::PrinterEventProto& ChromeUserMetricsExtension::_internal_printer_event(int index) const {
  return printer_event_.Get(index);
}
inline const ::metrics::PrinterEventProto& ChromeUserMetricsExtension::printer_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.printer_event)
  return _internal_printer_event(index);
}
inline ::metrics::PrinterEventProto* ChromeUserMetricsExtension::_internal_add_printer_event() {
  return printer_event_.Add();
}
inline ::metrics::PrinterEventProto* ChromeUserMetricsExtension::add_printer_event() {
  ::metrics::PrinterEventProto* _add = _internal_add_printer_event();
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.printer_event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PrinterEventProto >&
ChromeUserMetricsExtension::printer_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.printer_event)
  return printer_event_;
}

// repeated .metrics.ChromeOSAppListLaunchEventProto chrome_os_app_list_launch_event = 20;
inline int ChromeUserMetricsExtension::_internal_chrome_os_app_list_launch_event_size() const {
  return chrome_os_app_list_launch_event_.size();
}
inline int ChromeUserMetricsExtension::chrome_os_app_list_launch_event_size() const {
  return _internal_chrome_os_app_list_launch_event_size();
}
inline ::metrics::ChromeOSAppListLaunchEventProto* ChromeUserMetricsExtension::mutable_chrome_os_app_list_launch_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.chrome_os_app_list_launch_event)
  return chrome_os_app_list_launch_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeOSAppListLaunchEventProto >*
ChromeUserMetricsExtension::mutable_chrome_os_app_list_launch_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.chrome_os_app_list_launch_event)
  return &chrome_os_app_list_launch_event_;
}
inline const ::metrics::ChromeOSAppListLaunchEventProto& ChromeUserMetricsExtension::_internal_chrome_os_app_list_launch_event(int index) const {
  return chrome_os_app_list_launch_event_.Get(index);
}
inline const ::metrics::ChromeOSAppListLaunchEventProto& ChromeUserMetricsExtension::chrome_os_app_list_launch_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.chrome_os_app_list_launch_event)
  return _internal_chrome_os_app_list_launch_event(index);
}
inline ::metrics::ChromeOSAppListLaunchEventProto* ChromeUserMetricsExtension::_internal_add_chrome_os_app_list_launch_event() {
  return chrome_os_app_list_launch_event_.Add();
}
inline ::metrics::ChromeOSAppListLaunchEventProto* ChromeUserMetricsExtension::add_chrome_os_app_list_launch_event() {
  ::metrics::ChromeOSAppListLaunchEventProto* _add = _internal_add_chrome_os_app_list_launch_event();
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.chrome_os_app_list_launch_event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeOSAppListLaunchEventProto >&
ChromeUserMetricsExtension::chrome_os_app_list_launch_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.chrome_os_app_list_launch_event)
  return chrome_os_app_list_launch_event_;
}

// optional .metrics.StructuredDataProto structured_data = 23;
inline bool ChromeUserMetricsExtension::_internal_has_structured_data() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || structured_data_ != nullptr);
  return value;
}
inline bool ChromeUserMetricsExtension::has_structured_data() const {
  return _internal_has_structured_data();
}
inline const ::metrics::StructuredDataProto& ChromeUserMetricsExtension::_internal_structured_data() const {
  const ::metrics::StructuredDataProto* p = structured_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::StructuredDataProto&>(
      ::metrics::_StructuredDataProto_default_instance_);
}
inline const ::metrics::StructuredDataProto& ChromeUserMetricsExtension::structured_data() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.structured_data)
  return _internal_structured_data();
}
inline void ChromeUserMetricsExtension::unsafe_arena_set_allocated_structured_data(
    ::metrics::StructuredDataProto* structured_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structured_data_);
  }
  structured_data_ = structured_data;
  if (structured_data) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.ChromeUserMetricsExtension.structured_data)
}
inline ::metrics::StructuredDataProto* ChromeUserMetricsExtension::release_structured_data() {
  _has_bits_[0] &= ~0x00000010u;
  ::metrics::StructuredDataProto* temp = structured_data_;
  structured_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::StructuredDataProto* ChromeUserMetricsExtension::unsafe_arena_release_structured_data() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.structured_data)
  _has_bits_[0] &= ~0x00000010u;
  ::metrics::StructuredDataProto* temp = structured_data_;
  structured_data_ = nullptr;
  return temp;
}
inline ::metrics::StructuredDataProto* ChromeUserMetricsExtension::_internal_mutable_structured_data() {
  _has_bits_[0] |= 0x00000010u;
  if (structured_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::StructuredDataProto>(GetArenaForAllocation());
    structured_data_ = p;
  }
  return structured_data_;
}
inline ::metrics::StructuredDataProto* ChromeUserMetricsExtension::mutable_structured_data() {
  ::metrics::StructuredDataProto* _msg = _internal_mutable_structured_data();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.structured_data)
  return _msg;
}
inline void ChromeUserMetricsExtension::set_allocated_structured_data(::metrics::StructuredDataProto* structured_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(structured_data_);
  }
  if (structured_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structured_data));
    if (message_arena != submessage_arena) {
      structured_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structured_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  structured_data_ = structured_data;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.structured_data)
}

// repeated .metrics.SampledProfile sampled_profile = 11;
inline int ChromeUserMetricsExtension::_internal_sampled_profile_size() const {
  return sampled_profile_.size();
}
inline int ChromeUserMetricsExtension::sampled_profile_size() const {
  return _internal_sampled_profile_size();
}
inline ::metrics::SampledProfile* ChromeUserMetricsExtension::mutable_sampled_profile(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.sampled_profile)
  return sampled_profile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SampledProfile >*
ChromeUserMetricsExtension::mutable_sampled_profile() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.sampled_profile)
  return &sampled_profile_;
}
inline const ::metrics::SampledProfile& ChromeUserMetricsExtension::_internal_sampled_profile(int index) const {
  return sampled_profile_.Get(index);
}
inline const ::metrics::SampledProfile& ChromeUserMetricsExtension::sampled_profile(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.sampled_profile)
  return _internal_sampled_profile(index);
}
inline ::metrics::SampledProfile* ChromeUserMetricsExtension::_internal_add_sampled_profile() {
  return sampled_profile_.Add();
}
inline ::metrics::SampledProfile* ChromeUserMetricsExtension::add_sampled_profile() {
  ::metrics::SampledProfile* _add = _internal_add_sampled_profile();
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.sampled_profile)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SampledProfile >&
ChromeUserMetricsExtension::sampled_profile() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.sampled_profile)
  return sampled_profile_;
}

// optional .metrics.CastLogsProto cast_logs = 12;
inline bool ChromeUserMetricsExtension::_internal_has_cast_logs() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cast_logs_ != nullptr);
  return value;
}
inline bool ChromeUserMetricsExtension::has_cast_logs() const {
  return _internal_has_cast_logs();
}
inline const ::metrics::CastLogsProto& ChromeUserMetricsExtension::_internal_cast_logs() const {
  const ::metrics::CastLogsProto* p = cast_logs_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::CastLogsProto&>(
      ::metrics::_CastLogsProto_default_instance_);
}
inline const ::metrics::CastLogsProto& ChromeUserMetricsExtension::cast_logs() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.cast_logs)
  return _internal_cast_logs();
}
inline void ChromeUserMetricsExtension::unsafe_arena_set_allocated_cast_logs(
    ::metrics::CastLogsProto* cast_logs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cast_logs_);
  }
  cast_logs_ = cast_logs;
  if (cast_logs) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.ChromeUserMetricsExtension.cast_logs)
}
inline ::metrics::CastLogsProto* ChromeUserMetricsExtension::release_cast_logs() {
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::CastLogsProto* temp = cast_logs_;
  cast_logs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::CastLogsProto* ChromeUserMetricsExtension::unsafe_arena_release_cast_logs() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.cast_logs)
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::CastLogsProto* temp = cast_logs_;
  cast_logs_ = nullptr;
  return temp;
}
inline ::metrics::CastLogsProto* ChromeUserMetricsExtension::_internal_mutable_cast_logs() {
  _has_bits_[0] |= 0x00000002u;
  if (cast_logs_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::CastLogsProto>(GetArenaForAllocation());
    cast_logs_ = p;
  }
  return cast_logs_;
}
inline ::metrics::CastLogsProto* ChromeUserMetricsExtension::mutable_cast_logs() {
  ::metrics::CastLogsProto* _msg = _internal_mutable_cast_logs();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.cast_logs)
  return _msg;
}
inline void ChromeUserMetricsExtension::set_allocated_cast_logs(::metrics::CastLogsProto* cast_logs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cast_logs_);
  }
  if (cast_logs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cast_logs));
    if (message_arena != submessage_arena) {
      cast_logs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cast_logs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cast_logs_ = cast_logs;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.cast_logs)
}

// optional .metrics.ReportingInfo reporting_info = 17;
inline bool ChromeUserMetricsExtension::_internal_has_reporting_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || reporting_info_ != nullptr);
  return value;
}
inline bool ChromeUserMetricsExtension::has_reporting_info() const {
  return _internal_has_reporting_info();
}
inline const ::metrics::ReportingInfo& ChromeUserMetricsExtension::_internal_reporting_info() const {
  const ::metrics::ReportingInfo* p = reporting_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::ReportingInfo&>(
      ::metrics::_ReportingInfo_default_instance_);
}
inline const ::metrics::ReportingInfo& ChromeUserMetricsExtension::reporting_info() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.reporting_info)
  return _internal_reporting_info();
}
inline void ChromeUserMetricsExtension::unsafe_arena_set_allocated_reporting_info(
    ::metrics::ReportingInfo* reporting_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reporting_info_);
  }
  reporting_info_ = reporting_info;
  if (reporting_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.ChromeUserMetricsExtension.reporting_info)
}
inline ::metrics::ReportingInfo* ChromeUserMetricsExtension::release_reporting_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::metrics::ReportingInfo* temp = reporting_info_;
  reporting_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::ReportingInfo* ChromeUserMetricsExtension::unsafe_arena_release_reporting_info() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.reporting_info)
  _has_bits_[0] &= ~0x00000004u;
  ::metrics::ReportingInfo* temp = reporting_info_;
  reporting_info_ = nullptr;
  return temp;
}
inline ::metrics::ReportingInfo* ChromeUserMetricsExtension::_internal_mutable_reporting_info() {
  _has_bits_[0] |= 0x00000004u;
  if (reporting_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::ReportingInfo>(GetArenaForAllocation());
    reporting_info_ = p;
  }
  return reporting_info_;
}
inline ::metrics::ReportingInfo* ChromeUserMetricsExtension::mutable_reporting_info() {
  ::metrics::ReportingInfo* _msg = _internal_mutable_reporting_info();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.reporting_info)
  return _msg;
}
inline void ChromeUserMetricsExtension::set_allocated_reporting_info(::metrics::ReportingInfo* reporting_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reporting_info_);
  }
  if (reporting_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reporting_info));
    if (message_arena != submessage_arena) {
      reporting_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reporting_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reporting_info_ = reporting_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.reporting_info)
}

// repeated .metrics.TraceLog trace_log = 19;
inline int ChromeUserMetricsExtension::_internal_trace_log_size() const {
  return trace_log_.size();
}
inline int ChromeUserMetricsExtension::trace_log_size() const {
  return _internal_trace_log_size();
}
inline ::metrics::TraceLog* ChromeUserMetricsExtension::mutable_trace_log(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.trace_log)
  return trace_log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TraceLog >*
ChromeUserMetricsExtension::mutable_trace_log() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.trace_log)
  return &trace_log_;
}
inline const ::metrics::TraceLog& ChromeUserMetricsExtension::_internal_trace_log(int index) const {
  return trace_log_.Get(index);
}
inline const ::metrics::TraceLog& ChromeUserMetricsExtension::trace_log(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.trace_log)
  return _internal_trace_log(index);
}
inline ::metrics::TraceLog* ChromeUserMetricsExtension::_internal_add_trace_log() {
  return trace_log_.Add();
}
inline ::metrics::TraceLog* ChromeUserMetricsExtension::add_trace_log() {
  ::metrics::TraceLog* _add = _internal_add_trace_log();
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.trace_log)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TraceLog >&
ChromeUserMetricsExtension::trace_log() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.trace_log)
  return trace_log_;
}

// optional .metrics.CustomTabSessionProto custom_tab_session = 27;
inline bool ChromeUserMetricsExtension::_internal_has_custom_tab_session() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || custom_tab_session_ != nullptr);
  return value;
}
inline bool ChromeUserMetricsExtension::has_custom_tab_session() const {
  return _internal_has_custom_tab_session();
}
inline const ::metrics::CustomTabSessionProto& ChromeUserMetricsExtension::_internal_custom_tab_session() const {
  const ::metrics::CustomTabSessionProto* p = custom_tab_session_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::CustomTabSessionProto&>(
      ::metrics::_CustomTabSessionProto_default_instance_);
}
inline const ::metrics::CustomTabSessionProto& ChromeUserMetricsExtension::custom_tab_session() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.custom_tab_session)
  return _internal_custom_tab_session();
}
inline void ChromeUserMetricsExtension::unsafe_arena_set_allocated_custom_tab_session(
    ::metrics::CustomTabSessionProto* custom_tab_session) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_tab_session_);
  }
  custom_tab_session_ = custom_tab_session;
  if (custom_tab_session) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.ChromeUserMetricsExtension.custom_tab_session)
}
inline ::metrics::CustomTabSessionProto* ChromeUserMetricsExtension::release_custom_tab_session() {
  _has_bits_[0] &= ~0x00000080u;
  ::metrics::CustomTabSessionProto* temp = custom_tab_session_;
  custom_tab_session_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::CustomTabSessionProto* ChromeUserMetricsExtension::unsafe_arena_release_custom_tab_session() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.custom_tab_session)
  _has_bits_[0] &= ~0x00000080u;
  ::metrics::CustomTabSessionProto* temp = custom_tab_session_;
  custom_tab_session_ = nullptr;
  return temp;
}
inline ::metrics::CustomTabSessionProto* ChromeUserMetricsExtension::_internal_mutable_custom_tab_session() {
  _has_bits_[0] |= 0x00000080u;
  if (custom_tab_session_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::CustomTabSessionProto>(GetArenaForAllocation());
    custom_tab_session_ = p;
  }
  return custom_tab_session_;
}
inline ::metrics::CustomTabSessionProto* ChromeUserMetricsExtension::mutable_custom_tab_session() {
  ::metrics::CustomTabSessionProto* _msg = _internal_mutable_custom_tab_session();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.custom_tab_session)
  return _msg;
}
inline void ChromeUserMetricsExtension::set_allocated_custom_tab_session(::metrics::CustomTabSessionProto* custom_tab_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_tab_session_);
  }
  if (custom_tab_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_tab_session));
    if (message_arena != submessage_arena) {
      custom_tab_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_tab_session, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  custom_tab_session_ = custom_tab_session;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.custom_tab_session)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::ChromeUserMetricsExtension_Product> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chrome_5fuser_5fmetrics_5fextension_2eproto
