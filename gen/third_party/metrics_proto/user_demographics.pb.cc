// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_demographics.proto

#include "user_demographics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR UserDemographicsProto::UserDemographicsProto(
    ::_pbi::ConstantInitialized)
  : birth_year_(0)
  , gender_(0)
{}
struct UserDemographicsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDemographicsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDemographicsProtoDefaultTypeInternal() {}
  union {
    UserDemographicsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDemographicsProtoDefaultTypeInternal _UserDemographicsProto_default_instance_;
}  // namespace metrics
namespace metrics {
bool UserDemographicsProto_Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UserDemographicsProto_Gender_strings[4] = {};

static const char UserDemographicsProto_Gender_names[] =
  "GENDER_CUSTOM_OR_OTHER"
  "GENDER_FEMALE"
  "GENDER_MALE"
  "GENDER_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UserDemographicsProto_Gender_entries[] = {
  { {UserDemographicsProto_Gender_names + 0, 22}, 3 },
  { {UserDemographicsProto_Gender_names + 22, 13}, 2 },
  { {UserDemographicsProto_Gender_names + 35, 11}, 1 },
  { {UserDemographicsProto_Gender_names + 46, 14}, 0 },
};

static const int UserDemographicsProto_Gender_entries_by_number[] = {
  3, // 0 -> GENDER_UNKNOWN
  2, // 1 -> GENDER_MALE
  1, // 2 -> GENDER_FEMALE
  0, // 3 -> GENDER_CUSTOM_OR_OTHER
};

const std::string& UserDemographicsProto_Gender_Name(
    UserDemographicsProto_Gender value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UserDemographicsProto_Gender_entries,
          UserDemographicsProto_Gender_entries_by_number,
          4, UserDemographicsProto_Gender_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UserDemographicsProto_Gender_entries,
      UserDemographicsProto_Gender_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UserDemographicsProto_Gender_strings[idx].get();
}
bool UserDemographicsProto_Gender_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserDemographicsProto_Gender* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UserDemographicsProto_Gender_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<UserDemographicsProto_Gender>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UserDemographicsProto_Gender UserDemographicsProto::GENDER_UNKNOWN;
constexpr UserDemographicsProto_Gender UserDemographicsProto::GENDER_MALE;
constexpr UserDemographicsProto_Gender UserDemographicsProto::GENDER_FEMALE;
constexpr UserDemographicsProto_Gender UserDemographicsProto::GENDER_CUSTOM_OR_OTHER;
constexpr UserDemographicsProto_Gender UserDemographicsProto::Gender_MIN;
constexpr UserDemographicsProto_Gender UserDemographicsProto::Gender_MAX;
constexpr int UserDemographicsProto::Gender_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class UserDemographicsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDemographicsProto>()._has_bits_);
  static void set_has_birth_year(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gender(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserDemographicsProto::UserDemographicsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.UserDemographicsProto)
}
UserDemographicsProto::UserDemographicsProto(const UserDemographicsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&birth_year_, &from.birth_year_,
    static_cast<size_t>(reinterpret_cast<char*>(&gender_) -
    reinterpret_cast<char*>(&birth_year_)) + sizeof(gender_));
  // @@protoc_insertion_point(copy_constructor:metrics.UserDemographicsProto)
}

inline void UserDemographicsProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&birth_year_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gender_) -
    reinterpret_cast<char*>(&birth_year_)) + sizeof(gender_));
}

UserDemographicsProto::~UserDemographicsProto() {
  // @@protoc_insertion_point(destructor:metrics.UserDemographicsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserDemographicsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserDemographicsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserDemographicsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.UserDemographicsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&birth_year_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gender_) -
        reinterpret_cast<char*>(&birth_year_)) + sizeof(gender_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UserDemographicsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 birth_year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_birth_year(&has_bits);
          birth_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.UserDemographicsProto.Gender gender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::UserDemographicsProto_Gender_IsValid(val))) {
            _internal_set_gender(static_cast<::metrics::UserDemographicsProto_Gender>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserDemographicsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.UserDemographicsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 birth_year = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_birth_year(), target);
  }

  // optional .metrics.UserDemographicsProto.Gender gender = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.UserDemographicsProto)
  return target;
}

size_t UserDemographicsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.UserDemographicsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 birth_year = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_birth_year());
    }

    // optional .metrics.UserDemographicsProto.Gender gender = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gender());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDemographicsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UserDemographicsProto*>(
      &from));
}

void UserDemographicsProto::MergeFrom(const UserDemographicsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.UserDemographicsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      birth_year_ = from.birth_year_;
    }
    if (cached_has_bits & 0x00000002u) {
      gender_ = from.gender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UserDemographicsProto::CopyFrom(const UserDemographicsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.UserDemographicsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDemographicsProto::IsInitialized() const {
  return true;
}

void UserDemographicsProto::InternalSwap(UserDemographicsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDemographicsProto, gender_)
      + sizeof(UserDemographicsProto::gender_)
      - PROTOBUF_FIELD_OFFSET(UserDemographicsProto, birth_year_)>(
          reinterpret_cast<char*>(&birth_year_),
          reinterpret_cast<char*>(&other->birth_year_));
}

std::string UserDemographicsProto::GetTypeName() const {
  return "metrics.UserDemographicsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::UserDemographicsProto*
Arena::CreateMaybeMessage< ::metrics::UserDemographicsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::UserDemographicsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
