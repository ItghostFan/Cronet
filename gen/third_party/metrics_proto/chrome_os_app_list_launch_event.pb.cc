// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_os_app_list_launch_event.proto

#include "chrome_os_app_list_launch_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR ChromeOSAppListLaunchEventProto::ChromeOSAppListLaunchEventProto(
    ::_pbi::ConstantInitialized)
  : recurrence_ranker_user_id_(uint64_t{0u})
  , launch_type_(0)

  , hour_(0)
  , hashed_target_(uint64_t{0u})
  , hashed_query_(uint64_t{0u})
  , search_query_length_(0)
  , search_provider_type_(0)

  , hashed_domain_(uint64_t{0u})
  , hashed_app_(uint64_t{0u}){}
struct ChromeOSAppListLaunchEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeOSAppListLaunchEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeOSAppListLaunchEventProtoDefaultTypeInternal() {}
  union {
    ChromeOSAppListLaunchEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeOSAppListLaunchEventProtoDefaultTypeInternal _ChromeOSAppListLaunchEventProto_default_instance_;
}  // namespace metrics
namespace metrics {
bool ChromeOSAppListLaunchEventProto_LaunchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeOSAppListLaunchEventProto_LaunchType_strings[3] = {};

static const char ChromeOSAppListLaunchEventProto_LaunchType_names[] =
  "APP_TILES"
  "LAUNCH_TYPE_UNSPECIFIED"
  "RESULTS_LIST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeOSAppListLaunchEventProto_LaunchType_entries[] = {
  { {ChromeOSAppListLaunchEventProto_LaunchType_names + 0, 9}, 1 },
  { {ChromeOSAppListLaunchEventProto_LaunchType_names + 9, 23}, 0 },
  { {ChromeOSAppListLaunchEventProto_LaunchType_names + 32, 12}, 2 },
};

static const int ChromeOSAppListLaunchEventProto_LaunchType_entries_by_number[] = {
  1, // 0 -> LAUNCH_TYPE_UNSPECIFIED
  0, // 1 -> APP_TILES
  2, // 2 -> RESULTS_LIST
};

const std::string& ChromeOSAppListLaunchEventProto_LaunchType_Name(
    ChromeOSAppListLaunchEventProto_LaunchType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeOSAppListLaunchEventProto_LaunchType_entries,
          ChromeOSAppListLaunchEventProto_LaunchType_entries_by_number,
          3, ChromeOSAppListLaunchEventProto_LaunchType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeOSAppListLaunchEventProto_LaunchType_entries,
      ChromeOSAppListLaunchEventProto_LaunchType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeOSAppListLaunchEventProto_LaunchType_strings[idx].get();
}
bool ChromeOSAppListLaunchEventProto_LaunchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeOSAppListLaunchEventProto_LaunchType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeOSAppListLaunchEventProto_LaunchType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ChromeOSAppListLaunchEventProto_LaunchType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeOSAppListLaunchEventProto_LaunchType ChromeOSAppListLaunchEventProto::LAUNCH_TYPE_UNSPECIFIED;
constexpr ChromeOSAppListLaunchEventProto_LaunchType ChromeOSAppListLaunchEventProto::APP_TILES;
constexpr ChromeOSAppListLaunchEventProto_LaunchType ChromeOSAppListLaunchEventProto::RESULTS_LIST;
constexpr ChromeOSAppListLaunchEventProto_LaunchType ChromeOSAppListLaunchEventProto::LaunchType_MIN;
constexpr ChromeOSAppListLaunchEventProto_LaunchType ChromeOSAppListLaunchEventProto::LaunchType_MAX;
constexpr int ChromeOSAppListLaunchEventProto::LaunchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeOSAppListLaunchEventProto_SearchProviderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeOSAppListLaunchEventProto_SearchProviderType_strings[4] = {};

static const char ChromeOSAppListLaunchEventProto_SearchProviderType_names[] =
  "DRIVE_QUICK_ACCESS"
  "OMNIBOX"
  "PROVIDER_UNSPECIFIED"
  "ZERO_STATE_FILE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeOSAppListLaunchEventProto_SearchProviderType_entries[] = {
  { {ChromeOSAppListLaunchEventProto_SearchProviderType_names + 0, 18}, 3 },
  { {ChromeOSAppListLaunchEventProto_SearchProviderType_names + 18, 7}, 1 },
  { {ChromeOSAppListLaunchEventProto_SearchProviderType_names + 25, 20}, 0 },
  { {ChromeOSAppListLaunchEventProto_SearchProviderType_names + 45, 15}, 2 },
};

static const int ChromeOSAppListLaunchEventProto_SearchProviderType_entries_by_number[] = {
  2, // 0 -> PROVIDER_UNSPECIFIED
  1, // 1 -> OMNIBOX
  3, // 2 -> ZERO_STATE_FILE
  0, // 3 -> DRIVE_QUICK_ACCESS
};

const std::string& ChromeOSAppListLaunchEventProto_SearchProviderType_Name(
    ChromeOSAppListLaunchEventProto_SearchProviderType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeOSAppListLaunchEventProto_SearchProviderType_entries,
          ChromeOSAppListLaunchEventProto_SearchProviderType_entries_by_number,
          4, ChromeOSAppListLaunchEventProto_SearchProviderType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeOSAppListLaunchEventProto_SearchProviderType_entries,
      ChromeOSAppListLaunchEventProto_SearchProviderType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeOSAppListLaunchEventProto_SearchProviderType_strings[idx].get();
}
bool ChromeOSAppListLaunchEventProto_SearchProviderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeOSAppListLaunchEventProto_SearchProviderType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeOSAppListLaunchEventProto_SearchProviderType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeOSAppListLaunchEventProto_SearchProviderType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::PROVIDER_UNSPECIFIED;
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::OMNIBOX;
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::ZERO_STATE_FILE;
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::DRIVE_QUICK_ACCESS;
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::SearchProviderType_MIN;
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::SearchProviderType_MAX;
constexpr int ChromeOSAppListLaunchEventProto::SearchProviderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChromeOSAppListLaunchEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeOSAppListLaunchEventProto>()._has_bits_);
  static void set_has_recurrence_ranker_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_launch_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_search_query_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hashed_target(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hashed_query(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hashed_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hashed_app(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_search_provider_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ChromeOSAppListLaunchEventProto::ChromeOSAppListLaunchEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.ChromeOSAppListLaunchEventProto)
}
ChromeOSAppListLaunchEventProto::ChromeOSAppListLaunchEventProto(const ChromeOSAppListLaunchEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&recurrence_ranker_user_id_, &from.recurrence_ranker_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hashed_app_) -
    reinterpret_cast<char*>(&recurrence_ranker_user_id_)) + sizeof(hashed_app_));
  // @@protoc_insertion_point(copy_constructor:metrics.ChromeOSAppListLaunchEventProto)
}

inline void ChromeOSAppListLaunchEventProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&recurrence_ranker_user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hashed_app_) -
    reinterpret_cast<char*>(&recurrence_ranker_user_id_)) + sizeof(hashed_app_));
}

ChromeOSAppListLaunchEventProto::~ChromeOSAppListLaunchEventProto() {
  // @@protoc_insertion_point(destructor:metrics.ChromeOSAppListLaunchEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeOSAppListLaunchEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeOSAppListLaunchEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeOSAppListLaunchEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ChromeOSAppListLaunchEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&recurrence_ranker_user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hashed_domain_) -
        reinterpret_cast<char*>(&recurrence_ranker_user_id_)) + sizeof(hashed_domain_));
  }
  hashed_app_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeOSAppListLaunchEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 recurrence_ranker_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_recurrence_ranker_user_id(&has_bits);
          recurrence_ranker_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.ChromeOSAppListLaunchEventProto.LaunchType launch_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::ChromeOSAppListLaunchEventProto_LaunchType_IsValid(val))) {
            _internal_set_launch_type(static_cast<::metrics::ChromeOSAppListLaunchEventProto_LaunchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 hour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hour(&has_bits);
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 search_query_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_search_query_length(&has_bits);
          search_query_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 hashed_target = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_hashed_target(&has_bits);
          hashed_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 hashed_query = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_hashed_query(&has_bits);
          hashed_query_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 hashed_domain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_hashed_domain(&has_bits);
          hashed_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 hashed_app = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_hashed_app(&has_bits);
          hashed_app_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.ChromeOSAppListLaunchEventProto.SearchProviderType search_provider_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::ChromeOSAppListLaunchEventProto_SearchProviderType_IsValid(val))) {
            _internal_set_search_provider_type(static_cast<::metrics::ChromeOSAppListLaunchEventProto_SearchProviderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeOSAppListLaunchEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.ChromeOSAppListLaunchEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 recurrence_ranker_user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_recurrence_ranker_user_id(), target);
  }

  // optional .metrics.ChromeOSAppListLaunchEventProto.LaunchType launch_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_launch_type(), target);
  }

  // optional int32 hour = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hour(), target);
  }

  // optional int32 search_query_length = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_search_query_length(), target);
  }

  // optional fixed64 hashed_target = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_hashed_target(), target);
  }

  // optional fixed64 hashed_query = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_hashed_query(), target);
  }

  // optional fixed64 hashed_domain = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(7, this->_internal_hashed_domain(), target);
  }

  // optional fixed64 hashed_app = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(8, this->_internal_hashed_app(), target);
  }

  // optional .metrics.ChromeOSAppListLaunchEventProto.SearchProviderType search_provider_type = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_search_provider_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.ChromeOSAppListLaunchEventProto)
  return target;
}

size_t ChromeOSAppListLaunchEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ChromeOSAppListLaunchEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 recurrence_ranker_user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .metrics.ChromeOSAppListLaunchEventProto.LaunchType launch_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_launch_type());
    }

    // optional int32 hour = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hour());
    }

    // optional fixed64 hashed_target = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 hashed_query = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 search_query_length = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_search_query_length());
    }

    // optional .metrics.ChromeOSAppListLaunchEventProto.SearchProviderType search_provider_type = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_search_provider_type());
    }

    // optional fixed64 hashed_domain = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional fixed64 hashed_app = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeOSAppListLaunchEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeOSAppListLaunchEventProto*>(
      &from));
}

void ChromeOSAppListLaunchEventProto::MergeFrom(const ChromeOSAppListLaunchEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.ChromeOSAppListLaunchEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      recurrence_ranker_user_id_ = from.recurrence_ranker_user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      launch_type_ = from.launch_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000008u) {
      hashed_target_ = from.hashed_target_;
    }
    if (cached_has_bits & 0x00000010u) {
      hashed_query_ = from.hashed_query_;
    }
    if (cached_has_bits & 0x00000020u) {
      search_query_length_ = from.search_query_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      search_provider_type_ = from.search_provider_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      hashed_domain_ = from.hashed_domain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_hashed_app(from._internal_hashed_app());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeOSAppListLaunchEventProto::CopyFrom(const ChromeOSAppListLaunchEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ChromeOSAppListLaunchEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeOSAppListLaunchEventProto::IsInitialized() const {
  return true;
}

void ChromeOSAppListLaunchEventProto::InternalSwap(ChromeOSAppListLaunchEventProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeOSAppListLaunchEventProto, hashed_app_)
      + sizeof(ChromeOSAppListLaunchEventProto::hashed_app_)
      - PROTOBUF_FIELD_OFFSET(ChromeOSAppListLaunchEventProto, recurrence_ranker_user_id_)>(
          reinterpret_cast<char*>(&recurrence_ranker_user_id_),
          reinterpret_cast<char*>(&other->recurrence_ranker_user_id_));
}

std::string ChromeOSAppListLaunchEventProto::GetTypeName() const {
  return "metrics.ChromeOSAppListLaunchEventProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::ChromeOSAppListLaunchEventProto*
Arena::CreateMaybeMessage< ::metrics::ChromeOSAppListLaunchEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::ChromeOSAppListLaunchEventProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
