// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: printer_event.proto

#include "printer_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR PrinterEventProto::PrinterEventProto(
    ::_pbi::ConstantInitialized)
  : usb_printer_manufacturer_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , usb_printer_model_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ipp_make_and_model_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ppd_identifier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , usb_vendor_id_(0)
  , usb_model_id_(0)
  , user_ppd_(false)
  , event_type_(0)
{}
struct PrinterEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrinterEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrinterEventProtoDefaultTypeInternal() {}
  union {
    PrinterEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrinterEventProtoDefaultTypeInternal _PrinterEventProto_default_instance_;
}  // namespace metrics
namespace metrics {
bool PrinterEventProto_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PrinterEventProto_EventType_strings[5] = {};

static const char PrinterEventProto_EventType_names[] =
  "PRINTER_DELETED"
  "SETUP_ABANDONED"
  "SETUP_AUTOMATIC"
  "SETUP_MANUAL"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PrinterEventProto_EventType_entries[] = {
  { {PrinterEventProto_EventType_names + 0, 15}, 4 },
  { {PrinterEventProto_EventType_names + 15, 15}, 3 },
  { {PrinterEventProto_EventType_names + 30, 15}, 1 },
  { {PrinterEventProto_EventType_names + 45, 12}, 2 },
  { {PrinterEventProto_EventType_names + 57, 7}, 0 },
};

static const int PrinterEventProto_EventType_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  2, // 1 -> SETUP_AUTOMATIC
  3, // 2 -> SETUP_MANUAL
  1, // 3 -> SETUP_ABANDONED
  0, // 4 -> PRINTER_DELETED
};

const std::string& PrinterEventProto_EventType_Name(
    PrinterEventProto_EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PrinterEventProto_EventType_entries,
          PrinterEventProto_EventType_entries_by_number,
          5, PrinterEventProto_EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PrinterEventProto_EventType_entries,
      PrinterEventProto_EventType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PrinterEventProto_EventType_strings[idx].get();
}
bool PrinterEventProto_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PrinterEventProto_EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PrinterEventProto_EventType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<PrinterEventProto_EventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PrinterEventProto_EventType PrinterEventProto::UNKNOWN;
constexpr PrinterEventProto_EventType PrinterEventProto::SETUP_AUTOMATIC;
constexpr PrinterEventProto_EventType PrinterEventProto::SETUP_MANUAL;
constexpr PrinterEventProto_EventType PrinterEventProto::SETUP_ABANDONED;
constexpr PrinterEventProto_EventType PrinterEventProto::PRINTER_DELETED;
constexpr PrinterEventProto_EventType PrinterEventProto::EventType_MIN;
constexpr PrinterEventProto_EventType PrinterEventProto::EventType_MAX;
constexpr int PrinterEventProto::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PrinterEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PrinterEventProto>()._has_bits_);
  static void set_has_usb_printer_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_usb_printer_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_usb_vendor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_usb_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ipp_make_and_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_ppd(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ppd_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

PrinterEventProto::PrinterEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PrinterEventProto)
}
PrinterEventProto::PrinterEventProto(const PrinterEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  usb_printer_manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    usb_printer_manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_usb_printer_manufacturer()) {
    usb_printer_manufacturer_.Set(from._internal_usb_printer_manufacturer(), 
      GetArenaForAllocation());
  }
  usb_printer_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    usb_printer_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_usb_printer_model()) {
    usb_printer_model_.Set(from._internal_usb_printer_model(), 
      GetArenaForAllocation());
  }
  ipp_make_and_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ipp_make_and_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ipp_make_and_model()) {
    ipp_make_and_model_.Set(from._internal_ipp_make_and_model(), 
      GetArenaForAllocation());
  }
  ppd_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ppd_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ppd_identifier()) {
    ppd_identifier_.Set(from._internal_ppd_identifier(), 
      GetArenaForAllocation());
  }
  ::memcpy(&usb_vendor_id_, &from.usb_vendor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&usb_vendor_id_)) + sizeof(event_type_));
  // @@protoc_insertion_point(copy_constructor:metrics.PrinterEventProto)
}

inline void PrinterEventProto::SharedCtor() {
usb_printer_manufacturer_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  usb_printer_manufacturer_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
usb_printer_model_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  usb_printer_model_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ipp_make_and_model_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ipp_make_and_model_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ppd_identifier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ppd_identifier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&usb_vendor_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&usb_vendor_id_)) + sizeof(event_type_));
}

PrinterEventProto::~PrinterEventProto() {
  // @@protoc_insertion_point(destructor:metrics.PrinterEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrinterEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  usb_printer_manufacturer_.Destroy();
  usb_printer_model_.Destroy();
  ipp_make_and_model_.Destroy();
  ppd_identifier_.Destroy();
}

void PrinterEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrinterEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PrinterEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      usb_printer_manufacturer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      usb_printer_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ipp_make_and_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ppd_identifier_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&usb_vendor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_type_) -
        reinterpret_cast<char*>(&usb_vendor_id_)) + sizeof(event_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PrinterEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string usb_printer_manufacturer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_usb_printer_manufacturer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string usb_printer_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_usb_printer_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 usb_vendor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_usb_vendor_id(&has_bits);
          usb_vendor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 usb_model_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_usb_model_id(&has_bits);
          usb_model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ipp_make_and_model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ipp_make_and_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool user_ppd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_user_ppd(&has_bits);
          user_ppd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ppd_identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ppd_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.PrinterEventProto.EventType event_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::PrinterEventProto_EventType_IsValid(val))) {
            _internal_set_event_type(static_cast<::metrics::PrinterEventProto_EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrinterEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PrinterEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string usb_printer_manufacturer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_usb_printer_manufacturer(), target);
  }

  // optional string usb_printer_model = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_usb_printer_model(), target);
  }

  // optional int32 usb_vendor_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_usb_vendor_id(), target);
  }

  // optional int32 usb_model_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_usb_model_id(), target);
  }

  // optional string ipp_make_and_model = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ipp_make_and_model(), target);
  }

  // optional bool user_ppd = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_user_ppd(), target);
  }

  // optional string ppd_identifier = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ppd_identifier(), target);
  }

  // optional .metrics.PrinterEventProto.EventType event_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PrinterEventProto)
  return target;
}

size_t PrinterEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PrinterEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string usb_printer_manufacturer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_usb_printer_manufacturer());
    }

    // optional string usb_printer_model = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_usb_printer_model());
    }

    // optional string ipp_make_and_model = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipp_make_and_model());
    }

    // optional string ppd_identifier = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ppd_identifier());
    }

    // optional int32 usb_vendor_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usb_vendor_id());
    }

    // optional int32 usb_model_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usb_model_id());
    }

    // optional bool user_ppd = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .metrics.PrinterEventProto.EventType event_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrinterEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrinterEventProto*>(
      &from));
}

void PrinterEventProto::MergeFrom(const PrinterEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PrinterEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_usb_printer_manufacturer(from._internal_usb_printer_manufacturer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_usb_printer_model(from._internal_usb_printer_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ipp_make_and_model(from._internal_ipp_make_and_model());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ppd_identifier(from._internal_ppd_identifier());
    }
    if (cached_has_bits & 0x00000010u) {
      usb_vendor_id_ = from.usb_vendor_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      usb_model_id_ = from.usb_model_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      user_ppd_ = from.user_ppd_;
    }
    if (cached_has_bits & 0x00000080u) {
      event_type_ = from.event_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrinterEventProto::CopyFrom(const PrinterEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PrinterEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrinterEventProto::IsInitialized() const {
  return true;
}

void PrinterEventProto::InternalSwap(PrinterEventProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &usb_printer_manufacturer_, lhs_arena,
      &other->usb_printer_manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &usb_printer_model_, lhs_arena,
      &other->usb_printer_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ipp_make_and_model_, lhs_arena,
      &other->ipp_make_and_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ppd_identifier_, lhs_arena,
      &other->ppd_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrinterEventProto, event_type_)
      + sizeof(PrinterEventProto::event_type_)
      - PROTOBUF_FIELD_OFFSET(PrinterEventProto, usb_vendor_id_)>(
          reinterpret_cast<char*>(&usb_vendor_id_),
          reinterpret_cast<char*>(&other->usb_vendor_id_));
}

std::string PrinterEventProto::GetTypeName() const {
  return "metrics.PrinterEventProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::PrinterEventProto*
Arena::CreateMaybeMessage< ::metrics::PrinterEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PrinterEventProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
