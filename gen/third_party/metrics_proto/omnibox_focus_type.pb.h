// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: omnibox_focus_type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_omnibox_5ffocus_5ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_omnibox_5ffocus_5ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_omnibox_5ffocus_5ftype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_omnibox_5ffocus_5ftype_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum OmniboxFocusType : int {
  INTERACTION_DEFAULT = 0,
  INTERACTION_FOCUS = 1,
  INTERACTION_CLOBBER = 2
};
bool OmniboxFocusType_IsValid(int value);
constexpr OmniboxFocusType OmniboxFocusType_MIN = INTERACTION_DEFAULT;
constexpr OmniboxFocusType OmniboxFocusType_MAX = INTERACTION_CLOBBER;
constexpr int OmniboxFocusType_ARRAYSIZE = OmniboxFocusType_MAX + 1;

const std::string& OmniboxFocusType_Name(OmniboxFocusType value);
template<typename T>
inline const std::string& OmniboxFocusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OmniboxFocusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OmniboxFocusType_Name.");
  return OmniboxFocusType_Name(static_cast<OmniboxFocusType>(enum_t_value));
}
bool OmniboxFocusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OmniboxFocusType* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::OmniboxFocusType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_omnibox_5ffocus_5ftype_2eproto
