// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: call_stack_profile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_call_5fstack_5fprofile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_call_5fstack_5fprofile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "execution_context.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_call_5fstack_5fprofile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_call_5fstack_5fprofile_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class CallStackProfile;
struct CallStackProfileDefaultTypeInternal;
extern CallStackProfileDefaultTypeInternal _CallStackProfile_default_instance_;
class CallStackProfile_AsyncBacktrace;
struct CallStackProfile_AsyncBacktraceDefaultTypeInternal;
extern CallStackProfile_AsyncBacktraceDefaultTypeInternal _CallStackProfile_AsyncBacktrace_default_instance_;
class CallStackProfile_Location;
struct CallStackProfile_LocationDefaultTypeInternal;
extern CallStackProfile_LocationDefaultTypeInternal _CallStackProfile_Location_default_instance_;
class CallStackProfile_MetadataItem;
struct CallStackProfile_MetadataItemDefaultTypeInternal;
extern CallStackProfile_MetadataItemDefaultTypeInternal _CallStackProfile_MetadataItem_default_instance_;
class CallStackProfile_ModuleIdentifier;
struct CallStackProfile_ModuleIdentifierDefaultTypeInternal;
extern CallStackProfile_ModuleIdentifierDefaultTypeInternal _CallStackProfile_ModuleIdentifier_default_instance_;
class CallStackProfile_Sample;
struct CallStackProfile_SampleDefaultTypeInternal;
extern CallStackProfile_SampleDefaultTypeInternal _CallStackProfile_Sample_default_instance_;
class CallStackProfile_Stack;
struct CallStackProfile_StackDefaultTypeInternal;
extern CallStackProfile_StackDefaultTypeInternal _CallStackProfile_Stack_default_instance_;
class CallStackProfile_StackSample;
struct CallStackProfile_StackSampleDefaultTypeInternal;
extern CallStackProfile_StackSampleDefaultTypeInternal _CallStackProfile_StackSample_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::CallStackProfile* Arena::CreateMaybeMessage<::metrics::CallStackProfile>(Arena*);
template<> ::metrics::CallStackProfile_AsyncBacktrace* Arena::CreateMaybeMessage<::metrics::CallStackProfile_AsyncBacktrace>(Arena*);
template<> ::metrics::CallStackProfile_Location* Arena::CreateMaybeMessage<::metrics::CallStackProfile_Location>(Arena*);
template<> ::metrics::CallStackProfile_MetadataItem* Arena::CreateMaybeMessage<::metrics::CallStackProfile_MetadataItem>(Arena*);
template<> ::metrics::CallStackProfile_ModuleIdentifier* Arena::CreateMaybeMessage<::metrics::CallStackProfile_ModuleIdentifier>(Arena*);
template<> ::metrics::CallStackProfile_Sample* Arena::CreateMaybeMessage<::metrics::CallStackProfile_Sample>(Arena*);
template<> ::metrics::CallStackProfile_Stack* Arena::CreateMaybeMessage<::metrics::CallStackProfile_Stack>(Arena*);
template<> ::metrics::CallStackProfile_StackSample* Arena::CreateMaybeMessage<::metrics::CallStackProfile_StackSample>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

// ===================================================================

class CallStackProfile_ModuleIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CallStackProfile.ModuleIdentifier) */ {
 public:
  inline CallStackProfile_ModuleIdentifier() : CallStackProfile_ModuleIdentifier(nullptr) {}
  ~CallStackProfile_ModuleIdentifier() override;
  explicit PROTOBUF_CONSTEXPR CallStackProfile_ModuleIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallStackProfile_ModuleIdentifier(const CallStackProfile_ModuleIdentifier& from);
  CallStackProfile_ModuleIdentifier(CallStackProfile_ModuleIdentifier&& from) noexcept
    : CallStackProfile_ModuleIdentifier() {
    *this = ::std::move(from);
  }

  inline CallStackProfile_ModuleIdentifier& operator=(const CallStackProfile_ModuleIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallStackProfile_ModuleIdentifier& operator=(CallStackProfile_ModuleIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallStackProfile_ModuleIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallStackProfile_ModuleIdentifier* internal_default_instance() {
    return reinterpret_cast<const CallStackProfile_ModuleIdentifier*>(
               &_CallStackProfile_ModuleIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CallStackProfile_ModuleIdentifier& a, CallStackProfile_ModuleIdentifier& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CallStackProfile_ModuleIdentifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallStackProfile_ModuleIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallStackProfile_ModuleIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallStackProfile_ModuleIdentifier>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallStackProfile_ModuleIdentifier& from);
  void MergeFrom(const CallStackProfile_ModuleIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallStackProfile_ModuleIdentifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CallStackProfile.ModuleIdentifier";
  }
  protected:
  explicit CallStackProfile_ModuleIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildIdFieldNumber = 1,
    kNameMd5PrefixFieldNumber = 2,
  };
  // optional string build_id = 1;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  const std::string& build_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_build_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_build_id();
  PROTOBUF_NODISCARD std::string* release_build_id();
  void set_allocated_build_id(std::string* build_id);
  private:
  const std::string& _internal_build_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build_id(const std::string& value);
  std::string* _internal_mutable_build_id();
  public:

  // optional fixed64 name_md5_prefix = 2;
  bool has_name_md5_prefix() const;
  private:
  bool _internal_has_name_md5_prefix() const;
  public:
  void clear_name_md5_prefix();
  uint64_t name_md5_prefix() const;
  void set_name_md5_prefix(uint64_t value);
  private:
  uint64_t _internal_name_md5_prefix() const;
  void _internal_set_name_md5_prefix(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.CallStackProfile.ModuleIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_id_;
  uint64_t name_md5_prefix_;
  friend struct ::TableStruct_call_5fstack_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class CallStackProfile_Location final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CallStackProfile.Location) */ {
 public:
  inline CallStackProfile_Location() : CallStackProfile_Location(nullptr) {}
  ~CallStackProfile_Location() override;
  explicit PROTOBUF_CONSTEXPR CallStackProfile_Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallStackProfile_Location(const CallStackProfile_Location& from);
  CallStackProfile_Location(CallStackProfile_Location&& from) noexcept
    : CallStackProfile_Location() {
    *this = ::std::move(from);
  }

  inline CallStackProfile_Location& operator=(const CallStackProfile_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallStackProfile_Location& operator=(CallStackProfile_Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallStackProfile_Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallStackProfile_Location* internal_default_instance() {
    return reinterpret_cast<const CallStackProfile_Location*>(
               &_CallStackProfile_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CallStackProfile_Location& a, CallStackProfile_Location& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CallStackProfile_Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallStackProfile_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallStackProfile_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallStackProfile_Location>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallStackProfile_Location& from);
  void MergeFrom(const CallStackProfile_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallStackProfile_Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CallStackProfile.Location";
  }
  protected:
  explicit CallStackProfile_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kModuleIdIndexFieldNumber = 2,
  };
  // optional uint64 address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // optional int32 module_id_index = 2;
  bool has_module_id_index() const;
  private:
  bool _internal_has_module_id_index() const;
  public:
  void clear_module_id_index();
  int32_t module_id_index() const;
  void set_module_id_index(int32_t value);
  private:
  int32_t _internal_module_id_index() const;
  void _internal_set_module_id_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.CallStackProfile.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t address_;
  int32_t module_id_index_;
  friend struct ::TableStruct_call_5fstack_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class CallStackProfile_Stack final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CallStackProfile.Stack) */ {
 public:
  inline CallStackProfile_Stack() : CallStackProfile_Stack(nullptr) {}
  ~CallStackProfile_Stack() override;
  explicit PROTOBUF_CONSTEXPR CallStackProfile_Stack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallStackProfile_Stack(const CallStackProfile_Stack& from);
  CallStackProfile_Stack(CallStackProfile_Stack&& from) noexcept
    : CallStackProfile_Stack() {
    *this = ::std::move(from);
  }

  inline CallStackProfile_Stack& operator=(const CallStackProfile_Stack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallStackProfile_Stack& operator=(CallStackProfile_Stack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallStackProfile_Stack& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallStackProfile_Stack* internal_default_instance() {
    return reinterpret_cast<const CallStackProfile_Stack*>(
               &_CallStackProfile_Stack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CallStackProfile_Stack& a, CallStackProfile_Stack& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CallStackProfile_Stack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallStackProfile_Stack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallStackProfile_Stack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallStackProfile_Stack>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallStackProfile_Stack& from);
  void MergeFrom(const CallStackProfile_Stack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallStackProfile_Stack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CallStackProfile.Stack";
  }
  protected:
  explicit CallStackProfile_Stack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 1,
  };
  // repeated .metrics.CallStackProfile.Location frame = 1;
  int frame_size() const;
  private:
  int _internal_frame_size() const;
  public:
  void clear_frame();
  ::metrics::CallStackProfile_Location* mutable_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >*
      mutable_frame();
  private:
  const ::metrics::CallStackProfile_Location& _internal_frame(int index) const;
  ::metrics::CallStackProfile_Location* _internal_add_frame();
  public:
  const ::metrics::CallStackProfile_Location& frame(int index) const;
  ::metrics::CallStackProfile_Location* add_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >&
      frame() const;

  // @@protoc_insertion_point(class_scope:metrics.CallStackProfile.Stack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location > frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_call_5fstack_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class CallStackProfile_MetadataItem final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CallStackProfile.MetadataItem) */ {
 public:
  inline CallStackProfile_MetadataItem() : CallStackProfile_MetadataItem(nullptr) {}
  ~CallStackProfile_MetadataItem() override;
  explicit PROTOBUF_CONSTEXPR CallStackProfile_MetadataItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallStackProfile_MetadataItem(const CallStackProfile_MetadataItem& from);
  CallStackProfile_MetadataItem(CallStackProfile_MetadataItem&& from) noexcept
    : CallStackProfile_MetadataItem() {
    *this = ::std::move(from);
  }

  inline CallStackProfile_MetadataItem& operator=(const CallStackProfile_MetadataItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallStackProfile_MetadataItem& operator=(CallStackProfile_MetadataItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallStackProfile_MetadataItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallStackProfile_MetadataItem* internal_default_instance() {
    return reinterpret_cast<const CallStackProfile_MetadataItem*>(
               &_CallStackProfile_MetadataItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CallStackProfile_MetadataItem& a, CallStackProfile_MetadataItem& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CallStackProfile_MetadataItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallStackProfile_MetadataItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallStackProfile_MetadataItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallStackProfile_MetadataItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallStackProfile_MetadataItem& from);
  void MergeFrom(const CallStackProfile_MetadataItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallStackProfile_MetadataItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CallStackProfile.MetadataItem";
  }
  protected:
  explicit CallStackProfile_MetadataItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 3,
    kNameHashIndexFieldNumber = 1,
  };
  // optional sint64 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // optional sint64 key = 3;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  int64_t key() const;
  void set_key(int64_t value);
  private:
  int64_t _internal_key() const;
  void _internal_set_key(int64_t value);
  public:

  // optional int32 name_hash_index = 1;
  bool has_name_hash_index() const;
  private:
  bool _internal_has_name_hash_index() const;
  public:
  void clear_name_hash_index();
  int32_t name_hash_index() const;
  void set_name_hash_index(int32_t value);
  private:
  int32_t _internal_name_hash_index() const;
  void _internal_set_name_hash_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.CallStackProfile.MetadataItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t value_;
  int64_t key_;
  int32_t name_hash_index_;
  friend struct ::TableStruct_call_5fstack_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class CallStackProfile_AsyncBacktrace final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CallStackProfile.AsyncBacktrace) */ {
 public:
  inline CallStackProfile_AsyncBacktrace() : CallStackProfile_AsyncBacktrace(nullptr) {}
  ~CallStackProfile_AsyncBacktrace() override;
  explicit PROTOBUF_CONSTEXPR CallStackProfile_AsyncBacktrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallStackProfile_AsyncBacktrace(const CallStackProfile_AsyncBacktrace& from);
  CallStackProfile_AsyncBacktrace(CallStackProfile_AsyncBacktrace&& from) noexcept
    : CallStackProfile_AsyncBacktrace() {
    *this = ::std::move(from);
  }

  inline CallStackProfile_AsyncBacktrace& operator=(const CallStackProfile_AsyncBacktrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallStackProfile_AsyncBacktrace& operator=(CallStackProfile_AsyncBacktrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallStackProfile_AsyncBacktrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallStackProfile_AsyncBacktrace* internal_default_instance() {
    return reinterpret_cast<const CallStackProfile_AsyncBacktrace*>(
               &_CallStackProfile_AsyncBacktrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CallStackProfile_AsyncBacktrace& a, CallStackProfile_AsyncBacktrace& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CallStackProfile_AsyncBacktrace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallStackProfile_AsyncBacktrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallStackProfile_AsyncBacktrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallStackProfile_AsyncBacktrace>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallStackProfile_AsyncBacktrace& from);
  void MergeFrom(const CallStackProfile_AsyncBacktrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallStackProfile_AsyncBacktrace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CallStackProfile.AsyncBacktrace";
  }
  protected:
  explicit CallStackProfile_AsyncBacktrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
  };
  // repeated .metrics.CallStackProfile.Location location = 1;
  int location_size() const;
  private:
  int _internal_location_size() const;
  public:
  void clear_location();
  ::metrics::CallStackProfile_Location* mutable_location(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >*
      mutable_location();
  private:
  const ::metrics::CallStackProfile_Location& _internal_location(int index) const;
  ::metrics::CallStackProfile_Location* _internal_add_location();
  public:
  const ::metrics::CallStackProfile_Location& location(int index) const;
  ::metrics::CallStackProfile_Location* add_location();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >&
      location() const;

  // @@protoc_insertion_point(class_scope:metrics.CallStackProfile.AsyncBacktrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location > location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_call_5fstack_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class CallStackProfile_Sample final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CallStackProfile.Sample) */ {
 public:
  inline CallStackProfile_Sample() : CallStackProfile_Sample(nullptr) {}
  ~CallStackProfile_Sample() override;
  explicit PROTOBUF_CONSTEXPR CallStackProfile_Sample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallStackProfile_Sample(const CallStackProfile_Sample& from);
  CallStackProfile_Sample(CallStackProfile_Sample&& from) noexcept
    : CallStackProfile_Sample() {
    *this = ::std::move(from);
  }

  inline CallStackProfile_Sample& operator=(const CallStackProfile_Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallStackProfile_Sample& operator=(CallStackProfile_Sample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallStackProfile_Sample& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallStackProfile_Sample* internal_default_instance() {
    return reinterpret_cast<const CallStackProfile_Sample*>(
               &_CallStackProfile_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CallStackProfile_Sample& a, CallStackProfile_Sample& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CallStackProfile_Sample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallStackProfile_Sample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallStackProfile_Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallStackProfile_Sample>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallStackProfile_Sample& from);
  void MergeFrom(const CallStackProfile_Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallStackProfile_Sample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CallStackProfile.Sample";
  }
  protected:
  explicit CallStackProfile_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 1,
    kProcessPhaseFieldNumber = 3,
    kCountFieldNumber = 2,
  };
  // repeated .metrics.CallStackProfile.Location frame = 1;
  int frame_size() const;
  private:
  int _internal_frame_size() const;
  public:
  void clear_frame();
  ::metrics::CallStackProfile_Location* mutable_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >*
      mutable_frame();
  private:
  const ::metrics::CallStackProfile_Location& _internal_frame(int index) const;
  ::metrics::CallStackProfile_Location* _internal_add_frame();
  public:
  const ::metrics::CallStackProfile_Location& frame(int index) const;
  ::metrics::CallStackProfile_Location* add_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >&
      frame() const;

  // repeated .metrics.ProcessPhase process_phase = 3;
  int process_phase_size() const;
  private:
  int _internal_process_phase_size() const;
  public:
  void clear_process_phase();
  private:
  ::metrics::ProcessPhase _internal_process_phase(int index) const;
  void _internal_add_process_phase(::metrics::ProcessPhase value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_process_phase();
  public:
  ::metrics::ProcessPhase process_phase(int index) const;
  void set_process_phase(int index, ::metrics::ProcessPhase value);
  void add_process_phase(::metrics::ProcessPhase value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& process_phase() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_process_phase();

  // optional int64 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.CallStackProfile.Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location > frame_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> process_phase_;
  int64_t count_;
  friend struct ::TableStruct_call_5fstack_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class CallStackProfile_StackSample final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CallStackProfile.StackSample) */ {
 public:
  inline CallStackProfile_StackSample() : CallStackProfile_StackSample(nullptr) {}
  ~CallStackProfile_StackSample() override;
  explicit PROTOBUF_CONSTEXPR CallStackProfile_StackSample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallStackProfile_StackSample(const CallStackProfile_StackSample& from);
  CallStackProfile_StackSample(CallStackProfile_StackSample&& from) noexcept
    : CallStackProfile_StackSample() {
    *this = ::std::move(from);
  }

  inline CallStackProfile_StackSample& operator=(const CallStackProfile_StackSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallStackProfile_StackSample& operator=(CallStackProfile_StackSample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallStackProfile_StackSample& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallStackProfile_StackSample* internal_default_instance() {
    return reinterpret_cast<const CallStackProfile_StackSample*>(
               &_CallStackProfile_StackSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CallStackProfile_StackSample& a, CallStackProfile_StackSample& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CallStackProfile_StackSample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallStackProfile_StackSample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallStackProfile_StackSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallStackProfile_StackSample>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallStackProfile_StackSample& from);
  void MergeFrom(const CallStackProfile_StackSample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallStackProfile_StackSample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CallStackProfile.StackSample";
  }
  protected:
  explicit CallStackProfile_StackSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 5,
    kStackIndexFieldNumber = 1,
    kSampleTimeOffsetMsFieldNumber = 2,
    kContinuedWorkFieldNumber = 3,
    kAsyncBacktraceIndexFieldNumber = 4,
    kWeightFieldNumber = 6,
    kCountFieldNumber = 7,
  };
  // repeated .metrics.CallStackProfile.MetadataItem metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::metrics::CallStackProfile_MetadataItem* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_MetadataItem >*
      mutable_metadata();
  private:
  const ::metrics::CallStackProfile_MetadataItem& _internal_metadata(int index) const;
  ::metrics::CallStackProfile_MetadataItem* _internal_add_metadata();
  public:
  const ::metrics::CallStackProfile_MetadataItem& metadata(int index) const;
  ::metrics::CallStackProfile_MetadataItem* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_MetadataItem >&
      metadata() const;

  // optional int32 stack_index = 1;
  bool has_stack_index() const;
  private:
  bool _internal_has_stack_index() const;
  public:
  void clear_stack_index();
  int32_t stack_index() const;
  void set_stack_index(int32_t value);
  private:
  int32_t _internal_stack_index() const;
  void _internal_set_stack_index(int32_t value);
  public:

  // optional int32 sample_time_offset_ms = 2;
  bool has_sample_time_offset_ms() const;
  private:
  bool _internal_has_sample_time_offset_ms() const;
  public:
  void clear_sample_time_offset_ms();
  int32_t sample_time_offset_ms() const;
  void set_sample_time_offset_ms(int32_t value);
  private:
  int32_t _internal_sample_time_offset_ms() const;
  void _internal_set_sample_time_offset_ms(int32_t value);
  public:

  // optional bool continued_work = 3;
  bool has_continued_work() const;
  private:
  bool _internal_has_continued_work() const;
  public:
  void clear_continued_work();
  bool continued_work() const;
  void set_continued_work(bool value);
  private:
  bool _internal_continued_work() const;
  void _internal_set_continued_work(bool value);
  public:

  // optional int32 async_backtrace_index = 4;
  bool has_async_backtrace_index() const;
  private:
  bool _internal_has_async_backtrace_index() const;
  public:
  void clear_async_backtrace_index();
  int32_t async_backtrace_index() const;
  void set_async_backtrace_index(int32_t value);
  private:
  int32_t _internal_async_backtrace_index() const;
  void _internal_set_async_backtrace_index(int32_t value);
  public:

  // optional int64 weight = 6;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  int64_t weight() const;
  void set_weight(int64_t value);
  private:
  int64_t _internal_weight() const;
  void _internal_set_weight(int64_t value);
  public:

  // optional int64 count = 7 [default = 1];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.CallStackProfile.StackSample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_MetadataItem > metadata_;
  int32_t stack_index_;
  int32_t sample_time_offset_ms_;
  bool continued_work_;
  int32_t async_backtrace_index_;
  int64_t weight_;
  int64_t count_;
  friend struct ::TableStruct_call_5fstack_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class CallStackProfile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CallStackProfile) */ {
 public:
  inline CallStackProfile() : CallStackProfile(nullptr) {}
  ~CallStackProfile() override;
  explicit PROTOBUF_CONSTEXPR CallStackProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallStackProfile(const CallStackProfile& from);
  CallStackProfile(CallStackProfile&& from) noexcept
    : CallStackProfile() {
    *this = ::std::move(from);
  }

  inline CallStackProfile& operator=(const CallStackProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallStackProfile& operator=(CallStackProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallStackProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallStackProfile* internal_default_instance() {
    return reinterpret_cast<const CallStackProfile*>(
               &_CallStackProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CallStackProfile& a, CallStackProfile& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CallStackProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallStackProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallStackProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallStackProfile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallStackProfile& from);
  void MergeFrom(const CallStackProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallStackProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CallStackProfile";
  }
  protected:
  explicit CallStackProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CallStackProfile_ModuleIdentifier ModuleIdentifier;
  typedef CallStackProfile_Location Location;
  typedef CallStackProfile_Stack Stack;
  typedef CallStackProfile_MetadataItem MetadataItem;
  typedef CallStackProfile_AsyncBacktrace AsyncBacktrace;
  typedef CallStackProfile_Sample Sample;
  typedef CallStackProfile_StackSample StackSample;

  // accessors -------------------------------------------------------

  enum : int {
    kDEPRECATEDSampleFieldNumber = 1,
    kModuleIdFieldNumber = 2,
    kMetadataNameHashFieldNumber = 5,
    kProfileMetadataFieldNumber = 6,
    kAsyncBacktraceFieldNumber = 7,
    kStackFieldNumber = 8,
    kStackSampleFieldNumber = 9,
    kProfileDurationMsFieldNumber = 3,
    kSamplingPeriodMsFieldNumber = 4,
    kProfileTimeOffsetMsFieldNumber = 10,
  };
  // repeated .metrics.CallStackProfile.Sample DEPRECATED_sample = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int deprecated_sample_size() const;
  private:
  int _internal_deprecated_sample_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_sample();
  PROTOBUF_DEPRECATED ::metrics::CallStackProfile_Sample* mutable_deprecated_sample(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Sample >*
      mutable_deprecated_sample();
  private:
  const ::metrics::CallStackProfile_Sample& _internal_deprecated_sample(int index) const;
  ::metrics::CallStackProfile_Sample* _internal_add_deprecated_sample();
  public:
  PROTOBUF_DEPRECATED const ::metrics::CallStackProfile_Sample& deprecated_sample(int index) const;
  PROTOBUF_DEPRECATED ::metrics::CallStackProfile_Sample* add_deprecated_sample();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Sample >&
      deprecated_sample() const;

  // repeated .metrics.CallStackProfile.ModuleIdentifier module_id = 2;
  int module_id_size() const;
  private:
  int _internal_module_id_size() const;
  public:
  void clear_module_id();
  ::metrics::CallStackProfile_ModuleIdentifier* mutable_module_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_ModuleIdentifier >*
      mutable_module_id();
  private:
  const ::metrics::CallStackProfile_ModuleIdentifier& _internal_module_id(int index) const;
  ::metrics::CallStackProfile_ModuleIdentifier* _internal_add_module_id();
  public:
  const ::metrics::CallStackProfile_ModuleIdentifier& module_id(int index) const;
  ::metrics::CallStackProfile_ModuleIdentifier* add_module_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_ModuleIdentifier >&
      module_id() const;

  // repeated fixed64 metadata_name_hash = 5;
  int metadata_name_hash_size() const;
  private:
  int _internal_metadata_name_hash_size() const;
  public:
  void clear_metadata_name_hash();
  private:
  uint64_t _internal_metadata_name_hash(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_metadata_name_hash() const;
  void _internal_add_metadata_name_hash(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_metadata_name_hash();
  public:
  uint64_t metadata_name_hash(int index) const;
  void set_metadata_name_hash(int index, uint64_t value);
  void add_metadata_name_hash(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      metadata_name_hash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_metadata_name_hash();

  // repeated .metrics.CallStackProfile.MetadataItem profile_metadata = 6;
  int profile_metadata_size() const;
  private:
  int _internal_profile_metadata_size() const;
  public:
  void clear_profile_metadata();
  ::metrics::CallStackProfile_MetadataItem* mutable_profile_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_MetadataItem >*
      mutable_profile_metadata();
  private:
  const ::metrics::CallStackProfile_MetadataItem& _internal_profile_metadata(int index) const;
  ::metrics::CallStackProfile_MetadataItem* _internal_add_profile_metadata();
  public:
  const ::metrics::CallStackProfile_MetadataItem& profile_metadata(int index) const;
  ::metrics::CallStackProfile_MetadataItem* add_profile_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_MetadataItem >&
      profile_metadata() const;

  // repeated .metrics.CallStackProfile.AsyncBacktrace async_backtrace = 7;
  int async_backtrace_size() const;
  private:
  int _internal_async_backtrace_size() const;
  public:
  void clear_async_backtrace();
  ::metrics::CallStackProfile_AsyncBacktrace* mutable_async_backtrace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_AsyncBacktrace >*
      mutable_async_backtrace();
  private:
  const ::metrics::CallStackProfile_AsyncBacktrace& _internal_async_backtrace(int index) const;
  ::metrics::CallStackProfile_AsyncBacktrace* _internal_add_async_backtrace();
  public:
  const ::metrics::CallStackProfile_AsyncBacktrace& async_backtrace(int index) const;
  ::metrics::CallStackProfile_AsyncBacktrace* add_async_backtrace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_AsyncBacktrace >&
      async_backtrace() const;

  // repeated .metrics.CallStackProfile.Stack stack = 8;
  int stack_size() const;
  private:
  int _internal_stack_size() const;
  public:
  void clear_stack();
  ::metrics::CallStackProfile_Stack* mutable_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Stack >*
      mutable_stack();
  private:
  const ::metrics::CallStackProfile_Stack& _internal_stack(int index) const;
  ::metrics::CallStackProfile_Stack* _internal_add_stack();
  public:
  const ::metrics::CallStackProfile_Stack& stack(int index) const;
  ::metrics::CallStackProfile_Stack* add_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Stack >&
      stack() const;

  // repeated .metrics.CallStackProfile.StackSample stack_sample = 9;
  int stack_sample_size() const;
  private:
  int _internal_stack_sample_size() const;
  public:
  void clear_stack_sample();
  ::metrics::CallStackProfile_StackSample* mutable_stack_sample(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_StackSample >*
      mutable_stack_sample();
  private:
  const ::metrics::CallStackProfile_StackSample& _internal_stack_sample(int index) const;
  ::metrics::CallStackProfile_StackSample* _internal_add_stack_sample();
  public:
  const ::metrics::CallStackProfile_StackSample& stack_sample(int index) const;
  ::metrics::CallStackProfile_StackSample* add_stack_sample();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_StackSample >&
      stack_sample() const;

  // optional int32 profile_duration_ms = 3;
  bool has_profile_duration_ms() const;
  private:
  bool _internal_has_profile_duration_ms() const;
  public:
  void clear_profile_duration_ms();
  int32_t profile_duration_ms() const;
  void set_profile_duration_ms(int32_t value);
  private:
  int32_t _internal_profile_duration_ms() const;
  void _internal_set_profile_duration_ms(int32_t value);
  public:

  // optional int32 sampling_period_ms = 4;
  bool has_sampling_period_ms() const;
  private:
  bool _internal_has_sampling_period_ms() const;
  public:
  void clear_sampling_period_ms();
  int32_t sampling_period_ms() const;
  void set_sampling_period_ms(int32_t value);
  private:
  int32_t _internal_sampling_period_ms() const;
  void _internal_set_sampling_period_ms(int32_t value);
  public:

  // optional int64 profile_time_offset_ms = 10;
  bool has_profile_time_offset_ms() const;
  private:
  bool _internal_has_profile_time_offset_ms() const;
  public:
  void clear_profile_time_offset_ms();
  int64_t profile_time_offset_ms() const;
  void set_profile_time_offset_ms(int64_t value);
  private:
  int64_t _internal_profile_time_offset_ms() const;
  void _internal_set_profile_time_offset_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.CallStackProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Sample > deprecated_sample_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_ModuleIdentifier > module_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > metadata_name_hash_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_MetadataItem > profile_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_AsyncBacktrace > async_backtrace_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Stack > stack_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_StackSample > stack_sample_;
  int32_t profile_duration_ms_;
  int32_t sampling_period_ms_;
  int64_t profile_time_offset_ms_;
  friend struct ::TableStruct_call_5fstack_5fprofile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CallStackProfile_ModuleIdentifier

// optional string build_id = 1;
inline bool CallStackProfile_ModuleIdentifier::_internal_has_build_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CallStackProfile_ModuleIdentifier::has_build_id() const {
  return _internal_has_build_id();
}
inline void CallStackProfile_ModuleIdentifier::clear_build_id() {
  build_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallStackProfile_ModuleIdentifier::build_id() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.ModuleIdentifier.build_id)
  return _internal_build_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallStackProfile_ModuleIdentifier::set_build_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 build_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.ModuleIdentifier.build_id)
}
inline std::string* CallStackProfile_ModuleIdentifier::mutable_build_id() {
  std::string* _s = _internal_mutable_build_id();
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.ModuleIdentifier.build_id)
  return _s;
}
inline const std::string& CallStackProfile_ModuleIdentifier::_internal_build_id() const {
  return build_id_.Get();
}
inline void CallStackProfile_ModuleIdentifier::_internal_set_build_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  build_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CallStackProfile_ModuleIdentifier::_internal_mutable_build_id() {
  _has_bits_[0] |= 0x00000001u;
  return build_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CallStackProfile_ModuleIdentifier::release_build_id() {
  // @@protoc_insertion_point(field_release:metrics.CallStackProfile.ModuleIdentifier.build_id)
  if (!_internal_has_build_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = build_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (build_id_.IsDefault()) {
    build_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CallStackProfile_ModuleIdentifier::set_allocated_build_id(std::string* build_id) {
  if (build_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  build_id_.SetAllocated(build_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (build_id_.IsDefault()) {
    build_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.CallStackProfile.ModuleIdentifier.build_id)
}

// optional fixed64 name_md5_prefix = 2;
inline bool CallStackProfile_ModuleIdentifier::_internal_has_name_md5_prefix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CallStackProfile_ModuleIdentifier::has_name_md5_prefix() const {
  return _internal_has_name_md5_prefix();
}
inline void CallStackProfile_ModuleIdentifier::clear_name_md5_prefix() {
  name_md5_prefix_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CallStackProfile_ModuleIdentifier::_internal_name_md5_prefix() const {
  return name_md5_prefix_;
}
inline uint64_t CallStackProfile_ModuleIdentifier::name_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.ModuleIdentifier.name_md5_prefix)
  return _internal_name_md5_prefix();
}
inline void CallStackProfile_ModuleIdentifier::_internal_set_name_md5_prefix(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  name_md5_prefix_ = value;
}
inline void CallStackProfile_ModuleIdentifier::set_name_md5_prefix(uint64_t value) {
  _internal_set_name_md5_prefix(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.ModuleIdentifier.name_md5_prefix)
}

// -------------------------------------------------------------------

// CallStackProfile_Location

// optional uint64 address = 1;
inline bool CallStackProfile_Location::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CallStackProfile_Location::has_address() const {
  return _internal_has_address();
}
inline void CallStackProfile_Location::clear_address() {
  address_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CallStackProfile_Location::_internal_address() const {
  return address_;
}
inline uint64_t CallStackProfile_Location::address() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.Location.address)
  return _internal_address();
}
inline void CallStackProfile_Location::_internal_set_address(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  address_ = value;
}
inline void CallStackProfile_Location::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.Location.address)
}

// optional int32 module_id_index = 2;
inline bool CallStackProfile_Location::_internal_has_module_id_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CallStackProfile_Location::has_module_id_index() const {
  return _internal_has_module_id_index();
}
inline void CallStackProfile_Location::clear_module_id_index() {
  module_id_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CallStackProfile_Location::_internal_module_id_index() const {
  return module_id_index_;
}
inline int32_t CallStackProfile_Location::module_id_index() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.Location.module_id_index)
  return _internal_module_id_index();
}
inline void CallStackProfile_Location::_internal_set_module_id_index(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  module_id_index_ = value;
}
inline void CallStackProfile_Location::set_module_id_index(int32_t value) {
  _internal_set_module_id_index(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.Location.module_id_index)
}

// -------------------------------------------------------------------

// CallStackProfile_Stack

// repeated .metrics.CallStackProfile.Location frame = 1;
inline int CallStackProfile_Stack::_internal_frame_size() const {
  return frame_.size();
}
inline int CallStackProfile_Stack::frame_size() const {
  return _internal_frame_size();
}
inline void CallStackProfile_Stack::clear_frame() {
  frame_.Clear();
}
inline ::metrics::CallStackProfile_Location* CallStackProfile_Stack::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.Stack.frame)
  return frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >*
CallStackProfile_Stack::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.Stack.frame)
  return &frame_;
}
inline const ::metrics::CallStackProfile_Location& CallStackProfile_Stack::_internal_frame(int index) const {
  return frame_.Get(index);
}
inline const ::metrics::CallStackProfile_Location& CallStackProfile_Stack::frame(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.Stack.frame)
  return _internal_frame(index);
}
inline ::metrics::CallStackProfile_Location* CallStackProfile_Stack::_internal_add_frame() {
  return frame_.Add();
}
inline ::metrics::CallStackProfile_Location* CallStackProfile_Stack::add_frame() {
  ::metrics::CallStackProfile_Location* _add = _internal_add_frame();
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.Stack.frame)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >&
CallStackProfile_Stack::frame() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.Stack.frame)
  return frame_;
}

// -------------------------------------------------------------------

// CallStackProfile_MetadataItem

// optional int32 name_hash_index = 1;
inline bool CallStackProfile_MetadataItem::_internal_has_name_hash_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CallStackProfile_MetadataItem::has_name_hash_index() const {
  return _internal_has_name_hash_index();
}
inline void CallStackProfile_MetadataItem::clear_name_hash_index() {
  name_hash_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CallStackProfile_MetadataItem::_internal_name_hash_index() const {
  return name_hash_index_;
}
inline int32_t CallStackProfile_MetadataItem::name_hash_index() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.MetadataItem.name_hash_index)
  return _internal_name_hash_index();
}
inline void CallStackProfile_MetadataItem::_internal_set_name_hash_index(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  name_hash_index_ = value;
}
inline void CallStackProfile_MetadataItem::set_name_hash_index(int32_t value) {
  _internal_set_name_hash_index(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.MetadataItem.name_hash_index)
}

// optional sint64 key = 3;
inline bool CallStackProfile_MetadataItem::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CallStackProfile_MetadataItem::has_key() const {
  return _internal_has_key();
}
inline void CallStackProfile_MetadataItem::clear_key() {
  key_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t CallStackProfile_MetadataItem::_internal_key() const {
  return key_;
}
inline int64_t CallStackProfile_MetadataItem::key() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.MetadataItem.key)
  return _internal_key();
}
inline void CallStackProfile_MetadataItem::_internal_set_key(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  key_ = value;
}
inline void CallStackProfile_MetadataItem::set_key(int64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.MetadataItem.key)
}

// optional sint64 value = 2;
inline bool CallStackProfile_MetadataItem::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CallStackProfile_MetadataItem::has_value() const {
  return _internal_has_value();
}
inline void CallStackProfile_MetadataItem::clear_value() {
  value_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t CallStackProfile_MetadataItem::_internal_value() const {
  return value_;
}
inline int64_t CallStackProfile_MetadataItem::value() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.MetadataItem.value)
  return _internal_value();
}
inline void CallStackProfile_MetadataItem::_internal_set_value(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void CallStackProfile_MetadataItem::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.MetadataItem.value)
}

// -------------------------------------------------------------------

// CallStackProfile_AsyncBacktrace

// repeated .metrics.CallStackProfile.Location location = 1;
inline int CallStackProfile_AsyncBacktrace::_internal_location_size() const {
  return location_.size();
}
inline int CallStackProfile_AsyncBacktrace::location_size() const {
  return _internal_location_size();
}
inline void CallStackProfile_AsyncBacktrace::clear_location() {
  location_.Clear();
}
inline ::metrics::CallStackProfile_Location* CallStackProfile_AsyncBacktrace::mutable_location(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.AsyncBacktrace.location)
  return location_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >*
CallStackProfile_AsyncBacktrace::mutable_location() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.AsyncBacktrace.location)
  return &location_;
}
inline const ::metrics::CallStackProfile_Location& CallStackProfile_AsyncBacktrace::_internal_location(int index) const {
  return location_.Get(index);
}
inline const ::metrics::CallStackProfile_Location& CallStackProfile_AsyncBacktrace::location(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.AsyncBacktrace.location)
  return _internal_location(index);
}
inline ::metrics::CallStackProfile_Location* CallStackProfile_AsyncBacktrace::_internal_add_location() {
  return location_.Add();
}
inline ::metrics::CallStackProfile_Location* CallStackProfile_AsyncBacktrace::add_location() {
  ::metrics::CallStackProfile_Location* _add = _internal_add_location();
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.AsyncBacktrace.location)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >&
CallStackProfile_AsyncBacktrace::location() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.AsyncBacktrace.location)
  return location_;
}

// -------------------------------------------------------------------

// CallStackProfile_Sample

// repeated .metrics.CallStackProfile.Location frame = 1;
inline int CallStackProfile_Sample::_internal_frame_size() const {
  return frame_.size();
}
inline int CallStackProfile_Sample::frame_size() const {
  return _internal_frame_size();
}
inline void CallStackProfile_Sample::clear_frame() {
  frame_.Clear();
}
inline ::metrics::CallStackProfile_Location* CallStackProfile_Sample::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.Sample.frame)
  return frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >*
CallStackProfile_Sample::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.Sample.frame)
  return &frame_;
}
inline const ::metrics::CallStackProfile_Location& CallStackProfile_Sample::_internal_frame(int index) const {
  return frame_.Get(index);
}
inline const ::metrics::CallStackProfile_Location& CallStackProfile_Sample::frame(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.Sample.frame)
  return _internal_frame(index);
}
inline ::metrics::CallStackProfile_Location* CallStackProfile_Sample::_internal_add_frame() {
  return frame_.Add();
}
inline ::metrics::CallStackProfile_Location* CallStackProfile_Sample::add_frame() {
  ::metrics::CallStackProfile_Location* _add = _internal_add_frame();
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.Sample.frame)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Location >&
CallStackProfile_Sample::frame() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.Sample.frame)
  return frame_;
}

// optional int64 count = 2;
inline bool CallStackProfile_Sample::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CallStackProfile_Sample::has_count() const {
  return _internal_has_count();
}
inline void CallStackProfile_Sample::clear_count() {
  count_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t CallStackProfile_Sample::_internal_count() const {
  return count_;
}
inline int64_t CallStackProfile_Sample::count() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.Sample.count)
  return _internal_count();
}
inline void CallStackProfile_Sample::_internal_set_count(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void CallStackProfile_Sample::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.Sample.count)
}

// repeated .metrics.ProcessPhase process_phase = 3;
inline int CallStackProfile_Sample::_internal_process_phase_size() const {
  return process_phase_.size();
}
inline int CallStackProfile_Sample::process_phase_size() const {
  return _internal_process_phase_size();
}
inline void CallStackProfile_Sample::clear_process_phase() {
  process_phase_.Clear();
}
inline ::metrics::ProcessPhase CallStackProfile_Sample::_internal_process_phase(int index) const {
  return static_cast< ::metrics::ProcessPhase >(process_phase_.Get(index));
}
inline ::metrics::ProcessPhase CallStackProfile_Sample::process_phase(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.Sample.process_phase)
  return _internal_process_phase(index);
}
inline void CallStackProfile_Sample::set_process_phase(int index, ::metrics::ProcessPhase value) {
  assert(::metrics::ProcessPhase_IsValid(value));
  process_phase_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.Sample.process_phase)
}
inline void CallStackProfile_Sample::_internal_add_process_phase(::metrics::ProcessPhase value) {
  assert(::metrics::ProcessPhase_IsValid(value));
  process_phase_.Add(value);
}
inline void CallStackProfile_Sample::add_process_phase(::metrics::ProcessPhase value) {
  _internal_add_process_phase(value);
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.Sample.process_phase)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CallStackProfile_Sample::process_phase() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.Sample.process_phase)
  return process_phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CallStackProfile_Sample::_internal_mutable_process_phase() {
  return &process_phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CallStackProfile_Sample::mutable_process_phase() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.Sample.process_phase)
  return _internal_mutable_process_phase();
}

// -------------------------------------------------------------------

// CallStackProfile_StackSample

// optional int32 stack_index = 1;
inline bool CallStackProfile_StackSample::_internal_has_stack_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CallStackProfile_StackSample::has_stack_index() const {
  return _internal_has_stack_index();
}
inline void CallStackProfile_StackSample::clear_stack_index() {
  stack_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CallStackProfile_StackSample::_internal_stack_index() const {
  return stack_index_;
}
inline int32_t CallStackProfile_StackSample::stack_index() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.StackSample.stack_index)
  return _internal_stack_index();
}
inline void CallStackProfile_StackSample::_internal_set_stack_index(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  stack_index_ = value;
}
inline void CallStackProfile_StackSample::set_stack_index(int32_t value) {
  _internal_set_stack_index(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.StackSample.stack_index)
}

// optional int32 sample_time_offset_ms = 2;
inline bool CallStackProfile_StackSample::_internal_has_sample_time_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CallStackProfile_StackSample::has_sample_time_offset_ms() const {
  return _internal_has_sample_time_offset_ms();
}
inline void CallStackProfile_StackSample::clear_sample_time_offset_ms() {
  sample_time_offset_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CallStackProfile_StackSample::_internal_sample_time_offset_ms() const {
  return sample_time_offset_ms_;
}
inline int32_t CallStackProfile_StackSample::sample_time_offset_ms() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.StackSample.sample_time_offset_ms)
  return _internal_sample_time_offset_ms();
}
inline void CallStackProfile_StackSample::_internal_set_sample_time_offset_ms(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  sample_time_offset_ms_ = value;
}
inline void CallStackProfile_StackSample::set_sample_time_offset_ms(int32_t value) {
  _internal_set_sample_time_offset_ms(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.StackSample.sample_time_offset_ms)
}

// optional bool continued_work = 3;
inline bool CallStackProfile_StackSample::_internal_has_continued_work() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CallStackProfile_StackSample::has_continued_work() const {
  return _internal_has_continued_work();
}
inline void CallStackProfile_StackSample::clear_continued_work() {
  continued_work_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CallStackProfile_StackSample::_internal_continued_work() const {
  return continued_work_;
}
inline bool CallStackProfile_StackSample::continued_work() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.StackSample.continued_work)
  return _internal_continued_work();
}
inline void CallStackProfile_StackSample::_internal_set_continued_work(bool value) {
  _has_bits_[0] |= 0x00000004u;
  continued_work_ = value;
}
inline void CallStackProfile_StackSample::set_continued_work(bool value) {
  _internal_set_continued_work(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.StackSample.continued_work)
}

// optional int32 async_backtrace_index = 4;
inline bool CallStackProfile_StackSample::_internal_has_async_backtrace_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CallStackProfile_StackSample::has_async_backtrace_index() const {
  return _internal_has_async_backtrace_index();
}
inline void CallStackProfile_StackSample::clear_async_backtrace_index() {
  async_backtrace_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CallStackProfile_StackSample::_internal_async_backtrace_index() const {
  return async_backtrace_index_;
}
inline int32_t CallStackProfile_StackSample::async_backtrace_index() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.StackSample.async_backtrace_index)
  return _internal_async_backtrace_index();
}
inline void CallStackProfile_StackSample::_internal_set_async_backtrace_index(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  async_backtrace_index_ = value;
}
inline void CallStackProfile_StackSample::set_async_backtrace_index(int32_t value) {
  _internal_set_async_backtrace_index(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.StackSample.async_backtrace_index)
}

// repeated .metrics.CallStackProfile.MetadataItem metadata = 5;
inline int CallStackProfile_StackSample::_internal_metadata_size() const {
  return metadata_.size();
}
inline int CallStackProfile_StackSample::metadata_size() const {
  return _internal_metadata_size();
}
inline void CallStackProfile_StackSample::clear_metadata() {
  metadata_.Clear();
}
inline ::metrics::CallStackProfile_MetadataItem* CallStackProfile_StackSample::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.StackSample.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_MetadataItem >*
CallStackProfile_StackSample::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.StackSample.metadata)
  return &metadata_;
}
inline const ::metrics::CallStackProfile_MetadataItem& CallStackProfile_StackSample::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::metrics::CallStackProfile_MetadataItem& CallStackProfile_StackSample::metadata(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.StackSample.metadata)
  return _internal_metadata(index);
}
inline ::metrics::CallStackProfile_MetadataItem* CallStackProfile_StackSample::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::metrics::CallStackProfile_MetadataItem* CallStackProfile_StackSample::add_metadata() {
  ::metrics::CallStackProfile_MetadataItem* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.StackSample.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_MetadataItem >&
CallStackProfile_StackSample::metadata() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.StackSample.metadata)
  return metadata_;
}

// optional int64 weight = 6;
inline bool CallStackProfile_StackSample::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CallStackProfile_StackSample::has_weight() const {
  return _internal_has_weight();
}
inline void CallStackProfile_StackSample::clear_weight() {
  weight_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t CallStackProfile_StackSample::_internal_weight() const {
  return weight_;
}
inline int64_t CallStackProfile_StackSample::weight() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.StackSample.weight)
  return _internal_weight();
}
inline void CallStackProfile_StackSample::_internal_set_weight(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  weight_ = value;
}
inline void CallStackProfile_StackSample::set_weight(int64_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.StackSample.weight)
}

// optional int64 count = 7 [default = 1];
inline bool CallStackProfile_StackSample::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CallStackProfile_StackSample::has_count() const {
  return _internal_has_count();
}
inline void CallStackProfile_StackSample::clear_count() {
  count_ = int64_t{1};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t CallStackProfile_StackSample::_internal_count() const {
  return count_;
}
inline int64_t CallStackProfile_StackSample::count() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.StackSample.count)
  return _internal_count();
}
inline void CallStackProfile_StackSample::_internal_set_count(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  count_ = value;
}
inline void CallStackProfile_StackSample::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.StackSample.count)
}

// -------------------------------------------------------------------

// CallStackProfile

// repeated .metrics.CallStackProfile.Sample DEPRECATED_sample = 1 [deprecated = true];
inline int CallStackProfile::_internal_deprecated_sample_size() const {
  return deprecated_sample_.size();
}
inline int CallStackProfile::deprecated_sample_size() const {
  return _internal_deprecated_sample_size();
}
inline void CallStackProfile::clear_deprecated_sample() {
  deprecated_sample_.Clear();
}
inline ::metrics::CallStackProfile_Sample* CallStackProfile::mutable_deprecated_sample(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.DEPRECATED_sample)
  return deprecated_sample_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Sample >*
CallStackProfile::mutable_deprecated_sample() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.DEPRECATED_sample)
  return &deprecated_sample_;
}
inline const ::metrics::CallStackProfile_Sample& CallStackProfile::_internal_deprecated_sample(int index) const {
  return deprecated_sample_.Get(index);
}
inline const ::metrics::CallStackProfile_Sample& CallStackProfile::deprecated_sample(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.DEPRECATED_sample)
  return _internal_deprecated_sample(index);
}
inline ::metrics::CallStackProfile_Sample* CallStackProfile::_internal_add_deprecated_sample() {
  return deprecated_sample_.Add();
}
inline ::metrics::CallStackProfile_Sample* CallStackProfile::add_deprecated_sample() {
  ::metrics::CallStackProfile_Sample* _add = _internal_add_deprecated_sample();
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.DEPRECATED_sample)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Sample >&
CallStackProfile::deprecated_sample() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.DEPRECATED_sample)
  return deprecated_sample_;
}

// repeated .metrics.CallStackProfile.ModuleIdentifier module_id = 2;
inline int CallStackProfile::_internal_module_id_size() const {
  return module_id_.size();
}
inline int CallStackProfile::module_id_size() const {
  return _internal_module_id_size();
}
inline void CallStackProfile::clear_module_id() {
  module_id_.Clear();
}
inline ::metrics::CallStackProfile_ModuleIdentifier* CallStackProfile::mutable_module_id(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.module_id)
  return module_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_ModuleIdentifier >*
CallStackProfile::mutable_module_id() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.module_id)
  return &module_id_;
}
inline const ::metrics::CallStackProfile_ModuleIdentifier& CallStackProfile::_internal_module_id(int index) const {
  return module_id_.Get(index);
}
inline const ::metrics::CallStackProfile_ModuleIdentifier& CallStackProfile::module_id(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.module_id)
  return _internal_module_id(index);
}
inline ::metrics::CallStackProfile_ModuleIdentifier* CallStackProfile::_internal_add_module_id() {
  return module_id_.Add();
}
inline ::metrics::CallStackProfile_ModuleIdentifier* CallStackProfile::add_module_id() {
  ::metrics::CallStackProfile_ModuleIdentifier* _add = _internal_add_module_id();
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.module_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_ModuleIdentifier >&
CallStackProfile::module_id() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.module_id)
  return module_id_;
}

// repeated fixed64 metadata_name_hash = 5;
inline int CallStackProfile::_internal_metadata_name_hash_size() const {
  return metadata_name_hash_.size();
}
inline int CallStackProfile::metadata_name_hash_size() const {
  return _internal_metadata_name_hash_size();
}
inline void CallStackProfile::clear_metadata_name_hash() {
  metadata_name_hash_.Clear();
}
inline uint64_t CallStackProfile::_internal_metadata_name_hash(int index) const {
  return metadata_name_hash_.Get(index);
}
inline uint64_t CallStackProfile::metadata_name_hash(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.metadata_name_hash)
  return _internal_metadata_name_hash(index);
}
inline void CallStackProfile::set_metadata_name_hash(int index, uint64_t value) {
  metadata_name_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.metadata_name_hash)
}
inline void CallStackProfile::_internal_add_metadata_name_hash(uint64_t value) {
  metadata_name_hash_.Add(value);
}
inline void CallStackProfile::add_metadata_name_hash(uint64_t value) {
  _internal_add_metadata_name_hash(value);
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.metadata_name_hash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CallStackProfile::_internal_metadata_name_hash() const {
  return metadata_name_hash_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CallStackProfile::metadata_name_hash() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.metadata_name_hash)
  return _internal_metadata_name_hash();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CallStackProfile::_internal_mutable_metadata_name_hash() {
  return &metadata_name_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CallStackProfile::mutable_metadata_name_hash() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.metadata_name_hash)
  return _internal_mutable_metadata_name_hash();
}

// repeated .metrics.CallStackProfile.MetadataItem profile_metadata = 6;
inline int CallStackProfile::_internal_profile_metadata_size() const {
  return profile_metadata_.size();
}
inline int CallStackProfile::profile_metadata_size() const {
  return _internal_profile_metadata_size();
}
inline void CallStackProfile::clear_profile_metadata() {
  profile_metadata_.Clear();
}
inline ::metrics::CallStackProfile_MetadataItem* CallStackProfile::mutable_profile_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.profile_metadata)
  return profile_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_MetadataItem >*
CallStackProfile::mutable_profile_metadata() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.profile_metadata)
  return &profile_metadata_;
}
inline const ::metrics::CallStackProfile_MetadataItem& CallStackProfile::_internal_profile_metadata(int index) const {
  return profile_metadata_.Get(index);
}
inline const ::metrics::CallStackProfile_MetadataItem& CallStackProfile::profile_metadata(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.profile_metadata)
  return _internal_profile_metadata(index);
}
inline ::metrics::CallStackProfile_MetadataItem* CallStackProfile::_internal_add_profile_metadata() {
  return profile_metadata_.Add();
}
inline ::metrics::CallStackProfile_MetadataItem* CallStackProfile::add_profile_metadata() {
  ::metrics::CallStackProfile_MetadataItem* _add = _internal_add_profile_metadata();
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.profile_metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_MetadataItem >&
CallStackProfile::profile_metadata() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.profile_metadata)
  return profile_metadata_;
}

// repeated .metrics.CallStackProfile.AsyncBacktrace async_backtrace = 7;
inline int CallStackProfile::_internal_async_backtrace_size() const {
  return async_backtrace_.size();
}
inline int CallStackProfile::async_backtrace_size() const {
  return _internal_async_backtrace_size();
}
inline void CallStackProfile::clear_async_backtrace() {
  async_backtrace_.Clear();
}
inline ::metrics::CallStackProfile_AsyncBacktrace* CallStackProfile::mutable_async_backtrace(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.async_backtrace)
  return async_backtrace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_AsyncBacktrace >*
CallStackProfile::mutable_async_backtrace() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.async_backtrace)
  return &async_backtrace_;
}
inline const ::metrics::CallStackProfile_AsyncBacktrace& CallStackProfile::_internal_async_backtrace(int index) const {
  return async_backtrace_.Get(index);
}
inline const ::metrics::CallStackProfile_AsyncBacktrace& CallStackProfile::async_backtrace(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.async_backtrace)
  return _internal_async_backtrace(index);
}
inline ::metrics::CallStackProfile_AsyncBacktrace* CallStackProfile::_internal_add_async_backtrace() {
  return async_backtrace_.Add();
}
inline ::metrics::CallStackProfile_AsyncBacktrace* CallStackProfile::add_async_backtrace() {
  ::metrics::CallStackProfile_AsyncBacktrace* _add = _internal_add_async_backtrace();
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.async_backtrace)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_AsyncBacktrace >&
CallStackProfile::async_backtrace() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.async_backtrace)
  return async_backtrace_;
}

// repeated .metrics.CallStackProfile.Stack stack = 8;
inline int CallStackProfile::_internal_stack_size() const {
  return stack_.size();
}
inline int CallStackProfile::stack_size() const {
  return _internal_stack_size();
}
inline void CallStackProfile::clear_stack() {
  stack_.Clear();
}
inline ::metrics::CallStackProfile_Stack* CallStackProfile::mutable_stack(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.stack)
  return stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Stack >*
CallStackProfile::mutable_stack() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.stack)
  return &stack_;
}
inline const ::metrics::CallStackProfile_Stack& CallStackProfile::_internal_stack(int index) const {
  return stack_.Get(index);
}
inline const ::metrics::CallStackProfile_Stack& CallStackProfile::stack(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.stack)
  return _internal_stack(index);
}
inline ::metrics::CallStackProfile_Stack* CallStackProfile::_internal_add_stack() {
  return stack_.Add();
}
inline ::metrics::CallStackProfile_Stack* CallStackProfile::add_stack() {
  ::metrics::CallStackProfile_Stack* _add = _internal_add_stack();
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.stack)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_Stack >&
CallStackProfile::stack() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.stack)
  return stack_;
}

// repeated .metrics.CallStackProfile.StackSample stack_sample = 9;
inline int CallStackProfile::_internal_stack_sample_size() const {
  return stack_sample_.size();
}
inline int CallStackProfile::stack_sample_size() const {
  return _internal_stack_sample_size();
}
inline void CallStackProfile::clear_stack_sample() {
  stack_sample_.Clear();
}
inline ::metrics::CallStackProfile_StackSample* CallStackProfile::mutable_stack_sample(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CallStackProfile.stack_sample)
  return stack_sample_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_StackSample >*
CallStackProfile::mutable_stack_sample() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CallStackProfile.stack_sample)
  return &stack_sample_;
}
inline const ::metrics::CallStackProfile_StackSample& CallStackProfile::_internal_stack_sample(int index) const {
  return stack_sample_.Get(index);
}
inline const ::metrics::CallStackProfile_StackSample& CallStackProfile::stack_sample(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.stack_sample)
  return _internal_stack_sample(index);
}
inline ::metrics::CallStackProfile_StackSample* CallStackProfile::_internal_add_stack_sample() {
  return stack_sample_.Add();
}
inline ::metrics::CallStackProfile_StackSample* CallStackProfile::add_stack_sample() {
  ::metrics::CallStackProfile_StackSample* _add = _internal_add_stack_sample();
  // @@protoc_insertion_point(field_add:metrics.CallStackProfile.stack_sample)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CallStackProfile_StackSample >&
CallStackProfile::stack_sample() const {
  // @@protoc_insertion_point(field_list:metrics.CallStackProfile.stack_sample)
  return stack_sample_;
}

// optional int64 profile_time_offset_ms = 10;
inline bool CallStackProfile::_internal_has_profile_time_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CallStackProfile::has_profile_time_offset_ms() const {
  return _internal_has_profile_time_offset_ms();
}
inline void CallStackProfile::clear_profile_time_offset_ms() {
  profile_time_offset_ms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t CallStackProfile::_internal_profile_time_offset_ms() const {
  return profile_time_offset_ms_;
}
inline int64_t CallStackProfile::profile_time_offset_ms() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.profile_time_offset_ms)
  return _internal_profile_time_offset_ms();
}
inline void CallStackProfile::_internal_set_profile_time_offset_ms(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  profile_time_offset_ms_ = value;
}
inline void CallStackProfile::set_profile_time_offset_ms(int64_t value) {
  _internal_set_profile_time_offset_ms(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.profile_time_offset_ms)
}

// optional int32 profile_duration_ms = 3;
inline bool CallStackProfile::_internal_has_profile_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CallStackProfile::has_profile_duration_ms() const {
  return _internal_has_profile_duration_ms();
}
inline void CallStackProfile::clear_profile_duration_ms() {
  profile_duration_ms_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CallStackProfile::_internal_profile_duration_ms() const {
  return profile_duration_ms_;
}
inline int32_t CallStackProfile::profile_duration_ms() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.profile_duration_ms)
  return _internal_profile_duration_ms();
}
inline void CallStackProfile::_internal_set_profile_duration_ms(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  profile_duration_ms_ = value;
}
inline void CallStackProfile::set_profile_duration_ms(int32_t value) {
  _internal_set_profile_duration_ms(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.profile_duration_ms)
}

// optional int32 sampling_period_ms = 4;
inline bool CallStackProfile::_internal_has_sampling_period_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CallStackProfile::has_sampling_period_ms() const {
  return _internal_has_sampling_period_ms();
}
inline void CallStackProfile::clear_sampling_period_ms() {
  sampling_period_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CallStackProfile::_internal_sampling_period_ms() const {
  return sampling_period_ms_;
}
inline int32_t CallStackProfile::sampling_period_ms() const {
  // @@protoc_insertion_point(field_get:metrics.CallStackProfile.sampling_period_ms)
  return _internal_sampling_period_ms();
}
inline void CallStackProfile::_internal_set_sampling_period_ms(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  sampling_period_ms_ = value;
}
inline void CallStackProfile::set_sampling_period_ms(int32_t value) {
  _internal_set_sampling_period_ms(value);
  // @@protoc_insertion_point(field_set:metrics.CallStackProfile.sampling_period_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_call_5fstack_5fprofile_2eproto
