// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf_data.proto

#include "perf_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR PerfDataProto_PerfEventAttr::PerfDataProto_PerfEventAttr(
    ::_pbi::ConstantInitialized)
  : type_(0u)
  , size_(0u)
  , config_(uint64_t{0u})
  , sample_period_(uint64_t{0u})
  , sample_freq_(uint64_t{0u})
  , sample_type_(uint64_t{0u})
  , read_format_(uint64_t{0u})
  , disabled_(false)
  , inherit_(false)
  , pinned_(false)
  , exclusive_(false)
  , exclude_user_(false)
  , exclude_kernel_(false)
  , exclude_hv_(false)
  , exclude_idle_(false)
  , mmap_(false)
  , comm_(false)
  , freq_(false)
  , inherit_stat_(false)
  , enable_on_exec_(false)
  , task_(false)
  , watermark_(false)
  , mmap_data_(false)
  , precise_ip_(0u)
  , sample_id_all_(false)
  , exclude_host_(false)
  , exclude_guest_(false)
  , wakeup_events_(0u)
  , wakeup_watermark_(0u)
  , bp_addr_(uint64_t{0u})
  , config1_(uint64_t{0u})
  , bp_len_(uint64_t{0u})
  , config2_(uint64_t{0u})
  , branch_sample_type_(uint64_t{0u})
  , bp_type_(0u){}
struct PerfDataProto_PerfEventAttrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_PerfEventAttrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_PerfEventAttrDefaultTypeInternal() {}
  union {
    PerfDataProto_PerfEventAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_PerfEventAttrDefaultTypeInternal _PerfDataProto_PerfEventAttr_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_PerfFileAttr::PerfDataProto_PerfFileAttr(
    ::_pbi::ConstantInitialized)
  : ids_()
  , attr_(nullptr){}
struct PerfDataProto_PerfFileAttrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_PerfFileAttrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_PerfFileAttrDefaultTypeInternal() {}
  union {
    PerfDataProto_PerfFileAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_PerfFileAttrDefaultTypeInternal _PerfDataProto_PerfFileAttr_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_PerfEventType::PerfDataProto_PerfEventType(
    ::_pbi::ConstantInitialized)
  : id_(uint64_t{0u})
  , name_md5_prefix_(uint64_t{0u}){}
struct PerfDataProto_PerfEventTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_PerfEventTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_PerfEventTypeDefaultTypeInternal() {}
  union {
    PerfDataProto_PerfEventType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_PerfEventTypeDefaultTypeInternal _PerfDataProto_PerfEventType_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_SampleInfo::PerfDataProto_SampleInfo(
    ::_pbi::ConstantInitialized)
  : pid_(0u)
  , tid_(0u)
  , sample_time_ns_(uint64_t{0u})
  , id_(uint64_t{0u})
  , cpu_(0u){}
struct PerfDataProto_SampleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_SampleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_SampleInfoDefaultTypeInternal() {}
  union {
    PerfDataProto_SampleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_SampleInfoDefaultTypeInternal _PerfDataProto_SampleInfo_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_CommEvent::PerfDataProto_CommEvent(
    ::_pbi::ConstantInitialized)
  : sample_info_(nullptr)
  , pid_(0u)
  , tid_(0u)
  , comm_md5_prefix_(uint64_t{0u})
  , sample_time_(uint64_t{0u}){}
struct PerfDataProto_CommEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_CommEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_CommEventDefaultTypeInternal() {}
  union {
    PerfDataProto_CommEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_CommEventDefaultTypeInternal _PerfDataProto_CommEvent_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_MMapEvent::PerfDataProto_MMapEvent(
    ::_pbi::ConstantInitialized)
  : sample_info_(nullptr)
  , pid_(0u)
  , tid_(0u)
  , start_(uint64_t{0u})
  , len_(uint64_t{0u})
  , pgoff_(uint64_t{0u})
  , filename_md5_prefix_(uint64_t{0u})
  , root_path_md5_prefix_(uint64_t{0u}){}
struct PerfDataProto_MMapEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_MMapEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_MMapEventDefaultTypeInternal() {}
  union {
    PerfDataProto_MMapEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_MMapEventDefaultTypeInternal _PerfDataProto_MMapEvent_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_LostEvent::PerfDataProto_LostEvent(
    ::_pbi::ConstantInitialized)
  : sample_info_(nullptr)
  , id_(uint64_t{0u})
  , lost_(uint64_t{0u}){}
struct PerfDataProto_LostEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_LostEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_LostEventDefaultTypeInternal() {}
  union {
    PerfDataProto_LostEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_LostEventDefaultTypeInternal _PerfDataProto_LostEvent_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_ThrottleEvent::PerfDataProto_ThrottleEvent(
    ::_pbi::ConstantInitialized)
  : sample_info_(nullptr)
  , time_ns_(uint64_t{0u})
  , id_(uint64_t{0u})
  , stream_id_(uint64_t{0u}){}
struct PerfDataProto_ThrottleEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_ThrottleEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_ThrottleEventDefaultTypeInternal() {}
  union {
    PerfDataProto_ThrottleEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_ThrottleEventDefaultTypeInternal _PerfDataProto_ThrottleEvent_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_BranchStackEntry::PerfDataProto_BranchStackEntry(
    ::_pbi::ConstantInitialized)
  : from_ip_(uint64_t{0u})
  , to_ip_(uint64_t{0u})
  , mispredicted_(false)
  , predicted_(false)
  , in_transaction_(false)
  , abort_(false)
  , cycles_(0u){}
struct PerfDataProto_BranchStackEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_BranchStackEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_BranchStackEntryDefaultTypeInternal() {}
  union {
    PerfDataProto_BranchStackEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_BranchStackEntryDefaultTypeInternal _PerfDataProto_BranchStackEntry_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_SampleEvent::PerfDataProto_SampleEvent(
    ::_pbi::ConstantInitialized)
  : callchain_()
  , branch_stack_()
  , ip_(uint64_t{0u})
  , pid_(0u)
  , tid_(0u)
  , sample_time_ns_(uint64_t{0u})
  , addr_(uint64_t{0u})
  , id_(uint64_t{0u})
  , stream_id_(uint64_t{0u})
  , period_(uint64_t{0u})
  , cpu_(0u)
  , raw_size_(0u)
  , weight_(uint64_t{0u})
  , data_src_(uint64_t{0u})
  , transaction_(uint64_t{0u}){}
struct PerfDataProto_SampleEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_SampleEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_SampleEventDefaultTypeInternal() {}
  union {
    PerfDataProto_SampleEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_SampleEventDefaultTypeInternal _PerfDataProto_SampleEvent_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_ForkEvent::PerfDataProto_ForkEvent(
    ::_pbi::ConstantInitialized)
  : sample_info_(nullptr)
  , pid_(0u)
  , ppid_(0u)
  , tid_(0u)
  , ptid_(0u)
  , fork_time_ns_(uint64_t{0u}){}
struct PerfDataProto_ForkEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_ForkEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_ForkEventDefaultTypeInternal() {}
  union {
    PerfDataProto_ForkEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_ForkEventDefaultTypeInternal _PerfDataProto_ForkEvent_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_EventHeader::PerfDataProto_EventHeader(
    ::_pbi::ConstantInitialized)
  : type_(0u)
  , misc_(0u)
  , size_(0u){}
struct PerfDataProto_EventHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_EventHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_EventHeaderDefaultTypeInternal() {}
  union {
    PerfDataProto_EventHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_EventHeaderDefaultTypeInternal _PerfDataProto_EventHeader_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_PerfEvent::PerfDataProto_PerfEvent(
    ::_pbi::ConstantInitialized)
  : header_(nullptr)
  , timestamp_(uint64_t{0u})
  , _oneof_case_{}{}
struct PerfDataProto_PerfEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_PerfEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_PerfEventDefaultTypeInternal() {}
  union {
    PerfDataProto_PerfEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_PerfEventDefaultTypeInternal _PerfDataProto_PerfEvent_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_PerfEventStats::PerfDataProto_PerfEventStats(
    ::_pbi::ConstantInitialized)
  : num_events_read_(0u)
  , num_sample_events_(0u)
  , num_mmap_events_(0u)
  , num_fork_events_(0u)
  , num_exit_events_(0u)
  , num_sample_events_mapped_(0u)
  , did_remap_(false){}
struct PerfDataProto_PerfEventStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_PerfEventStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_PerfEventStatsDefaultTypeInternal() {}
  union {
    PerfDataProto_PerfEventStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_PerfEventStatsDefaultTypeInternal _PerfDataProto_PerfEventStats_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_PerfBuildID::PerfDataProto_PerfBuildID(
    ::_pbi::ConstantInitialized)
  : build_id_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , misc_(0u)
  , pid_(0u)
  , filename_md5_prefix_(uint64_t{0u}){}
struct PerfDataProto_PerfBuildIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_PerfBuildIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_PerfBuildIDDefaultTypeInternal() {}
  union {
    PerfDataProto_PerfBuildID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_PerfBuildIDDefaultTypeInternal _PerfDataProto_PerfBuildID_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_PerfPMUMappingsMetadata::PerfDataProto_PerfPMUMappingsMetadata(
    ::_pbi::ConstantInitialized)
  : name_md5_prefix_(uint64_t{0u})
  , type_(0u){}
struct PerfDataProto_PerfPMUMappingsMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_PerfPMUMappingsMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_PerfPMUMappingsMetadataDefaultTypeInternal() {}
  union {
    PerfDataProto_PerfPMUMappingsMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_PerfPMUMappingsMetadataDefaultTypeInternal _PerfDataProto_PerfPMUMappingsMetadata_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_StringMetadata_StringAndMd5sumPrefix::PerfDataProto_StringMetadata_StringAndMd5sumPrefix(
    ::_pbi::ConstantInitialized)
  : value_md5_prefix_(uint64_t{0u}){}
struct PerfDataProto_StringMetadata_StringAndMd5sumPrefixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_StringMetadata_StringAndMd5sumPrefixDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_StringMetadata_StringAndMd5sumPrefixDefaultTypeInternal() {}
  union {
    PerfDataProto_StringMetadata_StringAndMd5sumPrefix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_StringMetadata_StringAndMd5sumPrefixDefaultTypeInternal _PerfDataProto_StringMetadata_StringAndMd5sumPrefix_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto_StringMetadata::PerfDataProto_StringMetadata(
    ::_pbi::ConstantInitialized)
  : perf_command_line_whole_(nullptr){}
struct PerfDataProto_StringMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProto_StringMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProto_StringMetadataDefaultTypeInternal() {}
  union {
    PerfDataProto_StringMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProto_StringMetadataDefaultTypeInternal _PerfDataProto_StringMetadata_default_instance_;
PROTOBUF_CONSTEXPR PerfDataProto::PerfDataProto(
    ::_pbi::ConstantInitialized)
  : file_attrs_()
  , events_()
  , build_ids_()
  , event_types_()
  , pmu_mappings_()
  , stats_(nullptr)
  , string_metadata_(nullptr)
  , timestamp_sec_(uint64_t{0u}){}
struct PerfDataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataProtoDefaultTypeInternal() {}
  union {
    PerfDataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataProtoDefaultTypeInternal _PerfDataProto_default_instance_;
}  // namespace metrics
namespace metrics {

// ===================================================================

class PerfDataProto_PerfEventAttr::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_PerfEventAttr>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sample_period(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sample_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sample_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_read_format(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_inherit(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pinned(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_exclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_exclude_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_exclude_kernel(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_exclude_hv(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_exclude_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mmap(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_inherit_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enable_on_exec(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_task(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_watermark(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_precise_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_mmap_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_sample_id_all(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_exclude_host(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_exclude_guest(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_wakeup_events(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_wakeup_watermark(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_bp_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_bp_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_config1(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_bp_len(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_config2(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_branch_sample_type(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
};

PerfDataProto_PerfEventAttr::PerfDataProto_PerfEventAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.PerfEventAttr)
}
PerfDataProto_PerfEventAttr::PerfDataProto_PerfEventAttr(const PerfDataProto_PerfEventAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bp_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bp_type_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEventAttr)
}

inline void PerfDataProto_PerfEventAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bp_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bp_type_));
}

PerfDataProto_PerfEventAttr::~PerfDataProto_PerfEventAttr() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEventAttr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_PerfEventAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfDataProto_PerfEventAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_PerfEventAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEventAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disabled_) -
        reinterpret_cast<char*>(&type_)) + sizeof(disabled_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&inherit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mmap_) -
        reinterpret_cast<char*>(&inherit_)) + sizeof(mmap_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&comm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&precise_ip_) -
        reinterpret_cast<char*>(&comm_)) + sizeof(precise_ip_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&sample_id_all_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bp_len_) -
        reinterpret_cast<char*>(&sample_id_all_)) + sizeof(bp_len_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&config2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bp_type_) -
        reinterpret_cast<char*>(&config2_)) + sizeof(bp_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_PerfEventAttr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&_has_bits_);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&_has_bits_);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_config(&_has_bits_);
          config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sample_period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sample_period(&_has_bits_);
          sample_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sample_freq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_sample_freq(&_has_bits_);
          sample_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sample_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sample_type(&_has_bits_);
          sample_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 read_format = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_read_format(&_has_bits_);
          read_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_disabled(&_has_bits_);
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool inherit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_inherit(&_has_bits_);
          inherit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pinned = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_pinned(&_has_bits_);
          pinned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exclusive = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_exclusive(&_has_bits_);
          exclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exclude_user = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_exclude_user(&_has_bits_);
          exclude_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exclude_kernel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_exclude_kernel(&_has_bits_);
          exclude_kernel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exclude_hv = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_exclude_hv(&_has_bits_);
          exclude_hv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exclude_idle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_exclude_idle(&_has_bits_);
          exclude_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mmap = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_mmap(&_has_bits_);
          mmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool comm = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_comm(&_has_bits_);
          comm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool freq = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_freq(&_has_bits_);
          freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool inherit_stat = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_inherit_stat(&_has_bits_);
          inherit_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_on_exec = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_enable_on_exec(&_has_bits_);
          enable_on_exec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool task = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_task(&_has_bits_);
          task_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool watermark = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_watermark(&_has_bits_);
          watermark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 precise_ip = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_precise_ip(&_has_bits_);
          precise_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mmap_data = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_mmap_data(&_has_bits_);
          mmap_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sample_id_all = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_sample_id_all(&_has_bits_);
          sample_id_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exclude_host = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_exclude_host(&_has_bits_);
          exclude_host_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exclude_guest = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_exclude_guest(&_has_bits_);
          exclude_guest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wakeup_events = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_wakeup_events(&_has_bits_);
          wakeup_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wakeup_watermark = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_wakeup_watermark(&_has_bits_);
          wakeup_watermark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bp_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_bp_type(&_has_bits_);
          bp_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bp_addr = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_bp_addr(&_has_bits_);
          bp_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 config1 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_config1(&_has_bits_);
          config1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bp_len = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bp_len(&_has_bits_);
          bp_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 config2 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_config2(&_has_bits_);
          config2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 branch_sample_type = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_branch_sample_type(&_has_bits_);
          branch_sample_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_PerfEventAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.PerfEventAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // optional uint64 config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_config(), target);
  }

  // optional uint64 sample_period = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sample_period(), target);
  }

  // optional uint64 sample_freq = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_sample_freq(), target);
  }

  // optional uint64 sample_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sample_type(), target);
  }

  // optional uint64 read_format = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_read_format(), target);
  }

  // optional bool disabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_disabled(), target);
  }

  // optional bool inherit = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_inherit(), target);
  }

  // optional bool pinned = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_pinned(), target);
  }

  // optional bool exclusive = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_exclusive(), target);
  }

  // optional bool exclude_user = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_exclude_user(), target);
  }

  // optional bool exclude_kernel = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_exclude_kernel(), target);
  }

  // optional bool exclude_hv = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_exclude_hv(), target);
  }

  // optional bool exclude_idle = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_exclude_idle(), target);
  }

  // optional bool mmap = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_mmap(), target);
  }

  // optional bool comm = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_comm(), target);
  }

  // optional bool freq = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_freq(), target);
  }

  // optional bool inherit_stat = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_inherit_stat(), target);
  }

  // optional bool enable_on_exec = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_enable_on_exec(), target);
  }

  // optional bool task = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_task(), target);
  }

  // optional bool watermark = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_watermark(), target);
  }

  // optional uint32 precise_ip = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_precise_ip(), target);
  }

  // optional bool mmap_data = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_mmap_data(), target);
  }

  // optional bool sample_id_all = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_sample_id_all(), target);
  }

  // optional bool exclude_host = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_exclude_host(), target);
  }

  // optional bool exclude_guest = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_exclude_guest(), target);
  }

  // optional uint32 wakeup_events = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_wakeup_events(), target);
  }

  // optional uint32 wakeup_watermark = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_wakeup_watermark(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 bp_type = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_bp_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 bp_addr = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_bp_addr(), target);
  }

  // optional uint64 config1 = 32;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(32, this->_internal_config1(), target);
  }

  // optional uint64 bp_len = 33;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(33, this->_internal_bp_len(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 config2 = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_config2(), target);
  }

  // optional uint64 branch_sample_type = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(35, this->_internal_branch_sample_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.PerfEventAttr)
  return target;
}

size_t PerfDataProto_PerfEventAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEventAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional uint32 size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

    // optional uint64 config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_config());
    }

    // optional uint64 sample_period = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sample_period());
    }

    // optional uint64 sample_freq = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sample_freq());
    }

    // optional uint64 sample_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sample_type());
    }

    // optional uint64 read_format = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_read_format());
    }

    // optional bool disabled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool inherit = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool pinned = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool exclusive = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool exclude_user = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool exclude_kernel = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool exclude_hv = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool exclude_idle = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool mmap = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool comm = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool freq = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool inherit_stat = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_on_exec = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool task = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool watermark = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool mmap_data = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional uint32 precise_ip = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_precise_ip());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool sample_id_all = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool exclude_host = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool exclude_guest = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 wakeup_events = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_wakeup_events());
    }

    // optional uint32 wakeup_watermark = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_wakeup_watermark());
    }

    // optional uint64 bp_addr = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_bp_addr());
    }

    // optional uint64 config1 = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_config1());
    }

    // optional uint64 bp_len = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_bp_len());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 config2 = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_config2());
    }

    // optional uint64 branch_sample_type = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_branch_sample_type());
    }

    // optional uint32 bp_type = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bp_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfEventAttr::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_PerfEventAttr*>(
      &from));
}

void PerfDataProto_PerfEventAttr::MergeFrom(const PerfDataProto_PerfEventAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEventAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      config_ = from.config_;
    }
    if (cached_has_bits & 0x00000008u) {
      sample_period_ = from.sample_period_;
    }
    if (cached_has_bits & 0x00000010u) {
      sample_freq_ = from.sample_freq_;
    }
    if (cached_has_bits & 0x00000020u) {
      sample_type_ = from.sample_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      read_format_ = from.read_format_;
    }
    if (cached_has_bits & 0x00000080u) {
      disabled_ = from.disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      inherit_ = from.inherit_;
    }
    if (cached_has_bits & 0x00000200u) {
      pinned_ = from.pinned_;
    }
    if (cached_has_bits & 0x00000400u) {
      exclusive_ = from.exclusive_;
    }
    if (cached_has_bits & 0x00000800u) {
      exclude_user_ = from.exclude_user_;
    }
    if (cached_has_bits & 0x00001000u) {
      exclude_kernel_ = from.exclude_kernel_;
    }
    if (cached_has_bits & 0x00002000u) {
      exclude_hv_ = from.exclude_hv_;
    }
    if (cached_has_bits & 0x00004000u) {
      exclude_idle_ = from.exclude_idle_;
    }
    if (cached_has_bits & 0x00008000u) {
      mmap_ = from.mmap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      comm_ = from.comm_;
    }
    if (cached_has_bits & 0x00020000u) {
      freq_ = from.freq_;
    }
    if (cached_has_bits & 0x00040000u) {
      inherit_stat_ = from.inherit_stat_;
    }
    if (cached_has_bits & 0x00080000u) {
      enable_on_exec_ = from.enable_on_exec_;
    }
    if (cached_has_bits & 0x00100000u) {
      task_ = from.task_;
    }
    if (cached_has_bits & 0x00200000u) {
      watermark_ = from.watermark_;
    }
    if (cached_has_bits & 0x00400000u) {
      mmap_data_ = from.mmap_data_;
    }
    if (cached_has_bits & 0x00800000u) {
      precise_ip_ = from.precise_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      sample_id_all_ = from.sample_id_all_;
    }
    if (cached_has_bits & 0x02000000u) {
      exclude_host_ = from.exclude_host_;
    }
    if (cached_has_bits & 0x04000000u) {
      exclude_guest_ = from.exclude_guest_;
    }
    if (cached_has_bits & 0x08000000u) {
      wakeup_events_ = from.wakeup_events_;
    }
    if (cached_has_bits & 0x10000000u) {
      wakeup_watermark_ = from.wakeup_watermark_;
    }
    if (cached_has_bits & 0x20000000u) {
      bp_addr_ = from.bp_addr_;
    }
    if (cached_has_bits & 0x40000000u) {
      config1_ = from.config1_;
    }
    if (cached_has_bits & 0x80000000u) {
      bp_len_ = from.bp_len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      config2_ = from.config2_;
    }
    if (cached_has_bits & 0x00000002u) {
      branch_sample_type_ = from.branch_sample_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      bp_type_ = from.bp_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_PerfEventAttr::CopyFrom(const PerfDataProto_PerfEventAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEventAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfEventAttr::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfEventAttr::InternalSwap(PerfDataProto_PerfEventAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfEventAttr, bp_type_)
      + sizeof(PerfDataProto_PerfEventAttr::bp_type_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfEventAttr, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

std::string PerfDataProto_PerfEventAttr::GetTypeName() const {
  return "metrics.PerfDataProto.PerfEventAttr";
}


// ===================================================================

class PerfDataProto_PerfFileAttr::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_PerfFileAttr>()._has_bits_);
  static const ::metrics::PerfDataProto_PerfEventAttr& attr(const PerfDataProto_PerfFileAttr* msg);
  static void set_has_attr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::PerfDataProto_PerfEventAttr&
PerfDataProto_PerfFileAttr::_Internal::attr(const PerfDataProto_PerfFileAttr* msg) {
  return *msg->attr_;
}
PerfDataProto_PerfFileAttr::PerfDataProto_PerfFileAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.PerfFileAttr)
}
PerfDataProto_PerfFileAttr::PerfDataProto_PerfFileAttr(const PerfDataProto_PerfFileAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_attr()) {
    attr_ = new ::metrics::PerfDataProto_PerfEventAttr(*from.attr_);
  } else {
    attr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfFileAttr)
}

inline void PerfDataProto_PerfFileAttr::SharedCtor() {
attr_ = nullptr;
}

PerfDataProto_PerfFileAttr::~PerfDataProto_PerfFileAttr() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfFileAttr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_PerfFileAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attr_;
}

void PerfDataProto_PerfFileAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_PerfFileAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfFileAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(attr_ != nullptr);
    attr_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_PerfFileAttr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_PerfFileAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.PerfFileAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::attr(this),
        _Internal::attr(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.PerfFileAttr)
  return target;
}

size_t PerfDataProto_PerfFileAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfFileAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ids_size());
    total_size += data_size;
  }

  // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfFileAttr::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_PerfFileAttr*>(
      &from));
}

void PerfDataProto_PerfFileAttr::MergeFrom(const PerfDataProto_PerfFileAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfFileAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_attr()) {
    _internal_mutable_attr()->::metrics::PerfDataProto_PerfEventAttr::MergeFrom(from._internal_attr());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_PerfFileAttr::CopyFrom(const PerfDataProto_PerfFileAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfFileAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfFileAttr::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfFileAttr::InternalSwap(PerfDataProto_PerfFileAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ids_.InternalSwap(&other->ids_);
  swap(attr_, other->attr_);
}

std::string PerfDataProto_PerfFileAttr::GetTypeName() const {
  return "metrics.PerfDataProto.PerfFileAttr";
}


// ===================================================================

class PerfDataProto_PerfEventType::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_PerfEventType>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_md5_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PerfDataProto_PerfEventType::PerfDataProto_PerfEventType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.PerfEventType)
}
PerfDataProto_PerfEventType::PerfDataProto_PerfEventType(const PerfDataProto_PerfEventType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_md5_prefix_) -
    reinterpret_cast<char*>(&id_)) + sizeof(name_md5_prefix_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEventType)
}

inline void PerfDataProto_PerfEventType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&name_md5_prefix_) -
    reinterpret_cast<char*>(&id_)) + sizeof(name_md5_prefix_));
}

PerfDataProto_PerfEventType::~PerfDataProto_PerfEventType() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEventType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_PerfEventType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfDataProto_PerfEventType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_PerfEventType::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEventType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&name_md5_prefix_) -
        reinterpret_cast<char*>(&id_)) + sizeof(name_md5_prefix_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_PerfEventType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 name_md5_prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_name_md5_prefix(&has_bits);
          name_md5_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_PerfEventType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.PerfEventType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 name_md5_prefix = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_name_md5_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.PerfEventType)
  return target;
}

size_t PerfDataProto_PerfEventType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEventType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint64 name_md5_prefix = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_name_md5_prefix());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfEventType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_PerfEventType*>(
      &from));
}

void PerfDataProto_PerfEventType::MergeFrom(const PerfDataProto_PerfEventType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEventType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      name_md5_prefix_ = from.name_md5_prefix_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_PerfEventType::CopyFrom(const PerfDataProto_PerfEventType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEventType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfEventType::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfEventType::InternalSwap(PerfDataProto_PerfEventType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfEventType, name_md5_prefix_)
      + sizeof(PerfDataProto_PerfEventType::name_md5_prefix_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfEventType, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string PerfDataProto_PerfEventType::GetTypeName() const {
  return "metrics.PerfDataProto.PerfEventType";
}


// ===================================================================

class PerfDataProto_SampleInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_SampleInfo>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sample_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PerfDataProto_SampleInfo::PerfDataProto_SampleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.SampleInfo)
}
PerfDataProto_SampleInfo::PerfDataProto_SampleInfo(const PerfDataProto_SampleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(cpu_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.SampleInfo)
}

inline void PerfDataProto_SampleInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cpu_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(cpu_));
}

PerfDataProto_SampleInfo::~PerfDataProto_SampleInfo() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.SampleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_SampleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfDataProto_SampleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_SampleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.SampleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(cpu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_SampleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sample_time_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sample_time_ns(&has_bits);
          sample_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cpu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cpu(&has_bits);
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_SampleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.SampleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // optional uint32 tid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tid(), target);
  }

  // optional uint64 sample_time_ns = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sample_time_ns(), target);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_id(), target);
  }

  // optional uint32 cpu = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cpu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.SampleInfo)
  return target;
}

size_t PerfDataProto_SampleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.SampleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 pid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 tid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tid());
    }

    // optional uint64 sample_time_ns = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sample_time_ns());
    }

    // optional uint64 id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint32 cpu = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_SampleInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_SampleInfo*>(
      &from));
}

void PerfDataProto_SampleInfo::MergeFrom(const PerfDataProto_SampleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.SampleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sample_time_ns_ = from.sample_time_ns_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      cpu_ = from.cpu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_SampleInfo::CopyFrom(const PerfDataProto_SampleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.SampleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_SampleInfo::IsInitialized() const {
  return true;
}

void PerfDataProto_SampleInfo::InternalSwap(PerfDataProto_SampleInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_SampleInfo, cpu_)
      + sizeof(PerfDataProto_SampleInfo::cpu_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_SampleInfo, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

std::string PerfDataProto_SampleInfo::GetTypeName() const {
  return "metrics.PerfDataProto.SampleInfo";
}


// ===================================================================

class PerfDataProto_CommEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_CommEvent>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_comm_md5_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sample_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::metrics::PerfDataProto_SampleInfo& sample_info(const PerfDataProto_CommEvent* msg);
  static void set_has_sample_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::PerfDataProto_SampleInfo&
PerfDataProto_CommEvent::_Internal::sample_info(const PerfDataProto_CommEvent* msg) {
  return *msg->sample_info_;
}
PerfDataProto_CommEvent::PerfDataProto_CommEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.CommEvent)
}
PerfDataProto_CommEvent::PerfDataProto_CommEvent(const PerfDataProto_CommEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_sample_info()) {
    sample_info_ = new ::metrics::PerfDataProto_SampleInfo(*from.sample_info_);
  } else {
    sample_info_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_time_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(sample_time_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.CommEvent)
}

inline void PerfDataProto_CommEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sample_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_time_) -
    reinterpret_cast<char*>(&sample_info_)) + sizeof(sample_time_));
}

PerfDataProto_CommEvent::~PerfDataProto_CommEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.CommEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_CommEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sample_info_;
}

void PerfDataProto_CommEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_CommEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.CommEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sample_info_ != nullptr);
    sample_info_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sample_time_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(sample_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_CommEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 comm_md5_prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_comm_md5_prefix(&has_bits);
          comm_md5_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sample_time = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_sample_time(&has_bits);
          sample_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_CommEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.CommEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // optional uint32 tid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tid(), target);
  }

  // optional uint64 comm_md5_prefix = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_comm_md5_prefix(), target);
  }

  // optional uint64 sample_time = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_sample_time(), target);
  }

  // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sample_info(this),
        _Internal::sample_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.CommEvent)
  return target;
}

size_t PerfDataProto_CommEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.CommEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sample_info_);
    }

    // optional uint32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 tid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tid());
    }

    // optional uint64 comm_md5_prefix = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_comm_md5_prefix());
    }

    // optional uint64 sample_time = 5 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sample_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_CommEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_CommEvent*>(
      &from));
}

void PerfDataProto_CommEvent::MergeFrom(const PerfDataProto_CommEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.CommEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from._internal_sample_info());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000008u) {
      comm_md5_prefix_ = from.comm_md5_prefix_;
    }
    if (cached_has_bits & 0x00000010u) {
      sample_time_ = from.sample_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_CommEvent::CopyFrom(const PerfDataProto_CommEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.CommEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_CommEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_CommEvent::InternalSwap(PerfDataProto_CommEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_CommEvent, sample_time_)
      + sizeof(PerfDataProto_CommEvent::sample_time_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_CommEvent, sample_info_)>(
          reinterpret_cast<char*>(&sample_info_),
          reinterpret_cast<char*>(&other->sample_info_));
}

std::string PerfDataProto_CommEvent::GetTypeName() const {
  return "metrics.PerfDataProto.CommEvent";
}


// ===================================================================

class PerfDataProto_MMapEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_MMapEvent>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pgoff(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_filename_md5_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_root_path_md5_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::metrics::PerfDataProto_SampleInfo& sample_info(const PerfDataProto_MMapEvent* msg);
  static void set_has_sample_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::PerfDataProto_SampleInfo&
PerfDataProto_MMapEvent::_Internal::sample_info(const PerfDataProto_MMapEvent* msg) {
  return *msg->sample_info_;
}
PerfDataProto_MMapEvent::PerfDataProto_MMapEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.MMapEvent)
}
PerfDataProto_MMapEvent::PerfDataProto_MMapEvent(const PerfDataProto_MMapEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_sample_info()) {
    sample_info_ = new ::metrics::PerfDataProto_SampleInfo(*from.sample_info_);
  } else {
    sample_info_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&root_path_md5_prefix_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(root_path_md5_prefix_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.MMapEvent)
}

inline void PerfDataProto_MMapEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sample_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&root_path_md5_prefix_) -
    reinterpret_cast<char*>(&sample_info_)) + sizeof(root_path_md5_prefix_));
}

PerfDataProto_MMapEvent::~PerfDataProto_MMapEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.MMapEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_MMapEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sample_info_;
}

void PerfDataProto_MMapEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_MMapEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.MMapEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sample_info_ != nullptr);
    sample_info_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&root_path_md5_prefix_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(root_path_md5_prefix_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_MMapEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_len(&has_bits);
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 pgoff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pgoff(&has_bits);
          pgoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 filename_md5_prefix = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_filename_md5_prefix(&has_bits);
          filename_md5_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 root_path_md5_prefix = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_root_path_md5_prefix(&has_bits);
          root_path_md5_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_MMapEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.MMapEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // optional uint32 tid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tid(), target);
  }

  // optional uint64 start = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start(), target);
  }

  // optional uint64 len = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_len(), target);
  }

  // optional uint64 pgoff = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_pgoff(), target);
  }

  // optional uint64 filename_md5_prefix = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_filename_md5_prefix(), target);
  }

  // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::sample_info(this),
        _Internal::sample_info(this).GetCachedSize(), target, stream);
  }

  // optional uint64 root_path_md5_prefix = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_root_path_md5_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.MMapEvent)
  return target;
}

size_t PerfDataProto_MMapEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.MMapEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sample_info_);
    }

    // optional uint32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 tid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tid());
    }

    // optional uint64 start = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
    }

    // optional uint64 len = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
    }

    // optional uint64 pgoff = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pgoff());
    }

    // optional uint64 filename_md5_prefix = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filename_md5_prefix());
    }

    // optional uint64 root_path_md5_prefix = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_root_path_md5_prefix());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_MMapEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_MMapEvent*>(
      &from));
}

void PerfDataProto_MMapEvent::MergeFrom(const PerfDataProto_MMapEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.MMapEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from._internal_sample_info());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000010u) {
      len_ = from.len_;
    }
    if (cached_has_bits & 0x00000020u) {
      pgoff_ = from.pgoff_;
    }
    if (cached_has_bits & 0x00000040u) {
      filename_md5_prefix_ = from.filename_md5_prefix_;
    }
    if (cached_has_bits & 0x00000080u) {
      root_path_md5_prefix_ = from.root_path_md5_prefix_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_MMapEvent::CopyFrom(const PerfDataProto_MMapEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.MMapEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_MMapEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_MMapEvent::InternalSwap(PerfDataProto_MMapEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_MMapEvent, root_path_md5_prefix_)
      + sizeof(PerfDataProto_MMapEvent::root_path_md5_prefix_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_MMapEvent, sample_info_)>(
          reinterpret_cast<char*>(&sample_info_),
          reinterpret_cast<char*>(&other->sample_info_));
}

std::string PerfDataProto_MMapEvent::GetTypeName() const {
  return "metrics.PerfDataProto.MMapEvent";
}


// ===================================================================

class PerfDataProto_LostEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_LostEvent>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lost(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::metrics::PerfDataProto_SampleInfo& sample_info(const PerfDataProto_LostEvent* msg);
  static void set_has_sample_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::PerfDataProto_SampleInfo&
PerfDataProto_LostEvent::_Internal::sample_info(const PerfDataProto_LostEvent* msg) {
  return *msg->sample_info_;
}
PerfDataProto_LostEvent::PerfDataProto_LostEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.LostEvent)
}
PerfDataProto_LostEvent::PerfDataProto_LostEvent(const PerfDataProto_LostEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_sample_info()) {
    sample_info_ = new ::metrics::PerfDataProto_SampleInfo(*from.sample_info_);
  } else {
    sample_info_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lost_) -
    reinterpret_cast<char*>(&id_)) + sizeof(lost_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.LostEvent)
}

inline void PerfDataProto_LostEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sample_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lost_) -
    reinterpret_cast<char*>(&sample_info_)) + sizeof(lost_));
}

PerfDataProto_LostEvent::~PerfDataProto_LostEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.LostEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_LostEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sample_info_;
}

void PerfDataProto_LostEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_LostEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.LostEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sample_info_ != nullptr);
    sample_info_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lost_) -
        reinterpret_cast<char*>(&id_)) + sizeof(lost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_LostEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lost(&has_bits);
          lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.PerfDataProto.SampleInfo sample_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_LostEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.LostEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 lost = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lost(), target);
  }

  // optional .metrics.PerfDataProto.SampleInfo sample_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sample_info(this),
        _Internal::sample_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.LostEvent)
  return target;
}

size_t PerfDataProto_LostEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.LostEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .metrics.PerfDataProto.SampleInfo sample_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sample_info_);
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint64 lost = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lost());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_LostEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_LostEvent*>(
      &from));
}

void PerfDataProto_LostEvent::MergeFrom(const PerfDataProto_LostEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.LostEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from._internal_sample_info());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      lost_ = from.lost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_LostEvent::CopyFrom(const PerfDataProto_LostEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.LostEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_LostEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_LostEvent::InternalSwap(PerfDataProto_LostEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_LostEvent, lost_)
      + sizeof(PerfDataProto_LostEvent::lost_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_LostEvent, sample_info_)>(
          reinterpret_cast<char*>(&sample_info_),
          reinterpret_cast<char*>(&other->sample_info_));
}

std::string PerfDataProto_LostEvent::GetTypeName() const {
  return "metrics.PerfDataProto.LostEvent";
}


// ===================================================================

class PerfDataProto_ThrottleEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_ThrottleEvent>()._has_bits_);
  static void set_has_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::metrics::PerfDataProto_SampleInfo& sample_info(const PerfDataProto_ThrottleEvent* msg);
  static void set_has_sample_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::PerfDataProto_SampleInfo&
PerfDataProto_ThrottleEvent::_Internal::sample_info(const PerfDataProto_ThrottleEvent* msg) {
  return *msg->sample_info_;
}
PerfDataProto_ThrottleEvent::PerfDataProto_ThrottleEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.ThrottleEvent)
}
PerfDataProto_ThrottleEvent::PerfDataProto_ThrottleEvent(const PerfDataProto_ThrottleEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_sample_info()) {
    sample_info_ = new ::metrics::PerfDataProto_SampleInfo(*from.sample_info_);
  } else {
    sample_info_ = nullptr;
  }
  ::memcpy(&time_ns_, &from.time_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&time_ns_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.ThrottleEvent)
}

inline void PerfDataProto_ThrottleEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sample_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&sample_info_)) + sizeof(stream_id_));
}

PerfDataProto_ThrottleEvent::~PerfDataProto_ThrottleEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.ThrottleEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_ThrottleEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sample_info_;
}

void PerfDataProto_ThrottleEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_ThrottleEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.ThrottleEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sample_info_ != nullptr);
    sample_info_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&time_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&time_ns_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_ThrottleEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 time_ns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_ns(&has_bits);
          time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.PerfDataProto.SampleInfo sample_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_ThrottleEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.ThrottleEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 time_ns = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_ns(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  // optional .metrics.PerfDataProto.SampleInfo sample_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sample_info(this),
        _Internal::sample_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.ThrottleEvent)
  return target;
}

size_t PerfDataProto_ThrottleEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.ThrottleEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .metrics.PerfDataProto.SampleInfo sample_info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sample_info_);
    }

    // optional uint64 time_ns = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_ns());
    }

    // optional uint64 id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_ThrottleEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_ThrottleEvent*>(
      &from));
}

void PerfDataProto_ThrottleEvent::MergeFrom(const PerfDataProto_ThrottleEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.ThrottleEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from._internal_sample_info());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ns_ = from.time_ns_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_ThrottleEvent::CopyFrom(const PerfDataProto_ThrottleEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.ThrottleEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_ThrottleEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_ThrottleEvent::InternalSwap(PerfDataProto_ThrottleEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_ThrottleEvent, stream_id_)
      + sizeof(PerfDataProto_ThrottleEvent::stream_id_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_ThrottleEvent, sample_info_)>(
          reinterpret_cast<char*>(&sample_info_),
          reinterpret_cast<char*>(&other->sample_info_));
}

std::string PerfDataProto_ThrottleEvent::GetTypeName() const {
  return "metrics.PerfDataProto.ThrottleEvent";
}


// ===================================================================

class PerfDataProto_BranchStackEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_BranchStackEntry>()._has_bits_);
  static void set_has_from_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mispredicted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_predicted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_in_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_abort(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cycles(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PerfDataProto_BranchStackEntry::PerfDataProto_BranchStackEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.BranchStackEntry)
}
PerfDataProto_BranchStackEntry::PerfDataProto_BranchStackEntry(const PerfDataProto_BranchStackEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&from_ip_, &from.from_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&cycles_) -
    reinterpret_cast<char*>(&from_ip_)) + sizeof(cycles_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.BranchStackEntry)
}

inline void PerfDataProto_BranchStackEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cycles_) -
    reinterpret_cast<char*>(&from_ip_)) + sizeof(cycles_));
}

PerfDataProto_BranchStackEntry::~PerfDataProto_BranchStackEntry() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.BranchStackEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_BranchStackEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfDataProto_BranchStackEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_BranchStackEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.BranchStackEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&from_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cycles_) -
        reinterpret_cast<char*>(&from_ip_)) + sizeof(cycles_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_BranchStackEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 from_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_from_ip(&has_bits);
          from_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 to_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_to_ip(&has_bits);
          to_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mispredicted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mispredicted(&has_bits);
          mispredicted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool predicted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_predicted(&has_bits);
          predicted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_in_transaction(&has_bits);
          in_transaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool abort = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_abort(&has_bits);
          abort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cycles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cycles(&has_bits);
          cycles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_BranchStackEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.BranchStackEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 from_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from_ip(), target);
  }

  // optional uint64 to_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to_ip(), target);
  }

  // optional bool mispredicted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_mispredicted(), target);
  }

  // optional bool predicted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_predicted(), target);
  }

  // optional bool in_transaction = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_in_transaction(), target);
  }

  // optional bool abort = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_abort(), target);
  }

  // optional uint32 cycles = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cycles(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.BranchStackEntry)
  return target;
}

size_t PerfDataProto_BranchStackEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.BranchStackEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 from_ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_from_ip());
    }

    // optional uint64 to_ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_to_ip());
    }

    // optional bool mispredicted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool predicted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool in_transaction = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool abort = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 cycles = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cycles());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_BranchStackEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_BranchStackEntry*>(
      &from));
}

void PerfDataProto_BranchStackEntry::MergeFrom(const PerfDataProto_BranchStackEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.BranchStackEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      from_ip_ = from.from_ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      to_ip_ = from.to_ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      mispredicted_ = from.mispredicted_;
    }
    if (cached_has_bits & 0x00000008u) {
      predicted_ = from.predicted_;
    }
    if (cached_has_bits & 0x00000010u) {
      in_transaction_ = from.in_transaction_;
    }
    if (cached_has_bits & 0x00000020u) {
      abort_ = from.abort_;
    }
    if (cached_has_bits & 0x00000040u) {
      cycles_ = from.cycles_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_BranchStackEntry::CopyFrom(const PerfDataProto_BranchStackEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.BranchStackEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_BranchStackEntry::IsInitialized() const {
  return true;
}

void PerfDataProto_BranchStackEntry::InternalSwap(PerfDataProto_BranchStackEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_BranchStackEntry, cycles_)
      + sizeof(PerfDataProto_BranchStackEntry::cycles_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_BranchStackEntry, from_ip_)>(
          reinterpret_cast<char*>(&from_ip_),
          reinterpret_cast<char*>(&other->from_ip_));
}

std::string PerfDataProto_BranchStackEntry::GetTypeName() const {
  return "metrics.PerfDataProto.BranchStackEntry";
}


// ===================================================================

class PerfDataProto_SampleEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_SampleEvent>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sample_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_period(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_raw_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_data_src(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

PerfDataProto_SampleEvent::PerfDataProto_SampleEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  callchain_(arena),
  branch_stack_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.SampleEvent)
}
PerfDataProto_SampleEvent::PerfDataProto_SampleEvent(const PerfDataProto_SampleEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      callchain_(from.callchain_),
      branch_stack_(from.branch_stack_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&transaction_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(transaction_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.SampleEvent)
}

inline void PerfDataProto_SampleEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transaction_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(transaction_));
}

PerfDataProto_SampleEvent::~PerfDataProto_SampleEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.SampleEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_SampleEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfDataProto_SampleEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_SampleEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.SampleEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callchain_.Clear();
  branch_stack_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&period_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(period_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transaction_) -
        reinterpret_cast<char*>(&cpu_)) + sizeof(transaction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_SampleEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sample_time_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sample_time_ns(&has_bits);
          sample_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_addr(&has_bits);
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 stream_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 period = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_period(&has_bits);
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cpu = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_cpu(&has_bits);
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 raw_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_raw_size(&has_bits);
          raw_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 callchain = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_callchain(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_callchain(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_branch_stack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 weight = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 data_src = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_data_src(&has_bits);
          data_src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 transaction = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_transaction(&has_bits);
          transaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_SampleEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.SampleEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ip(), target);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // optional uint32 tid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tid(), target);
  }

  // optional uint64 sample_time_ns = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sample_time_ns(), target);
  }

  // optional uint64 addr = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_addr(), target);
  }

  // optional uint64 id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_id(), target);
  }

  // optional uint64 stream_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_stream_id(), target);
  }

  // optional uint64 period = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_period(), target);
  }

  // optional uint32 cpu = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cpu(), target);
  }

  // optional uint32 raw_size = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_raw_size(), target);
  }

  // repeated uint64 callchain = 11;
  for (int i = 0, n = this->_internal_callchain_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_callchain(i), target);
  }

  // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_branch_stack_size()); i < n; i++) {
    const auto& repfield = this->_internal_branch_stack(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 weight = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_weight(), target);
  }

  // optional uint64 data_src = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_data_src(), target);
  }

  // optional uint64 transaction = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.SampleEvent)
  return target;
}

size_t PerfDataProto_SampleEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.SampleEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 callchain = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->callchain_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_callchain_size());
    total_size += data_size;
  }

  // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
  total_size += 1UL * this->_internal_branch_stack_size();
  for (const auto& msg : this->branch_stack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ip());
    }

    // optional uint32 pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 tid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tid());
    }

    // optional uint64 sample_time_ns = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sample_time_ns());
    }

    // optional uint64 addr = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_addr());
    }

    // optional uint64 id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint64 stream_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_stream_id());
    }

    // optional uint64 period = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_period());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 cpu = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpu());
    }

    // optional uint32 raw_size = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_raw_size());
    }

    // optional uint64 weight = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_weight());
    }

    // optional uint64 data_src = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_data_src());
    }

    // optional uint64 transaction = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_transaction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_SampleEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_SampleEvent*>(
      &from));
}

void PerfDataProto_SampleEvent::MergeFrom(const PerfDataProto_SampleEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.SampleEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  callchain_.MergeFrom(from.callchain_);
  branch_stack_.MergeFrom(from.branch_stack_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000008u) {
      sample_time_ns_ = from.sample_time_ns_;
    }
    if (cached_has_bits & 0x00000010u) {
      addr_ = from.addr_;
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      period_ = from.period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000200u) {
      raw_size_ = from.raw_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000800u) {
      data_src_ = from.data_src_;
    }
    if (cached_has_bits & 0x00001000u) {
      transaction_ = from.transaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_SampleEvent::CopyFrom(const PerfDataProto_SampleEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.SampleEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_SampleEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_SampleEvent::InternalSwap(PerfDataProto_SampleEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  callchain_.InternalSwap(&other->callchain_);
  branch_stack_.InternalSwap(&other->branch_stack_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_SampleEvent, transaction_)
      + sizeof(PerfDataProto_SampleEvent::transaction_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_SampleEvent, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

std::string PerfDataProto_SampleEvent::GetTypeName() const {
  return "metrics.PerfDataProto.SampleEvent";
}


// ===================================================================

class PerfDataProto_ForkEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_ForkEvent>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ppid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ptid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fork_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::metrics::PerfDataProto_SampleInfo& sample_info(const PerfDataProto_ForkEvent* msg);
  static void set_has_sample_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::PerfDataProto_SampleInfo&
PerfDataProto_ForkEvent::_Internal::sample_info(const PerfDataProto_ForkEvent* msg) {
  return *msg->sample_info_;
}
PerfDataProto_ForkEvent::PerfDataProto_ForkEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.ForkEvent)
}
PerfDataProto_ForkEvent::PerfDataProto_ForkEvent(const PerfDataProto_ForkEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_sample_info()) {
    sample_info_ = new ::metrics::PerfDataProto_SampleInfo(*from.sample_info_);
  } else {
    sample_info_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fork_time_ns_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(fork_time_ns_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.ForkEvent)
}

inline void PerfDataProto_ForkEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sample_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fork_time_ns_) -
    reinterpret_cast<char*>(&sample_info_)) + sizeof(fork_time_ns_));
}

PerfDataProto_ForkEvent::~PerfDataProto_ForkEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.ForkEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_ForkEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sample_info_;
}

void PerfDataProto_ForkEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_ForkEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.ForkEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sample_info_ != nullptr);
    sample_info_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fork_time_ns_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(fork_time_ns_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_ForkEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ppid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ppid(&has_bits);
          ppid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ptid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ptid(&has_bits);
          ptid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fork_time_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_fork_time_ns(&has_bits);
          fork_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_ForkEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.ForkEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // optional uint32 ppid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ppid(), target);
  }

  // optional uint32 tid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tid(), target);
  }

  // optional uint32 ptid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ptid(), target);
  }

  // optional uint64 fork_time_ns = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fork_time_ns(), target);
  }

  // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::sample_info(this),
        _Internal::sample_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.ForkEvent)
  return target;
}

size_t PerfDataProto_ForkEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.ForkEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sample_info_);
    }

    // optional uint32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 ppid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ppid());
    }

    // optional uint32 tid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tid());
    }

    // optional uint32 ptid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ptid());
    }

    // optional uint64 fork_time_ns = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fork_time_ns());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_ForkEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_ForkEvent*>(
      &from));
}

void PerfDataProto_ForkEvent::MergeFrom(const PerfDataProto_ForkEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.ForkEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from._internal_sample_info());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ppid_ = from.ppid_;
    }
    if (cached_has_bits & 0x00000008u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000010u) {
      ptid_ = from.ptid_;
    }
    if (cached_has_bits & 0x00000020u) {
      fork_time_ns_ = from.fork_time_ns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_ForkEvent::CopyFrom(const PerfDataProto_ForkEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.ForkEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_ForkEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_ForkEvent::InternalSwap(PerfDataProto_ForkEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_ForkEvent, fork_time_ns_)
      + sizeof(PerfDataProto_ForkEvent::fork_time_ns_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_ForkEvent, sample_info_)>(
          reinterpret_cast<char*>(&sample_info_),
          reinterpret_cast<char*>(&other->sample_info_));
}

std::string PerfDataProto_ForkEvent::GetTypeName() const {
  return "metrics.PerfDataProto.ForkEvent";
}


// ===================================================================

class PerfDataProto_EventHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_EventHeader>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_misc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PerfDataProto_EventHeader::PerfDataProto_EventHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.EventHeader)
}
PerfDataProto_EventHeader::PerfDataProto_EventHeader(const PerfDataProto_EventHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.EventHeader)
}

inline void PerfDataProto_EventHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(size_));
}

PerfDataProto_EventHeader::~PerfDataProto_EventHeader() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.EventHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_EventHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfDataProto_EventHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_EventHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.EventHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&type_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_EventHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 misc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_misc(&has_bits);
          misc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_EventHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.EventHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 misc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_misc(), target);
  }

  // optional uint32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.EventHeader)
  return target;
}

size_t PerfDataProto_EventHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.EventHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional uint32 misc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_misc());
    }

    // optional uint32 size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_EventHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_EventHeader*>(
      &from));
}

void PerfDataProto_EventHeader::MergeFrom(const PerfDataProto_EventHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.EventHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      misc_ = from.misc_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_EventHeader::CopyFrom(const PerfDataProto_EventHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.EventHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_EventHeader::IsInitialized() const {
  return true;
}

void PerfDataProto_EventHeader::InternalSwap(PerfDataProto_EventHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_EventHeader, size_)
      + sizeof(PerfDataProto_EventHeader::size_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_EventHeader, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

std::string PerfDataProto_EventHeader::GetTypeName() const {
  return "metrics.PerfDataProto.EventHeader";
}


// ===================================================================

class PerfDataProto_PerfEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_PerfEvent>()._has_bits_);
  static const ::metrics::PerfDataProto_EventHeader& header(const PerfDataProto_PerfEvent* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::metrics::PerfDataProto_MMapEvent& mmap_event(const PerfDataProto_PerfEvent* msg);
  static const ::metrics::PerfDataProto_SampleEvent& sample_event(const PerfDataProto_PerfEvent* msg);
  static const ::metrics::PerfDataProto_CommEvent& comm_event(const PerfDataProto_PerfEvent* msg);
  static const ::metrics::PerfDataProto_ForkEvent& fork_event(const PerfDataProto_PerfEvent* msg);
  static const ::metrics::PerfDataProto_ForkEvent& exit_event(const PerfDataProto_PerfEvent* msg);
  static const ::metrics::PerfDataProto_LostEvent& lost_event(const PerfDataProto_PerfEvent* msg);
  static const ::metrics::PerfDataProto_ThrottleEvent& throttle_event(const PerfDataProto_PerfEvent* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::metrics::PerfDataProto_EventHeader&
PerfDataProto_PerfEvent::_Internal::header(const PerfDataProto_PerfEvent* msg) {
  return *msg->header_;
}
const ::metrics::PerfDataProto_MMapEvent&
PerfDataProto_PerfEvent::_Internal::mmap_event(const PerfDataProto_PerfEvent* msg) {
  return *msg->event_type_.mmap_event_;
}
const ::metrics::PerfDataProto_SampleEvent&
PerfDataProto_PerfEvent::_Internal::sample_event(const PerfDataProto_PerfEvent* msg) {
  return *msg->event_type_.sample_event_;
}
const ::metrics::PerfDataProto_CommEvent&
PerfDataProto_PerfEvent::_Internal::comm_event(const PerfDataProto_PerfEvent* msg) {
  return *msg->event_type_.comm_event_;
}
const ::metrics::PerfDataProto_ForkEvent&
PerfDataProto_PerfEvent::_Internal::fork_event(const PerfDataProto_PerfEvent* msg) {
  return *msg->event_type_.fork_event_;
}
const ::metrics::PerfDataProto_ForkEvent&
PerfDataProto_PerfEvent::_Internal::exit_event(const PerfDataProto_PerfEvent* msg) {
  return *msg->event_type_.exit_event_;
}
const ::metrics::PerfDataProto_LostEvent&
PerfDataProto_PerfEvent::_Internal::lost_event(const PerfDataProto_PerfEvent* msg) {
  return *msg->event_type_.lost_event_;
}
const ::metrics::PerfDataProto_ThrottleEvent&
PerfDataProto_PerfEvent::_Internal::throttle_event(const PerfDataProto_PerfEvent* msg) {
  return *msg->event_type_.throttle_event_;
}
void PerfDataProto_PerfEvent::set_allocated_mmap_event(::metrics::PerfDataProto_MMapEvent* mmap_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_type();
  if (mmap_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mmap_event);
    if (message_arena != submessage_arena) {
      mmap_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mmap_event, submessage_arena);
    }
    set_has_mmap_event();
    event_type_.mmap_event_ = mmap_event;
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.mmap_event)
}
void PerfDataProto_PerfEvent::set_allocated_sample_event(::metrics::PerfDataProto_SampleEvent* sample_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_type();
  if (sample_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sample_event);
    if (message_arena != submessage_arena) {
      sample_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_event, submessage_arena);
    }
    set_has_sample_event();
    event_type_.sample_event_ = sample_event;
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.sample_event)
}
void PerfDataProto_PerfEvent::set_allocated_comm_event(::metrics::PerfDataProto_CommEvent* comm_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_type();
  if (comm_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(comm_event);
    if (message_arena != submessage_arena) {
      comm_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comm_event, submessage_arena);
    }
    set_has_comm_event();
    event_type_.comm_event_ = comm_event;
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.comm_event)
}
void PerfDataProto_PerfEvent::set_allocated_fork_event(::metrics::PerfDataProto_ForkEvent* fork_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_type();
  if (fork_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fork_event);
    if (message_arena != submessage_arena) {
      fork_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fork_event, submessage_arena);
    }
    set_has_fork_event();
    event_type_.fork_event_ = fork_event;
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.fork_event)
}
void PerfDataProto_PerfEvent::set_allocated_exit_event(::metrics::PerfDataProto_ForkEvent* exit_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_type();
  if (exit_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exit_event);
    if (message_arena != submessage_arena) {
      exit_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exit_event, submessage_arena);
    }
    set_has_exit_event();
    event_type_.exit_event_ = exit_event;
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.exit_event)
}
void PerfDataProto_PerfEvent::set_allocated_lost_event(::metrics::PerfDataProto_LostEvent* lost_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_type();
  if (lost_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lost_event);
    if (message_arena != submessage_arena) {
      lost_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lost_event, submessage_arena);
    }
    set_has_lost_event();
    event_type_.lost_event_ = lost_event;
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.lost_event)
}
void PerfDataProto_PerfEvent::set_allocated_throttle_event(::metrics::PerfDataProto_ThrottleEvent* throttle_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_type();
  if (throttle_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(throttle_event);
    if (message_arena != submessage_arena) {
      throttle_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_event, submessage_arena);
    }
    set_has_throttle_event();
    event_type_.throttle_event_ = throttle_event;
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.throttle_event)
}
PerfDataProto_PerfEvent::PerfDataProto_PerfEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.PerfEvent)
}
PerfDataProto_PerfEvent::PerfDataProto_PerfEvent(const PerfDataProto_PerfEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::metrics::PerfDataProto_EventHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  clear_has_event_type();
  switch (from.event_type_case()) {
    case kMmapEvent: {
      _internal_mutable_mmap_event()->::metrics::PerfDataProto_MMapEvent::MergeFrom(from._internal_mmap_event());
      break;
    }
    case kSampleEvent: {
      _internal_mutable_sample_event()->::metrics::PerfDataProto_SampleEvent::MergeFrom(from._internal_sample_event());
      break;
    }
    case kCommEvent: {
      _internal_mutable_comm_event()->::metrics::PerfDataProto_CommEvent::MergeFrom(from._internal_comm_event());
      break;
    }
    case kForkEvent: {
      _internal_mutable_fork_event()->::metrics::PerfDataProto_ForkEvent::MergeFrom(from._internal_fork_event());
      break;
    }
    case kExitEvent: {
      _internal_mutable_exit_event()->::metrics::PerfDataProto_ForkEvent::MergeFrom(from._internal_exit_event());
      break;
    }
    case kLostEvent: {
      _internal_mutable_lost_event()->::metrics::PerfDataProto_LostEvent::MergeFrom(from._internal_lost_event());
      break;
    }
    case kThrottleEvent: {
      _internal_mutable_throttle_event()->::metrics::PerfDataProto_ThrottleEvent::MergeFrom(from._internal_throttle_event());
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEvent)
}

inline void PerfDataProto_PerfEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&header_)) + sizeof(timestamp_));
clear_has_event_type();
}

PerfDataProto_PerfEvent::~PerfDataProto_PerfEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_PerfEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_event_type()) {
    clear_event_type();
  }
}

void PerfDataProto_PerfEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_PerfEvent::clear_event_type() {
// @@protoc_insertion_point(one_of_clear_start:metrics.PerfDataProto.PerfEvent)
  switch (event_type_case()) {
    case kMmapEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_type_.mmap_event_;
      }
      break;
    }
    case kSampleEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_type_.sample_event_;
      }
      break;
    }
    case kCommEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_type_.comm_event_;
      }
      break;
    }
    case kForkEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_type_.fork_event_;
      }
      break;
    }
    case kExitEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_type_.exit_event_;
      }
      break;
    }
    case kLostEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_type_.lost_event_;
      }
      break;
    }
    case kThrottleEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_type_.throttle_event_;
      }
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_TYPE_NOT_SET;
}


void PerfDataProto_PerfEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  timestamp_ = uint64_t{0u};
  clear_event_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_PerfEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .metrics.PerfDataProto.EventHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metrics.PerfDataProto.MMapEvent mmap_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mmap_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metrics.PerfDataProto.SampleEvent sample_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metrics.PerfDataProto.CommEvent comm_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_comm_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metrics.PerfDataProto.ForkEvent fork_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fork_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metrics.PerfDataProto.LostEvent lost_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_lost_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metrics.PerfDataProto.ThrottleEvent throttle_event = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metrics.PerfDataProto.ForkEvent exit_event = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_exit_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_PerfEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.PerfEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.PerfDataProto.EventHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  switch (event_type_case()) {
    case kMmapEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::mmap_event(this),
          _Internal::mmap_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kSampleEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::sample_event(this),
          _Internal::sample_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kCommEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::comm_event(this),
          _Internal::comm_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kForkEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::fork_event(this),
          _Internal::fork_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kLostEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::lost_event(this),
          _Internal::lost_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kThrottleEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::throttle_event(this),
          _Internal::throttle_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kExitEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::exit_event(this),
          _Internal::exit_event(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional uint64 timestamp = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.PerfEvent)
  return target;
}

size_t PerfDataProto_PerfEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .metrics.PerfDataProto.EventHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint64 timestamp = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

  }
  switch (event_type_case()) {
    // .metrics.PerfDataProto.MMapEvent mmap_event = 2;
    case kMmapEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_type_.mmap_event_);
      break;
    }
    // .metrics.PerfDataProto.SampleEvent sample_event = 3;
    case kSampleEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_type_.sample_event_);
      break;
    }
    // .metrics.PerfDataProto.CommEvent comm_event = 4;
    case kCommEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_type_.comm_event_);
      break;
    }
    // .metrics.PerfDataProto.ForkEvent fork_event = 5;
    case kForkEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_type_.fork_event_);
      break;
    }
    // .metrics.PerfDataProto.ForkEvent exit_event = 9;
    case kExitEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_type_.exit_event_);
      break;
    }
    // .metrics.PerfDataProto.LostEvent lost_event = 6;
    case kLostEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_type_.lost_event_);
      break;
    }
    // .metrics.PerfDataProto.ThrottleEvent throttle_event = 7;
    case kThrottleEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_type_.throttle_event_);
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_PerfEvent*>(
      &from));
}

void PerfDataProto_PerfEvent::MergeFrom(const PerfDataProto_PerfEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::metrics::PerfDataProto_EventHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.event_type_case()) {
    case kMmapEvent: {
      _internal_mutable_mmap_event()->::metrics::PerfDataProto_MMapEvent::MergeFrom(from._internal_mmap_event());
      break;
    }
    case kSampleEvent: {
      _internal_mutable_sample_event()->::metrics::PerfDataProto_SampleEvent::MergeFrom(from._internal_sample_event());
      break;
    }
    case kCommEvent: {
      _internal_mutable_comm_event()->::metrics::PerfDataProto_CommEvent::MergeFrom(from._internal_comm_event());
      break;
    }
    case kForkEvent: {
      _internal_mutable_fork_event()->::metrics::PerfDataProto_ForkEvent::MergeFrom(from._internal_fork_event());
      break;
    }
    case kExitEvent: {
      _internal_mutable_exit_event()->::metrics::PerfDataProto_ForkEvent::MergeFrom(from._internal_exit_event());
      break;
    }
    case kLostEvent: {
      _internal_mutable_lost_event()->::metrics::PerfDataProto_LostEvent::MergeFrom(from._internal_lost_event());
      break;
    }
    case kThrottleEvent: {
      _internal_mutable_throttle_event()->::metrics::PerfDataProto_ThrottleEvent::MergeFrom(from._internal_throttle_event());
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_PerfEvent::CopyFrom(const PerfDataProto_PerfEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfEvent::InternalSwap(PerfDataProto_PerfEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfEvent, timestamp_)
      + sizeof(PerfDataProto_PerfEvent::timestamp_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfEvent, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(event_type_, other->event_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string PerfDataProto_PerfEvent::GetTypeName() const {
  return "metrics.PerfDataProto.PerfEvent";
}


// ===================================================================

class PerfDataProto_PerfEventStats::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_PerfEventStats>()._has_bits_);
  static void set_has_num_events_read(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_sample_events(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_mmap_events(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_fork_events(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_exit_events(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_sample_events_mapped(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_did_remap(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PerfDataProto_PerfEventStats::PerfDataProto_PerfEventStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.PerfEventStats)
}
PerfDataProto_PerfEventStats::PerfDataProto_PerfEventStats(const PerfDataProto_PerfEventStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&num_events_read_, &from.num_events_read_,
    static_cast<size_t>(reinterpret_cast<char*>(&did_remap_) -
    reinterpret_cast<char*>(&num_events_read_)) + sizeof(did_remap_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEventStats)
}

inline void PerfDataProto_PerfEventStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_events_read_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&did_remap_) -
    reinterpret_cast<char*>(&num_events_read_)) + sizeof(did_remap_));
}

PerfDataProto_PerfEventStats::~PerfDataProto_PerfEventStats() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEventStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_PerfEventStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfDataProto_PerfEventStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_PerfEventStats::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEventStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&num_events_read_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&did_remap_) -
        reinterpret_cast<char*>(&num_events_read_)) + sizeof(did_remap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_PerfEventStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_events_read = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_events_read(&has_bits);
          num_events_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_sample_events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_sample_events(&has_bits);
          num_sample_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_mmap_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_mmap_events(&has_bits);
          num_mmap_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_fork_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_fork_events(&has_bits);
          num_fork_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_exit_events = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_exit_events(&has_bits);
          num_exit_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_sample_events_mapped = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_num_sample_events_mapped(&has_bits);
          num_sample_events_mapped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_remap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_did_remap(&has_bits);
          did_remap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_PerfEventStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.PerfEventStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_events_read = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_events_read(), target);
  }

  // optional uint32 num_sample_events = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_sample_events(), target);
  }

  // optional uint32 num_mmap_events = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_mmap_events(), target);
  }

  // optional uint32 num_fork_events = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_fork_events(), target);
  }

  // optional uint32 num_exit_events = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_exit_events(), target);
  }

  // optional uint32 num_sample_events_mapped = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_sample_events_mapped(), target);
  }

  // optional bool did_remap = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_did_remap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.PerfEventStats)
  return target;
}

size_t PerfDataProto_PerfEventStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEventStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 num_events_read = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_events_read());
    }

    // optional uint32 num_sample_events = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_sample_events());
    }

    // optional uint32 num_mmap_events = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_mmap_events());
    }

    // optional uint32 num_fork_events = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_fork_events());
    }

    // optional uint32 num_exit_events = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_exit_events());
    }

    // optional uint32 num_sample_events_mapped = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_sample_events_mapped());
    }

    // optional bool did_remap = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfEventStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_PerfEventStats*>(
      &from));
}

void PerfDataProto_PerfEventStats::MergeFrom(const PerfDataProto_PerfEventStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEventStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      num_events_read_ = from.num_events_read_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_sample_events_ = from.num_sample_events_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_mmap_events_ = from.num_mmap_events_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_fork_events_ = from.num_fork_events_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_exit_events_ = from.num_exit_events_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_sample_events_mapped_ = from.num_sample_events_mapped_;
    }
    if (cached_has_bits & 0x00000040u) {
      did_remap_ = from.did_remap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_PerfEventStats::CopyFrom(const PerfDataProto_PerfEventStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEventStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfEventStats::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfEventStats::InternalSwap(PerfDataProto_PerfEventStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfEventStats, did_remap_)
      + sizeof(PerfDataProto_PerfEventStats::did_remap_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfEventStats, num_events_read_)>(
          reinterpret_cast<char*>(&num_events_read_),
          reinterpret_cast<char*>(&other->num_events_read_));
}

std::string PerfDataProto_PerfEventStats::GetTypeName() const {
  return "metrics.PerfDataProto.PerfEventStats";
}


// ===================================================================

class PerfDataProto_PerfBuildID::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_PerfBuildID>()._has_bits_);
  static void set_has_misc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_build_id_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filename_md5_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PerfDataProto_PerfBuildID::PerfDataProto_PerfBuildID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.PerfBuildID)
}
PerfDataProto_PerfBuildID::PerfDataProto_PerfBuildID(const PerfDataProto_PerfBuildID& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  build_id_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    build_id_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_build_id_hash()) {
    build_id_hash_.Set(from._internal_build_id_hash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&misc_, &from.misc_,
    static_cast<size_t>(reinterpret_cast<char*>(&filename_md5_prefix_) -
    reinterpret_cast<char*>(&misc_)) + sizeof(filename_md5_prefix_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfBuildID)
}

inline void PerfDataProto_PerfBuildID::SharedCtor() {
build_id_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  build_id_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&misc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filename_md5_prefix_) -
    reinterpret_cast<char*>(&misc_)) + sizeof(filename_md5_prefix_));
}

PerfDataProto_PerfBuildID::~PerfDataProto_PerfBuildID() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfBuildID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_PerfBuildID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  build_id_hash_.Destroy();
}

void PerfDataProto_PerfBuildID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_PerfBuildID::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfBuildID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    build_id_hash_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&misc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filename_md5_prefix_) -
        reinterpret_cast<char*>(&misc_)) + sizeof(filename_md5_prefix_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_PerfBuildID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 misc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_misc(&has_bits);
          misc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes build_id_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_build_id_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 filename_md5_prefix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_filename_md5_prefix(&has_bits);
          filename_md5_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_PerfBuildID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.PerfBuildID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 misc = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_misc(), target);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // optional bytes build_id_hash = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_build_id_hash(), target);
  }

  // optional uint64 filename_md5_prefix = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_filename_md5_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.PerfBuildID)
  return target;
}

size_t PerfDataProto_PerfBuildID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfBuildID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes build_id_hash = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_build_id_hash());
    }

    // optional uint32 misc = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_misc());
    }

    // optional uint32 pid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint64 filename_md5_prefix = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filename_md5_prefix());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfBuildID::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_PerfBuildID*>(
      &from));
}

void PerfDataProto_PerfBuildID::MergeFrom(const PerfDataProto_PerfBuildID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfBuildID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_build_id_hash(from._internal_build_id_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      misc_ = from.misc_;
    }
    if (cached_has_bits & 0x00000004u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      filename_md5_prefix_ = from.filename_md5_prefix_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_PerfBuildID::CopyFrom(const PerfDataProto_PerfBuildID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfBuildID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfBuildID::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfBuildID::InternalSwap(PerfDataProto_PerfBuildID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &build_id_hash_, lhs_arena,
      &other->build_id_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfBuildID, filename_md5_prefix_)
      + sizeof(PerfDataProto_PerfBuildID::filename_md5_prefix_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfBuildID, misc_)>(
          reinterpret_cast<char*>(&misc_),
          reinterpret_cast<char*>(&other->misc_));
}

std::string PerfDataProto_PerfBuildID::GetTypeName() const {
  return "metrics.PerfDataProto.PerfBuildID";
}


// ===================================================================

class PerfDataProto_PerfPMUMappingsMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_PerfPMUMappingsMetadata>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name_md5_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PerfDataProto_PerfPMUMappingsMetadata::PerfDataProto_PerfPMUMappingsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.PerfPMUMappingsMetadata)
}
PerfDataProto_PerfPMUMappingsMetadata::PerfDataProto_PerfPMUMappingsMetadata(const PerfDataProto_PerfPMUMappingsMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&name_md5_prefix_, &from.name_md5_prefix_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&name_md5_prefix_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfPMUMappingsMetadata)
}

inline void PerfDataProto_PerfPMUMappingsMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_md5_prefix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&name_md5_prefix_)) + sizeof(type_));
}

PerfDataProto_PerfPMUMappingsMetadata::~PerfDataProto_PerfPMUMappingsMetadata() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfPMUMappingsMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_PerfPMUMappingsMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfDataProto_PerfPMUMappingsMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_PerfPMUMappingsMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfPMUMappingsMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&name_md5_prefix_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&name_md5_prefix_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_PerfPMUMappingsMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 name_md5_prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_name_md5_prefix(&has_bits);
          name_md5_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_PerfPMUMappingsMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.PerfPMUMappingsMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint64 name_md5_prefix = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_name_md5_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.PerfPMUMappingsMetadata)
  return target;
}

size_t PerfDataProto_PerfPMUMappingsMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfPMUMappingsMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 name_md5_prefix = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_name_md5_prefix());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfPMUMappingsMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_PerfPMUMappingsMetadata*>(
      &from));
}

void PerfDataProto_PerfPMUMappingsMetadata::MergeFrom(const PerfDataProto_PerfPMUMappingsMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfPMUMappingsMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_md5_prefix_ = from.name_md5_prefix_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_PerfPMUMappingsMetadata::CopyFrom(const PerfDataProto_PerfPMUMappingsMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfPMUMappingsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfPMUMappingsMetadata::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfPMUMappingsMetadata::InternalSwap(PerfDataProto_PerfPMUMappingsMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfPMUMappingsMetadata, type_)
      + sizeof(PerfDataProto_PerfPMUMappingsMetadata::type_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto_PerfPMUMappingsMetadata, name_md5_prefix_)>(
          reinterpret_cast<char*>(&name_md5_prefix_),
          reinterpret_cast<char*>(&other->name_md5_prefix_));
}

std::string PerfDataProto_PerfPMUMappingsMetadata::GetTypeName() const {
  return "metrics.PerfDataProto.PerfPMUMappingsMetadata";
}


// ===================================================================

class PerfDataProto_StringMetadata_StringAndMd5sumPrefix::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_StringMetadata_StringAndMd5sumPrefix>()._has_bits_);
  static void set_has_value_md5_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PerfDataProto_StringMetadata_StringAndMd5sumPrefix::PerfDataProto_StringMetadata_StringAndMd5sumPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
}
PerfDataProto_StringMetadata_StringAndMd5sumPrefix::PerfDataProto_StringMetadata_StringAndMd5sumPrefix(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_md5_prefix_ = from.value_md5_prefix_;
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
}

inline void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SharedCtor() {
value_md5_prefix_ = uint64_t{0u};
}

PerfDataProto_StringMetadata_StringAndMd5sumPrefix::~PerfDataProto_StringMetadata_StringAndMd5sumPrefix() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_md5_prefix_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_StringMetadata_StringAndMd5sumPrefix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 value_md5_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value_md5_prefix(&has_bits);
          value_md5_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_StringMetadata_StringAndMd5sumPrefix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 value_md5_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value_md5_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  return target;
}

size_t PerfDataProto_StringMetadata_StringAndMd5sumPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 value_md5_prefix = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value_md5_prefix());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_StringMetadata_StringAndMd5sumPrefix*>(
      &from));
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::MergeFrom(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value_md5_prefix()) {
    _internal_set_value_md5_prefix(from._internal_value_md5_prefix());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::CopyFrom(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_StringMetadata_StringAndMd5sumPrefix::IsInitialized() const {
  return true;
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::InternalSwap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_md5_prefix_, other->value_md5_prefix_);
}

std::string PerfDataProto_StringMetadata_StringAndMd5sumPrefix::GetTypeName() const {
  return "metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix";
}


// ===================================================================

class PerfDataProto_StringMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto_StringMetadata>()._has_bits_);
  static const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix& perf_command_line_whole(const PerfDataProto_StringMetadata* msg);
  static void set_has_perf_command_line_whole(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix&
PerfDataProto_StringMetadata::_Internal::perf_command_line_whole(const PerfDataProto_StringMetadata* msg) {
  return *msg->perf_command_line_whole_;
}
PerfDataProto_StringMetadata::PerfDataProto_StringMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto.StringMetadata)
}
PerfDataProto_StringMetadata::PerfDataProto_StringMetadata(const PerfDataProto_StringMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_perf_command_line_whole()) {
    perf_command_line_whole_ = new ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix(*from.perf_command_line_whole_);
  } else {
    perf_command_line_whole_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.StringMetadata)
}

inline void PerfDataProto_StringMetadata::SharedCtor() {
perf_command_line_whole_ = nullptr;
}

PerfDataProto_StringMetadata::~PerfDataProto_StringMetadata() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.StringMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto_StringMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete perf_command_line_whole_;
}

void PerfDataProto_StringMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto_StringMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.StringMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(perf_command_line_whole_ != nullptr);
    perf_command_line_whole_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto_StringMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_perf_command_line_whole(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto_StringMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto.StringMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::perf_command_line_whole(this),
        _Internal::perf_command_line_whole(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto.StringMetadata)
  return target;
}

size_t PerfDataProto_StringMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.StringMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *perf_command_line_whole_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_StringMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto_StringMetadata*>(
      &from));
}

void PerfDataProto_StringMetadata::MergeFrom(const PerfDataProto_StringMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.StringMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_perf_command_line_whole()) {
    _internal_mutable_perf_command_line_whole()->::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix::MergeFrom(from._internal_perf_command_line_whole());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto_StringMetadata::CopyFrom(const PerfDataProto_StringMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.StringMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_StringMetadata::IsInitialized() const {
  return true;
}

void PerfDataProto_StringMetadata::InternalSwap(PerfDataProto_StringMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(perf_command_line_whole_, other->perf_command_line_whole_);
}

std::string PerfDataProto_StringMetadata::GetTypeName() const {
  return "metrics.PerfDataProto.StringMetadata";
}


// ===================================================================

class PerfDataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfDataProto>()._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::metrics::PerfDataProto_PerfEventStats& stats(const PerfDataProto* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::metrics::PerfDataProto_StringMetadata& string_metadata(const PerfDataProto* msg);
  static void set_has_string_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::metrics::PerfDataProto_PerfEventStats&
PerfDataProto::_Internal::stats(const PerfDataProto* msg) {
  return *msg->stats_;
}
const ::metrics::PerfDataProto_StringMetadata&
PerfDataProto::_Internal::string_metadata(const PerfDataProto* msg) {
  return *msg->string_metadata_;
}
PerfDataProto::PerfDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  file_attrs_(arena),
  events_(arena),
  build_ids_(arena),
  event_types_(arena),
  pmu_mappings_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.PerfDataProto)
}
PerfDataProto::PerfDataProto(const PerfDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      file_attrs_(from.file_attrs_),
      events_(from.events_),
      build_ids_(from.build_ids_),
      event_types_(from.event_types_),
      pmu_mappings_(from.pmu_mappings_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    stats_ = new ::metrics::PerfDataProto_PerfEventStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  if (from._internal_has_string_metadata()) {
    string_metadata_ = new ::metrics::PerfDataProto_StringMetadata(*from.string_metadata_);
  } else {
    string_metadata_ = nullptr;
  }
  timestamp_sec_ = from.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto)
}

inline void PerfDataProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stats_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_sec_) -
    reinterpret_cast<char*>(&stats_)) + sizeof(timestamp_sec_));
}

PerfDataProto::~PerfDataProto() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfDataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete string_metadata_;
}

void PerfDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerfDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_attrs_.Clear();
  events_.Clear();
  build_ids_.Clear();
  event_types_.Clear();
  pmu_mappings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stats_ != nullptr);
      stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(string_metadata_ != nullptr);
      string_metadata_->Clear();
    }
  }
  timestamp_sec_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfDataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.PerfDataProto.PerfEvent events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp_sec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_build_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.PerfDataProto.PerfEventType event_types = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.PerfDataProto.PerfPMUMappingsMetadata pmu_mappings = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pmu_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfDataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PerfDataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_attrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_attrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.PerfDataProto.PerfEvent events = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp_sec(), target);
  }

  // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_build_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_build_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.PerfDataProto.PerfEventType event_types = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_event_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::string_metadata(this),
        _Internal::string_metadata(this).GetCachedSize(), target, stream);
  }

  // repeated .metrics.PerfDataProto.PerfPMUMappingsMetadata pmu_mappings = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pmu_mappings_size()); i < n; i++) {
    const auto& repfield = this->_internal_pmu_mappings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PerfDataProto)
  return target;
}

size_t PerfDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
  total_size += 1UL * this->_internal_file_attrs_size();
  for (const auto& msg : this->file_attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.PerfDataProto.PerfEvent events = 2;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
  total_size += 1UL * this->_internal_build_ids_size();
  for (const auto& msg : this->build_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.PerfDataProto.PerfEventType event_types = 10;
  total_size += 1UL * this->_internal_event_types_size();
  for (const auto& msg : this->event_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.PerfDataProto.PerfPMUMappingsMetadata pmu_mappings = 15;
  total_size += 1UL * this->_internal_pmu_mappings_size();
  for (const auto& msg : this->pmu_mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *string_metadata_);
    }

    // optional uint64 timestamp_sec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_sec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfDataProto*>(
      &from));
}

void PerfDataProto::MergeFrom(const PerfDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  file_attrs_.MergeFrom(from.file_attrs_);
  events_.MergeFrom(from.events_);
  build_ids_.MergeFrom(from.build_ids_);
  event_types_.MergeFrom(from.event_types_);
  pmu_mappings_.MergeFrom(from.pmu_mappings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stats()->::metrics::PerfDataProto_PerfEventStats::MergeFrom(from._internal_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_string_metadata()->::metrics::PerfDataProto_StringMetadata::MergeFrom(from._internal_string_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfDataProto::CopyFrom(const PerfDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto::IsInitialized() const {
  return true;
}

void PerfDataProto::InternalSwap(PerfDataProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_attrs_.InternalSwap(&other->file_attrs_);
  events_.InternalSwap(&other->events_);
  build_ids_.InternalSwap(&other->build_ids_);
  event_types_.InternalSwap(&other->event_types_);
  pmu_mappings_.InternalSwap(&other->pmu_mappings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfDataProto, timestamp_sec_)
      + sizeof(PerfDataProto::timestamp_sec_)
      - PROTOBUF_FIELD_OFFSET(PerfDataProto, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

std::string PerfDataProto::GetTypeName() const {
  return "metrics.PerfDataProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_PerfEventAttr*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfEventAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_PerfEventAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_PerfFileAttr*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfFileAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_PerfFileAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_PerfEventType*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfEventType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_PerfEventType >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_SampleInfo*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_SampleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_SampleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_CommEvent*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_CommEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_CommEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_MMapEvent*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_MMapEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_MMapEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_LostEvent*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_LostEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_LostEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_ThrottleEvent*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_ThrottleEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_ThrottleEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_BranchStackEntry*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_BranchStackEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_BranchStackEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_SampleEvent*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_SampleEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_SampleEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_ForkEvent*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_ForkEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_ForkEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_EventHeader*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_EventHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_EventHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_PerfEvent*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_PerfEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_PerfEventStats*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfEventStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_PerfEventStats >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_PerfBuildID*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfBuildID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_PerfBuildID >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_PerfPMUMappingsMetadata*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfPMUMappingsMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_PerfPMUMappingsMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto_StringMetadata*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto_StringMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto_StringMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::PerfDataProto*
Arena::CreateMaybeMessage< ::metrics::PerfDataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::PerfDataProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
