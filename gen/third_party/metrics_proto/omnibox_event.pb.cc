// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: omnibox_event.proto

#include "omnibox_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR OmniboxEventProto_Suggestion_ScoringSignals::OmniboxEventProto_Suggestion_ScoringSignals(
    ::_pbi::ConstantInitialized)
  : typed_count_(0)
  , visit_count_(0)
  , elapsed_time_last_visit_secs_(int64_t{0})
  , shortcut_visit_count_(0)
  , shortest_shortcut_len_(0)
  , elapsed_time_last_shortcut_visit_sec_(int64_t{0})
  , num_bookmarks_of_url_(0)
  , first_bookmark_title_match_position_(0)
  , total_bookmark_title_match_length_(0)
  , num_input_terms_matched_by_bookmark_title_(0)
  , first_url_match_position_(0)
  , total_url_match_length_(0)
  , total_host_match_length_(0)
  , total_path_match_length_(0)
  , is_host_only_(false)
  , host_match_at_word_boundary_(false)
  , has_non_scheme_www_match_(false)
  , allowed_to_be_default_match_(false)
  , total_query_or_ref_match_length_(0)
  , total_title_match_length_(0)
  , num_input_terms_matched_by_title_(0)
  , num_input_terms_matched_by_url_(0)
  , length_of_url_(0)
  , site_engagement_(0){}
struct OmniboxEventProto_Suggestion_ScoringSignalsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OmniboxEventProto_Suggestion_ScoringSignalsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OmniboxEventProto_Suggestion_ScoringSignalsDefaultTypeInternal() {}
  union {
    OmniboxEventProto_Suggestion_ScoringSignals _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OmniboxEventProto_Suggestion_ScoringSignalsDefaultTypeInternal _OmniboxEventProto_Suggestion_ScoringSignals_default_instance_;
PROTOBUF_CONSTEXPR OmniboxEventProto_Suggestion::OmniboxEventProto_Suggestion(
    ::_pbi::ConstantInitialized)
  : scoring_signals_(nullptr)
  , provider_(0)

  , result_type_(0)

  , relevance_(0)
  , typed_count_(0)
  , is_starred_(false)
  , is_disabled_(false)
  , has_tab_match_(false)
  , is_keyword_suggestion_(false)
  , result_subtype_identifier_(0){}
struct OmniboxEventProto_SuggestionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OmniboxEventProto_SuggestionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OmniboxEventProto_SuggestionDefaultTypeInternal() {}
  union {
    OmniboxEventProto_Suggestion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OmniboxEventProto_SuggestionDefaultTypeInternal _OmniboxEventProto_Suggestion_default_instance_;
PROTOBUF_CONSTEXPR OmniboxEventProto_ProviderInfo::OmniboxEventProto_ProviderInfo(
    ::_pbi::ConstantInitialized)
  : field_trial_triggered_()
  , field_trial_triggered_in_session_()
  , provider_(0)

  , provider_done_(false)
  , times_returned_results_in_session_(0){}
struct OmniboxEventProto_ProviderInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OmniboxEventProto_ProviderInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OmniboxEventProto_ProviderInfoDefaultTypeInternal() {}
  union {
    OmniboxEventProto_ProviderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OmniboxEventProto_ProviderInfoDefaultTypeInternal _OmniboxEventProto_ProviderInfo_default_instance_;
PROTOBUF_CONSTEXPR OmniboxEventProto_ProfileData::OmniboxEventProto_ProfileData(
    ::_pbi::ConstantInitialized)
  : total_num_bookmarks_(0)
  , total_num_history_urls_(0)
  , is_signed_into_browser_(false)
  , is_sync_enabled_(false){}
struct OmniboxEventProto_ProfileDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OmniboxEventProto_ProfileDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OmniboxEventProto_ProfileDataDefaultTypeInternal() {}
  union {
    OmniboxEventProto_ProfileData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OmniboxEventProto_ProfileDataDefaultTypeInternal _OmniboxEventProto_ProfileData_default_instance_;
PROTOBUF_CONSTEXPR OmniboxEventProto::OmniboxEventProto(
    ::_pbi::ConstantInitialized)
  : suggestion_()
  , provider_info_()
  , legacy_feature_triggered_in_session_()
  , legacy_feature_triggered_()
  , feature_triggered_()
  , feature_triggered_in_session_()
  , profile_data_(nullptr)
  , time_sec_(int64_t{0})
  , tab_id_(0)
  , typed_length_(0)
  , num_typed_terms_(0)
  , selected_index_(0)
  , typing_duration_ms_(int64_t{0})
  , completed_length_(0)
  , input_type_(0)

  , duration_since_last_default_match_update_ms_(int64_t{0})
  , current_page_classification_(0)

  , just_deleted_text_(false)
  , selected_tab_match_(false)
  , deprecated_is_top_result_hidden_in_dropdown_(false)
  , is_popup_open_(false)
  , mode_type_(0)

  , is_paste_and_go_(false)
  , in_keyword_mode_(false)
  , is_query_started_from_tile_(false)
  , keyword_mode_entry_method_(0)

  , steady_state_omnibox_position_(0)
{}
struct OmniboxEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OmniboxEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OmniboxEventProtoDefaultTypeInternal() {}
  union {
    OmniboxEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OmniboxEventProtoDefaultTypeInternal _OmniboxEventProto_default_instance_;
}  // namespace metrics
namespace metrics {
bool OmniboxEventProto_Suggestion_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_Suggestion_ResultType_strings[36] = {};

static const char OmniboxEventProto_Suggestion_ResultType_names[] =
  "APP"
  "APP_RESULT"
  "BOOKMARK_TITLE"
  "CALCULATOR"
  "CLIPBOARD_IMAGE"
  "CLIPBOARD_TEXT"
  "CLIPBOARD_URL"
  "CONTACT"
  "DOCUMENT"
  "EXTENSION_APP"
  "HISTORY_BODY"
  "HISTORY_CLUSTER"
  "HISTORY_KEYWORD"
  "HISTORY_TITLE"
  "HISTORY_URL"
  "LEGACY_ON_DEVICE"
  "NAVSUGGEST"
  "NAVSUGGEST_PERSONALIZED"
  "OPEN_TAB"
  "PEDAL"
  "PHYSICAL_WEB"
  "PHYSICAL_WEB_OVERFLOW"
  "SEARCH_HISTORY"
  "SEARCH_OTHER_ENGINE"
  "SEARCH_SUGGEST"
  "SEARCH_SUGGEST_ANSWER"
  "SEARCH_SUGGEST_ENTITY"
  "SEARCH_SUGGEST_PERSONALIZED"
  "SEARCH_SUGGEST_PROFILE"
  "SEARCH_SUGGEST_TAIL"
  "SEARCH_WHAT_YOU_TYPED"
  "STARTER_PACK"
  "TAB_SWITCH"
  "TILE_SUGGESTION"
  "UNKNOWN_RESULT_TYPE"
  "URL_WHAT_YOU_TYPED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_Suggestion_ResultType_entries[] = {
  { {OmniboxEventProto_Suggestion_ResultType_names + 0, 3}, 19 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 3, 10}, 18 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 13, 14}, 13 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 27, 10}, 23 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 37, 15}, 29 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 52, 14}, 28 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 66, 13}, 24 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 79, 7}, 12 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 86, 8}, 27 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 94, 13}, 11 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 107, 12}, 4 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 119, 15}, 31 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 134, 15}, 5 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 149, 13}, 3 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 162, 11}, 2 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 173, 16}, 20 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 189, 10}, 6 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 199, 23}, 21 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 222, 8}, 32 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 230, 5}, 35 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 235, 12}, 25 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 247, 21}, 26 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 268, 14}, 8 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 282, 19}, 10 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 301, 14}, 9 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 315, 21}, 22 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 336, 21}, 14 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 357, 27}, 16 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 384, 22}, 17 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 406, 19}, 15 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 425, 21}, 7 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 446, 12}, 33 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 458, 10}, 34 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 468, 15}, 30 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 483, 19}, 0 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 502, 18}, 1 },
};

static const int OmniboxEventProto_Suggestion_ResultType_entries_by_number[] = {
  34, // 0 -> UNKNOWN_RESULT_TYPE
  35, // 1 -> URL_WHAT_YOU_TYPED
  14, // 2 -> HISTORY_URL
  13, // 3 -> HISTORY_TITLE
  10, // 4 -> HISTORY_BODY
  12, // 5 -> HISTORY_KEYWORD
  16, // 6 -> NAVSUGGEST
  30, // 7 -> SEARCH_WHAT_YOU_TYPED
  22, // 8 -> SEARCH_HISTORY
  24, // 9 -> SEARCH_SUGGEST
  23, // 10 -> SEARCH_OTHER_ENGINE
  9, // 11 -> EXTENSION_APP
  7, // 12 -> CONTACT
  2, // 13 -> BOOKMARK_TITLE
  26, // 14 -> SEARCH_SUGGEST_ENTITY
  29, // 15 -> SEARCH_SUGGEST_TAIL
  27, // 16 -> SEARCH_SUGGEST_PERSONALIZED
  28, // 17 -> SEARCH_SUGGEST_PROFILE
  1, // 18 -> APP_RESULT
  0, // 19 -> APP
  15, // 20 -> LEGACY_ON_DEVICE
  17, // 21 -> NAVSUGGEST_PERSONALIZED
  25, // 22 -> SEARCH_SUGGEST_ANSWER
  3, // 23 -> CALCULATOR
  6, // 24 -> CLIPBOARD_URL
  20, // 25 -> PHYSICAL_WEB
  21, // 26 -> PHYSICAL_WEB_OVERFLOW
  8, // 27 -> DOCUMENT
  5, // 28 -> CLIPBOARD_TEXT
  4, // 29 -> CLIPBOARD_IMAGE
  33, // 30 -> TILE_SUGGESTION
  11, // 31 -> HISTORY_CLUSTER
  18, // 32 -> OPEN_TAB
  31, // 33 -> STARTER_PACK
  32, // 34 -> TAB_SWITCH
  19, // 35 -> PEDAL
};

const std::string& OmniboxEventProto_Suggestion_ResultType_Name(
    OmniboxEventProto_Suggestion_ResultType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_Suggestion_ResultType_entries,
          OmniboxEventProto_Suggestion_ResultType_entries_by_number,
          36, OmniboxEventProto_Suggestion_ResultType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_Suggestion_ResultType_entries,
      OmniboxEventProto_Suggestion_ResultType_entries_by_number,
      36, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_Suggestion_ResultType_strings[idx].get();
}
bool OmniboxEventProto_Suggestion_ResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OmniboxEventProto_Suggestion_ResultType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_Suggestion_ResultType_entries, 36, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_Suggestion_ResultType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::UNKNOWN_RESULT_TYPE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::URL_WHAT_YOU_TYPED;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_URL;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_TITLE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_BODY;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_KEYWORD;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::NAVSUGGEST;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_WHAT_YOU_TYPED;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_HISTORY;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_OTHER_ENGINE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::EXTENSION_APP;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CONTACT;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::BOOKMARK_TITLE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_ENTITY;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_TAIL;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_PERSONALIZED;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_PROFILE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::APP_RESULT;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::APP;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::LEGACY_ON_DEVICE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::NAVSUGGEST_PERSONALIZED;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_ANSWER;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CALCULATOR;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CLIPBOARD_URL;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::PHYSICAL_WEB;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::PHYSICAL_WEB_OVERFLOW;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::DOCUMENT;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CLIPBOARD_TEXT;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CLIPBOARD_IMAGE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::TILE_SUGGESTION;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_CLUSTER;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::OPEN_TAB;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::STARTER_PACK;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::TAB_SWITCH;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::PEDAL;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::ResultType_MIN;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::ResultType_MAX;
constexpr int OmniboxEventProto_Suggestion::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool OmniboxEventProto_PageClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_PageClassification_strings[24] = {};

static const char OmniboxEventProto_PageClassification_names[] =
  "ANDROID_SEARCH_WIDGET"
  "ANDROID_SHORTCUTS_WIDGET"
  "APP_HOME"
  "APP_MAPS"
  "APP_SEARCH"
  "BLANK"
  "CHROMEOS_APP_LIST"
  "HOME_PAGE"
  "INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS"
  "INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS"
  "INVALID_SPEC"
  "JOURNEYS"
  "NTP"
  "NTP_REALBOX"
  "NTP_ZPS_PREFETCH"
  "OBSOLETE_INSTANT_NTP"
  "OTHER"
  "OTHER_ZPS_PREFETCH"
  "SEARCH_BUTTON_AS_STARTING_FOCUS"
  "SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT"
  "SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT"
  "SRP_ZPS_PREFETCH"
  "START_SURFACE_HOMEPAGE"
  "START_SURFACE_NEW_TAB";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_PageClassification_entries[] = {
  { {OmniboxEventProto_PageClassification_names + 0, 21}, 16 },
  { {OmniboxEventProto_PageClassification_names + 21, 24}, 19 },
  { {OmniboxEventProto_PageClassification_names + 45, 8}, 10 },
  { {OmniboxEventProto_PageClassification_names + 53, 8}, 12 },
  { {OmniboxEventProto_PageClassification_names + 61, 10}, 11 },
  { {OmniboxEventProto_PageClassification_names + 71, 5}, 2 },
  { {OmniboxEventProto_PageClassification_names + 76, 17}, 14 },
  { {OmniboxEventProto_PageClassification_names + 93, 9}, 3 },
  { {OmniboxEventProto_PageClassification_names + 102, 42}, 8 },
  { {OmniboxEventProto_PageClassification_names + 144, 42}, 7 },
  { {OmniboxEventProto_PageClassification_names + 186, 12}, 0 },
  { {OmniboxEventProto_PageClassification_names + 198, 8}, 21 },
  { {OmniboxEventProto_PageClassification_names + 206, 3}, 1 },
  { {OmniboxEventProto_PageClassification_names + 209, 11}, 15 },
  { {OmniboxEventProto_PageClassification_names + 220, 16}, 20 },
  { {OmniboxEventProto_PageClassification_names + 236, 20}, 5 },
  { {OmniboxEventProto_PageClassification_names + 256, 5}, 4 },
  { {OmniboxEventProto_PageClassification_names + 261, 18}, 23 },
  { {OmniboxEventProto_PageClassification_names + 279, 31}, 13 },
  { {OmniboxEventProto_PageClassification_names + 310, 48}, 6 },
  { {OmniboxEventProto_PageClassification_names + 358, 45}, 9 },
  { {OmniboxEventProto_PageClassification_names + 403, 16}, 22 },
  { {OmniboxEventProto_PageClassification_names + 419, 22}, 17 },
  { {OmniboxEventProto_PageClassification_names + 441, 21}, 18 },
};

static const int OmniboxEventProto_PageClassification_entries_by_number[] = {
  10, // 0 -> INVALID_SPEC
  12, // 1 -> NTP
  5, // 2 -> BLANK
  7, // 3 -> HOME_PAGE
  16, // 4 -> OTHER
  15, // 5 -> OBSOLETE_INSTANT_NTP
  19, // 6 -> SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT
  9, // 7 -> INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS
  8, // 8 -> INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS
  20, // 9 -> SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT
  2, // 10 -> APP_HOME
  4, // 11 -> APP_SEARCH
  3, // 12 -> APP_MAPS
  18, // 13 -> SEARCH_BUTTON_AS_STARTING_FOCUS
  6, // 14 -> CHROMEOS_APP_LIST
  13, // 15 -> NTP_REALBOX
  0, // 16 -> ANDROID_SEARCH_WIDGET
  22, // 17 -> START_SURFACE_HOMEPAGE
  23, // 18 -> START_SURFACE_NEW_TAB
  1, // 19 -> ANDROID_SHORTCUTS_WIDGET
  14, // 20 -> NTP_ZPS_PREFETCH
  11, // 21 -> JOURNEYS
  21, // 22 -> SRP_ZPS_PREFETCH
  17, // 23 -> OTHER_ZPS_PREFETCH
};

const std::string& OmniboxEventProto_PageClassification_Name(
    OmniboxEventProto_PageClassification value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_PageClassification_entries,
          OmniboxEventProto_PageClassification_entries_by_number,
          24, OmniboxEventProto_PageClassification_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_PageClassification_entries,
      OmniboxEventProto_PageClassification_entries_by_number,
      24, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_PageClassification_strings[idx].get();
}
bool OmniboxEventProto_PageClassification_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OmniboxEventProto_PageClassification* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_PageClassification_entries, 24, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_PageClassification>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::INVALID_SPEC;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::NTP;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::BLANK;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::HOME_PAGE;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::OTHER;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::OBSOLETE_INSTANT_NTP;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::APP_HOME;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::APP_SEARCH;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::APP_MAPS;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::SEARCH_BUTTON_AS_STARTING_FOCUS;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::CHROMEOS_APP_LIST;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::NTP_REALBOX;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::ANDROID_SEARCH_WIDGET;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::START_SURFACE_HOMEPAGE;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::START_SURFACE_NEW_TAB;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::ANDROID_SHORTCUTS_WIDGET;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::NTP_ZPS_PREFETCH;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::JOURNEYS;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::SRP_ZPS_PREFETCH;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::OTHER_ZPS_PREFETCH;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::PageClassification_MIN;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::PageClassification_MAX;
constexpr int OmniboxEventProto::PageClassification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool OmniboxEventProto_ModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_ModeType_strings[3] = {};

static const char OmniboxEventProto_ModeType_names[] =
  "IMAGE_MODE"
  "UNKNOWN_MODE"
  "WEB_MODE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_ModeType_entries[] = {
  { {OmniboxEventProto_ModeType_names + 0, 10}, 2 },
  { {OmniboxEventProto_ModeType_names + 10, 12}, 0 },
  { {OmniboxEventProto_ModeType_names + 22, 8}, 1 },
};

static const int OmniboxEventProto_ModeType_entries_by_number[] = {
  1, // 0 -> UNKNOWN_MODE
  2, // 1 -> WEB_MODE
  0, // 2 -> IMAGE_MODE
};

const std::string& OmniboxEventProto_ModeType_Name(
    OmniboxEventProto_ModeType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_ModeType_entries,
          OmniboxEventProto_ModeType_entries_by_number,
          3, OmniboxEventProto_ModeType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_ModeType_entries,
      OmniboxEventProto_ModeType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_ModeType_strings[idx].get();
}
bool OmniboxEventProto_ModeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OmniboxEventProto_ModeType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_ModeType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_ModeType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OmniboxEventProto_ModeType OmniboxEventProto::UNKNOWN_MODE;
constexpr OmniboxEventProto_ModeType OmniboxEventProto::WEB_MODE;
constexpr OmniboxEventProto_ModeType OmniboxEventProto::IMAGE_MODE;
constexpr OmniboxEventProto_ModeType OmniboxEventProto::ModeType_MIN;
constexpr OmniboxEventProto_ModeType OmniboxEventProto::ModeType_MAX;
constexpr int OmniboxEventProto::ModeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool OmniboxEventProto_ProviderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_ProviderType_strings[25] = {};

static const char OmniboxEventProto_ProviderType_names[] =
  "BOOKMARK"
  "BUILTIN"
  "CLIPBOARD"
  "CONTACT"
  "DOCUMENT"
  "EXTENSION_APPS"
  "HISTORY_CLUSTER"
  "HISTORY_CONTENTS"
  "HISTORY_FUZZY"
  "HISTORY_QUICK"
  "HISTORY_URL"
  "KEYWORD"
  "ON_DEVICE"
  "ON_DEVICE_CHROME"
  "ON_DEVICE_HEAD"
  "OPEN_TAB"
  "PEDALS"
  "PHYSICAL_WEB"
  "QUERY_TILE"
  "SEARCH"
  "SHORTCUTS"
  "TAB_SWITCH"
  "UNKNOWN_PROVIDER"
  "ZERO_SUGGEST"
  "ZERO_SUGGEST_LOCAL_HISTORY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_ProviderType_entries[] = {
  { {OmniboxEventProto_ProviderType_names + 0, 8}, 10 },
  { {OmniboxEventProto_ProviderType_names + 8, 7}, 6 },
  { {OmniboxEventProto_ProviderType_names + 15, 9}, 14 },
  { {OmniboxEventProto_ProviderType_names + 24, 7}, 9 },
  { {OmniboxEventProto_ProviderType_names + 31, 8}, 16 },
  { {OmniboxEventProto_ProviderType_names + 39, 14}, 8 },
  { {OmniboxEventProto_ProviderType_names + 53, 15}, 20 },
  { {OmniboxEventProto_ProviderType_names + 68, 16}, 2 },
  { {OmniboxEventProto_ProviderType_names + 84, 13}, 21 },
  { {OmniboxEventProto_ProviderType_names + 97, 13}, 3 },
  { {OmniboxEventProto_ProviderType_names + 110, 11}, 1 },
  { {OmniboxEventProto_ProviderType_names + 121, 7}, 5 },
  { {OmniboxEventProto_ProviderType_names + 128, 9}, 12 },
  { {OmniboxEventProto_ProviderType_names + 137, 16}, 13 },
  { {OmniboxEventProto_ProviderType_names + 153, 14}, 17 },
  { {OmniboxEventProto_ProviderType_names + 167, 8}, 22 },
  { {OmniboxEventProto_ProviderType_names + 175, 6}, 24 },
  { {OmniboxEventProto_ProviderType_names + 181, 12}, 15 },
  { {OmniboxEventProto_ProviderType_names + 193, 10}, 19 },
  { {OmniboxEventProto_ProviderType_names + 203, 6}, 4 },
  { {OmniboxEventProto_ProviderType_names + 209, 9}, 7 },
  { {OmniboxEventProto_ProviderType_names + 218, 10}, 23 },
  { {OmniboxEventProto_ProviderType_names + 228, 16}, 0 },
  { {OmniboxEventProto_ProviderType_names + 244, 12}, 11 },
  { {OmniboxEventProto_ProviderType_names + 256, 26}, 18 },
};

static const int OmniboxEventProto_ProviderType_entries_by_number[] = {
  22, // 0 -> UNKNOWN_PROVIDER
  10, // 1 -> HISTORY_URL
  7, // 2 -> HISTORY_CONTENTS
  9, // 3 -> HISTORY_QUICK
  19, // 4 -> SEARCH
  11, // 5 -> KEYWORD
  1, // 6 -> BUILTIN
  20, // 7 -> SHORTCUTS
  5, // 8 -> EXTENSION_APPS
  3, // 9 -> CONTACT
  0, // 10 -> BOOKMARK
  23, // 11 -> ZERO_SUGGEST
  12, // 12 -> ON_DEVICE
  13, // 13 -> ON_DEVICE_CHROME
  2, // 14 -> CLIPBOARD
  17, // 15 -> PHYSICAL_WEB
  4, // 16 -> DOCUMENT
  14, // 17 -> ON_DEVICE_HEAD
  24, // 18 -> ZERO_SUGGEST_LOCAL_HISTORY
  18, // 19 -> QUERY_TILE
  6, // 20 -> HISTORY_CLUSTER
  8, // 21 -> HISTORY_FUZZY
  15, // 22 -> OPEN_TAB
  21, // 23 -> TAB_SWITCH
  16, // 24 -> PEDALS
};

const std::string& OmniboxEventProto_ProviderType_Name(
    OmniboxEventProto_ProviderType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_ProviderType_entries,
          OmniboxEventProto_ProviderType_entries_by_number,
          25, OmniboxEventProto_ProviderType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_ProviderType_entries,
      OmniboxEventProto_ProviderType_entries_by_number,
      25, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_ProviderType_strings[idx].get();
}
bool OmniboxEventProto_ProviderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OmniboxEventProto_ProviderType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_ProviderType_entries, 25, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_ProviderType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::UNKNOWN_PROVIDER;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_URL;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_CONTENTS;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_QUICK;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::SEARCH;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::KEYWORD;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::BUILTIN;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::SHORTCUTS;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::EXTENSION_APPS;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::CONTACT;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::BOOKMARK;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ZERO_SUGGEST;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ON_DEVICE;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ON_DEVICE_CHROME;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::CLIPBOARD;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::PHYSICAL_WEB;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::DOCUMENT;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ON_DEVICE_HEAD;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ZERO_SUGGEST_LOCAL_HISTORY;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::QUERY_TILE;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_CLUSTER;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_FUZZY;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::OPEN_TAB;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::TAB_SWITCH;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::PEDALS;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ProviderType_MIN;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ProviderType_MAX;
constexpr int OmniboxEventProto::ProviderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool OmniboxEventProto_KeywordModeEntryMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_KeywordModeEntryMethod_strings[9] = {};

static const char OmniboxEventProto_KeywordModeEntryMethod_names[] =
  "CLICK_HINT_VIEW"
  "INVALID"
  "KEYBOARD_SHORTCUT"
  "QUESTION_MARK"
  "SELECT_SUGGESTION"
  "SPACE_AT_END"
  "SPACE_IN_MIDDLE"
  "TAB"
  "TAP_HINT_VIEW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_KeywordModeEntryMethod_entries[] = {
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 0, 15}, 6 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 15, 7}, 0 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 22, 17}, 4 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 39, 13}, 5 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 52, 17}, 8 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 69, 12}, 2 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 81, 15}, 3 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 96, 3}, 1 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 99, 13}, 7 },
};

static const int OmniboxEventProto_KeywordModeEntryMethod_entries_by_number[] = {
  1, // 0 -> INVALID
  7, // 1 -> TAB
  5, // 2 -> SPACE_AT_END
  6, // 3 -> SPACE_IN_MIDDLE
  2, // 4 -> KEYBOARD_SHORTCUT
  3, // 5 -> QUESTION_MARK
  0, // 6 -> CLICK_HINT_VIEW
  8, // 7 -> TAP_HINT_VIEW
  4, // 8 -> SELECT_SUGGESTION
};

const std::string& OmniboxEventProto_KeywordModeEntryMethod_Name(
    OmniboxEventProto_KeywordModeEntryMethod value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_KeywordModeEntryMethod_entries,
          OmniboxEventProto_KeywordModeEntryMethod_entries_by_number,
          9, OmniboxEventProto_KeywordModeEntryMethod_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_KeywordModeEntryMethod_entries,
      OmniboxEventProto_KeywordModeEntryMethod_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_KeywordModeEntryMethod_strings[idx].get();
}
bool OmniboxEventProto_KeywordModeEntryMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OmniboxEventProto_KeywordModeEntryMethod* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_KeywordModeEntryMethod_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_KeywordModeEntryMethod>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::INVALID;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::TAB;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::SPACE_AT_END;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::SPACE_IN_MIDDLE;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::KEYBOARD_SHORTCUT;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::QUESTION_MARK;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::CLICK_HINT_VIEW;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::TAP_HINT_VIEW;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::SELECT_SUGGESTION;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::KeywordModeEntryMethod_MIN;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::KeywordModeEntryMethod_MAX;
constexpr int OmniboxEventProto::KeywordModeEntryMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool OmniboxEventProto_Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_Feature_strings[10] = {};

static const char OmniboxEventProto_Feature_names[] =
  "DOMAIN_SUGGESTIONS"
  "FUZZY_URL_SUGGESTIONS"
  "HISTORY_CLUSTER_SUGGESTION"
  "ML_URL_SCORING"
  "REMOTE_SEARCH_FEATURE"
  "REMOTE_SECONDARY_ZERO_SUGGEST"
  "REMOTE_ZERO_SUGGEST_FEATURE"
  "RICH_AUTOCOMPLETION"
  "SHORTCUT_BOOST"
  "SHORT_BOOKMARK_SUGGESTIONS_BY_TOTAL_INPUT_LENGTH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_Feature_entries[] = {
  { {OmniboxEventProto_Feature_names + 0, 18}, 5 },
  { {OmniboxEventProto_Feature_names + 18, 21}, 3 },
  { {OmniboxEventProto_Feature_names + 39, 26}, 4 },
  { {OmniboxEventProto_Feature_names + 65, 14}, 10 },
  { {OmniboxEventProto_Feature_names + 79, 21}, 6 },
  { {OmniboxEventProto_Feature_names + 100, 29}, 9 },
  { {OmniboxEventProto_Feature_names + 129, 27}, 7 },
  { {OmniboxEventProto_Feature_names + 156, 19}, 0 },
  { {OmniboxEventProto_Feature_names + 175, 14}, 8 },
  { {OmniboxEventProto_Feature_names + 189, 48}, 2 },
};

static const int OmniboxEventProto_Feature_entries_by_number[] = {
  7, // 0 -> RICH_AUTOCOMPLETION
  9, // 2 -> SHORT_BOOKMARK_SUGGESTIONS_BY_TOTAL_INPUT_LENGTH
  1, // 3 -> FUZZY_URL_SUGGESTIONS
  2, // 4 -> HISTORY_CLUSTER_SUGGESTION
  0, // 5 -> DOMAIN_SUGGESTIONS
  4, // 6 -> REMOTE_SEARCH_FEATURE
  6, // 7 -> REMOTE_ZERO_SUGGEST_FEATURE
  8, // 8 -> SHORTCUT_BOOST
  5, // 9 -> REMOTE_SECONDARY_ZERO_SUGGEST
  3, // 10 -> ML_URL_SCORING
};

const std::string& OmniboxEventProto_Feature_Name(
    OmniboxEventProto_Feature value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_Feature_entries,
          OmniboxEventProto_Feature_entries_by_number,
          10, OmniboxEventProto_Feature_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_Feature_entries,
      OmniboxEventProto_Feature_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_Feature_strings[idx].get();
}
bool OmniboxEventProto_Feature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OmniboxEventProto_Feature* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_Feature_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_Feature>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OmniboxEventProto_Feature OmniboxEventProto::RICH_AUTOCOMPLETION;
constexpr OmniboxEventProto_Feature OmniboxEventProto::SHORT_BOOKMARK_SUGGESTIONS_BY_TOTAL_INPUT_LENGTH;
constexpr OmniboxEventProto_Feature OmniboxEventProto::FUZZY_URL_SUGGESTIONS;
constexpr OmniboxEventProto_Feature OmniboxEventProto::HISTORY_CLUSTER_SUGGESTION;
constexpr OmniboxEventProto_Feature OmniboxEventProto::DOMAIN_SUGGESTIONS;
constexpr OmniboxEventProto_Feature OmniboxEventProto::REMOTE_SEARCH_FEATURE;
constexpr OmniboxEventProto_Feature OmniboxEventProto::REMOTE_ZERO_SUGGEST_FEATURE;
constexpr OmniboxEventProto_Feature OmniboxEventProto::SHORTCUT_BOOST;
constexpr OmniboxEventProto_Feature OmniboxEventProto::REMOTE_SECONDARY_ZERO_SUGGEST;
constexpr OmniboxEventProto_Feature OmniboxEventProto::ML_URL_SCORING;
constexpr OmniboxEventProto_Feature OmniboxEventProto::Feature_MIN;
constexpr OmniboxEventProto_Feature OmniboxEventProto::Feature_MAX;
constexpr int OmniboxEventProto::Feature_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool OmniboxEventProto_OmniboxPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_OmniboxPosition_strings[3] = {};

static const char OmniboxEventProto_OmniboxPosition_names[] =
  "BOTTOM_POSITION"
  "TOP_POSITION"
  "UNKNOWN_POSITION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_OmniboxPosition_entries[] = {
  { {OmniboxEventProto_OmniboxPosition_names + 0, 15}, 2 },
  { {OmniboxEventProto_OmniboxPosition_names + 15, 12}, 1 },
  { {OmniboxEventProto_OmniboxPosition_names + 27, 16}, 0 },
};

static const int OmniboxEventProto_OmniboxPosition_entries_by_number[] = {
  2, // 0 -> UNKNOWN_POSITION
  1, // 1 -> TOP_POSITION
  0, // 2 -> BOTTOM_POSITION
};

const std::string& OmniboxEventProto_OmniboxPosition_Name(
    OmniboxEventProto_OmniboxPosition value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_OmniboxPosition_entries,
          OmniboxEventProto_OmniboxPosition_entries_by_number,
          3, OmniboxEventProto_OmniboxPosition_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_OmniboxPosition_entries,
      OmniboxEventProto_OmniboxPosition_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_OmniboxPosition_strings[idx].get();
}
bool OmniboxEventProto_OmniboxPosition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OmniboxEventProto_OmniboxPosition* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_OmniboxPosition_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_OmniboxPosition>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OmniboxEventProto_OmniboxPosition OmniboxEventProto::UNKNOWN_POSITION;
constexpr OmniboxEventProto_OmniboxPosition OmniboxEventProto::TOP_POSITION;
constexpr OmniboxEventProto_OmniboxPosition OmniboxEventProto::BOTTOM_POSITION;
constexpr OmniboxEventProto_OmniboxPosition OmniboxEventProto::OmniboxPosition_MIN;
constexpr OmniboxEventProto_OmniboxPosition OmniboxEventProto::OmniboxPosition_MAX;
constexpr int OmniboxEventProto::OmniboxPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class OmniboxEventProto_Suggestion_ScoringSignals::_Internal {
 public:
  using HasBits = decltype(std::declval<OmniboxEventProto_Suggestion_ScoringSignals>()._has_bits_);
  static void set_has_typed_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_visit_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_elapsed_time_last_visit_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shortcut_visit_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shortest_shortcut_len(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_elapsed_time_last_shortcut_visit_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_host_only(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_num_bookmarks_of_url(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_first_bookmark_title_match_position(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_total_bookmark_title_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_input_terms_matched_by_bookmark_title(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_first_url_match_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_url_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_host_match_at_word_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_total_host_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_total_path_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_total_query_or_ref_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_total_title_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_has_non_scheme_www_match(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_num_input_terms_matched_by_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_num_input_terms_matched_by_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_length_of_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_site_engagement(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_allowed_to_be_default_match(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

OmniboxEventProto_Suggestion_ScoringSignals::OmniboxEventProto_Suggestion_ScoringSignals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.OmniboxEventProto.Suggestion.ScoringSignals)
}
OmniboxEventProto_Suggestion_ScoringSignals::OmniboxEventProto_Suggestion_ScoringSignals(const OmniboxEventProto_Suggestion_ScoringSignals& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&typed_count_, &from.typed_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&site_engagement_) -
    reinterpret_cast<char*>(&typed_count_)) + sizeof(site_engagement_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto.Suggestion.ScoringSignals)
}

inline void OmniboxEventProto_Suggestion_ScoringSignals::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&typed_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&site_engagement_) -
    reinterpret_cast<char*>(&typed_count_)) + sizeof(site_engagement_));
}

OmniboxEventProto_Suggestion_ScoringSignals::~OmniboxEventProto_Suggestion_ScoringSignals() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto.Suggestion.ScoringSignals)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OmniboxEventProto_Suggestion_ScoringSignals::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OmniboxEventProto_Suggestion_ScoringSignals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OmniboxEventProto_Suggestion_ScoringSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto.Suggestion.ScoringSignals)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&typed_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_bookmark_title_match_position_) -
        reinterpret_cast<char*>(&typed_count_)) + sizeof(first_bookmark_title_match_position_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&total_bookmark_title_match_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&host_match_at_word_boundary_) -
        reinterpret_cast<char*>(&total_bookmark_title_match_length_)) + sizeof(host_match_at_word_boundary_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&has_non_scheme_www_match_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&site_engagement_) -
        reinterpret_cast<char*>(&has_non_scheme_www_match_)) + sizeof(site_engagement_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OmniboxEventProto_Suggestion_ScoringSignals::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 typed_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_typed_count(&has_bits);
          typed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 visit_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_visit_count(&has_bits);
          visit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 elapsed_time_last_visit_secs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_elapsed_time_last_visit_secs(&has_bits);
          elapsed_time_last_visit_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shortcut_visit_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_shortcut_visit_count(&has_bits);
          shortcut_visit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shortest_shortcut_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_shortest_shortcut_len(&has_bits);
          shortest_shortcut_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 elapsed_time_last_shortcut_visit_sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_elapsed_time_last_shortcut_visit_sec(&has_bits);
          elapsed_time_last_shortcut_visit_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_host_only = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_host_only(&has_bits);
          is_host_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_bookmarks_of_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_num_bookmarks_of_url(&has_bits);
          num_bookmarks_of_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 first_bookmark_title_match_position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_first_bookmark_title_match_position(&has_bits);
          first_bookmark_title_match_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_bookmark_title_match_length = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_total_bookmark_title_match_length(&has_bits);
          total_bookmark_title_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_input_terms_matched_by_bookmark_title = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_num_input_terms_matched_by_bookmark_title(&has_bits);
          num_input_terms_matched_by_bookmark_title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 first_url_match_position = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_first_url_match_position(&has_bits);
          first_url_match_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_url_match_length = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_total_url_match_length(&has_bits);
          total_url_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool host_match_at_word_boundary = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_host_match_at_word_boundary(&has_bits);
          host_match_at_word_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_host_match_length = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_total_host_match_length(&has_bits);
          total_host_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_path_match_length = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_total_path_match_length(&has_bits);
          total_path_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_query_or_ref_match_length = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_total_query_or_ref_match_length(&has_bits);
          total_query_or_ref_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_title_match_length = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_total_title_match_length(&has_bits);
          total_title_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_non_scheme_www_match = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_has_non_scheme_www_match(&has_bits);
          has_non_scheme_www_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_input_terms_matched_by_title = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_num_input_terms_matched_by_title(&has_bits);
          num_input_terms_matched_by_title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_input_terms_matched_by_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_num_input_terms_matched_by_url(&has_bits);
          num_input_terms_matched_by_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 length_of_url = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_length_of_url(&has_bits);
          length_of_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float site_engagement = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_site_engagement(&has_bits);
          site_engagement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool allowed_to_be_default_match = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_allowed_to_be_default_match(&has_bits);
          allowed_to_be_default_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OmniboxEventProto_Suggestion_ScoringSignals::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.OmniboxEventProto.Suggestion.ScoringSignals)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 typed_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_typed_count(), target);
  }

  // optional int32 visit_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_visit_count(), target);
  }

  // optional int64 elapsed_time_last_visit_secs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_elapsed_time_last_visit_secs(), target);
  }

  // optional int32 shortcut_visit_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_shortcut_visit_count(), target);
  }

  // optional int32 shortest_shortcut_len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_shortest_shortcut_len(), target);
  }

  // optional int64 elapsed_time_last_shortcut_visit_sec = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_elapsed_time_last_shortcut_visit_sec(), target);
  }

  // optional bool is_host_only = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_host_only(), target);
  }

  // optional int32 num_bookmarks_of_url = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_bookmarks_of_url(), target);
  }

  // optional int32 first_bookmark_title_match_position = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_first_bookmark_title_match_position(), target);
  }

  // optional int32 total_bookmark_title_match_length = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_total_bookmark_title_match_length(), target);
  }

  // optional int32 num_input_terms_matched_by_bookmark_title = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_num_input_terms_matched_by_bookmark_title(), target);
  }

  // optional int32 first_url_match_position = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_first_url_match_position(), target);
  }

  // optional int32 total_url_match_length = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_total_url_match_length(), target);
  }

  // optional bool host_match_at_word_boundary = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_host_match_at_word_boundary(), target);
  }

  // optional int32 total_host_match_length = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_total_host_match_length(), target);
  }

  // optional int32 total_path_match_length = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_total_path_match_length(), target);
  }

  // optional int32 total_query_or_ref_match_length = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_total_query_or_ref_match_length(), target);
  }

  // optional int32 total_title_match_length = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_total_title_match_length(), target);
  }

  // optional bool has_non_scheme_www_match = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_has_non_scheme_www_match(), target);
  }

  // optional int32 num_input_terms_matched_by_title = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_num_input_terms_matched_by_title(), target);
  }

  // optional int32 num_input_terms_matched_by_url = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_num_input_terms_matched_by_url(), target);
  }

  // optional int32 length_of_url = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_length_of_url(), target);
  }

  // optional float site_engagement = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_site_engagement(), target);
  }

  // optional bool allowed_to_be_default_match = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_allowed_to_be_default_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.OmniboxEventProto.Suggestion.ScoringSignals)
  return target;
}

size_t OmniboxEventProto_Suggestion_ScoringSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto.Suggestion.ScoringSignals)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 typed_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typed_count());
    }

    // optional int32 visit_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_visit_count());
    }

    // optional int64 elapsed_time_last_visit_secs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_elapsed_time_last_visit_secs());
    }

    // optional int32 shortcut_visit_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shortcut_visit_count());
    }

    // optional int32 shortest_shortcut_len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shortest_shortcut_len());
    }

    // optional int64 elapsed_time_last_shortcut_visit_sec = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_elapsed_time_last_shortcut_visit_sec());
    }

    // optional int32 num_bookmarks_of_url = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_bookmarks_of_url());
    }

    // optional int32 first_bookmark_title_match_position = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_first_bookmark_title_match_position());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 total_bookmark_title_match_length = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_bookmark_title_match_length());
    }

    // optional int32 num_input_terms_matched_by_bookmark_title = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_input_terms_matched_by_bookmark_title());
    }

    // optional int32 first_url_match_position = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_first_url_match_position());
    }

    // optional int32 total_url_match_length = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_url_match_length());
    }

    // optional int32 total_host_match_length = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_host_match_length());
    }

    // optional int32 total_path_match_length = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_total_path_match_length());
    }

    // optional bool is_host_only = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool host_match_at_word_boundary = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool has_non_scheme_www_match = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool allowed_to_be_default_match = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 total_query_or_ref_match_length = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_total_query_or_ref_match_length());
    }

    // optional int32 total_title_match_length = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_total_title_match_length());
    }

    // optional int32 num_input_terms_matched_by_title = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_input_terms_matched_by_title());
    }

    // optional int32 num_input_terms_matched_by_url = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_input_terms_matched_by_url());
    }

    // optional int32 length_of_url = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_length_of_url());
    }

    // optional float site_engagement = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OmniboxEventProto_Suggestion_ScoringSignals::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OmniboxEventProto_Suggestion_ScoringSignals*>(
      &from));
}

void OmniboxEventProto_Suggestion_ScoringSignals::MergeFrom(const OmniboxEventProto_Suggestion_ScoringSignals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto.Suggestion.ScoringSignals)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      typed_count_ = from.typed_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      visit_count_ = from.visit_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      elapsed_time_last_visit_secs_ = from.elapsed_time_last_visit_secs_;
    }
    if (cached_has_bits & 0x00000008u) {
      shortcut_visit_count_ = from.shortcut_visit_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      shortest_shortcut_len_ = from.shortest_shortcut_len_;
    }
    if (cached_has_bits & 0x00000020u) {
      elapsed_time_last_shortcut_visit_sec_ = from.elapsed_time_last_shortcut_visit_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_bookmarks_of_url_ = from.num_bookmarks_of_url_;
    }
    if (cached_has_bits & 0x00000080u) {
      first_bookmark_title_match_position_ = from.first_bookmark_title_match_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      total_bookmark_title_match_length_ = from.total_bookmark_title_match_length_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_input_terms_matched_by_bookmark_title_ = from.num_input_terms_matched_by_bookmark_title_;
    }
    if (cached_has_bits & 0x00000400u) {
      first_url_match_position_ = from.first_url_match_position_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_url_match_length_ = from.total_url_match_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      total_host_match_length_ = from.total_host_match_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      total_path_match_length_ = from.total_path_match_length_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_host_only_ = from.is_host_only_;
    }
    if (cached_has_bits & 0x00008000u) {
      host_match_at_word_boundary_ = from.host_match_at_word_boundary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      has_non_scheme_www_match_ = from.has_non_scheme_www_match_;
    }
    if (cached_has_bits & 0x00020000u) {
      allowed_to_be_default_match_ = from.allowed_to_be_default_match_;
    }
    if (cached_has_bits & 0x00040000u) {
      total_query_or_ref_match_length_ = from.total_query_or_ref_match_length_;
    }
    if (cached_has_bits & 0x00080000u) {
      total_title_match_length_ = from.total_title_match_length_;
    }
    if (cached_has_bits & 0x00100000u) {
      num_input_terms_matched_by_title_ = from.num_input_terms_matched_by_title_;
    }
    if (cached_has_bits & 0x00200000u) {
      num_input_terms_matched_by_url_ = from.num_input_terms_matched_by_url_;
    }
    if (cached_has_bits & 0x00400000u) {
      length_of_url_ = from.length_of_url_;
    }
    if (cached_has_bits & 0x00800000u) {
      site_engagement_ = from.site_engagement_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OmniboxEventProto_Suggestion_ScoringSignals::CopyFrom(const OmniboxEventProto_Suggestion_ScoringSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto.Suggestion.ScoringSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto_Suggestion_ScoringSignals::IsInitialized() const {
  return true;
}

void OmniboxEventProto_Suggestion_ScoringSignals::InternalSwap(OmniboxEventProto_Suggestion_ScoringSignals* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OmniboxEventProto_Suggestion_ScoringSignals, site_engagement_)
      + sizeof(OmniboxEventProto_Suggestion_ScoringSignals::site_engagement_)
      - PROTOBUF_FIELD_OFFSET(OmniboxEventProto_Suggestion_ScoringSignals, typed_count_)>(
          reinterpret_cast<char*>(&typed_count_),
          reinterpret_cast<char*>(&other->typed_count_));
}

std::string OmniboxEventProto_Suggestion_ScoringSignals::GetTypeName() const {
  return "metrics.OmniboxEventProto.Suggestion.ScoringSignals";
}


// ===================================================================

class OmniboxEventProto_Suggestion::_Internal {
 public:
  using HasBits = decltype(std::declval<OmniboxEventProto_Suggestion>()._has_bits_);
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_relevance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_typed_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_starred(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_result_subtype_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_has_tab_match(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_keyword_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::metrics::OmniboxEventProto_Suggestion_ScoringSignals& scoring_signals(const OmniboxEventProto_Suggestion* msg);
  static void set_has_scoring_signals(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::OmniboxEventProto_Suggestion_ScoringSignals&
OmniboxEventProto_Suggestion::_Internal::scoring_signals(const OmniboxEventProto_Suggestion* msg) {
  return *msg->scoring_signals_;
}
OmniboxEventProto_Suggestion::OmniboxEventProto_Suggestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.OmniboxEventProto.Suggestion)
}
OmniboxEventProto_Suggestion::OmniboxEventProto_Suggestion(const OmniboxEventProto_Suggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_scoring_signals()) {
    scoring_signals_ = new ::metrics::OmniboxEventProto_Suggestion_ScoringSignals(*from.scoring_signals_);
  } else {
    scoring_signals_ = nullptr;
  }
  ::memcpy(&provider_, &from.provider_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_subtype_identifier_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(result_subtype_identifier_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto.Suggestion)
}

inline void OmniboxEventProto_Suggestion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scoring_signals_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_subtype_identifier_) -
    reinterpret_cast<char*>(&scoring_signals_)) + sizeof(result_subtype_identifier_));
}

OmniboxEventProto_Suggestion::~OmniboxEventProto_Suggestion() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto.Suggestion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OmniboxEventProto_Suggestion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete scoring_signals_;
}

void OmniboxEventProto_Suggestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OmniboxEventProto_Suggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto.Suggestion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scoring_signals_ != nullptr);
    scoring_signals_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&provider_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_tab_match_) -
        reinterpret_cast<char*>(&provider_)) + sizeof(has_tab_match_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&is_keyword_suggestion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_subtype_identifier_) -
        reinterpret_cast<char*>(&is_keyword_suggestion_)) + sizeof(result_subtype_identifier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OmniboxEventProto_Suggestion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_ProviderType_IsValid(val))) {
            _internal_set_provider(static_cast<::metrics::OmniboxEventProto_ProviderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_Suggestion_ResultType_IsValid(val))) {
            _internal_set_result_type(static_cast<::metrics::OmniboxEventProto_Suggestion_ResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 relevance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_relevance(&has_bits);
          relevance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_starred = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_starred(&has_bits);
          is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 typed_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_typed_count(&has_bits);
          typed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_disabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_disabled(&has_bits);
          is_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 result_subtype_identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_result_subtype_identifier(&has_bits);
          result_subtype_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_tab_match = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_has_tab_match(&has_bits);
          has_tab_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_keyword_suggestion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_keyword_suggestion(&has_bits);
          is_keyword_suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.Suggestion.ScoringSignals scoring_signals = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_scoring_signals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OmniboxEventProto_Suggestion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.OmniboxEventProto.Suggestion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_provider(), target);
  }

  // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result_type(), target);
  }

  // optional int32 relevance = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_relevance(), target);
  }

  // optional bool is_starred = 4 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_starred(), target);
  }

  // optional int32 typed_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_typed_count(), target);
  }

  // optional bool is_disabled = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_disabled(), target);
  }

  // optional int32 result_subtype_identifier = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_result_subtype_identifier(), target);
  }

  // optional bool has_tab_match = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_has_tab_match(), target);
  }

  // optional bool is_keyword_suggestion = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_keyword_suggestion(), target);
  }

  // optional .metrics.OmniboxEventProto.Suggestion.ScoringSignals scoring_signals = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::scoring_signals(this),
        _Internal::scoring_signals(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.OmniboxEventProto.Suggestion)
  return target;
}

size_t OmniboxEventProto_Suggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto.Suggestion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .metrics.OmniboxEventProto.Suggestion.ScoringSignals scoring_signals = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scoring_signals_);
    }

    // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_provider());
    }

    // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result_type());
    }

    // optional int32 relevance = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_relevance());
    }

    // optional int32 typed_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typed_count());
    }

    // optional bool is_starred = 4 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_disabled = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool has_tab_match = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool is_keyword_suggestion = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 result_subtype_identifier = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result_subtype_identifier());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OmniboxEventProto_Suggestion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OmniboxEventProto_Suggestion*>(
      &from));
}

void OmniboxEventProto_Suggestion::MergeFrom(const OmniboxEventProto_Suggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto.Suggestion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scoring_signals()->::metrics::OmniboxEventProto_Suggestion_ScoringSignals::MergeFrom(from._internal_scoring_signals());
    }
    if (cached_has_bits & 0x00000002u) {
      provider_ = from.provider_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_type_ = from.result_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      relevance_ = from.relevance_;
    }
    if (cached_has_bits & 0x00000010u) {
      typed_count_ = from.typed_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_starred_ = from.is_starred_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_disabled_ = from.is_disabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      has_tab_match_ = from.has_tab_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      is_keyword_suggestion_ = from.is_keyword_suggestion_;
    }
    if (cached_has_bits & 0x00000200u) {
      result_subtype_identifier_ = from.result_subtype_identifier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OmniboxEventProto_Suggestion::CopyFrom(const OmniboxEventProto_Suggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto.Suggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto_Suggestion::IsInitialized() const {
  return true;
}

void OmniboxEventProto_Suggestion::InternalSwap(OmniboxEventProto_Suggestion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OmniboxEventProto_Suggestion, result_subtype_identifier_)
      + sizeof(OmniboxEventProto_Suggestion::result_subtype_identifier_)
      - PROTOBUF_FIELD_OFFSET(OmniboxEventProto_Suggestion, scoring_signals_)>(
          reinterpret_cast<char*>(&scoring_signals_),
          reinterpret_cast<char*>(&other->scoring_signals_));
}

std::string OmniboxEventProto_Suggestion::GetTypeName() const {
  return "metrics.OmniboxEventProto.Suggestion";
}


// ===================================================================

class OmniboxEventProto_ProviderInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<OmniboxEventProto_ProviderInfo>()._has_bits_);
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_provider_done(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_times_returned_results_in_session(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

OmniboxEventProto_ProviderInfo::OmniboxEventProto_ProviderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  field_trial_triggered_(arena),
  field_trial_triggered_in_session_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.OmniboxEventProto.ProviderInfo)
}
OmniboxEventProto_ProviderInfo::OmniboxEventProto_ProviderInfo(const OmniboxEventProto_ProviderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      field_trial_triggered_(from.field_trial_triggered_),
      field_trial_triggered_in_session_(from.field_trial_triggered_in_session_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&provider_, &from.provider_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_returned_results_in_session_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(times_returned_results_in_session_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto.ProviderInfo)
}

inline void OmniboxEventProto_ProviderInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&provider_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&times_returned_results_in_session_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(times_returned_results_in_session_));
}

OmniboxEventProto_ProviderInfo::~OmniboxEventProto_ProviderInfo() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto.ProviderInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OmniboxEventProto_ProviderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OmniboxEventProto_ProviderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OmniboxEventProto_ProviderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto.ProviderInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_trial_triggered_.Clear();
  field_trial_triggered_in_session_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&provider_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_returned_results_in_session_) -
        reinterpret_cast<char*>(&provider_)) + sizeof(times_returned_results_in_session_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OmniboxEventProto_ProviderInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_ProviderType_IsValid(val))) {
            _internal_set_provider(static_cast<::metrics::OmniboxEventProto_ProviderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool provider_done = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_provider_done(&has_bits);
          provider_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 field_trial_triggered = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_field_trial_triggered(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_field_trial_triggered(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 field_trial_triggered_in_session = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_field_trial_triggered_in_session(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_field_trial_triggered_in_session(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 times_returned_results_in_session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_times_returned_results_in_session(&has_bits);
          times_returned_results_in_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OmniboxEventProto_ProviderInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.OmniboxEventProto.ProviderInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_provider(), target);
  }

  // optional bool provider_done = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_provider_done(), target);
  }

  // repeated fixed32 field_trial_triggered = 3 [deprecated = true];
  for (int i = 0, n = this->_internal_field_trial_triggered_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_field_trial_triggered(i), target);
  }

  // repeated fixed32 field_trial_triggered_in_session = 4 [deprecated = true];
  for (int i = 0, n = this->_internal_field_trial_triggered_in_session_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_field_trial_triggered_in_session(i), target);
  }

  // optional int32 times_returned_results_in_session = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_times_returned_results_in_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.OmniboxEventProto.ProviderInfo)
  return target;
}

size_t OmniboxEventProto_ProviderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto.ProviderInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 field_trial_triggered = 3 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_field_trial_triggered_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_field_trial_triggered_size());
    total_size += data_size;
  }

  // repeated fixed32 field_trial_triggered_in_session = 4 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_field_trial_triggered_in_session_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_field_trial_triggered_in_session_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_provider());
    }

    // optional bool provider_done = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 times_returned_results_in_session = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_times_returned_results_in_session());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OmniboxEventProto_ProviderInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OmniboxEventProto_ProviderInfo*>(
      &from));
}

void OmniboxEventProto_ProviderInfo::MergeFrom(const OmniboxEventProto_ProviderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto.ProviderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  field_trial_triggered_.MergeFrom(from.field_trial_triggered_);
  field_trial_triggered_in_session_.MergeFrom(from.field_trial_triggered_in_session_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      provider_ = from.provider_;
    }
    if (cached_has_bits & 0x00000002u) {
      provider_done_ = from.provider_done_;
    }
    if (cached_has_bits & 0x00000004u) {
      times_returned_results_in_session_ = from.times_returned_results_in_session_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OmniboxEventProto_ProviderInfo::CopyFrom(const OmniboxEventProto_ProviderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto.ProviderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto_ProviderInfo::IsInitialized() const {
  return true;
}

void OmniboxEventProto_ProviderInfo::InternalSwap(OmniboxEventProto_ProviderInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_trial_triggered_.InternalSwap(&other->field_trial_triggered_);
  field_trial_triggered_in_session_.InternalSwap(&other->field_trial_triggered_in_session_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OmniboxEventProto_ProviderInfo, times_returned_results_in_session_)
      + sizeof(OmniboxEventProto_ProviderInfo::times_returned_results_in_session_)
      - PROTOBUF_FIELD_OFFSET(OmniboxEventProto_ProviderInfo, provider_)>(
          reinterpret_cast<char*>(&provider_),
          reinterpret_cast<char*>(&other->provider_));
}

std::string OmniboxEventProto_ProviderInfo::GetTypeName() const {
  return "metrics.OmniboxEventProto.ProviderInfo";
}


// ===================================================================

class OmniboxEventProto_ProfileData::_Internal {
 public:
  using HasBits = decltype(std::declval<OmniboxEventProto_ProfileData>()._has_bits_);
  static void set_has_total_num_bookmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_num_history_urls(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_signed_into_browser(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_sync_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

OmniboxEventProto_ProfileData::OmniboxEventProto_ProfileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.OmniboxEventProto.ProfileData)
}
OmniboxEventProto_ProfileData::OmniboxEventProto_ProfileData(const OmniboxEventProto_ProfileData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&total_num_bookmarks_, &from.total_num_bookmarks_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_sync_enabled_) -
    reinterpret_cast<char*>(&total_num_bookmarks_)) + sizeof(is_sync_enabled_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto.ProfileData)
}

inline void OmniboxEventProto_ProfileData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_num_bookmarks_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_sync_enabled_) -
    reinterpret_cast<char*>(&total_num_bookmarks_)) + sizeof(is_sync_enabled_));
}

OmniboxEventProto_ProfileData::~OmniboxEventProto_ProfileData() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto.ProfileData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OmniboxEventProto_ProfileData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OmniboxEventProto_ProfileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OmniboxEventProto_ProfileData::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto.ProfileData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&total_num_bookmarks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_sync_enabled_) -
        reinterpret_cast<char*>(&total_num_bookmarks_)) + sizeof(is_sync_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OmniboxEventProto_ProfileData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 total_num_bookmarks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_total_num_bookmarks(&has_bits);
          total_num_bookmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_num_history_urls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_num_history_urls(&has_bits);
          total_num_history_urls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_signed_into_browser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_signed_into_browser(&has_bits);
          is_signed_into_browser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_sync_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_sync_enabled(&has_bits);
          is_sync_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OmniboxEventProto_ProfileData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.OmniboxEventProto.ProfileData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 total_num_bookmarks = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_num_bookmarks(), target);
  }

  // optional int32 total_num_history_urls = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_num_history_urls(), target);
  }

  // optional bool is_signed_into_browser = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_signed_into_browser(), target);
  }

  // optional bool is_sync_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_sync_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.OmniboxEventProto.ProfileData)
  return target;
}

size_t OmniboxEventProto_ProfileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto.ProfileData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 total_num_bookmarks = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_num_bookmarks());
    }

    // optional int32 total_num_history_urls = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_num_history_urls());
    }

    // optional bool is_signed_into_browser = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_sync_enabled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OmniboxEventProto_ProfileData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OmniboxEventProto_ProfileData*>(
      &from));
}

void OmniboxEventProto_ProfileData::MergeFrom(const OmniboxEventProto_ProfileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto.ProfileData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      total_num_bookmarks_ = from.total_num_bookmarks_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_num_history_urls_ = from.total_num_history_urls_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_signed_into_browser_ = from.is_signed_into_browser_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_sync_enabled_ = from.is_sync_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OmniboxEventProto_ProfileData::CopyFrom(const OmniboxEventProto_ProfileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto.ProfileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto_ProfileData::IsInitialized() const {
  return true;
}

void OmniboxEventProto_ProfileData::InternalSwap(OmniboxEventProto_ProfileData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OmniboxEventProto_ProfileData, is_sync_enabled_)
      + sizeof(OmniboxEventProto_ProfileData::is_sync_enabled_)
      - PROTOBUF_FIELD_OFFSET(OmniboxEventProto_ProfileData, total_num_bookmarks_)>(
          reinterpret_cast<char*>(&total_num_bookmarks_),
          reinterpret_cast<char*>(&other->total_num_bookmarks_));
}

std::string OmniboxEventProto_ProfileData::GetTypeName() const {
  return "metrics.OmniboxEventProto.ProfileData";
}


// ===================================================================

class OmniboxEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OmniboxEventProto>()._has_bits_);
  static void set_has_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tab_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_typed_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_just_deleted_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_typed_terms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_selected_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_selected_tab_match(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_deprecated_is_top_result_hidden_in_dropdown(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_popup_open(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_paste_and_go(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_completed_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_typing_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_duration_since_last_default_match_update_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_current_page_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_input_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_in_keyword_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_keyword_mode_entry_method(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_is_query_started_from_tile(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::metrics::OmniboxEventProto_ProfileData& profile_data(const OmniboxEventProto* msg);
  static void set_has_profile_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steady_state_omnibox_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::metrics::OmniboxEventProto_ProfileData&
OmniboxEventProto::_Internal::profile_data(const OmniboxEventProto* msg) {
  return *msg->profile_data_;
}
OmniboxEventProto::OmniboxEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  suggestion_(arena),
  provider_info_(arena),
  legacy_feature_triggered_in_session_(arena),
  legacy_feature_triggered_(arena),
  feature_triggered_(arena),
  feature_triggered_in_session_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.OmniboxEventProto)
}
OmniboxEventProto::OmniboxEventProto(const OmniboxEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      suggestion_(from.suggestion_),
      provider_info_(from.provider_info_),
      legacy_feature_triggered_in_session_(from.legacy_feature_triggered_in_session_),
      legacy_feature_triggered_(from.legacy_feature_triggered_),
      feature_triggered_(from.feature_triggered_),
      feature_triggered_in_session_(from.feature_triggered_in_session_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_profile_data()) {
    profile_data_ = new ::metrics::OmniboxEventProto_ProfileData(*from.profile_data_);
  } else {
    profile_data_ = nullptr;
  }
  ::memcpy(&time_sec_, &from.time_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&steady_state_omnibox_position_) -
    reinterpret_cast<char*>(&time_sec_)) + sizeof(steady_state_omnibox_position_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto)
}

inline void OmniboxEventProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&profile_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steady_state_omnibox_position_) -
    reinterpret_cast<char*>(&profile_data_)) + sizeof(steady_state_omnibox_position_));
}

OmniboxEventProto::~OmniboxEventProto() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OmniboxEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete profile_data_;
}

void OmniboxEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OmniboxEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suggestion_.Clear();
  provider_info_.Clear();
  legacy_feature_triggered_in_session_.Clear();
  legacy_feature_triggered_.Clear();
  feature_triggered_.Clear();
  feature_triggered_in_session_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(profile_data_ != nullptr);
    profile_data_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&time_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_length_) -
        reinterpret_cast<char*>(&time_sec_)) + sizeof(completed_length_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&input_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_type_) -
        reinterpret_cast<char*>(&input_type_)) + sizeof(mode_type_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&is_paste_and_go_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steady_state_omnibox_position_) -
        reinterpret_cast<char*>(&is_paste_and_go_)) + sizeof(steady_state_omnibox_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OmniboxEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 time_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_sec(&has_bits);
          time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tab_id(&has_bits);
          tab_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 typed_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_typed_length(&has_bits);
          typed_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_typed_terms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_typed_terms(&has_bits);
          num_typed_terms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 selected_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_selected_index(&has_bits);
          selected_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 completed_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_completed_length(&has_bits);
          completed_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 typing_duration_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_typing_duration_ms(&has_bits);
          typing_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.OmniboxInputType input_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxInputType_IsValid(val))) {
            _internal_set_input_type(static_cast<::metrics::OmniboxInputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_suggestion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_PageClassification_IsValid(val))) {
            _internal_set_current_page_classification(static_cast<::metrics::OmniboxEventProto_PageClassification>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool just_deleted_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_just_deleted_text(&has_bits);
          just_deleted_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_provider_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 duration_since_last_default_match_update_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_duration_since_last_default_match_update_ms(&has_bits);
          duration_since_last_default_match_update_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_deprecated_is_top_result_hidden_in_dropdown(&has_bits);
          deprecated_is_top_result_hidden_in_dropdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_popup_open = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_popup_open(&has_bits);
          is_popup_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_paste_and_go = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_paste_and_go(&has_bits);
          is_paste_and_go_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool selected_tab_match = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_selected_tab_match(&has_bits);
          selected_tab_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.ModeType mode_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_ModeType_IsValid(val))) {
            _internal_set_mode_type(static_cast<::metrics::OmniboxEventProto_ModeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool in_keyword_mode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_in_keyword_mode(&has_bits);
          in_keyword_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.KeywordModeEntryMethod keyword_mode_entry_method = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_KeywordModeEntryMethod_IsValid(val))) {
            _internal_set_keyword_mode_entry_method(static_cast<::metrics::OmniboxEventProto_KeywordModeEntryMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_query_started_from_tile = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_is_query_started_from_tile(&has_bits);
          is_query_started_from_tile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 legacy_feature_triggered_in_session = 22 [deprecated = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_legacy_feature_triggered_in_session(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_legacy_feature_triggered_in_session(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.ProfileData profile_data = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 legacy_feature_triggered = 24 [deprecated = true];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_legacy_feature_triggered(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<192>(ptr));
        } else if (static_cast<uint8_t>(tag) == 194) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_legacy_feature_triggered(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.OmniboxEventProto.Feature feature_triggered = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_Feature_IsValid(val))) {
              _internal_add_feature_triggered(static_cast<::metrics::OmniboxEventProto_Feature>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<200>(ptr));
        } else if (static_cast<uint8_t>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_feature_triggered(), ptr, ctx, ::metrics::OmniboxEventProto_Feature_IsValid, &_internal_metadata_, 25);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.OmniboxEventProto.Feature feature_triggered_in_session = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_Feature_IsValid(val))) {
              _internal_add_feature_triggered_in_session(static_cast<::metrics::OmniboxEventProto_Feature>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<208>(ptr));
        } else if (static_cast<uint8_t>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_feature_triggered_in_session(), ptr, ctx, ::metrics::OmniboxEventProto_Feature_IsValid, &_internal_metadata_, 26);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.OmniboxPosition steady_state_omnibox_position = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_OmniboxPosition_IsValid(val))) {
            _internal_set_steady_state_omnibox_position(static_cast<::metrics::OmniboxEventProto_OmniboxPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OmniboxEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.OmniboxEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time_sec(), target);
  }

  // optional int32 tab_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tab_id(), target);
  }

  // optional int32 typed_length = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_typed_length(), target);
  }

  // optional int32 num_typed_terms = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_typed_terms(), target);
  }

  // optional int32 selected_index = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_selected_index(), target);
  }

  // optional int32 completed_length = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_completed_length(), target);
  }

  // optional int64 typing_duration_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_typing_duration_ms(), target);
  }

  // optional .metrics.OmniboxInputType input_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_input_type(), target);
  }

  // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_suggestion_size()); i < n; i++) {
    const auto& repfield = this->_internal_suggestion(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_current_page_classification(), target);
  }

  // optional bool just_deleted_text = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_just_deleted_text(), target);
  }

  // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_provider_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_provider_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 duration_since_last_default_match_update_ms = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_duration_since_last_default_match_update_ms(), target);
  }

  // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_deprecated_is_top_result_hidden_in_dropdown(), target);
  }

  // optional bool is_popup_open = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_popup_open(), target);
  }

  // optional bool is_paste_and_go = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_paste_and_go(), target);
  }

  // optional bool selected_tab_match = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_selected_tab_match(), target);
  }

  // optional .metrics.OmniboxEventProto.ModeType mode_type = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_mode_type(), target);
  }

  // optional bool in_keyword_mode = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_in_keyword_mode(), target);
  }

  // optional .metrics.OmniboxEventProto.KeywordModeEntryMethod keyword_mode_entry_method = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_keyword_mode_entry_method(), target);
  }

  // optional bool is_query_started_from_tile = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_is_query_started_from_tile(), target);
  }

  // repeated int32 legacy_feature_triggered_in_session = 22 [deprecated = true];
  for (int i = 0, n = this->_internal_legacy_feature_triggered_in_session_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_legacy_feature_triggered_in_session(i), target);
  }

  // optional .metrics.OmniboxEventProto.ProfileData profile_data = 23;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::profile_data(this),
        _Internal::profile_data(this).GetCachedSize(), target, stream);
  }

  // repeated int32 legacy_feature_triggered = 24 [deprecated = true];
  for (int i = 0, n = this->_internal_legacy_feature_triggered_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_legacy_feature_triggered(i), target);
  }

  // repeated .metrics.OmniboxEventProto.Feature feature_triggered = 25;
  for (int i = 0, n = this->_internal_feature_triggered_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        25, this->_internal_feature_triggered(i), target);
  }

  // repeated .metrics.OmniboxEventProto.Feature feature_triggered_in_session = 26;
  for (int i = 0, n = this->_internal_feature_triggered_in_session_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        26, this->_internal_feature_triggered_in_session(i), target);
  }

  // optional .metrics.OmniboxEventProto.OmniboxPosition steady_state_omnibox_position = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_steady_state_omnibox_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.OmniboxEventProto)
  return target;
}

size_t OmniboxEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
  total_size += 1UL * this->_internal_suggestion_size();
  for (const auto& msg : this->suggestion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
  total_size += 1UL * this->_internal_provider_info_size();
  for (const auto& msg : this->provider_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 legacy_feature_triggered_in_session = 22 [deprecated = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->legacy_feature_triggered_in_session_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_legacy_feature_triggered_in_session_size());
    total_size += data_size;
  }

  // repeated int32 legacy_feature_triggered = 24 [deprecated = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->legacy_feature_triggered_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_legacy_feature_triggered_size());
    total_size += data_size;
  }

  // repeated .metrics.OmniboxEventProto.Feature feature_triggered = 25;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_feature_triggered_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_feature_triggered(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .metrics.OmniboxEventProto.Feature feature_triggered_in_session = 26;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_feature_triggered_in_session_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_feature_triggered_in_session(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .metrics.OmniboxEventProto.ProfileData profile_data = 23;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profile_data_);
    }

    // optional int64 time_sec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_sec());
    }

    // optional int32 tab_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tab_id());
    }

    // optional int32 typed_length = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typed_length());
    }

    // optional int32 num_typed_terms = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_typed_terms());
    }

    // optional int32 selected_index = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_selected_index());
    }

    // optional int64 typing_duration_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_typing_duration_ms());
    }

    // optional int32 completed_length = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_completed_length());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .metrics.OmniboxInputType input_type = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_input_type());
    }

    // optional int64 duration_since_last_default_match_update_ms = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_since_last_default_match_update_ms());
    }

    // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_current_page_classification());
    }

    // optional bool just_deleted_text = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool selected_tab_match = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_popup_open = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional .metrics.OmniboxEventProto.ModeType mode_type = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode_type());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional bool is_paste_and_go = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool in_keyword_mode = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool is_query_started_from_tile = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional .metrics.OmniboxEventProto.KeywordModeEntryMethod keyword_mode_entry_method = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_keyword_mode_entry_method());
    }

    // optional .metrics.OmniboxEventProto.OmniboxPosition steady_state_omnibox_position = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_steady_state_omnibox_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OmniboxEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OmniboxEventProto*>(
      &from));
}

void OmniboxEventProto::MergeFrom(const OmniboxEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  suggestion_.MergeFrom(from.suggestion_);
  provider_info_.MergeFrom(from.provider_info_);
  legacy_feature_triggered_in_session_.MergeFrom(from.legacy_feature_triggered_in_session_);
  legacy_feature_triggered_.MergeFrom(from.legacy_feature_triggered_);
  feature_triggered_.MergeFrom(from.feature_triggered_);
  feature_triggered_in_session_.MergeFrom(from.feature_triggered_in_session_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_profile_data()->::metrics::OmniboxEventProto_ProfileData::MergeFrom(from._internal_profile_data());
    }
    if (cached_has_bits & 0x00000002u) {
      time_sec_ = from.time_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      tab_id_ = from.tab_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      typed_length_ = from.typed_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_typed_terms_ = from.num_typed_terms_;
    }
    if (cached_has_bits & 0x00000020u) {
      selected_index_ = from.selected_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      typing_duration_ms_ = from.typing_duration_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      completed_length_ = from.completed_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      input_type_ = from.input_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      duration_since_last_default_match_update_ms_ = from.duration_since_last_default_match_update_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      current_page_classification_ = from.current_page_classification_;
    }
    if (cached_has_bits & 0x00000800u) {
      just_deleted_text_ = from.just_deleted_text_;
    }
    if (cached_has_bits & 0x00001000u) {
      selected_tab_match_ = from.selected_tab_match_;
    }
    if (cached_has_bits & 0x00002000u) {
      deprecated_is_top_result_hidden_in_dropdown_ = from.deprecated_is_top_result_hidden_in_dropdown_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_popup_open_ = from.is_popup_open_;
    }
    if (cached_has_bits & 0x00008000u) {
      mode_type_ = from.mode_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_paste_and_go_ = from.is_paste_and_go_;
    }
    if (cached_has_bits & 0x00020000u) {
      in_keyword_mode_ = from.in_keyword_mode_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_query_started_from_tile_ = from.is_query_started_from_tile_;
    }
    if (cached_has_bits & 0x00080000u) {
      keyword_mode_entry_method_ = from.keyword_mode_entry_method_;
    }
    if (cached_has_bits & 0x00100000u) {
      steady_state_omnibox_position_ = from.steady_state_omnibox_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OmniboxEventProto::CopyFrom(const OmniboxEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto::IsInitialized() const {
  return true;
}

void OmniboxEventProto::InternalSwap(OmniboxEventProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  suggestion_.InternalSwap(&other->suggestion_);
  provider_info_.InternalSwap(&other->provider_info_);
  legacy_feature_triggered_in_session_.InternalSwap(&other->legacy_feature_triggered_in_session_);
  legacy_feature_triggered_.InternalSwap(&other->legacy_feature_triggered_);
  feature_triggered_.InternalSwap(&other->feature_triggered_);
  feature_triggered_in_session_.InternalSwap(&other->feature_triggered_in_session_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OmniboxEventProto, steady_state_omnibox_position_)
      + sizeof(OmniboxEventProto::steady_state_omnibox_position_)
      - PROTOBUF_FIELD_OFFSET(OmniboxEventProto, profile_data_)>(
          reinterpret_cast<char*>(&profile_data_),
          reinterpret_cast<char*>(&other->profile_data_));
}

std::string OmniboxEventProto::GetTypeName() const {
  return "metrics.OmniboxEventProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::OmniboxEventProto_Suggestion_ScoringSignals*
Arena::CreateMaybeMessage< ::metrics::OmniboxEventProto_Suggestion_ScoringSignals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::OmniboxEventProto_Suggestion_ScoringSignals >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::OmniboxEventProto_Suggestion*
Arena::CreateMaybeMessage< ::metrics::OmniboxEventProto_Suggestion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::OmniboxEventProto_Suggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::OmniboxEventProto_ProviderInfo*
Arena::CreateMaybeMessage< ::metrics::OmniboxEventProto_ProviderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::OmniboxEventProto_ProviderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::OmniboxEventProto_ProfileData*
Arena::CreateMaybeMessage< ::metrics::OmniboxEventProto_ProfileData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::OmniboxEventProto_ProfileData >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::OmniboxEventProto*
Arena::CreateMaybeMessage< ::metrics::OmniboxEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::OmniboxEventProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
