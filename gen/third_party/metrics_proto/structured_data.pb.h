// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structured_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_structured_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_structured_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_structured_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_structured_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class StructuredDataProto;
struct StructuredDataProtoDefaultTypeInternal;
extern StructuredDataProtoDefaultTypeInternal _StructuredDataProto_default_instance_;
class StructuredEventProto;
struct StructuredEventProtoDefaultTypeInternal;
extern StructuredEventProtoDefaultTypeInternal _StructuredEventProto_default_instance_;
class StructuredEventProto_EventSequenceMetadata;
struct StructuredEventProto_EventSequenceMetadataDefaultTypeInternal;
extern StructuredEventProto_EventSequenceMetadataDefaultTypeInternal _StructuredEventProto_EventSequenceMetadata_default_instance_;
class StructuredEventProto_Metric;
struct StructuredEventProto_MetricDefaultTypeInternal;
extern StructuredEventProto_MetricDefaultTypeInternal _StructuredEventProto_Metric_default_instance_;
class StructuredEventProto_Metric_RepeatedInt64;
struct StructuredEventProto_Metric_RepeatedInt64DefaultTypeInternal;
extern StructuredEventProto_Metric_RepeatedInt64DefaultTypeInternal _StructuredEventProto_Metric_RepeatedInt64_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::StructuredDataProto* Arena::CreateMaybeMessage<::metrics::StructuredDataProto>(Arena*);
template<> ::metrics::StructuredEventProto* Arena::CreateMaybeMessage<::metrics::StructuredEventProto>(Arena*);
template<> ::metrics::StructuredEventProto_EventSequenceMetadata* Arena::CreateMaybeMessage<::metrics::StructuredEventProto_EventSequenceMetadata>(Arena*);
template<> ::metrics::StructuredEventProto_Metric* Arena::CreateMaybeMessage<::metrics::StructuredEventProto_Metric>(Arena*);
template<> ::metrics::StructuredEventProto_Metric_RepeatedInt64* Arena::CreateMaybeMessage<::metrics::StructuredEventProto_Metric_RepeatedInt64>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum StructuredEventProto_EventType : int {
  StructuredEventProto_EventType_UNKNOWN = 0,
  StructuredEventProto_EventType_REGULAR = 1,
  StructuredEventProto_EventType_RAW_STRING = 2,
  StructuredEventProto_EventType_SEQUENCE = 3
};
bool StructuredEventProto_EventType_IsValid(int value);
constexpr StructuredEventProto_EventType StructuredEventProto_EventType_EventType_MIN = StructuredEventProto_EventType_UNKNOWN;
constexpr StructuredEventProto_EventType StructuredEventProto_EventType_EventType_MAX = StructuredEventProto_EventType_SEQUENCE;
constexpr int StructuredEventProto_EventType_EventType_ARRAYSIZE = StructuredEventProto_EventType_EventType_MAX + 1;

const std::string& StructuredEventProto_EventType_Name(StructuredEventProto_EventType value);
template<typename T>
inline const std::string& StructuredEventProto_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StructuredEventProto_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StructuredEventProto_EventType_Name.");
  return StructuredEventProto_EventType_Name(static_cast<StructuredEventProto_EventType>(enum_t_value));
}
bool StructuredEventProto_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StructuredEventProto_EventType* value);
// ===================================================================

class StructuredEventProto_Metric_RepeatedInt64 final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.StructuredEventProto.Metric.RepeatedInt64) */ {
 public:
  inline StructuredEventProto_Metric_RepeatedInt64() : StructuredEventProto_Metric_RepeatedInt64(nullptr) {}
  ~StructuredEventProto_Metric_RepeatedInt64() override;
  explicit PROTOBUF_CONSTEXPR StructuredEventProto_Metric_RepeatedInt64(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructuredEventProto_Metric_RepeatedInt64(const StructuredEventProto_Metric_RepeatedInt64& from);
  StructuredEventProto_Metric_RepeatedInt64(StructuredEventProto_Metric_RepeatedInt64&& from) noexcept
    : StructuredEventProto_Metric_RepeatedInt64() {
    *this = ::std::move(from);
  }

  inline StructuredEventProto_Metric_RepeatedInt64& operator=(const StructuredEventProto_Metric_RepeatedInt64& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructuredEventProto_Metric_RepeatedInt64& operator=(StructuredEventProto_Metric_RepeatedInt64&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StructuredEventProto_Metric_RepeatedInt64& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructuredEventProto_Metric_RepeatedInt64* internal_default_instance() {
    return reinterpret_cast<const StructuredEventProto_Metric_RepeatedInt64*>(
               &_StructuredEventProto_Metric_RepeatedInt64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StructuredEventProto_Metric_RepeatedInt64& a, StructuredEventProto_Metric_RepeatedInt64& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StructuredEventProto_Metric_RepeatedInt64* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructuredEventProto_Metric_RepeatedInt64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructuredEventProto_Metric_RepeatedInt64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructuredEventProto_Metric_RepeatedInt64>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StructuredEventProto_Metric_RepeatedInt64& from);
  void MergeFrom(const StructuredEventProto_Metric_RepeatedInt64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StructuredEventProto_Metric_RepeatedInt64* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.StructuredEventProto.Metric.RepeatedInt64";
  }
  protected:
  explicit StructuredEventProto_Metric_RepeatedInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int64 values = 1 [packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  int64_t _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_values() const;
  void _internal_add_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_values();
  public:
  int64_t values(int index) const;
  void set_values(int index, int64_t value);
  void add_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:metrics.StructuredEventProto.Metric.RepeatedInt64)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structured_5fdata_2eproto;
};
// -------------------------------------------------------------------

class StructuredEventProto_Metric final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.StructuredEventProto.Metric) */ {
 public:
  inline StructuredEventProto_Metric() : StructuredEventProto_Metric(nullptr) {}
  ~StructuredEventProto_Metric() override;
  explicit PROTOBUF_CONSTEXPR StructuredEventProto_Metric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructuredEventProto_Metric(const StructuredEventProto_Metric& from);
  StructuredEventProto_Metric(StructuredEventProto_Metric&& from) noexcept
    : StructuredEventProto_Metric() {
    *this = ::std::move(from);
  }

  inline StructuredEventProto_Metric& operator=(const StructuredEventProto_Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructuredEventProto_Metric& operator=(StructuredEventProto_Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StructuredEventProto_Metric& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kValueHmac = 2,
    kValueInt64 = 3,
    kValueString = 4,
    kValueDouble = 5,
    kValueRepeatedInt64 = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const StructuredEventProto_Metric* internal_default_instance() {
    return reinterpret_cast<const StructuredEventProto_Metric*>(
               &_StructuredEventProto_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StructuredEventProto_Metric& a, StructuredEventProto_Metric& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StructuredEventProto_Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructuredEventProto_Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructuredEventProto_Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructuredEventProto_Metric>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StructuredEventProto_Metric& from);
  void MergeFrom(const StructuredEventProto_Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StructuredEventProto_Metric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.StructuredEventProto.Metric";
  }
  protected:
  explicit StructuredEventProto_Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StructuredEventProto_Metric_RepeatedInt64 RepeatedInt64;

  // accessors -------------------------------------------------------

  enum : int {
    kNameHashFieldNumber = 1,
    kValueHmacFieldNumber = 2,
    kValueInt64FieldNumber = 3,
    kValueStringFieldNumber = 4,
    kValueDoubleFieldNumber = 5,
    kValueRepeatedInt64FieldNumber = 6,
  };
  // optional fixed64 name_hash = 1;
  bool has_name_hash() const;
  private:
  bool _internal_has_name_hash() const;
  public:
  void clear_name_hash();
  uint64_t name_hash() const;
  void set_name_hash(uint64_t value);
  private:
  uint64_t _internal_name_hash() const;
  void _internal_set_name_hash(uint64_t value);
  public:

  // fixed64 value_hmac = 2;
  bool has_value_hmac() const;
  private:
  bool _internal_has_value_hmac() const;
  public:
  void clear_value_hmac();
  uint64_t value_hmac() const;
  void set_value_hmac(uint64_t value);
  private:
  uint64_t _internal_value_hmac() const;
  void _internal_set_value_hmac(uint64_t value);
  public:

  // int64 value_int64 = 3;
  bool has_value_int64() const;
  private:
  bool _internal_has_value_int64() const;
  public:
  void clear_value_int64();
  int64_t value_int64() const;
  void set_value_int64(int64_t value);
  private:
  int64_t _internal_value_int64() const;
  void _internal_set_value_int64(int64_t value);
  public:

  // string value_string = 4;
  bool has_value_string() const;
  private:
  bool _internal_has_value_string() const;
  public:
  void clear_value_string();
  const std::string& value_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_string();
  PROTOBUF_NODISCARD std::string* release_value_string();
  void set_allocated_value_string(std::string* value_string);
  private:
  const std::string& _internal_value_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_string(const std::string& value);
  std::string* _internal_mutable_value_string();
  public:

  // double value_double = 5;
  bool has_value_double() const;
  private:
  bool _internal_has_value_double() const;
  public:
  void clear_value_double();
  double value_double() const;
  void set_value_double(double value);
  private:
  double _internal_value_double() const;
  void _internal_set_value_double(double value);
  public:

  // .metrics.StructuredEventProto.Metric.RepeatedInt64 value_repeated_int64 = 6;
  bool has_value_repeated_int64() const;
  private:
  bool _internal_has_value_repeated_int64() const;
  public:
  void clear_value_repeated_int64();
  const ::metrics::StructuredEventProto_Metric_RepeatedInt64& value_repeated_int64() const;
  PROTOBUF_NODISCARD ::metrics::StructuredEventProto_Metric_RepeatedInt64* release_value_repeated_int64();
  ::metrics::StructuredEventProto_Metric_RepeatedInt64* mutable_value_repeated_int64();
  void set_allocated_value_repeated_int64(::metrics::StructuredEventProto_Metric_RepeatedInt64* value_repeated_int64);
  private:
  const ::metrics::StructuredEventProto_Metric_RepeatedInt64& _internal_value_repeated_int64() const;
  ::metrics::StructuredEventProto_Metric_RepeatedInt64* _internal_mutable_value_repeated_int64();
  public:
  void unsafe_arena_set_allocated_value_repeated_int64(
      ::metrics::StructuredEventProto_Metric_RepeatedInt64* value_repeated_int64);
  ::metrics::StructuredEventProto_Metric_RepeatedInt64* unsafe_arena_release_value_repeated_int64();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:metrics.StructuredEventProto.Metric)
 private:
  class _Internal;
  void set_has_value_hmac();
  void set_has_value_int64();
  void set_has_value_string();
  void set_has_value_double();
  void set_has_value_repeated_int64();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t name_hash_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint64_t value_hmac_;
    int64_t value_int64_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_string_;
    double value_double_;
    ::metrics::StructuredEventProto_Metric_RepeatedInt64* value_repeated_int64_;
  } value_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_structured_5fdata_2eproto;
};
// -------------------------------------------------------------------

class StructuredEventProto_EventSequenceMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.StructuredEventProto.EventSequenceMetadata) */ {
 public:
  inline StructuredEventProto_EventSequenceMetadata() : StructuredEventProto_EventSequenceMetadata(nullptr) {}
  ~StructuredEventProto_EventSequenceMetadata() override;
  explicit PROTOBUF_CONSTEXPR StructuredEventProto_EventSequenceMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructuredEventProto_EventSequenceMetadata(const StructuredEventProto_EventSequenceMetadata& from);
  StructuredEventProto_EventSequenceMetadata(StructuredEventProto_EventSequenceMetadata&& from) noexcept
    : StructuredEventProto_EventSequenceMetadata() {
    *this = ::std::move(from);
  }

  inline StructuredEventProto_EventSequenceMetadata& operator=(const StructuredEventProto_EventSequenceMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructuredEventProto_EventSequenceMetadata& operator=(StructuredEventProto_EventSequenceMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StructuredEventProto_EventSequenceMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructuredEventProto_EventSequenceMetadata* internal_default_instance() {
    return reinterpret_cast<const StructuredEventProto_EventSequenceMetadata*>(
               &_StructuredEventProto_EventSequenceMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StructuredEventProto_EventSequenceMetadata& a, StructuredEventProto_EventSequenceMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StructuredEventProto_EventSequenceMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructuredEventProto_EventSequenceMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructuredEventProto_EventSequenceMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructuredEventProto_EventSequenceMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StructuredEventProto_EventSequenceMetadata& from);
  void MergeFrom(const StructuredEventProto_EventSequenceMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StructuredEventProto_EventSequenceMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.StructuredEventProto.EventSequenceMetadata";
  }
  protected:
  explicit StructuredEventProto_EventSequenceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventUniqueIdFieldNumber = 1,
    kSystemUptimeFieldNumber = 2,
    kResetCounterFieldNumber = 3,
  };
  // optional fixed64 event_unique_id = 1;
  bool has_event_unique_id() const;
  private:
  bool _internal_has_event_unique_id() const;
  public:
  void clear_event_unique_id();
  uint64_t event_unique_id() const;
  void set_event_unique_id(uint64_t value);
  private:
  uint64_t _internal_event_unique_id() const;
  void _internal_set_event_unique_id(uint64_t value);
  public:

  // optional int64 system_uptime = 2;
  bool has_system_uptime() const;
  private:
  bool _internal_has_system_uptime() const;
  public:
  void clear_system_uptime();
  int64_t system_uptime() const;
  void set_system_uptime(int64_t value);
  private:
  int64_t _internal_system_uptime() const;
  void _internal_set_system_uptime(int64_t value);
  public:

  // optional int64 reset_counter = 3;
  bool has_reset_counter() const;
  private:
  bool _internal_has_reset_counter() const;
  public:
  void clear_reset_counter();
  int64_t reset_counter() const;
  void set_reset_counter(int64_t value);
  private:
  int64_t _internal_reset_counter() const;
  void _internal_set_reset_counter(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.StructuredEventProto.EventSequenceMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t event_unique_id_;
  int64_t system_uptime_;
  int64_t reset_counter_;
  friend struct ::TableStruct_structured_5fdata_2eproto;
};
// -------------------------------------------------------------------

class StructuredEventProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.StructuredEventProto) */ {
 public:
  inline StructuredEventProto() : StructuredEventProto(nullptr) {}
  ~StructuredEventProto() override;
  explicit PROTOBUF_CONSTEXPR StructuredEventProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructuredEventProto(const StructuredEventProto& from);
  StructuredEventProto(StructuredEventProto&& from) noexcept
    : StructuredEventProto() {
    *this = ::std::move(from);
  }

  inline StructuredEventProto& operator=(const StructuredEventProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructuredEventProto& operator=(StructuredEventProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StructuredEventProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructuredEventProto* internal_default_instance() {
    return reinterpret_cast<const StructuredEventProto*>(
               &_StructuredEventProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StructuredEventProto& a, StructuredEventProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StructuredEventProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructuredEventProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructuredEventProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructuredEventProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StructuredEventProto& from);
  void MergeFrom(const StructuredEventProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StructuredEventProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.StructuredEventProto";
  }
  protected:
  explicit StructuredEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StructuredEventProto_Metric Metric;
  typedef StructuredEventProto_EventSequenceMetadata EventSequenceMetadata;

  typedef StructuredEventProto_EventType EventType;
  static constexpr EventType UNKNOWN =
    StructuredEventProto_EventType_UNKNOWN;
  static constexpr EventType REGULAR =
    StructuredEventProto_EventType_REGULAR;
  static constexpr EventType RAW_STRING =
    StructuredEventProto_EventType_RAW_STRING;
  static constexpr EventType SEQUENCE =
    StructuredEventProto_EventType_SEQUENCE;
  static inline bool EventType_IsValid(int value) {
    return StructuredEventProto_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    StructuredEventProto_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    StructuredEventProto_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    StructuredEventProto_EventType_EventType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return StructuredEventProto_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return StructuredEventProto_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 3,
    kEventSequenceMetadataFieldNumber = 6,
    kProfileEventIdFieldNumber = 1,
    kEventNameHashFieldNumber = 2,
    kProjectNameHashFieldNumber = 5,
    kUserProjectIdFieldNumber = 7,
    kDeviceProjectIdFieldNumber = 8,
    kEventTypeFieldNumber = 4,
  };
  // repeated .metrics.StructuredEventProto.Metric metrics = 3;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::metrics::StructuredEventProto_Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto_Metric >*
      mutable_metrics();
  private:
  const ::metrics::StructuredEventProto_Metric& _internal_metrics(int index) const;
  ::metrics::StructuredEventProto_Metric* _internal_add_metrics();
  public:
  const ::metrics::StructuredEventProto_Metric& metrics(int index) const;
  ::metrics::StructuredEventProto_Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto_Metric >&
      metrics() const;

  // optional .metrics.StructuredEventProto.EventSequenceMetadata event_sequence_metadata = 6;
  bool has_event_sequence_metadata() const;
  private:
  bool _internal_has_event_sequence_metadata() const;
  public:
  void clear_event_sequence_metadata();
  const ::metrics::StructuredEventProto_EventSequenceMetadata& event_sequence_metadata() const;
  PROTOBUF_NODISCARD ::metrics::StructuredEventProto_EventSequenceMetadata* release_event_sequence_metadata();
  ::metrics::StructuredEventProto_EventSequenceMetadata* mutable_event_sequence_metadata();
  void set_allocated_event_sequence_metadata(::metrics::StructuredEventProto_EventSequenceMetadata* event_sequence_metadata);
  private:
  const ::metrics::StructuredEventProto_EventSequenceMetadata& _internal_event_sequence_metadata() const;
  ::metrics::StructuredEventProto_EventSequenceMetadata* _internal_mutable_event_sequence_metadata();
  public:
  void unsafe_arena_set_allocated_event_sequence_metadata(
      ::metrics::StructuredEventProto_EventSequenceMetadata* event_sequence_metadata);
  ::metrics::StructuredEventProto_EventSequenceMetadata* unsafe_arena_release_event_sequence_metadata();

  // optional fixed64 profile_event_id = 1;
  bool has_profile_event_id() const;
  private:
  bool _internal_has_profile_event_id() const;
  public:
  void clear_profile_event_id();
  uint64_t profile_event_id() const;
  void set_profile_event_id(uint64_t value);
  private:
  uint64_t _internal_profile_event_id() const;
  void _internal_set_profile_event_id(uint64_t value);
  public:

  // optional fixed64 event_name_hash = 2;
  bool has_event_name_hash() const;
  private:
  bool _internal_has_event_name_hash() const;
  public:
  void clear_event_name_hash();
  uint64_t event_name_hash() const;
  void set_event_name_hash(uint64_t value);
  private:
  uint64_t _internal_event_name_hash() const;
  void _internal_set_event_name_hash(uint64_t value);
  public:

  // optional fixed64 project_name_hash = 5;
  bool has_project_name_hash() const;
  private:
  bool _internal_has_project_name_hash() const;
  public:
  void clear_project_name_hash();
  uint64_t project_name_hash() const;
  void set_project_name_hash(uint64_t value);
  private:
  uint64_t _internal_project_name_hash() const;
  void _internal_set_project_name_hash(uint64_t value);
  public:

  // optional fixed64 user_project_id = 7;
  bool has_user_project_id() const;
  private:
  bool _internal_has_user_project_id() const;
  public:
  void clear_user_project_id();
  uint64_t user_project_id() const;
  void set_user_project_id(uint64_t value);
  private:
  uint64_t _internal_user_project_id() const;
  void _internal_set_user_project_id(uint64_t value);
  public:

  // optional fixed64 device_project_id = 8;
  bool has_device_project_id() const;
  private:
  bool _internal_has_device_project_id() const;
  public:
  void clear_device_project_id();
  uint64_t device_project_id() const;
  void set_device_project_id(uint64_t value);
  private:
  uint64_t _internal_device_project_id() const;
  void _internal_set_device_project_id(uint64_t value);
  public:

  // optional .metrics.StructuredEventProto.EventType event_type = 4;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::metrics::StructuredEventProto_EventType event_type() const;
  void set_event_type(::metrics::StructuredEventProto_EventType value);
  private:
  ::metrics::StructuredEventProto_EventType _internal_event_type() const;
  void _internal_set_event_type(::metrics::StructuredEventProto_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.StructuredEventProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto_Metric > metrics_;
  ::metrics::StructuredEventProto_EventSequenceMetadata* event_sequence_metadata_;
  uint64_t profile_event_id_;
  uint64_t event_name_hash_;
  uint64_t project_name_hash_;
  uint64_t user_project_id_;
  uint64_t device_project_id_;
  int event_type_;
  friend struct ::TableStruct_structured_5fdata_2eproto;
};
// -------------------------------------------------------------------

class StructuredDataProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.StructuredDataProto) */ {
 public:
  inline StructuredDataProto() : StructuredDataProto(nullptr) {}
  ~StructuredDataProto() override;
  explicit PROTOBUF_CONSTEXPR StructuredDataProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructuredDataProto(const StructuredDataProto& from);
  StructuredDataProto(StructuredDataProto&& from) noexcept
    : StructuredDataProto() {
    *this = ::std::move(from);
  }

  inline StructuredDataProto& operator=(const StructuredDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructuredDataProto& operator=(StructuredDataProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StructuredDataProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructuredDataProto* internal_default_instance() {
    return reinterpret_cast<const StructuredDataProto*>(
               &_StructuredDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StructuredDataProto& a, StructuredDataProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StructuredDataProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructuredDataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructuredDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructuredDataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StructuredDataProto& from);
  void MergeFrom(const StructuredDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StructuredDataProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.StructuredDataProto";
  }
  protected:
  explicit StructuredDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
    kIsDeviceEnrolledFieldNumber = 2,
  };
  // repeated .metrics.StructuredEventProto events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::metrics::StructuredEventProto* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto >*
      mutable_events();
  private:
  const ::metrics::StructuredEventProto& _internal_events(int index) const;
  ::metrics::StructuredEventProto* _internal_add_events();
  public:
  const ::metrics::StructuredEventProto& events(int index) const;
  ::metrics::StructuredEventProto* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto >&
      events() const;

  // optional bool is_device_enrolled = 2;
  bool has_is_device_enrolled() const;
  private:
  bool _internal_has_is_device_enrolled() const;
  public:
  void clear_is_device_enrolled();
  bool is_device_enrolled() const;
  void set_is_device_enrolled(bool value);
  private:
  bool _internal_is_device_enrolled() const;
  void _internal_set_is_device_enrolled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.StructuredDataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto > events_;
  bool is_device_enrolled_;
  friend struct ::TableStruct_structured_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StructuredEventProto_Metric_RepeatedInt64

// repeated int64 values = 1 [packed = true];
inline int StructuredEventProto_Metric_RepeatedInt64::_internal_values_size() const {
  return values_.size();
}
inline int StructuredEventProto_Metric_RepeatedInt64::values_size() const {
  return _internal_values_size();
}
inline void StructuredEventProto_Metric_RepeatedInt64::clear_values() {
  values_.Clear();
}
inline int64_t StructuredEventProto_Metric_RepeatedInt64::_internal_values(int index) const {
  return values_.Get(index);
}
inline int64_t StructuredEventProto_Metric_RepeatedInt64::values(int index) const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.Metric.RepeatedInt64.values)
  return _internal_values(index);
}
inline void StructuredEventProto_Metric_RepeatedInt64::set_values(int index, int64_t value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.Metric.RepeatedInt64.values)
}
inline void StructuredEventProto_Metric_RepeatedInt64::_internal_add_values(int64_t value) {
  values_.Add(value);
}
inline void StructuredEventProto_Metric_RepeatedInt64::add_values(int64_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:metrics.StructuredEventProto.Metric.RepeatedInt64.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
StructuredEventProto_Metric_RepeatedInt64::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
StructuredEventProto_Metric_RepeatedInt64::values() const {
  // @@protoc_insertion_point(field_list:metrics.StructuredEventProto.Metric.RepeatedInt64.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
StructuredEventProto_Metric_RepeatedInt64::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
StructuredEventProto_Metric_RepeatedInt64::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:metrics.StructuredEventProto.Metric.RepeatedInt64.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// StructuredEventProto_Metric

// optional fixed64 name_hash = 1;
inline bool StructuredEventProto_Metric::_internal_has_name_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StructuredEventProto_Metric::has_name_hash() const {
  return _internal_has_name_hash();
}
inline void StructuredEventProto_Metric::clear_name_hash() {
  name_hash_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t StructuredEventProto_Metric::_internal_name_hash() const {
  return name_hash_;
}
inline uint64_t StructuredEventProto_Metric::name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.Metric.name_hash)
  return _internal_name_hash();
}
inline void StructuredEventProto_Metric::_internal_set_name_hash(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  name_hash_ = value;
}
inline void StructuredEventProto_Metric::set_name_hash(uint64_t value) {
  _internal_set_name_hash(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.Metric.name_hash)
}

// fixed64 value_hmac = 2;
inline bool StructuredEventProto_Metric::_internal_has_value_hmac() const {
  return value_case() == kValueHmac;
}
inline bool StructuredEventProto_Metric::has_value_hmac() const {
  return _internal_has_value_hmac();
}
inline void StructuredEventProto_Metric::set_has_value_hmac() {
  _oneof_case_[0] = kValueHmac;
}
inline void StructuredEventProto_Metric::clear_value_hmac() {
  if (_internal_has_value_hmac()) {
    value_.value_hmac_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t StructuredEventProto_Metric::_internal_value_hmac() const {
  if (_internal_has_value_hmac()) {
    return value_.value_hmac_;
  }
  return uint64_t{0u};
}
inline void StructuredEventProto_Metric::_internal_set_value_hmac(uint64_t value) {
  if (!_internal_has_value_hmac()) {
    clear_value();
    set_has_value_hmac();
  }
  value_.value_hmac_ = value;
}
inline uint64_t StructuredEventProto_Metric::value_hmac() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.Metric.value_hmac)
  return _internal_value_hmac();
}
inline void StructuredEventProto_Metric::set_value_hmac(uint64_t value) {
  _internal_set_value_hmac(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.Metric.value_hmac)
}

// int64 value_int64 = 3;
inline bool StructuredEventProto_Metric::_internal_has_value_int64() const {
  return value_case() == kValueInt64;
}
inline bool StructuredEventProto_Metric::has_value_int64() const {
  return _internal_has_value_int64();
}
inline void StructuredEventProto_Metric::set_has_value_int64() {
  _oneof_case_[0] = kValueInt64;
}
inline void StructuredEventProto_Metric::clear_value_int64() {
  if (_internal_has_value_int64()) {
    value_.value_int64_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t StructuredEventProto_Metric::_internal_value_int64() const {
  if (_internal_has_value_int64()) {
    return value_.value_int64_;
  }
  return int64_t{0};
}
inline void StructuredEventProto_Metric::_internal_set_value_int64(int64_t value) {
  if (!_internal_has_value_int64()) {
    clear_value();
    set_has_value_int64();
  }
  value_.value_int64_ = value;
}
inline int64_t StructuredEventProto_Metric::value_int64() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.Metric.value_int64)
  return _internal_value_int64();
}
inline void StructuredEventProto_Metric::set_value_int64(int64_t value) {
  _internal_set_value_int64(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.Metric.value_int64)
}

// string value_string = 4;
inline bool StructuredEventProto_Metric::_internal_has_value_string() const {
  return value_case() == kValueString;
}
inline bool StructuredEventProto_Metric::has_value_string() const {
  return _internal_has_value_string();
}
inline void StructuredEventProto_Metric::set_has_value_string() {
  _oneof_case_[0] = kValueString;
}
inline void StructuredEventProto_Metric::clear_value_string() {
  if (_internal_has_value_string()) {
    value_.value_string_.Destroy();
    clear_has_value();
  }
}
inline const std::string& StructuredEventProto_Metric::value_string() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.Metric.value_string)
  return _internal_value_string();
}
template <typename ArgT0, typename... ArgT>
inline void StructuredEventProto_Metric::set_value_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.InitDefault();
  }
  value_.value_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.Metric.value_string)
}
inline std::string* StructuredEventProto_Metric::mutable_value_string() {
  std::string* _s = _internal_mutable_value_string();
  // @@protoc_insertion_point(field_mutable:metrics.StructuredEventProto.Metric.value_string)
  return _s;
}
inline const std::string& StructuredEventProto_Metric::_internal_value_string() const {
  if (_internal_has_value_string()) {
    return value_.value_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StructuredEventProto_Metric::_internal_set_value_string(const std::string& value) {
  if (!_internal_has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.InitDefault();
  }
  value_.value_string_.Set(value, GetArenaForAllocation());
}
inline std::string* StructuredEventProto_Metric::_internal_mutable_value_string() {
  if (!_internal_has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.InitDefault();
  }
  return value_.value_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* StructuredEventProto_Metric::release_value_string() {
  // @@protoc_insertion_point(field_release:metrics.StructuredEventProto.Metric.value_string)
  if (_internal_has_value_string()) {
    clear_has_value();
    return value_.value_string_.Release();
  } else {
    return nullptr;
  }
}
inline void StructuredEventProto_Metric::set_allocated_value_string(std::string* value_string) {
  if (has_value()) {
    clear_value();
  }
  if (value_string != nullptr) {
    set_has_value_string();
    value_.value_string_.InitAllocated(value_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.StructuredEventProto.Metric.value_string)
}

// double value_double = 5;
inline bool StructuredEventProto_Metric::_internal_has_value_double() const {
  return value_case() == kValueDouble;
}
inline bool StructuredEventProto_Metric::has_value_double() const {
  return _internal_has_value_double();
}
inline void StructuredEventProto_Metric::set_has_value_double() {
  _oneof_case_[0] = kValueDouble;
}
inline void StructuredEventProto_Metric::clear_value_double() {
  if (_internal_has_value_double()) {
    value_.value_double_ = 0;
    clear_has_value();
  }
}
inline double StructuredEventProto_Metric::_internal_value_double() const {
  if (_internal_has_value_double()) {
    return value_.value_double_;
  }
  return 0;
}
inline void StructuredEventProto_Metric::_internal_set_value_double(double value) {
  if (!_internal_has_value_double()) {
    clear_value();
    set_has_value_double();
  }
  value_.value_double_ = value;
}
inline double StructuredEventProto_Metric::value_double() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.Metric.value_double)
  return _internal_value_double();
}
inline void StructuredEventProto_Metric::set_value_double(double value) {
  _internal_set_value_double(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.Metric.value_double)
}

// .metrics.StructuredEventProto.Metric.RepeatedInt64 value_repeated_int64 = 6;
inline bool StructuredEventProto_Metric::_internal_has_value_repeated_int64() const {
  return value_case() == kValueRepeatedInt64;
}
inline bool StructuredEventProto_Metric::has_value_repeated_int64() const {
  return _internal_has_value_repeated_int64();
}
inline void StructuredEventProto_Metric::set_has_value_repeated_int64() {
  _oneof_case_[0] = kValueRepeatedInt64;
}
inline void StructuredEventProto_Metric::clear_value_repeated_int64() {
  if (_internal_has_value_repeated_int64()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.value_repeated_int64_;
    }
    clear_has_value();
  }
}
inline ::metrics::StructuredEventProto_Metric_RepeatedInt64* StructuredEventProto_Metric::release_value_repeated_int64() {
  // @@protoc_insertion_point(field_release:metrics.StructuredEventProto.Metric.value_repeated_int64)
  if (_internal_has_value_repeated_int64()) {
    clear_has_value();
    ::metrics::StructuredEventProto_Metric_RepeatedInt64* temp = value_.value_repeated_int64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_repeated_int64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::metrics::StructuredEventProto_Metric_RepeatedInt64& StructuredEventProto_Metric::_internal_value_repeated_int64() const {
  return _internal_has_value_repeated_int64()
      ? *value_.value_repeated_int64_
      : reinterpret_cast< ::metrics::StructuredEventProto_Metric_RepeatedInt64&>(::metrics::_StructuredEventProto_Metric_RepeatedInt64_default_instance_);
}
inline const ::metrics::StructuredEventProto_Metric_RepeatedInt64& StructuredEventProto_Metric::value_repeated_int64() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.Metric.value_repeated_int64)
  return _internal_value_repeated_int64();
}
inline ::metrics::StructuredEventProto_Metric_RepeatedInt64* StructuredEventProto_Metric::unsafe_arena_release_value_repeated_int64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:metrics.StructuredEventProto.Metric.value_repeated_int64)
  if (_internal_has_value_repeated_int64()) {
    clear_has_value();
    ::metrics::StructuredEventProto_Metric_RepeatedInt64* temp = value_.value_repeated_int64_;
    value_.value_repeated_int64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredEventProto_Metric::unsafe_arena_set_allocated_value_repeated_int64(::metrics::StructuredEventProto_Metric_RepeatedInt64* value_repeated_int64) {
  clear_value();
  if (value_repeated_int64) {
    set_has_value_repeated_int64();
    value_.value_repeated_int64_ = value_repeated_int64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.StructuredEventProto.Metric.value_repeated_int64)
}
inline ::metrics::StructuredEventProto_Metric_RepeatedInt64* StructuredEventProto_Metric::_internal_mutable_value_repeated_int64() {
  if (!_internal_has_value_repeated_int64()) {
    clear_value();
    set_has_value_repeated_int64();
    value_.value_repeated_int64_ = CreateMaybeMessage< ::metrics::StructuredEventProto_Metric_RepeatedInt64 >(GetArenaForAllocation());
  }
  return value_.value_repeated_int64_;
}
inline ::metrics::StructuredEventProto_Metric_RepeatedInt64* StructuredEventProto_Metric::mutable_value_repeated_int64() {
  ::metrics::StructuredEventProto_Metric_RepeatedInt64* _msg = _internal_mutable_value_repeated_int64();
  // @@protoc_insertion_point(field_mutable:metrics.StructuredEventProto.Metric.value_repeated_int64)
  return _msg;
}

inline bool StructuredEventProto_Metric::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void StructuredEventProto_Metric::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline StructuredEventProto_Metric::ValueCase StructuredEventProto_Metric::value_case() const {
  return StructuredEventProto_Metric::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StructuredEventProto_EventSequenceMetadata

// optional fixed64 event_unique_id = 1;
inline bool StructuredEventProto_EventSequenceMetadata::_internal_has_event_unique_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StructuredEventProto_EventSequenceMetadata::has_event_unique_id() const {
  return _internal_has_event_unique_id();
}
inline void StructuredEventProto_EventSequenceMetadata::clear_event_unique_id() {
  event_unique_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t StructuredEventProto_EventSequenceMetadata::_internal_event_unique_id() const {
  return event_unique_id_;
}
inline uint64_t StructuredEventProto_EventSequenceMetadata::event_unique_id() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.EventSequenceMetadata.event_unique_id)
  return _internal_event_unique_id();
}
inline void StructuredEventProto_EventSequenceMetadata::_internal_set_event_unique_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  event_unique_id_ = value;
}
inline void StructuredEventProto_EventSequenceMetadata::set_event_unique_id(uint64_t value) {
  _internal_set_event_unique_id(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.EventSequenceMetadata.event_unique_id)
}

// optional int64 system_uptime = 2;
inline bool StructuredEventProto_EventSequenceMetadata::_internal_has_system_uptime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StructuredEventProto_EventSequenceMetadata::has_system_uptime() const {
  return _internal_has_system_uptime();
}
inline void StructuredEventProto_EventSequenceMetadata::clear_system_uptime() {
  system_uptime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t StructuredEventProto_EventSequenceMetadata::_internal_system_uptime() const {
  return system_uptime_;
}
inline int64_t StructuredEventProto_EventSequenceMetadata::system_uptime() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.EventSequenceMetadata.system_uptime)
  return _internal_system_uptime();
}
inline void StructuredEventProto_EventSequenceMetadata::_internal_set_system_uptime(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  system_uptime_ = value;
}
inline void StructuredEventProto_EventSequenceMetadata::set_system_uptime(int64_t value) {
  _internal_set_system_uptime(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.EventSequenceMetadata.system_uptime)
}

// optional int64 reset_counter = 3;
inline bool StructuredEventProto_EventSequenceMetadata::_internal_has_reset_counter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StructuredEventProto_EventSequenceMetadata::has_reset_counter() const {
  return _internal_has_reset_counter();
}
inline void StructuredEventProto_EventSequenceMetadata::clear_reset_counter() {
  reset_counter_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t StructuredEventProto_EventSequenceMetadata::_internal_reset_counter() const {
  return reset_counter_;
}
inline int64_t StructuredEventProto_EventSequenceMetadata::reset_counter() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.EventSequenceMetadata.reset_counter)
  return _internal_reset_counter();
}
inline void StructuredEventProto_EventSequenceMetadata::_internal_set_reset_counter(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  reset_counter_ = value;
}
inline void StructuredEventProto_EventSequenceMetadata::set_reset_counter(int64_t value) {
  _internal_set_reset_counter(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.EventSequenceMetadata.reset_counter)
}

// -------------------------------------------------------------------

// StructuredEventProto

// optional fixed64 profile_event_id = 1;
inline bool StructuredEventProto::_internal_has_profile_event_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StructuredEventProto::has_profile_event_id() const {
  return _internal_has_profile_event_id();
}
inline void StructuredEventProto::clear_profile_event_id() {
  profile_event_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t StructuredEventProto::_internal_profile_event_id() const {
  return profile_event_id_;
}
inline uint64_t StructuredEventProto::profile_event_id() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.profile_event_id)
  return _internal_profile_event_id();
}
inline void StructuredEventProto::_internal_set_profile_event_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  profile_event_id_ = value;
}
inline void StructuredEventProto::set_profile_event_id(uint64_t value) {
  _internal_set_profile_event_id(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.profile_event_id)
}

// optional fixed64 user_project_id = 7;
inline bool StructuredEventProto::_internal_has_user_project_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StructuredEventProto::has_user_project_id() const {
  return _internal_has_user_project_id();
}
inline void StructuredEventProto::clear_user_project_id() {
  user_project_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t StructuredEventProto::_internal_user_project_id() const {
  return user_project_id_;
}
inline uint64_t StructuredEventProto::user_project_id() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.user_project_id)
  return _internal_user_project_id();
}
inline void StructuredEventProto::_internal_set_user_project_id(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  user_project_id_ = value;
}
inline void StructuredEventProto::set_user_project_id(uint64_t value) {
  _internal_set_user_project_id(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.user_project_id)
}

// optional fixed64 device_project_id = 8;
inline bool StructuredEventProto::_internal_has_device_project_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StructuredEventProto::has_device_project_id() const {
  return _internal_has_device_project_id();
}
inline void StructuredEventProto::clear_device_project_id() {
  device_project_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t StructuredEventProto::_internal_device_project_id() const {
  return device_project_id_;
}
inline uint64_t StructuredEventProto::device_project_id() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.device_project_id)
  return _internal_device_project_id();
}
inline void StructuredEventProto::_internal_set_device_project_id(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  device_project_id_ = value;
}
inline void StructuredEventProto::set_device_project_id(uint64_t value) {
  _internal_set_device_project_id(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.device_project_id)
}

// optional fixed64 event_name_hash = 2;
inline bool StructuredEventProto::_internal_has_event_name_hash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StructuredEventProto::has_event_name_hash() const {
  return _internal_has_event_name_hash();
}
inline void StructuredEventProto::clear_event_name_hash() {
  event_name_hash_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t StructuredEventProto::_internal_event_name_hash() const {
  return event_name_hash_;
}
inline uint64_t StructuredEventProto::event_name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.event_name_hash)
  return _internal_event_name_hash();
}
inline void StructuredEventProto::_internal_set_event_name_hash(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  event_name_hash_ = value;
}
inline void StructuredEventProto::set_event_name_hash(uint64_t value) {
  _internal_set_event_name_hash(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.event_name_hash)
}

// repeated .metrics.StructuredEventProto.Metric metrics = 3;
inline int StructuredEventProto::_internal_metrics_size() const {
  return metrics_.size();
}
inline int StructuredEventProto::metrics_size() const {
  return _internal_metrics_size();
}
inline void StructuredEventProto::clear_metrics() {
  metrics_.Clear();
}
inline ::metrics::StructuredEventProto_Metric* StructuredEventProto::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.StructuredEventProto.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto_Metric >*
StructuredEventProto::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:metrics.StructuredEventProto.metrics)
  return &metrics_;
}
inline const ::metrics::StructuredEventProto_Metric& StructuredEventProto::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::metrics::StructuredEventProto_Metric& StructuredEventProto::metrics(int index) const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.metrics)
  return _internal_metrics(index);
}
inline ::metrics::StructuredEventProto_Metric* StructuredEventProto::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::metrics::StructuredEventProto_Metric* StructuredEventProto::add_metrics() {
  ::metrics::StructuredEventProto_Metric* _add = _internal_add_metrics();
  // @@protoc_insertion_point(field_add:metrics.StructuredEventProto.metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto_Metric >&
StructuredEventProto::metrics() const {
  // @@protoc_insertion_point(field_list:metrics.StructuredEventProto.metrics)
  return metrics_;
}

// optional .metrics.StructuredEventProto.EventType event_type = 4;
inline bool StructuredEventProto::_internal_has_event_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StructuredEventProto::has_event_type() const {
  return _internal_has_event_type();
}
inline void StructuredEventProto::clear_event_type() {
  event_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::metrics::StructuredEventProto_EventType StructuredEventProto::_internal_event_type() const {
  return static_cast< ::metrics::StructuredEventProto_EventType >(event_type_);
}
inline ::metrics::StructuredEventProto_EventType StructuredEventProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.event_type)
  return _internal_event_type();
}
inline void StructuredEventProto::_internal_set_event_type(::metrics::StructuredEventProto_EventType value) {
  assert(::metrics::StructuredEventProto_EventType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  event_type_ = value;
}
inline void StructuredEventProto::set_event_type(::metrics::StructuredEventProto_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.event_type)
}

// optional fixed64 project_name_hash = 5;
inline bool StructuredEventProto::_internal_has_project_name_hash() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StructuredEventProto::has_project_name_hash() const {
  return _internal_has_project_name_hash();
}
inline void StructuredEventProto::clear_project_name_hash() {
  project_name_hash_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t StructuredEventProto::_internal_project_name_hash() const {
  return project_name_hash_;
}
inline uint64_t StructuredEventProto::project_name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.project_name_hash)
  return _internal_project_name_hash();
}
inline void StructuredEventProto::_internal_set_project_name_hash(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  project_name_hash_ = value;
}
inline void StructuredEventProto::set_project_name_hash(uint64_t value) {
  _internal_set_project_name_hash(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredEventProto.project_name_hash)
}

// optional .metrics.StructuredEventProto.EventSequenceMetadata event_sequence_metadata = 6;
inline bool StructuredEventProto::_internal_has_event_sequence_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || event_sequence_metadata_ != nullptr);
  return value;
}
inline bool StructuredEventProto::has_event_sequence_metadata() const {
  return _internal_has_event_sequence_metadata();
}
inline void StructuredEventProto::clear_event_sequence_metadata() {
  if (event_sequence_metadata_ != nullptr) event_sequence_metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::StructuredEventProto_EventSequenceMetadata& StructuredEventProto::_internal_event_sequence_metadata() const {
  const ::metrics::StructuredEventProto_EventSequenceMetadata* p = event_sequence_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::StructuredEventProto_EventSequenceMetadata&>(
      ::metrics::_StructuredEventProto_EventSequenceMetadata_default_instance_);
}
inline const ::metrics::StructuredEventProto_EventSequenceMetadata& StructuredEventProto::event_sequence_metadata() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredEventProto.event_sequence_metadata)
  return _internal_event_sequence_metadata();
}
inline void StructuredEventProto::unsafe_arena_set_allocated_event_sequence_metadata(
    ::metrics::StructuredEventProto_EventSequenceMetadata* event_sequence_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_sequence_metadata_);
  }
  event_sequence_metadata_ = event_sequence_metadata;
  if (event_sequence_metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.StructuredEventProto.event_sequence_metadata)
}
inline ::metrics::StructuredEventProto_EventSequenceMetadata* StructuredEventProto::release_event_sequence_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::StructuredEventProto_EventSequenceMetadata* temp = event_sequence_metadata_;
  event_sequence_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::StructuredEventProto_EventSequenceMetadata* StructuredEventProto::unsafe_arena_release_event_sequence_metadata() {
  // @@protoc_insertion_point(field_release:metrics.StructuredEventProto.event_sequence_metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::StructuredEventProto_EventSequenceMetadata* temp = event_sequence_metadata_;
  event_sequence_metadata_ = nullptr;
  return temp;
}
inline ::metrics::StructuredEventProto_EventSequenceMetadata* StructuredEventProto::_internal_mutable_event_sequence_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (event_sequence_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::StructuredEventProto_EventSequenceMetadata>(GetArenaForAllocation());
    event_sequence_metadata_ = p;
  }
  return event_sequence_metadata_;
}
inline ::metrics::StructuredEventProto_EventSequenceMetadata* StructuredEventProto::mutable_event_sequence_metadata() {
  ::metrics::StructuredEventProto_EventSequenceMetadata* _msg = _internal_mutable_event_sequence_metadata();
  // @@protoc_insertion_point(field_mutable:metrics.StructuredEventProto.event_sequence_metadata)
  return _msg;
}
inline void StructuredEventProto::set_allocated_event_sequence_metadata(::metrics::StructuredEventProto_EventSequenceMetadata* event_sequence_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete event_sequence_metadata_;
  }
  if (event_sequence_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(event_sequence_metadata);
    if (message_arena != submessage_arena) {
      event_sequence_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_sequence_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_sequence_metadata_ = event_sequence_metadata;
  // @@protoc_insertion_point(field_set_allocated:metrics.StructuredEventProto.event_sequence_metadata)
}

// -------------------------------------------------------------------

// StructuredDataProto

// repeated .metrics.StructuredEventProto events = 1;
inline int StructuredDataProto::_internal_events_size() const {
  return events_.size();
}
inline int StructuredDataProto::events_size() const {
  return _internal_events_size();
}
inline void StructuredDataProto::clear_events() {
  events_.Clear();
}
inline ::metrics::StructuredEventProto* StructuredDataProto::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.StructuredDataProto.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto >*
StructuredDataProto::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:metrics.StructuredDataProto.events)
  return &events_;
}
inline const ::metrics::StructuredEventProto& StructuredDataProto::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::metrics::StructuredEventProto& StructuredDataProto::events(int index) const {
  // @@protoc_insertion_point(field_get:metrics.StructuredDataProto.events)
  return _internal_events(index);
}
inline ::metrics::StructuredEventProto* StructuredDataProto::_internal_add_events() {
  return events_.Add();
}
inline ::metrics::StructuredEventProto* StructuredDataProto::add_events() {
  ::metrics::StructuredEventProto* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:metrics.StructuredDataProto.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto >&
StructuredDataProto::events() const {
  // @@protoc_insertion_point(field_list:metrics.StructuredDataProto.events)
  return events_;
}

// optional bool is_device_enrolled = 2;
inline bool StructuredDataProto::_internal_has_is_device_enrolled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StructuredDataProto::has_is_device_enrolled() const {
  return _internal_has_is_device_enrolled();
}
inline void StructuredDataProto::clear_is_device_enrolled() {
  is_device_enrolled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool StructuredDataProto::_internal_is_device_enrolled() const {
  return is_device_enrolled_;
}
inline bool StructuredDataProto::is_device_enrolled() const {
  // @@protoc_insertion_point(field_get:metrics.StructuredDataProto.is_device_enrolled)
  return _internal_is_device_enrolled();
}
inline void StructuredDataProto::_internal_set_is_device_enrolled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_device_enrolled_ = value;
}
inline void StructuredDataProto::set_is_device_enrolled(bool value) {
  _internal_set_is_device_enrolled(value);
  // @@protoc_insertion_point(field_set:metrics.StructuredDataProto.is_device_enrolled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::StructuredEventProto_EventType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_structured_5fdata_2eproto
