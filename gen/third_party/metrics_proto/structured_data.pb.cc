// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structured_data.proto

#include "structured_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR StructuredEventProto_Metric_RepeatedInt64::StructuredEventProto_Metric_RepeatedInt64(
    ::_pbi::ConstantInitialized)
  : values_()
  , _values_cached_byte_size_(0){}
struct StructuredEventProto_Metric_RepeatedInt64DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredEventProto_Metric_RepeatedInt64DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredEventProto_Metric_RepeatedInt64DefaultTypeInternal() {}
  union {
    StructuredEventProto_Metric_RepeatedInt64 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredEventProto_Metric_RepeatedInt64DefaultTypeInternal _StructuredEventProto_Metric_RepeatedInt64_default_instance_;
PROTOBUF_CONSTEXPR StructuredEventProto_Metric::StructuredEventProto_Metric(
    ::_pbi::ConstantInitialized)
  : name_hash_(uint64_t{0u})
  , _oneof_case_{}{}
struct StructuredEventProto_MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredEventProto_MetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredEventProto_MetricDefaultTypeInternal() {}
  union {
    StructuredEventProto_Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredEventProto_MetricDefaultTypeInternal _StructuredEventProto_Metric_default_instance_;
PROTOBUF_CONSTEXPR StructuredEventProto_EventSequenceMetadata::StructuredEventProto_EventSequenceMetadata(
    ::_pbi::ConstantInitialized)
  : event_unique_id_(uint64_t{0u})
  , system_uptime_(int64_t{0})
  , reset_counter_(int64_t{0}){}
struct StructuredEventProto_EventSequenceMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredEventProto_EventSequenceMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredEventProto_EventSequenceMetadataDefaultTypeInternal() {}
  union {
    StructuredEventProto_EventSequenceMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredEventProto_EventSequenceMetadataDefaultTypeInternal _StructuredEventProto_EventSequenceMetadata_default_instance_;
PROTOBUF_CONSTEXPR StructuredEventProto::StructuredEventProto(
    ::_pbi::ConstantInitialized)
  : metrics_()
  , event_sequence_metadata_(nullptr)
  , profile_event_id_(uint64_t{0u})
  , event_name_hash_(uint64_t{0u})
  , project_name_hash_(uint64_t{0u})
  , user_project_id_(uint64_t{0u})
  , device_project_id_(uint64_t{0u})
  , event_type_(0)
{}
struct StructuredEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredEventProtoDefaultTypeInternal() {}
  union {
    StructuredEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredEventProtoDefaultTypeInternal _StructuredEventProto_default_instance_;
PROTOBUF_CONSTEXPR StructuredDataProto::StructuredDataProto(
    ::_pbi::ConstantInitialized)
  : events_()
  , is_device_enrolled_(false){}
struct StructuredDataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredDataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredDataProtoDefaultTypeInternal() {}
  union {
    StructuredDataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredDataProtoDefaultTypeInternal _StructuredDataProto_default_instance_;
}  // namespace metrics
namespace metrics {
bool StructuredEventProto_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StructuredEventProto_EventType_strings[4] = {};

static const char StructuredEventProto_EventType_names[] =
  "RAW_STRING"
  "REGULAR"
  "SEQUENCE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StructuredEventProto_EventType_entries[] = {
  { {StructuredEventProto_EventType_names + 0, 10}, 2 },
  { {StructuredEventProto_EventType_names + 10, 7}, 1 },
  { {StructuredEventProto_EventType_names + 17, 8}, 3 },
  { {StructuredEventProto_EventType_names + 25, 7}, 0 },
};

static const int StructuredEventProto_EventType_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  1, // 1 -> REGULAR
  0, // 2 -> RAW_STRING
  2, // 3 -> SEQUENCE
};

const std::string& StructuredEventProto_EventType_Name(
    StructuredEventProto_EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StructuredEventProto_EventType_entries,
          StructuredEventProto_EventType_entries_by_number,
          4, StructuredEventProto_EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StructuredEventProto_EventType_entries,
      StructuredEventProto_EventType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StructuredEventProto_EventType_strings[idx].get();
}
bool StructuredEventProto_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StructuredEventProto_EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StructuredEventProto_EventType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<StructuredEventProto_EventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StructuredEventProto_EventType StructuredEventProto::UNKNOWN;
constexpr StructuredEventProto_EventType StructuredEventProto::REGULAR;
constexpr StructuredEventProto_EventType StructuredEventProto::RAW_STRING;
constexpr StructuredEventProto_EventType StructuredEventProto::SEQUENCE;
constexpr StructuredEventProto_EventType StructuredEventProto::EventType_MIN;
constexpr StructuredEventProto_EventType StructuredEventProto::EventType_MAX;
constexpr int StructuredEventProto::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class StructuredEventProto_Metric_RepeatedInt64::_Internal {
 public:
};

StructuredEventProto_Metric_RepeatedInt64::StructuredEventProto_Metric_RepeatedInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.StructuredEventProto.Metric.RepeatedInt64)
}
StructuredEventProto_Metric_RepeatedInt64::StructuredEventProto_Metric_RepeatedInt64(const StructuredEventProto_Metric_RepeatedInt64& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metrics.StructuredEventProto.Metric.RepeatedInt64)
}

inline void StructuredEventProto_Metric_RepeatedInt64::SharedCtor() {
}

StructuredEventProto_Metric_RepeatedInt64::~StructuredEventProto_Metric_RepeatedInt64() {
  // @@protoc_insertion_point(destructor:metrics.StructuredEventProto.Metric.RepeatedInt64)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredEventProto_Metric_RepeatedInt64::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StructuredEventProto_Metric_RepeatedInt64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredEventProto_Metric_RepeatedInt64::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.StructuredEventProto.Metric.RepeatedInt64)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StructuredEventProto_Metric_RepeatedInt64::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 values = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredEventProto_Metric_RepeatedInt64::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.StructuredEventProto.Metric.RepeatedInt64)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 values = 1 [packed = true];
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.StructuredEventProto.Metric.RepeatedInt64)
  return target;
}

size_t StructuredEventProto_Metric_RepeatedInt64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.StructuredEventProto.Metric.RepeatedInt64)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 values = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredEventProto_Metric_RepeatedInt64::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StructuredEventProto_Metric_RepeatedInt64*>(
      &from));
}

void StructuredEventProto_Metric_RepeatedInt64::MergeFrom(const StructuredEventProto_Metric_RepeatedInt64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.StructuredEventProto.Metric.RepeatedInt64)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StructuredEventProto_Metric_RepeatedInt64::CopyFrom(const StructuredEventProto_Metric_RepeatedInt64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.StructuredEventProto.Metric.RepeatedInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredEventProto_Metric_RepeatedInt64::IsInitialized() const {
  return true;
}

void StructuredEventProto_Metric_RepeatedInt64::InternalSwap(StructuredEventProto_Metric_RepeatedInt64* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

std::string StructuredEventProto_Metric_RepeatedInt64::GetTypeName() const {
  return "metrics.StructuredEventProto.Metric.RepeatedInt64";
}


// ===================================================================

class StructuredEventProto_Metric::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredEventProto_Metric>()._has_bits_);
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::metrics::StructuredEventProto_Metric_RepeatedInt64& value_repeated_int64(const StructuredEventProto_Metric* msg);
};

const ::metrics::StructuredEventProto_Metric_RepeatedInt64&
StructuredEventProto_Metric::_Internal::value_repeated_int64(const StructuredEventProto_Metric* msg) {
  return *msg->value_.value_repeated_int64_;
}
void StructuredEventProto_Metric::set_allocated_value_repeated_int64(::metrics::StructuredEventProto_Metric_RepeatedInt64* value_repeated_int64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_repeated_int64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_repeated_int64);
    if (message_arena != submessage_arena) {
      value_repeated_int64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_repeated_int64, submessage_arena);
    }
    set_has_value_repeated_int64();
    value_.value_repeated_int64_ = value_repeated_int64;
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.StructuredEventProto.Metric.value_repeated_int64)
}
StructuredEventProto_Metric::StructuredEventProto_Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.StructuredEventProto.Metric)
}
StructuredEventProto_Metric::StructuredEventProto_Metric(const StructuredEventProto_Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_hash_ = from.name_hash_;
  clear_has_value();
  switch (from.value_case()) {
    case kValueHmac: {
      _internal_set_value_hmac(from._internal_value_hmac());
      break;
    }
    case kValueInt64: {
      _internal_set_value_int64(from._internal_value_int64());
      break;
    }
    case kValueString: {
      _internal_set_value_string(from._internal_value_string());
      break;
    }
    case kValueDouble: {
      _internal_set_value_double(from._internal_value_double());
      break;
    }
    case kValueRepeatedInt64: {
      _internal_mutable_value_repeated_int64()->::metrics::StructuredEventProto_Metric_RepeatedInt64::MergeFrom(from._internal_value_repeated_int64());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metrics.StructuredEventProto.Metric)
}

inline void StructuredEventProto_Metric::SharedCtor() {
name_hash_ = uint64_t{0u};
clear_has_value();
}

StructuredEventProto_Metric::~StructuredEventProto_Metric() {
  // @@protoc_insertion_point(destructor:metrics.StructuredEventProto.Metric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredEventProto_Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void StructuredEventProto_Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredEventProto_Metric::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:metrics.StructuredEventProto.Metric)
  switch (value_case()) {
    case kValueHmac: {
      // No need to clear
      break;
    }
    case kValueInt64: {
      // No need to clear
      break;
    }
    case kValueString: {
      value_.value_string_.Destroy();
      break;
    }
    case kValueDouble: {
      // No need to clear
      break;
    }
    case kValueRepeatedInt64: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.value_repeated_int64_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void StructuredEventProto_Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.StructuredEventProto.Metric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_hash_ = uint64_t{0u};
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StructuredEventProto_Metric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_name_hash(&has_bits);
          name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 value_hmac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _internal_set_value_hmac(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // int64 value_int64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_value_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double value_double = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _internal_set_value_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .metrics.StructuredEventProto.Metric.RepeatedInt64 value_repeated_int64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_repeated_int64(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredEventProto_Metric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.StructuredEventProto.Metric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_name_hash(), target);
  }

  switch (value_case()) {
    case kValueHmac: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_value_hmac(), target);
      break;
    }
    case kValueInt64: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_value_int64(), target);
      break;
    }
    case kValueString: {
      target = stream->WriteStringMaybeAliased(
          4, this->_internal_value_string(), target);
      break;
    }
    case kValueDouble: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_value_double(), target);
      break;
    }
    case kValueRepeatedInt64: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::value_repeated_int64(this),
          _Internal::value_repeated_int64(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.StructuredEventProto.Metric)
  return target;
}

size_t StructuredEventProto_Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.StructuredEventProto.Metric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 name_hash = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  switch (value_case()) {
    // fixed64 value_hmac = 2;
    case kValueHmac: {
      total_size += 1 + 8;
      break;
    }
    // int64 value_int64 = 3;
    case kValueInt64: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value_int64());
      break;
    }
    // string value_string = 4;
    case kValueString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_string());
      break;
    }
    // double value_double = 5;
    case kValueDouble: {
      total_size += 1 + 8;
      break;
    }
    // .metrics.StructuredEventProto.Metric.RepeatedInt64 value_repeated_int64 = 6;
    case kValueRepeatedInt64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.value_repeated_int64_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredEventProto_Metric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StructuredEventProto_Metric*>(
      &from));
}

void StructuredEventProto_Metric::MergeFrom(const StructuredEventProto_Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.StructuredEventProto.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name_hash()) {
    _internal_set_name_hash(from._internal_name_hash());
  }
  switch (from.value_case()) {
    case kValueHmac: {
      _internal_set_value_hmac(from._internal_value_hmac());
      break;
    }
    case kValueInt64: {
      _internal_set_value_int64(from._internal_value_int64());
      break;
    }
    case kValueString: {
      _internal_set_value_string(from._internal_value_string());
      break;
    }
    case kValueDouble: {
      _internal_set_value_double(from._internal_value_double());
      break;
    }
    case kValueRepeatedInt64: {
      _internal_mutable_value_repeated_int64()->::metrics::StructuredEventProto_Metric_RepeatedInt64::MergeFrom(from._internal_value_repeated_int64());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StructuredEventProto_Metric::CopyFrom(const StructuredEventProto_Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.StructuredEventProto.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredEventProto_Metric::IsInitialized() const {
  return true;
}

void StructuredEventProto_Metric::InternalSwap(StructuredEventProto_Metric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(name_hash_, other->name_hash_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string StructuredEventProto_Metric::GetTypeName() const {
  return "metrics.StructuredEventProto.Metric";
}


// ===================================================================

class StructuredEventProto_EventSequenceMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredEventProto_EventSequenceMetadata>()._has_bits_);
  static void set_has_event_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_system_uptime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reset_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StructuredEventProto_EventSequenceMetadata::StructuredEventProto_EventSequenceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.StructuredEventProto.EventSequenceMetadata)
}
StructuredEventProto_EventSequenceMetadata::StructuredEventProto_EventSequenceMetadata(const StructuredEventProto_EventSequenceMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&event_unique_id_, &from.event_unique_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_counter_) -
    reinterpret_cast<char*>(&event_unique_id_)) + sizeof(reset_counter_));
  // @@protoc_insertion_point(copy_constructor:metrics.StructuredEventProto.EventSequenceMetadata)
}

inline void StructuredEventProto_EventSequenceMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_unique_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reset_counter_) -
    reinterpret_cast<char*>(&event_unique_id_)) + sizeof(reset_counter_));
}

StructuredEventProto_EventSequenceMetadata::~StructuredEventProto_EventSequenceMetadata() {
  // @@protoc_insertion_point(destructor:metrics.StructuredEventProto.EventSequenceMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredEventProto_EventSequenceMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StructuredEventProto_EventSequenceMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredEventProto_EventSequenceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.StructuredEventProto.EventSequenceMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&event_unique_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reset_counter_) -
        reinterpret_cast<char*>(&event_unique_id_)) + sizeof(reset_counter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StructuredEventProto_EventSequenceMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 event_unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_event_unique_id(&has_bits);
          event_unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int64 system_uptime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_system_uptime(&has_bits);
          system_uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 reset_counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_reset_counter(&has_bits);
          reset_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredEventProto_EventSequenceMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.StructuredEventProto.EventSequenceMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 event_unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_event_unique_id(), target);
  }

  // optional int64 system_uptime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_system_uptime(), target);
  }

  // optional int64 reset_counter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_reset_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.StructuredEventProto.EventSequenceMetadata)
  return target;
}

size_t StructuredEventProto_EventSequenceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.StructuredEventProto.EventSequenceMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 event_unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int64 system_uptime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_system_uptime());
    }

    // optional int64 reset_counter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reset_counter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredEventProto_EventSequenceMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StructuredEventProto_EventSequenceMetadata*>(
      &from));
}

void StructuredEventProto_EventSequenceMetadata::MergeFrom(const StructuredEventProto_EventSequenceMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.StructuredEventProto.EventSequenceMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_unique_id_ = from.event_unique_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      system_uptime_ = from.system_uptime_;
    }
    if (cached_has_bits & 0x00000004u) {
      reset_counter_ = from.reset_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StructuredEventProto_EventSequenceMetadata::CopyFrom(const StructuredEventProto_EventSequenceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.StructuredEventProto.EventSequenceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredEventProto_EventSequenceMetadata::IsInitialized() const {
  return true;
}

void StructuredEventProto_EventSequenceMetadata::InternalSwap(StructuredEventProto_EventSequenceMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StructuredEventProto_EventSequenceMetadata, reset_counter_)
      + sizeof(StructuredEventProto_EventSequenceMetadata::reset_counter_)
      - PROTOBUF_FIELD_OFFSET(StructuredEventProto_EventSequenceMetadata, event_unique_id_)>(
          reinterpret_cast<char*>(&event_unique_id_),
          reinterpret_cast<char*>(&other->event_unique_id_));
}

std::string StructuredEventProto_EventSequenceMetadata::GetTypeName() const {
  return "metrics.StructuredEventProto.EventSequenceMetadata";
}


// ===================================================================

class StructuredEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredEventProto>()._has_bits_);
  static void set_has_profile_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_project_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_device_project_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_event_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_project_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::metrics::StructuredEventProto_EventSequenceMetadata& event_sequence_metadata(const StructuredEventProto* msg);
  static void set_has_event_sequence_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::StructuredEventProto_EventSequenceMetadata&
StructuredEventProto::_Internal::event_sequence_metadata(const StructuredEventProto* msg) {
  return *msg->event_sequence_metadata_;
}
StructuredEventProto::StructuredEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  metrics_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.StructuredEventProto)
}
StructuredEventProto::StructuredEventProto(const StructuredEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_event_sequence_metadata()) {
    event_sequence_metadata_ = new ::metrics::StructuredEventProto_EventSequenceMetadata(*from.event_sequence_metadata_);
  } else {
    event_sequence_metadata_ = nullptr;
  }
  ::memcpy(&profile_event_id_, &from.profile_event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&profile_event_id_)) + sizeof(event_type_));
  // @@protoc_insertion_point(copy_constructor:metrics.StructuredEventProto)
}

inline void StructuredEventProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_sequence_metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&event_sequence_metadata_)) + sizeof(event_type_));
}

StructuredEventProto::~StructuredEventProto() {
  // @@protoc_insertion_point(destructor:metrics.StructuredEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete event_sequence_metadata_;
}

void StructuredEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.StructuredEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(event_sequence_metadata_ != nullptr);
    event_sequence_metadata_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&profile_event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_type_) -
        reinterpret_cast<char*>(&profile_event_id_)) + sizeof(event_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StructuredEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 profile_event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_profile_event_id(&has_bits);
          profile_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 event_name_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_event_name_hash(&has_bits);
          event_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.StructuredEventProto.Metric metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.StructuredEventProto.EventType event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::StructuredEventProto_EventType_IsValid(val))) {
            _internal_set_event_type(static_cast<::metrics::StructuredEventProto_EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 project_name_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_project_name_hash(&has_bits);
          project_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.StructuredEventProto.EventSequenceMetadata event_sequence_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_sequence_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 user_project_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_user_project_id(&has_bits);
          user_project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 device_project_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_device_project_id(&has_bits);
          device_project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.StructuredEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 profile_event_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_profile_event_id(), target);
  }

  // optional fixed64 event_name_hash = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_event_name_hash(), target);
  }

  // repeated .metrics.StructuredEventProto.Metric metrics = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .metrics.StructuredEventProto.EventType event_type = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_type(), target);
  }

  // optional fixed64 project_name_hash = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_project_name_hash(), target);
  }

  // optional .metrics.StructuredEventProto.EventSequenceMetadata event_sequence_metadata = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::event_sequence_metadata(this),
        _Internal::event_sequence_metadata(this).GetCachedSize(), target, stream);
  }

  // optional fixed64 user_project_id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(7, this->_internal_user_project_id(), target);
  }

  // optional fixed64 device_project_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(8, this->_internal_device_project_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.StructuredEventProto)
  return target;
}

size_t StructuredEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.StructuredEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.StructuredEventProto.Metric metrics = 3;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .metrics.StructuredEventProto.EventSequenceMetadata event_sequence_metadata = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_sequence_metadata_);
    }

    // optional fixed64 profile_event_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 event_name_hash = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 project_name_hash = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 user_project_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 device_project_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .metrics.StructuredEventProto.EventType event_type = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StructuredEventProto*>(
      &from));
}

void StructuredEventProto::MergeFrom(const StructuredEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.StructuredEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_event_sequence_metadata()->::metrics::StructuredEventProto_EventSequenceMetadata::MergeFrom(from._internal_event_sequence_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      profile_event_id_ = from.profile_event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_name_hash_ = from.event_name_hash_;
    }
    if (cached_has_bits & 0x00000008u) {
      project_name_hash_ = from.project_name_hash_;
    }
    if (cached_has_bits & 0x00000010u) {
      user_project_id_ = from.user_project_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      device_project_id_ = from.device_project_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      event_type_ = from.event_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StructuredEventProto::CopyFrom(const StructuredEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.StructuredEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredEventProto::IsInitialized() const {
  return true;
}

void StructuredEventProto::InternalSwap(StructuredEventProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_.InternalSwap(&other->metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StructuredEventProto, event_type_)
      + sizeof(StructuredEventProto::event_type_)
      - PROTOBUF_FIELD_OFFSET(StructuredEventProto, event_sequence_metadata_)>(
          reinterpret_cast<char*>(&event_sequence_metadata_),
          reinterpret_cast<char*>(&other->event_sequence_metadata_));
}

std::string StructuredEventProto::GetTypeName() const {
  return "metrics.StructuredEventProto";
}


// ===================================================================

class StructuredDataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredDataProto>()._has_bits_);
  static void set_has_is_device_enrolled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StructuredDataProto::StructuredDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.StructuredDataProto)
}
StructuredDataProto::StructuredDataProto(const StructuredDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  is_device_enrolled_ = from.is_device_enrolled_;
  // @@protoc_insertion_point(copy_constructor:metrics.StructuredDataProto)
}

inline void StructuredDataProto::SharedCtor() {
is_device_enrolled_ = false;
}

StructuredDataProto::~StructuredDataProto() {
  // @@protoc_insertion_point(destructor:metrics.StructuredDataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredDataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StructuredDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.StructuredDataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  is_device_enrolled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StructuredDataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .metrics.StructuredEventProto events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_device_enrolled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_device_enrolled(&has_bits);
          is_device_enrolled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredDataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.StructuredDataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.StructuredEventProto events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_device_enrolled = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_device_enrolled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.StructuredDataProto)
  return target;
}

size_t StructuredDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.StructuredDataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.StructuredEventProto events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_device_enrolled = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredDataProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StructuredDataProto*>(
      &from));
}

void StructuredDataProto::MergeFrom(const StructuredDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.StructuredDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from._internal_has_is_device_enrolled()) {
    _internal_set_is_device_enrolled(from._internal_is_device_enrolled());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StructuredDataProto::CopyFrom(const StructuredDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.StructuredDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredDataProto::IsInitialized() const {
  return true;
}

void StructuredDataProto::InternalSwap(StructuredDataProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  events_.InternalSwap(&other->events_);
  swap(is_device_enrolled_, other->is_device_enrolled_);
}

std::string StructuredDataProto::GetTypeName() const {
  return "metrics.StructuredDataProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::StructuredEventProto_Metric_RepeatedInt64*
Arena::CreateMaybeMessage< ::metrics::StructuredEventProto_Metric_RepeatedInt64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::StructuredEventProto_Metric_RepeatedInt64 >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::StructuredEventProto_Metric*
Arena::CreateMaybeMessage< ::metrics::StructuredEventProto_Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::StructuredEventProto_Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::StructuredEventProto_EventSequenceMetadata*
Arena::CreateMaybeMessage< ::metrics::StructuredEventProto_EventSequenceMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::StructuredEventProto_EventSequenceMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::StructuredEventProto*
Arena::CreateMaybeMessage< ::metrics::StructuredEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::StructuredEventProto >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::StructuredDataProto*
Arena::CreateMaybeMessage< ::metrics::StructuredDataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::StructuredDataProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
