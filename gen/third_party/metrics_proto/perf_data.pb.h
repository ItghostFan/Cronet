// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_perf_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_perf_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_perf_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_perf_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class PerfDataProto;
struct PerfDataProtoDefaultTypeInternal;
extern PerfDataProtoDefaultTypeInternal _PerfDataProto_default_instance_;
class PerfDataProto_BranchStackEntry;
struct PerfDataProto_BranchStackEntryDefaultTypeInternal;
extern PerfDataProto_BranchStackEntryDefaultTypeInternal _PerfDataProto_BranchStackEntry_default_instance_;
class PerfDataProto_CommEvent;
struct PerfDataProto_CommEventDefaultTypeInternal;
extern PerfDataProto_CommEventDefaultTypeInternal _PerfDataProto_CommEvent_default_instance_;
class PerfDataProto_EventHeader;
struct PerfDataProto_EventHeaderDefaultTypeInternal;
extern PerfDataProto_EventHeaderDefaultTypeInternal _PerfDataProto_EventHeader_default_instance_;
class PerfDataProto_ForkEvent;
struct PerfDataProto_ForkEventDefaultTypeInternal;
extern PerfDataProto_ForkEventDefaultTypeInternal _PerfDataProto_ForkEvent_default_instance_;
class PerfDataProto_LostEvent;
struct PerfDataProto_LostEventDefaultTypeInternal;
extern PerfDataProto_LostEventDefaultTypeInternal _PerfDataProto_LostEvent_default_instance_;
class PerfDataProto_MMapEvent;
struct PerfDataProto_MMapEventDefaultTypeInternal;
extern PerfDataProto_MMapEventDefaultTypeInternal _PerfDataProto_MMapEvent_default_instance_;
class PerfDataProto_PerfBuildID;
struct PerfDataProto_PerfBuildIDDefaultTypeInternal;
extern PerfDataProto_PerfBuildIDDefaultTypeInternal _PerfDataProto_PerfBuildID_default_instance_;
class PerfDataProto_PerfEvent;
struct PerfDataProto_PerfEventDefaultTypeInternal;
extern PerfDataProto_PerfEventDefaultTypeInternal _PerfDataProto_PerfEvent_default_instance_;
class PerfDataProto_PerfEventAttr;
struct PerfDataProto_PerfEventAttrDefaultTypeInternal;
extern PerfDataProto_PerfEventAttrDefaultTypeInternal _PerfDataProto_PerfEventAttr_default_instance_;
class PerfDataProto_PerfEventStats;
struct PerfDataProto_PerfEventStatsDefaultTypeInternal;
extern PerfDataProto_PerfEventStatsDefaultTypeInternal _PerfDataProto_PerfEventStats_default_instance_;
class PerfDataProto_PerfEventType;
struct PerfDataProto_PerfEventTypeDefaultTypeInternal;
extern PerfDataProto_PerfEventTypeDefaultTypeInternal _PerfDataProto_PerfEventType_default_instance_;
class PerfDataProto_PerfFileAttr;
struct PerfDataProto_PerfFileAttrDefaultTypeInternal;
extern PerfDataProto_PerfFileAttrDefaultTypeInternal _PerfDataProto_PerfFileAttr_default_instance_;
class PerfDataProto_PerfPMUMappingsMetadata;
struct PerfDataProto_PerfPMUMappingsMetadataDefaultTypeInternal;
extern PerfDataProto_PerfPMUMappingsMetadataDefaultTypeInternal _PerfDataProto_PerfPMUMappingsMetadata_default_instance_;
class PerfDataProto_SampleEvent;
struct PerfDataProto_SampleEventDefaultTypeInternal;
extern PerfDataProto_SampleEventDefaultTypeInternal _PerfDataProto_SampleEvent_default_instance_;
class PerfDataProto_SampleInfo;
struct PerfDataProto_SampleInfoDefaultTypeInternal;
extern PerfDataProto_SampleInfoDefaultTypeInternal _PerfDataProto_SampleInfo_default_instance_;
class PerfDataProto_StringMetadata;
struct PerfDataProto_StringMetadataDefaultTypeInternal;
extern PerfDataProto_StringMetadataDefaultTypeInternal _PerfDataProto_StringMetadata_default_instance_;
class PerfDataProto_StringMetadata_StringAndMd5sumPrefix;
struct PerfDataProto_StringMetadata_StringAndMd5sumPrefixDefaultTypeInternal;
extern PerfDataProto_StringMetadata_StringAndMd5sumPrefixDefaultTypeInternal _PerfDataProto_StringMetadata_StringAndMd5sumPrefix_default_instance_;
class PerfDataProto_ThrottleEvent;
struct PerfDataProto_ThrottleEventDefaultTypeInternal;
extern PerfDataProto_ThrottleEventDefaultTypeInternal _PerfDataProto_ThrottleEvent_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::PerfDataProto* Arena::CreateMaybeMessage<::metrics::PerfDataProto>(Arena*);
template<> ::metrics::PerfDataProto_BranchStackEntry* Arena::CreateMaybeMessage<::metrics::PerfDataProto_BranchStackEntry>(Arena*);
template<> ::metrics::PerfDataProto_CommEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_CommEvent>(Arena*);
template<> ::metrics::PerfDataProto_EventHeader* Arena::CreateMaybeMessage<::metrics::PerfDataProto_EventHeader>(Arena*);
template<> ::metrics::PerfDataProto_ForkEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_ForkEvent>(Arena*);
template<> ::metrics::PerfDataProto_LostEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_LostEvent>(Arena*);
template<> ::metrics::PerfDataProto_MMapEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_MMapEvent>(Arena*);
template<> ::metrics::PerfDataProto_PerfBuildID* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfBuildID>(Arena*);
template<> ::metrics::PerfDataProto_PerfEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfEvent>(Arena*);
template<> ::metrics::PerfDataProto_PerfEventAttr* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfEventAttr>(Arena*);
template<> ::metrics::PerfDataProto_PerfEventStats* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfEventStats>(Arena*);
template<> ::metrics::PerfDataProto_PerfEventType* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfEventType>(Arena*);
template<> ::metrics::PerfDataProto_PerfFileAttr* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfFileAttr>(Arena*);
template<> ::metrics::PerfDataProto_PerfPMUMappingsMetadata* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfPMUMappingsMetadata>(Arena*);
template<> ::metrics::PerfDataProto_SampleEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_SampleEvent>(Arena*);
template<> ::metrics::PerfDataProto_SampleInfo* Arena::CreateMaybeMessage<::metrics::PerfDataProto_SampleInfo>(Arena*);
template<> ::metrics::PerfDataProto_StringMetadata* Arena::CreateMaybeMessage<::metrics::PerfDataProto_StringMetadata>(Arena*);
template<> ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* Arena::CreateMaybeMessage<::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix>(Arena*);
template<> ::metrics::PerfDataProto_ThrottleEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_ThrottleEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

// ===================================================================

class PerfDataProto_PerfEventAttr final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfEventAttr) */ {
 public:
  inline PerfDataProto_PerfEventAttr() : PerfDataProto_PerfEventAttr(nullptr) {}
  ~PerfDataProto_PerfEventAttr() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_PerfEventAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_PerfEventAttr(const PerfDataProto_PerfEventAttr& from);
  PerfDataProto_PerfEventAttr(PerfDataProto_PerfEventAttr&& from) noexcept
    : PerfDataProto_PerfEventAttr() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfEventAttr& operator=(const PerfDataProto_PerfEventAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfEventAttr& operator=(PerfDataProto_PerfEventAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_PerfEventAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_PerfEventAttr* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfEventAttr*>(
               &_PerfDataProto_PerfEventAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfDataProto_PerfEventAttr& a, PerfDataProto_PerfEventAttr& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_PerfEventAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_PerfEventAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_PerfEventAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_PerfEventAttr>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_PerfEventAttr& from);
  void MergeFrom(const PerfDataProto_PerfEventAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfEventAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfEventAttr";
  }
  protected:
  explicit PerfDataProto_PerfEventAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 2,
    kConfigFieldNumber = 3,
    kSamplePeriodFieldNumber = 4,
    kSampleFreqFieldNumber = 5,
    kSampleTypeFieldNumber = 6,
    kReadFormatFieldNumber = 7,
    kDisabledFieldNumber = 8,
    kInheritFieldNumber = 9,
    kPinnedFieldNumber = 10,
    kExclusiveFieldNumber = 11,
    kExcludeUserFieldNumber = 12,
    kExcludeKernelFieldNumber = 13,
    kExcludeHvFieldNumber = 14,
    kExcludeIdleFieldNumber = 15,
    kMmapFieldNumber = 16,
    kCommFieldNumber = 17,
    kFreqFieldNumber = 18,
    kInheritStatFieldNumber = 19,
    kEnableOnExecFieldNumber = 20,
    kTaskFieldNumber = 21,
    kWatermarkFieldNumber = 22,
    kMmapDataFieldNumber = 24,
    kPreciseIpFieldNumber = 23,
    kSampleIdAllFieldNumber = 25,
    kExcludeHostFieldNumber = 26,
    kExcludeGuestFieldNumber = 27,
    kWakeupEventsFieldNumber = 28,
    kWakeupWatermarkFieldNumber = 29,
    kBpAddrFieldNumber = 31,
    kConfig1FieldNumber = 32,
    kBpLenFieldNumber = 33,
    kConfig2FieldNumber = 34,
    kBranchSampleTypeFieldNumber = 35,
    kBpTypeFieldNumber = 30,
  };
  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // optional uint64 config = 3;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  uint64_t config() const;
  void set_config(uint64_t value);
  private:
  uint64_t _internal_config() const;
  void _internal_set_config(uint64_t value);
  public:

  // optional uint64 sample_period = 4;
  bool has_sample_period() const;
  private:
  bool _internal_has_sample_period() const;
  public:
  void clear_sample_period();
  uint64_t sample_period() const;
  void set_sample_period(uint64_t value);
  private:
  uint64_t _internal_sample_period() const;
  void _internal_set_sample_period(uint64_t value);
  public:

  // optional uint64 sample_freq = 5;
  bool has_sample_freq() const;
  private:
  bool _internal_has_sample_freq() const;
  public:
  void clear_sample_freq();
  uint64_t sample_freq() const;
  void set_sample_freq(uint64_t value);
  private:
  uint64_t _internal_sample_freq() const;
  void _internal_set_sample_freq(uint64_t value);
  public:

  // optional uint64 sample_type = 6;
  bool has_sample_type() const;
  private:
  bool _internal_has_sample_type() const;
  public:
  void clear_sample_type();
  uint64_t sample_type() const;
  void set_sample_type(uint64_t value);
  private:
  uint64_t _internal_sample_type() const;
  void _internal_set_sample_type(uint64_t value);
  public:

  // optional uint64 read_format = 7;
  bool has_read_format() const;
  private:
  bool _internal_has_read_format() const;
  public:
  void clear_read_format();
  uint64_t read_format() const;
  void set_read_format(uint64_t value);
  private:
  uint64_t _internal_read_format() const;
  void _internal_set_read_format(uint64_t value);
  public:

  // optional bool disabled = 8;
  bool has_disabled() const;
  private:
  bool _internal_has_disabled() const;
  public:
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // optional bool inherit = 9;
  bool has_inherit() const;
  private:
  bool _internal_has_inherit() const;
  public:
  void clear_inherit();
  bool inherit() const;
  void set_inherit(bool value);
  private:
  bool _internal_inherit() const;
  void _internal_set_inherit(bool value);
  public:

  // optional bool pinned = 10;
  bool has_pinned() const;
  private:
  bool _internal_has_pinned() const;
  public:
  void clear_pinned();
  bool pinned() const;
  void set_pinned(bool value);
  private:
  bool _internal_pinned() const;
  void _internal_set_pinned(bool value);
  public:

  // optional bool exclusive = 11;
  bool has_exclusive() const;
  private:
  bool _internal_has_exclusive() const;
  public:
  void clear_exclusive();
  bool exclusive() const;
  void set_exclusive(bool value);
  private:
  bool _internal_exclusive() const;
  void _internal_set_exclusive(bool value);
  public:

  // optional bool exclude_user = 12;
  bool has_exclude_user() const;
  private:
  bool _internal_has_exclude_user() const;
  public:
  void clear_exclude_user();
  bool exclude_user() const;
  void set_exclude_user(bool value);
  private:
  bool _internal_exclude_user() const;
  void _internal_set_exclude_user(bool value);
  public:

  // optional bool exclude_kernel = 13;
  bool has_exclude_kernel() const;
  private:
  bool _internal_has_exclude_kernel() const;
  public:
  void clear_exclude_kernel();
  bool exclude_kernel() const;
  void set_exclude_kernel(bool value);
  private:
  bool _internal_exclude_kernel() const;
  void _internal_set_exclude_kernel(bool value);
  public:

  // optional bool exclude_hv = 14;
  bool has_exclude_hv() const;
  private:
  bool _internal_has_exclude_hv() const;
  public:
  void clear_exclude_hv();
  bool exclude_hv() const;
  void set_exclude_hv(bool value);
  private:
  bool _internal_exclude_hv() const;
  void _internal_set_exclude_hv(bool value);
  public:

  // optional bool exclude_idle = 15;
  bool has_exclude_idle() const;
  private:
  bool _internal_has_exclude_idle() const;
  public:
  void clear_exclude_idle();
  bool exclude_idle() const;
  void set_exclude_idle(bool value);
  private:
  bool _internal_exclude_idle() const;
  void _internal_set_exclude_idle(bool value);
  public:

  // optional bool mmap = 16;
  bool has_mmap() const;
  private:
  bool _internal_has_mmap() const;
  public:
  void clear_mmap();
  bool mmap() const;
  void set_mmap(bool value);
  private:
  bool _internal_mmap() const;
  void _internal_set_mmap(bool value);
  public:

  // optional bool comm = 17;
  bool has_comm() const;
  private:
  bool _internal_has_comm() const;
  public:
  void clear_comm();
  bool comm() const;
  void set_comm(bool value);
  private:
  bool _internal_comm() const;
  void _internal_set_comm(bool value);
  public:

  // optional bool freq = 18;
  bool has_freq() const;
  private:
  bool _internal_has_freq() const;
  public:
  void clear_freq();
  bool freq() const;
  void set_freq(bool value);
  private:
  bool _internal_freq() const;
  void _internal_set_freq(bool value);
  public:

  // optional bool inherit_stat = 19;
  bool has_inherit_stat() const;
  private:
  bool _internal_has_inherit_stat() const;
  public:
  void clear_inherit_stat();
  bool inherit_stat() const;
  void set_inherit_stat(bool value);
  private:
  bool _internal_inherit_stat() const;
  void _internal_set_inherit_stat(bool value);
  public:

  // optional bool enable_on_exec = 20;
  bool has_enable_on_exec() const;
  private:
  bool _internal_has_enable_on_exec() const;
  public:
  void clear_enable_on_exec();
  bool enable_on_exec() const;
  void set_enable_on_exec(bool value);
  private:
  bool _internal_enable_on_exec() const;
  void _internal_set_enable_on_exec(bool value);
  public:

  // optional bool task = 21;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  bool task() const;
  void set_task(bool value);
  private:
  bool _internal_task() const;
  void _internal_set_task(bool value);
  public:

  // optional bool watermark = 22;
  bool has_watermark() const;
  private:
  bool _internal_has_watermark() const;
  public:
  void clear_watermark();
  bool watermark() const;
  void set_watermark(bool value);
  private:
  bool _internal_watermark() const;
  void _internal_set_watermark(bool value);
  public:

  // optional bool mmap_data = 24;
  bool has_mmap_data() const;
  private:
  bool _internal_has_mmap_data() const;
  public:
  void clear_mmap_data();
  bool mmap_data() const;
  void set_mmap_data(bool value);
  private:
  bool _internal_mmap_data() const;
  void _internal_set_mmap_data(bool value);
  public:

  // optional uint32 precise_ip = 23;
  bool has_precise_ip() const;
  private:
  bool _internal_has_precise_ip() const;
  public:
  void clear_precise_ip();
  uint32_t precise_ip() const;
  void set_precise_ip(uint32_t value);
  private:
  uint32_t _internal_precise_ip() const;
  void _internal_set_precise_ip(uint32_t value);
  public:

  // optional bool sample_id_all = 25;
  bool has_sample_id_all() const;
  private:
  bool _internal_has_sample_id_all() const;
  public:
  void clear_sample_id_all();
  bool sample_id_all() const;
  void set_sample_id_all(bool value);
  private:
  bool _internal_sample_id_all() const;
  void _internal_set_sample_id_all(bool value);
  public:

  // optional bool exclude_host = 26;
  bool has_exclude_host() const;
  private:
  bool _internal_has_exclude_host() const;
  public:
  void clear_exclude_host();
  bool exclude_host() const;
  void set_exclude_host(bool value);
  private:
  bool _internal_exclude_host() const;
  void _internal_set_exclude_host(bool value);
  public:

  // optional bool exclude_guest = 27;
  bool has_exclude_guest() const;
  private:
  bool _internal_has_exclude_guest() const;
  public:
  void clear_exclude_guest();
  bool exclude_guest() const;
  void set_exclude_guest(bool value);
  private:
  bool _internal_exclude_guest() const;
  void _internal_set_exclude_guest(bool value);
  public:

  // optional uint32 wakeup_events = 28;
  bool has_wakeup_events() const;
  private:
  bool _internal_has_wakeup_events() const;
  public:
  void clear_wakeup_events();
  uint32_t wakeup_events() const;
  void set_wakeup_events(uint32_t value);
  private:
  uint32_t _internal_wakeup_events() const;
  void _internal_set_wakeup_events(uint32_t value);
  public:

  // optional uint32 wakeup_watermark = 29;
  bool has_wakeup_watermark() const;
  private:
  bool _internal_has_wakeup_watermark() const;
  public:
  void clear_wakeup_watermark();
  uint32_t wakeup_watermark() const;
  void set_wakeup_watermark(uint32_t value);
  private:
  uint32_t _internal_wakeup_watermark() const;
  void _internal_set_wakeup_watermark(uint32_t value);
  public:

  // optional uint64 bp_addr = 31;
  bool has_bp_addr() const;
  private:
  bool _internal_has_bp_addr() const;
  public:
  void clear_bp_addr();
  uint64_t bp_addr() const;
  void set_bp_addr(uint64_t value);
  private:
  uint64_t _internal_bp_addr() const;
  void _internal_set_bp_addr(uint64_t value);
  public:

  // optional uint64 config1 = 32;
  bool has_config1() const;
  private:
  bool _internal_has_config1() const;
  public:
  void clear_config1();
  uint64_t config1() const;
  void set_config1(uint64_t value);
  private:
  uint64_t _internal_config1() const;
  void _internal_set_config1(uint64_t value);
  public:

  // optional uint64 bp_len = 33;
  bool has_bp_len() const;
  private:
  bool _internal_has_bp_len() const;
  public:
  void clear_bp_len();
  uint64_t bp_len() const;
  void set_bp_len(uint64_t value);
  private:
  uint64_t _internal_bp_len() const;
  void _internal_set_bp_len(uint64_t value);
  public:

  // optional uint64 config2 = 34;
  bool has_config2() const;
  private:
  bool _internal_has_config2() const;
  public:
  void clear_config2();
  uint64_t config2() const;
  void set_config2(uint64_t value);
  private:
  uint64_t _internal_config2() const;
  void _internal_set_config2(uint64_t value);
  public:

  // optional uint64 branch_sample_type = 35;
  bool has_branch_sample_type() const;
  private:
  bool _internal_has_branch_sample_type() const;
  public:
  void clear_branch_sample_type();
  uint64_t branch_sample_type() const;
  void set_branch_sample_type(uint64_t value);
  private:
  uint64_t _internal_branch_sample_type() const;
  void _internal_set_branch_sample_type(uint64_t value);
  public:

  // optional uint32 bp_type = 30;
  bool has_bp_type() const;
  private:
  bool _internal_has_bp_type() const;
  public:
  void clear_bp_type();
  uint32_t bp_type() const;
  void set_bp_type(uint32_t value);
  private:
  uint32_t _internal_bp_type() const;
  void _internal_set_bp_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEventAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t type_;
  uint32_t size_;
  uint64_t config_;
  uint64_t sample_period_;
  uint64_t sample_freq_;
  uint64_t sample_type_;
  uint64_t read_format_;
  bool disabled_;
  bool inherit_;
  bool pinned_;
  bool exclusive_;
  bool exclude_user_;
  bool exclude_kernel_;
  bool exclude_hv_;
  bool exclude_idle_;
  bool mmap_;
  bool comm_;
  bool freq_;
  bool inherit_stat_;
  bool enable_on_exec_;
  bool task_;
  bool watermark_;
  bool mmap_data_;
  uint32_t precise_ip_;
  bool sample_id_all_;
  bool exclude_host_;
  bool exclude_guest_;
  uint32_t wakeup_events_;
  uint32_t wakeup_watermark_;
  uint64_t bp_addr_;
  uint64_t config1_;
  uint64_t bp_len_;
  uint64_t config2_;
  uint64_t branch_sample_type_;
  uint32_t bp_type_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfFileAttr final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfFileAttr) */ {
 public:
  inline PerfDataProto_PerfFileAttr() : PerfDataProto_PerfFileAttr(nullptr) {}
  ~PerfDataProto_PerfFileAttr() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_PerfFileAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_PerfFileAttr(const PerfDataProto_PerfFileAttr& from);
  PerfDataProto_PerfFileAttr(PerfDataProto_PerfFileAttr&& from) noexcept
    : PerfDataProto_PerfFileAttr() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfFileAttr& operator=(const PerfDataProto_PerfFileAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfFileAttr& operator=(PerfDataProto_PerfFileAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_PerfFileAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_PerfFileAttr* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfFileAttr*>(
               &_PerfDataProto_PerfFileAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerfDataProto_PerfFileAttr& a, PerfDataProto_PerfFileAttr& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_PerfFileAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_PerfFileAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_PerfFileAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_PerfFileAttr>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_PerfFileAttr& from);
  void MergeFrom(const PerfDataProto_PerfFileAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfFileAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfFileAttr";
  }
  protected:
  explicit PerfDataProto_PerfFileAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kAttrFieldNumber = 1,
  };
  // repeated uint64 ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  uint64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_ids() const;
  void _internal_add_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_ids();
  public:
  uint64_t ids(int index) const;
  void set_ids(int index, uint64_t value);
  void add_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_ids();

  // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
  bool has_attr() const;
  private:
  bool _internal_has_attr() const;
  public:
  void clear_attr();
  const ::metrics::PerfDataProto_PerfEventAttr& attr() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_PerfEventAttr* release_attr();
  ::metrics::PerfDataProto_PerfEventAttr* mutable_attr();
  void set_allocated_attr(::metrics::PerfDataProto_PerfEventAttr* attr);
  private:
  const ::metrics::PerfDataProto_PerfEventAttr& _internal_attr() const;
  ::metrics::PerfDataProto_PerfEventAttr* _internal_mutable_attr();
  public:
  void unsafe_arena_set_allocated_attr(
      ::metrics::PerfDataProto_PerfEventAttr* attr);
  ::metrics::PerfDataProto_PerfEventAttr* unsafe_arena_release_attr();

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfFileAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > ids_;
  ::metrics::PerfDataProto_PerfEventAttr* attr_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfEventType final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfEventType) */ {
 public:
  inline PerfDataProto_PerfEventType() : PerfDataProto_PerfEventType(nullptr) {}
  ~PerfDataProto_PerfEventType() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_PerfEventType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_PerfEventType(const PerfDataProto_PerfEventType& from);
  PerfDataProto_PerfEventType(PerfDataProto_PerfEventType&& from) noexcept
    : PerfDataProto_PerfEventType() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfEventType& operator=(const PerfDataProto_PerfEventType& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfEventType& operator=(PerfDataProto_PerfEventType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_PerfEventType& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_PerfEventType* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfEventType*>(
               &_PerfDataProto_PerfEventType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PerfDataProto_PerfEventType& a, PerfDataProto_PerfEventType& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_PerfEventType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_PerfEventType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_PerfEventType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_PerfEventType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_PerfEventType& from);
  void MergeFrom(const PerfDataProto_PerfEventType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfEventType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfEventType";
  }
  protected:
  explicit PerfDataProto_PerfEventType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameMd5PrefixFieldNumber = 3,
  };
  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint64 name_md5_prefix = 3;
  bool has_name_md5_prefix() const;
  private:
  bool _internal_has_name_md5_prefix() const;
  public:
  void clear_name_md5_prefix();
  uint64_t name_md5_prefix() const;
  void set_name_md5_prefix(uint64_t value);
  private:
  uint64_t _internal_name_md5_prefix() const;
  void _internal_set_name_md5_prefix(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEventType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t id_;
  uint64_t name_md5_prefix_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_SampleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.SampleInfo) */ {
 public:
  inline PerfDataProto_SampleInfo() : PerfDataProto_SampleInfo(nullptr) {}
  ~PerfDataProto_SampleInfo() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_SampleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_SampleInfo(const PerfDataProto_SampleInfo& from);
  PerfDataProto_SampleInfo(PerfDataProto_SampleInfo&& from) noexcept
    : PerfDataProto_SampleInfo() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_SampleInfo& operator=(const PerfDataProto_SampleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_SampleInfo& operator=(PerfDataProto_SampleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_SampleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_SampleInfo* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_SampleInfo*>(
               &_PerfDataProto_SampleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PerfDataProto_SampleInfo& a, PerfDataProto_SampleInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_SampleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_SampleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_SampleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_SampleInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_SampleInfo& from);
  void MergeFrom(const PerfDataProto_SampleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_SampleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.SampleInfo";
  }
  protected:
  explicit PerfDataProto_SampleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
    kSampleTimeNsFieldNumber = 3,
    kIdFieldNumber = 4,
    kCpuFieldNumber = 5,
  };
  // optional uint32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // optional uint32 tid = 2;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  uint32_t tid() const;
  void set_tid(uint32_t value);
  private:
  uint32_t _internal_tid() const;
  void _internal_set_tid(uint32_t value);
  public:

  // optional uint64 sample_time_ns = 3;
  bool has_sample_time_ns() const;
  private:
  bool _internal_has_sample_time_ns() const;
  public:
  void clear_sample_time_ns();
  uint64_t sample_time_ns() const;
  void set_sample_time_ns(uint64_t value);
  private:
  uint64_t _internal_sample_time_ns() const;
  void _internal_set_sample_time_ns(uint64_t value);
  public:

  // optional uint64 id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint32 cpu = 5;
  bool has_cpu() const;
  private:
  bool _internal_has_cpu() const;
  public:
  void clear_cpu();
  uint32_t cpu() const;
  void set_cpu(uint32_t value);
  private:
  uint32_t _internal_cpu() const;
  void _internal_set_cpu(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.SampleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t pid_;
  uint32_t tid_;
  uint64_t sample_time_ns_;
  uint64_t id_;
  uint32_t cpu_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_CommEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.CommEvent) */ {
 public:
  inline PerfDataProto_CommEvent() : PerfDataProto_CommEvent(nullptr) {}
  ~PerfDataProto_CommEvent() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_CommEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_CommEvent(const PerfDataProto_CommEvent& from);
  PerfDataProto_CommEvent(PerfDataProto_CommEvent&& from) noexcept
    : PerfDataProto_CommEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_CommEvent& operator=(const PerfDataProto_CommEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_CommEvent& operator=(PerfDataProto_CommEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_CommEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_CommEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_CommEvent*>(
               &_PerfDataProto_CommEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PerfDataProto_CommEvent& a, PerfDataProto_CommEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_CommEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_CommEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_CommEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_CommEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_CommEvent& from);
  void MergeFrom(const PerfDataProto_CommEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_CommEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.CommEvent";
  }
  protected:
  explicit PerfDataProto_CommEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleInfoFieldNumber = 6,
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
    kCommMd5PrefixFieldNumber = 4,
    kSampleTimeFieldNumber = 5,
  };
  // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
  bool has_sample_info() const;
  private:
  bool _internal_has_sample_info() const;
  public:
  void clear_sample_info();
  const ::metrics::PerfDataProto_SampleInfo& sample_info() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_SampleInfo* release_sample_info();
  ::metrics::PerfDataProto_SampleInfo* mutable_sample_info();
  void set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info);
  private:
  const ::metrics::PerfDataProto_SampleInfo& _internal_sample_info() const;
  ::metrics::PerfDataProto_SampleInfo* _internal_mutable_sample_info();
  public:
  void unsafe_arena_set_allocated_sample_info(
      ::metrics::PerfDataProto_SampleInfo* sample_info);
  ::metrics::PerfDataProto_SampleInfo* unsafe_arena_release_sample_info();

  // optional uint32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // optional uint32 tid = 2;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  uint32_t tid() const;
  void set_tid(uint32_t value);
  private:
  uint32_t _internal_tid() const;
  void _internal_set_tid(uint32_t value);
  public:

  // optional uint64 comm_md5_prefix = 4;
  bool has_comm_md5_prefix() const;
  private:
  bool _internal_has_comm_md5_prefix() const;
  public:
  void clear_comm_md5_prefix();
  uint64_t comm_md5_prefix() const;
  void set_comm_md5_prefix(uint64_t value);
  private:
  uint64_t _internal_comm_md5_prefix() const;
  void _internal_set_comm_md5_prefix(uint64_t value);
  public:

  // optional uint64 sample_time = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_sample_time() const;
  private:
  bool _internal_has_sample_time() const;
  public:
  PROTOBUF_DEPRECATED void clear_sample_time();
  PROTOBUF_DEPRECATED uint64_t sample_time() const;
  PROTOBUF_DEPRECATED void set_sample_time(uint64_t value);
  private:
  uint64_t _internal_sample_time() const;
  void _internal_set_sample_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.CommEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_SampleInfo* sample_info_;
  uint32_t pid_;
  uint32_t tid_;
  uint64_t comm_md5_prefix_;
  uint64_t sample_time_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_MMapEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.MMapEvent) */ {
 public:
  inline PerfDataProto_MMapEvent() : PerfDataProto_MMapEvent(nullptr) {}
  ~PerfDataProto_MMapEvent() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_MMapEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_MMapEvent(const PerfDataProto_MMapEvent& from);
  PerfDataProto_MMapEvent(PerfDataProto_MMapEvent&& from) noexcept
    : PerfDataProto_MMapEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_MMapEvent& operator=(const PerfDataProto_MMapEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_MMapEvent& operator=(PerfDataProto_MMapEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_MMapEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_MMapEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_MMapEvent*>(
               &_PerfDataProto_MMapEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PerfDataProto_MMapEvent& a, PerfDataProto_MMapEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_MMapEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_MMapEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_MMapEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_MMapEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_MMapEvent& from);
  void MergeFrom(const PerfDataProto_MMapEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_MMapEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.MMapEvent";
  }
  protected:
  explicit PerfDataProto_MMapEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleInfoFieldNumber = 8,
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
    kStartFieldNumber = 3,
    kLenFieldNumber = 4,
    kPgoffFieldNumber = 5,
    kFilenameMd5PrefixFieldNumber = 7,
    kRootPathMd5PrefixFieldNumber = 16,
  };
  // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
  bool has_sample_info() const;
  private:
  bool _internal_has_sample_info() const;
  public:
  void clear_sample_info();
  const ::metrics::PerfDataProto_SampleInfo& sample_info() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_SampleInfo* release_sample_info();
  ::metrics::PerfDataProto_SampleInfo* mutable_sample_info();
  void set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info);
  private:
  const ::metrics::PerfDataProto_SampleInfo& _internal_sample_info() const;
  ::metrics::PerfDataProto_SampleInfo* _internal_mutable_sample_info();
  public:
  void unsafe_arena_set_allocated_sample_info(
      ::metrics::PerfDataProto_SampleInfo* sample_info);
  ::metrics::PerfDataProto_SampleInfo* unsafe_arena_release_sample_info();

  // optional uint32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // optional uint32 tid = 2;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  uint32_t tid() const;
  void set_tid(uint32_t value);
  private:
  uint32_t _internal_tid() const;
  void _internal_set_tid(uint32_t value);
  public:

  // optional uint64 start = 3;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // optional uint64 len = 4;
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  uint64_t len() const;
  void set_len(uint64_t value);
  private:
  uint64_t _internal_len() const;
  void _internal_set_len(uint64_t value);
  public:

  // optional uint64 pgoff = 5;
  bool has_pgoff() const;
  private:
  bool _internal_has_pgoff() const;
  public:
  void clear_pgoff();
  uint64_t pgoff() const;
  void set_pgoff(uint64_t value);
  private:
  uint64_t _internal_pgoff() const;
  void _internal_set_pgoff(uint64_t value);
  public:

  // optional uint64 filename_md5_prefix = 7;
  bool has_filename_md5_prefix() const;
  private:
  bool _internal_has_filename_md5_prefix() const;
  public:
  void clear_filename_md5_prefix();
  uint64_t filename_md5_prefix() const;
  void set_filename_md5_prefix(uint64_t value);
  private:
  uint64_t _internal_filename_md5_prefix() const;
  void _internal_set_filename_md5_prefix(uint64_t value);
  public:

  // optional uint64 root_path_md5_prefix = 16;
  bool has_root_path_md5_prefix() const;
  private:
  bool _internal_has_root_path_md5_prefix() const;
  public:
  void clear_root_path_md5_prefix();
  uint64_t root_path_md5_prefix() const;
  void set_root_path_md5_prefix(uint64_t value);
  private:
  uint64_t _internal_root_path_md5_prefix() const;
  void _internal_set_root_path_md5_prefix(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.MMapEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_SampleInfo* sample_info_;
  uint32_t pid_;
  uint32_t tid_;
  uint64_t start_;
  uint64_t len_;
  uint64_t pgoff_;
  uint64_t filename_md5_prefix_;
  uint64_t root_path_md5_prefix_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_LostEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.LostEvent) */ {
 public:
  inline PerfDataProto_LostEvent() : PerfDataProto_LostEvent(nullptr) {}
  ~PerfDataProto_LostEvent() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_LostEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_LostEvent(const PerfDataProto_LostEvent& from);
  PerfDataProto_LostEvent(PerfDataProto_LostEvent&& from) noexcept
    : PerfDataProto_LostEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_LostEvent& operator=(const PerfDataProto_LostEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_LostEvent& operator=(PerfDataProto_LostEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_LostEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_LostEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_LostEvent*>(
               &_PerfDataProto_LostEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PerfDataProto_LostEvent& a, PerfDataProto_LostEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_LostEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_LostEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_LostEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_LostEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_LostEvent& from);
  void MergeFrom(const PerfDataProto_LostEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_LostEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.LostEvent";
  }
  protected:
  explicit PerfDataProto_LostEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleInfoFieldNumber = 3,
    kIdFieldNumber = 1,
    kLostFieldNumber = 2,
  };
  // optional .metrics.PerfDataProto.SampleInfo sample_info = 3;
  bool has_sample_info() const;
  private:
  bool _internal_has_sample_info() const;
  public:
  void clear_sample_info();
  const ::metrics::PerfDataProto_SampleInfo& sample_info() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_SampleInfo* release_sample_info();
  ::metrics::PerfDataProto_SampleInfo* mutable_sample_info();
  void set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info);
  private:
  const ::metrics::PerfDataProto_SampleInfo& _internal_sample_info() const;
  ::metrics::PerfDataProto_SampleInfo* _internal_mutable_sample_info();
  public:
  void unsafe_arena_set_allocated_sample_info(
      ::metrics::PerfDataProto_SampleInfo* sample_info);
  ::metrics::PerfDataProto_SampleInfo* unsafe_arena_release_sample_info();

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint64 lost = 2;
  bool has_lost() const;
  private:
  bool _internal_has_lost() const;
  public:
  void clear_lost();
  uint64_t lost() const;
  void set_lost(uint64_t value);
  private:
  uint64_t _internal_lost() const;
  void _internal_set_lost(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.LostEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_SampleInfo* sample_info_;
  uint64_t id_;
  uint64_t lost_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_ThrottleEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.ThrottleEvent) */ {
 public:
  inline PerfDataProto_ThrottleEvent() : PerfDataProto_ThrottleEvent(nullptr) {}
  ~PerfDataProto_ThrottleEvent() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_ThrottleEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_ThrottleEvent(const PerfDataProto_ThrottleEvent& from);
  PerfDataProto_ThrottleEvent(PerfDataProto_ThrottleEvent&& from) noexcept
    : PerfDataProto_ThrottleEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_ThrottleEvent& operator=(const PerfDataProto_ThrottleEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_ThrottleEvent& operator=(PerfDataProto_ThrottleEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_ThrottleEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_ThrottleEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_ThrottleEvent*>(
               &_PerfDataProto_ThrottleEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PerfDataProto_ThrottleEvent& a, PerfDataProto_ThrottleEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_ThrottleEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_ThrottleEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_ThrottleEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_ThrottleEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_ThrottleEvent& from);
  void MergeFrom(const PerfDataProto_ThrottleEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_ThrottleEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.ThrottleEvent";
  }
  protected:
  explicit PerfDataProto_ThrottleEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleInfoFieldNumber = 4,
    kTimeNsFieldNumber = 1,
    kIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .metrics.PerfDataProto.SampleInfo sample_info = 4;
  bool has_sample_info() const;
  private:
  bool _internal_has_sample_info() const;
  public:
  void clear_sample_info();
  const ::metrics::PerfDataProto_SampleInfo& sample_info() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_SampleInfo* release_sample_info();
  ::metrics::PerfDataProto_SampleInfo* mutable_sample_info();
  void set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info);
  private:
  const ::metrics::PerfDataProto_SampleInfo& _internal_sample_info() const;
  ::metrics::PerfDataProto_SampleInfo* _internal_mutable_sample_info();
  public:
  void unsafe_arena_set_allocated_sample_info(
      ::metrics::PerfDataProto_SampleInfo* sample_info);
  ::metrics::PerfDataProto_SampleInfo* unsafe_arena_release_sample_info();

  // optional uint64 time_ns = 1;
  bool has_time_ns() const;
  private:
  bool _internal_has_time_ns() const;
  public:
  void clear_time_ns();
  uint64_t time_ns() const;
  void set_time_ns(uint64_t value);
  private:
  uint64_t _internal_time_ns() const;
  void _internal_set_time_ns(uint64_t value);
  public:

  // optional uint64 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  uint64_t stream_id() const;
  void set_stream_id(uint64_t value);
  private:
  uint64_t _internal_stream_id() const;
  void _internal_set_stream_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.ThrottleEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_SampleInfo* sample_info_;
  uint64_t time_ns_;
  uint64_t id_;
  uint64_t stream_id_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_BranchStackEntry final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.BranchStackEntry) */ {
 public:
  inline PerfDataProto_BranchStackEntry() : PerfDataProto_BranchStackEntry(nullptr) {}
  ~PerfDataProto_BranchStackEntry() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_BranchStackEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_BranchStackEntry(const PerfDataProto_BranchStackEntry& from);
  PerfDataProto_BranchStackEntry(PerfDataProto_BranchStackEntry&& from) noexcept
    : PerfDataProto_BranchStackEntry() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_BranchStackEntry& operator=(const PerfDataProto_BranchStackEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_BranchStackEntry& operator=(PerfDataProto_BranchStackEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_BranchStackEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_BranchStackEntry* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_BranchStackEntry*>(
               &_PerfDataProto_BranchStackEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PerfDataProto_BranchStackEntry& a, PerfDataProto_BranchStackEntry& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_BranchStackEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_BranchStackEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_BranchStackEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_BranchStackEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_BranchStackEntry& from);
  void MergeFrom(const PerfDataProto_BranchStackEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_BranchStackEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.BranchStackEntry";
  }
  protected:
  explicit PerfDataProto_BranchStackEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIpFieldNumber = 1,
    kToIpFieldNumber = 2,
    kMispredictedFieldNumber = 3,
    kPredictedFieldNumber = 4,
    kInTransactionFieldNumber = 5,
    kAbortFieldNumber = 6,
    kCyclesFieldNumber = 7,
  };
  // optional uint64 from_ip = 1;
  bool has_from_ip() const;
  private:
  bool _internal_has_from_ip() const;
  public:
  void clear_from_ip();
  uint64_t from_ip() const;
  void set_from_ip(uint64_t value);
  private:
  uint64_t _internal_from_ip() const;
  void _internal_set_from_ip(uint64_t value);
  public:

  // optional uint64 to_ip = 2;
  bool has_to_ip() const;
  private:
  bool _internal_has_to_ip() const;
  public:
  void clear_to_ip();
  uint64_t to_ip() const;
  void set_to_ip(uint64_t value);
  private:
  uint64_t _internal_to_ip() const;
  void _internal_set_to_ip(uint64_t value);
  public:

  // optional bool mispredicted = 3;
  bool has_mispredicted() const;
  private:
  bool _internal_has_mispredicted() const;
  public:
  void clear_mispredicted();
  bool mispredicted() const;
  void set_mispredicted(bool value);
  private:
  bool _internal_mispredicted() const;
  void _internal_set_mispredicted(bool value);
  public:

  // optional bool predicted = 4;
  bool has_predicted() const;
  private:
  bool _internal_has_predicted() const;
  public:
  void clear_predicted();
  bool predicted() const;
  void set_predicted(bool value);
  private:
  bool _internal_predicted() const;
  void _internal_set_predicted(bool value);
  public:

  // optional bool in_transaction = 5;
  bool has_in_transaction() const;
  private:
  bool _internal_has_in_transaction() const;
  public:
  void clear_in_transaction();
  bool in_transaction() const;
  void set_in_transaction(bool value);
  private:
  bool _internal_in_transaction() const;
  void _internal_set_in_transaction(bool value);
  public:

  // optional bool abort = 6;
  bool has_abort() const;
  private:
  bool _internal_has_abort() const;
  public:
  void clear_abort();
  bool abort() const;
  void set_abort(bool value);
  private:
  bool _internal_abort() const;
  void _internal_set_abort(bool value);
  public:

  // optional uint32 cycles = 7;
  bool has_cycles() const;
  private:
  bool _internal_has_cycles() const;
  public:
  void clear_cycles();
  uint32_t cycles() const;
  void set_cycles(uint32_t value);
  private:
  uint32_t _internal_cycles() const;
  void _internal_set_cycles(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.BranchStackEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t from_ip_;
  uint64_t to_ip_;
  bool mispredicted_;
  bool predicted_;
  bool in_transaction_;
  bool abort_;
  uint32_t cycles_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_SampleEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.SampleEvent) */ {
 public:
  inline PerfDataProto_SampleEvent() : PerfDataProto_SampleEvent(nullptr) {}
  ~PerfDataProto_SampleEvent() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_SampleEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_SampleEvent(const PerfDataProto_SampleEvent& from);
  PerfDataProto_SampleEvent(PerfDataProto_SampleEvent&& from) noexcept
    : PerfDataProto_SampleEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_SampleEvent& operator=(const PerfDataProto_SampleEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_SampleEvent& operator=(PerfDataProto_SampleEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_SampleEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_SampleEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_SampleEvent*>(
               &_PerfDataProto_SampleEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PerfDataProto_SampleEvent& a, PerfDataProto_SampleEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_SampleEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_SampleEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_SampleEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_SampleEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_SampleEvent& from);
  void MergeFrom(const PerfDataProto_SampleEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_SampleEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.SampleEvent";
  }
  protected:
  explicit PerfDataProto_SampleEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallchainFieldNumber = 11,
    kBranchStackFieldNumber = 12,
    kIpFieldNumber = 1,
    kPidFieldNumber = 2,
    kTidFieldNumber = 3,
    kSampleTimeNsFieldNumber = 4,
    kAddrFieldNumber = 5,
    kIdFieldNumber = 6,
    kStreamIdFieldNumber = 7,
    kPeriodFieldNumber = 8,
    kCpuFieldNumber = 9,
    kRawSizeFieldNumber = 10,
    kWeightFieldNumber = 15,
    kDataSrcFieldNumber = 16,
    kTransactionFieldNumber = 17,
  };
  // repeated uint64 callchain = 11;
  int callchain_size() const;
  private:
  int _internal_callchain_size() const;
  public:
  void clear_callchain();
  private:
  uint64_t _internal_callchain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_callchain() const;
  void _internal_add_callchain(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_callchain();
  public:
  uint64_t callchain(int index) const;
  void set_callchain(int index, uint64_t value);
  void add_callchain(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      callchain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_callchain();

  // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
  int branch_stack_size() const;
  private:
  int _internal_branch_stack_size() const;
  public:
  void clear_branch_stack();
  ::metrics::PerfDataProto_BranchStackEntry* mutable_branch_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_BranchStackEntry >*
      mutable_branch_stack();
  private:
  const ::metrics::PerfDataProto_BranchStackEntry& _internal_branch_stack(int index) const;
  ::metrics::PerfDataProto_BranchStackEntry* _internal_add_branch_stack();
  public:
  const ::metrics::PerfDataProto_BranchStackEntry& branch_stack(int index) const;
  ::metrics::PerfDataProto_BranchStackEntry* add_branch_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_BranchStackEntry >&
      branch_stack() const;

  // optional uint64 ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  uint64_t ip() const;
  void set_ip(uint64_t value);
  private:
  uint64_t _internal_ip() const;
  void _internal_set_ip(uint64_t value);
  public:

  // optional uint32 pid = 2;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // optional uint32 tid = 3;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  uint32_t tid() const;
  void set_tid(uint32_t value);
  private:
  uint32_t _internal_tid() const;
  void _internal_set_tid(uint32_t value);
  public:

  // optional uint64 sample_time_ns = 4;
  bool has_sample_time_ns() const;
  private:
  bool _internal_has_sample_time_ns() const;
  public:
  void clear_sample_time_ns();
  uint64_t sample_time_ns() const;
  void set_sample_time_ns(uint64_t value);
  private:
  uint64_t _internal_sample_time_ns() const;
  void _internal_set_sample_time_ns(uint64_t value);
  public:

  // optional uint64 addr = 5;
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  uint64_t addr() const;
  void set_addr(uint64_t value);
  private:
  uint64_t _internal_addr() const;
  void _internal_set_addr(uint64_t value);
  public:

  // optional uint64 id = 6;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint64 stream_id = 7;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  uint64_t stream_id() const;
  void set_stream_id(uint64_t value);
  private:
  uint64_t _internal_stream_id() const;
  void _internal_set_stream_id(uint64_t value);
  public:

  // optional uint64 period = 8;
  bool has_period() const;
  private:
  bool _internal_has_period() const;
  public:
  void clear_period();
  uint64_t period() const;
  void set_period(uint64_t value);
  private:
  uint64_t _internal_period() const;
  void _internal_set_period(uint64_t value);
  public:

  // optional uint32 cpu = 9;
  bool has_cpu() const;
  private:
  bool _internal_has_cpu() const;
  public:
  void clear_cpu();
  uint32_t cpu() const;
  void set_cpu(uint32_t value);
  private:
  uint32_t _internal_cpu() const;
  void _internal_set_cpu(uint32_t value);
  public:

  // optional uint32 raw_size = 10;
  bool has_raw_size() const;
  private:
  bool _internal_has_raw_size() const;
  public:
  void clear_raw_size();
  uint32_t raw_size() const;
  void set_raw_size(uint32_t value);
  private:
  uint32_t _internal_raw_size() const;
  void _internal_set_raw_size(uint32_t value);
  public:

  // optional uint64 weight = 15;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  uint64_t weight() const;
  void set_weight(uint64_t value);
  private:
  uint64_t _internal_weight() const;
  void _internal_set_weight(uint64_t value);
  public:

  // optional uint64 data_src = 16;
  bool has_data_src() const;
  private:
  bool _internal_has_data_src() const;
  public:
  void clear_data_src();
  uint64_t data_src() const;
  void set_data_src(uint64_t value);
  private:
  uint64_t _internal_data_src() const;
  void _internal_set_data_src(uint64_t value);
  public:

  // optional uint64 transaction = 17;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  uint64_t transaction() const;
  void set_transaction(uint64_t value);
  private:
  uint64_t _internal_transaction() const;
  void _internal_set_transaction(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.SampleEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > callchain_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_BranchStackEntry > branch_stack_;
  uint64_t ip_;
  uint32_t pid_;
  uint32_t tid_;
  uint64_t sample_time_ns_;
  uint64_t addr_;
  uint64_t id_;
  uint64_t stream_id_;
  uint64_t period_;
  uint32_t cpu_;
  uint32_t raw_size_;
  uint64_t weight_;
  uint64_t data_src_;
  uint64_t transaction_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_ForkEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.ForkEvent) */ {
 public:
  inline PerfDataProto_ForkEvent() : PerfDataProto_ForkEvent(nullptr) {}
  ~PerfDataProto_ForkEvent() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_ForkEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_ForkEvent(const PerfDataProto_ForkEvent& from);
  PerfDataProto_ForkEvent(PerfDataProto_ForkEvent&& from) noexcept
    : PerfDataProto_ForkEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_ForkEvent& operator=(const PerfDataProto_ForkEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_ForkEvent& operator=(PerfDataProto_ForkEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_ForkEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_ForkEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_ForkEvent*>(
               &_PerfDataProto_ForkEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PerfDataProto_ForkEvent& a, PerfDataProto_ForkEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_ForkEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_ForkEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_ForkEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_ForkEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_ForkEvent& from);
  void MergeFrom(const PerfDataProto_ForkEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_ForkEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.ForkEvent";
  }
  protected:
  explicit PerfDataProto_ForkEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleInfoFieldNumber = 11,
    kPidFieldNumber = 1,
    kPpidFieldNumber = 2,
    kTidFieldNumber = 3,
    kPtidFieldNumber = 4,
    kForkTimeNsFieldNumber = 5,
  };
  // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
  bool has_sample_info() const;
  private:
  bool _internal_has_sample_info() const;
  public:
  void clear_sample_info();
  const ::metrics::PerfDataProto_SampleInfo& sample_info() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_SampleInfo* release_sample_info();
  ::metrics::PerfDataProto_SampleInfo* mutable_sample_info();
  void set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info);
  private:
  const ::metrics::PerfDataProto_SampleInfo& _internal_sample_info() const;
  ::metrics::PerfDataProto_SampleInfo* _internal_mutable_sample_info();
  public:
  void unsafe_arena_set_allocated_sample_info(
      ::metrics::PerfDataProto_SampleInfo* sample_info);
  ::metrics::PerfDataProto_SampleInfo* unsafe_arena_release_sample_info();

  // optional uint32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // optional uint32 ppid = 2;
  bool has_ppid() const;
  private:
  bool _internal_has_ppid() const;
  public:
  void clear_ppid();
  uint32_t ppid() const;
  void set_ppid(uint32_t value);
  private:
  uint32_t _internal_ppid() const;
  void _internal_set_ppid(uint32_t value);
  public:

  // optional uint32 tid = 3;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  uint32_t tid() const;
  void set_tid(uint32_t value);
  private:
  uint32_t _internal_tid() const;
  void _internal_set_tid(uint32_t value);
  public:

  // optional uint32 ptid = 4;
  bool has_ptid() const;
  private:
  bool _internal_has_ptid() const;
  public:
  void clear_ptid();
  uint32_t ptid() const;
  void set_ptid(uint32_t value);
  private:
  uint32_t _internal_ptid() const;
  void _internal_set_ptid(uint32_t value);
  public:

  // optional uint64 fork_time_ns = 5;
  bool has_fork_time_ns() const;
  private:
  bool _internal_has_fork_time_ns() const;
  public:
  void clear_fork_time_ns();
  uint64_t fork_time_ns() const;
  void set_fork_time_ns(uint64_t value);
  private:
  uint64_t _internal_fork_time_ns() const;
  void _internal_set_fork_time_ns(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.ForkEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_SampleInfo* sample_info_;
  uint32_t pid_;
  uint32_t ppid_;
  uint32_t tid_;
  uint32_t ptid_;
  uint64_t fork_time_ns_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_EventHeader final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.EventHeader) */ {
 public:
  inline PerfDataProto_EventHeader() : PerfDataProto_EventHeader(nullptr) {}
  ~PerfDataProto_EventHeader() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_EventHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_EventHeader(const PerfDataProto_EventHeader& from);
  PerfDataProto_EventHeader(PerfDataProto_EventHeader&& from) noexcept
    : PerfDataProto_EventHeader() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_EventHeader& operator=(const PerfDataProto_EventHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_EventHeader& operator=(PerfDataProto_EventHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_EventHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_EventHeader* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_EventHeader*>(
               &_PerfDataProto_EventHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PerfDataProto_EventHeader& a, PerfDataProto_EventHeader& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_EventHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_EventHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_EventHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_EventHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_EventHeader& from);
  void MergeFrom(const PerfDataProto_EventHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_EventHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.EventHeader";
  }
  protected:
  explicit PerfDataProto_EventHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMiscFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint32 misc = 2;
  bool has_misc() const;
  private:
  bool _internal_has_misc() const;
  public:
  void clear_misc();
  uint32_t misc() const;
  void set_misc(uint32_t value);
  private:
  uint32_t _internal_misc() const;
  void _internal_set_misc(uint32_t value);
  public:

  // optional uint32 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.EventHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t type_;
  uint32_t misc_;
  uint32_t size_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfEvent) */ {
 public:
  inline PerfDataProto_PerfEvent() : PerfDataProto_PerfEvent(nullptr) {}
  ~PerfDataProto_PerfEvent() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_PerfEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_PerfEvent(const PerfDataProto_PerfEvent& from);
  PerfDataProto_PerfEvent(PerfDataProto_PerfEvent&& from) noexcept
    : PerfDataProto_PerfEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfEvent& operator=(const PerfDataProto_PerfEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfEvent& operator=(PerfDataProto_PerfEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_PerfEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventTypeCase {
    kMmapEvent = 2,
    kSampleEvent = 3,
    kCommEvent = 4,
    kForkEvent = 5,
    kExitEvent = 9,
    kLostEvent = 6,
    kThrottleEvent = 7,
    EVENT_TYPE_NOT_SET = 0,
  };

  static inline const PerfDataProto_PerfEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfEvent*>(
               &_PerfDataProto_PerfEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PerfDataProto_PerfEvent& a, PerfDataProto_PerfEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_PerfEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_PerfEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_PerfEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_PerfEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_PerfEvent& from);
  void MergeFrom(const PerfDataProto_PerfEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfEvent";
  }
  protected:
  explicit PerfDataProto_PerfEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTimestampFieldNumber = 10,
    kMmapEventFieldNumber = 2,
    kSampleEventFieldNumber = 3,
    kCommEventFieldNumber = 4,
    kForkEventFieldNumber = 5,
    kExitEventFieldNumber = 9,
    kLostEventFieldNumber = 6,
    kThrottleEventFieldNumber = 7,
  };
  // optional .metrics.PerfDataProto.EventHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::metrics::PerfDataProto_EventHeader& header() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_EventHeader* release_header();
  ::metrics::PerfDataProto_EventHeader* mutable_header();
  void set_allocated_header(::metrics::PerfDataProto_EventHeader* header);
  private:
  const ::metrics::PerfDataProto_EventHeader& _internal_header() const;
  ::metrics::PerfDataProto_EventHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::metrics::PerfDataProto_EventHeader* header);
  ::metrics::PerfDataProto_EventHeader* unsafe_arena_release_header();

  // optional uint64 timestamp = 10;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // .metrics.PerfDataProto.MMapEvent mmap_event = 2;
  bool has_mmap_event() const;
  private:
  bool _internal_has_mmap_event() const;
  public:
  void clear_mmap_event();
  const ::metrics::PerfDataProto_MMapEvent& mmap_event() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_MMapEvent* release_mmap_event();
  ::metrics::PerfDataProto_MMapEvent* mutable_mmap_event();
  void set_allocated_mmap_event(::metrics::PerfDataProto_MMapEvent* mmap_event);
  private:
  const ::metrics::PerfDataProto_MMapEvent& _internal_mmap_event() const;
  ::metrics::PerfDataProto_MMapEvent* _internal_mutable_mmap_event();
  public:
  void unsafe_arena_set_allocated_mmap_event(
      ::metrics::PerfDataProto_MMapEvent* mmap_event);
  ::metrics::PerfDataProto_MMapEvent* unsafe_arena_release_mmap_event();

  // .metrics.PerfDataProto.SampleEvent sample_event = 3;
  bool has_sample_event() const;
  private:
  bool _internal_has_sample_event() const;
  public:
  void clear_sample_event();
  const ::metrics::PerfDataProto_SampleEvent& sample_event() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_SampleEvent* release_sample_event();
  ::metrics::PerfDataProto_SampleEvent* mutable_sample_event();
  void set_allocated_sample_event(::metrics::PerfDataProto_SampleEvent* sample_event);
  private:
  const ::metrics::PerfDataProto_SampleEvent& _internal_sample_event() const;
  ::metrics::PerfDataProto_SampleEvent* _internal_mutable_sample_event();
  public:
  void unsafe_arena_set_allocated_sample_event(
      ::metrics::PerfDataProto_SampleEvent* sample_event);
  ::metrics::PerfDataProto_SampleEvent* unsafe_arena_release_sample_event();

  // .metrics.PerfDataProto.CommEvent comm_event = 4;
  bool has_comm_event() const;
  private:
  bool _internal_has_comm_event() const;
  public:
  void clear_comm_event();
  const ::metrics::PerfDataProto_CommEvent& comm_event() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_CommEvent* release_comm_event();
  ::metrics::PerfDataProto_CommEvent* mutable_comm_event();
  void set_allocated_comm_event(::metrics::PerfDataProto_CommEvent* comm_event);
  private:
  const ::metrics::PerfDataProto_CommEvent& _internal_comm_event() const;
  ::metrics::PerfDataProto_CommEvent* _internal_mutable_comm_event();
  public:
  void unsafe_arena_set_allocated_comm_event(
      ::metrics::PerfDataProto_CommEvent* comm_event);
  ::metrics::PerfDataProto_CommEvent* unsafe_arena_release_comm_event();

  // .metrics.PerfDataProto.ForkEvent fork_event = 5;
  bool has_fork_event() const;
  private:
  bool _internal_has_fork_event() const;
  public:
  void clear_fork_event();
  const ::metrics::PerfDataProto_ForkEvent& fork_event() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_ForkEvent* release_fork_event();
  ::metrics::PerfDataProto_ForkEvent* mutable_fork_event();
  void set_allocated_fork_event(::metrics::PerfDataProto_ForkEvent* fork_event);
  private:
  const ::metrics::PerfDataProto_ForkEvent& _internal_fork_event() const;
  ::metrics::PerfDataProto_ForkEvent* _internal_mutable_fork_event();
  public:
  void unsafe_arena_set_allocated_fork_event(
      ::metrics::PerfDataProto_ForkEvent* fork_event);
  ::metrics::PerfDataProto_ForkEvent* unsafe_arena_release_fork_event();

  // .metrics.PerfDataProto.ForkEvent exit_event = 9;
  bool has_exit_event() const;
  private:
  bool _internal_has_exit_event() const;
  public:
  void clear_exit_event();
  const ::metrics::PerfDataProto_ForkEvent& exit_event() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_ForkEvent* release_exit_event();
  ::metrics::PerfDataProto_ForkEvent* mutable_exit_event();
  void set_allocated_exit_event(::metrics::PerfDataProto_ForkEvent* exit_event);
  private:
  const ::metrics::PerfDataProto_ForkEvent& _internal_exit_event() const;
  ::metrics::PerfDataProto_ForkEvent* _internal_mutable_exit_event();
  public:
  void unsafe_arena_set_allocated_exit_event(
      ::metrics::PerfDataProto_ForkEvent* exit_event);
  ::metrics::PerfDataProto_ForkEvent* unsafe_arena_release_exit_event();

  // .metrics.PerfDataProto.LostEvent lost_event = 6;
  bool has_lost_event() const;
  private:
  bool _internal_has_lost_event() const;
  public:
  void clear_lost_event();
  const ::metrics::PerfDataProto_LostEvent& lost_event() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_LostEvent* release_lost_event();
  ::metrics::PerfDataProto_LostEvent* mutable_lost_event();
  void set_allocated_lost_event(::metrics::PerfDataProto_LostEvent* lost_event);
  private:
  const ::metrics::PerfDataProto_LostEvent& _internal_lost_event() const;
  ::metrics::PerfDataProto_LostEvent* _internal_mutable_lost_event();
  public:
  void unsafe_arena_set_allocated_lost_event(
      ::metrics::PerfDataProto_LostEvent* lost_event);
  ::metrics::PerfDataProto_LostEvent* unsafe_arena_release_lost_event();

  // .metrics.PerfDataProto.ThrottleEvent throttle_event = 7;
  bool has_throttle_event() const;
  private:
  bool _internal_has_throttle_event() const;
  public:
  void clear_throttle_event();
  const ::metrics::PerfDataProto_ThrottleEvent& throttle_event() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_ThrottleEvent* release_throttle_event();
  ::metrics::PerfDataProto_ThrottleEvent* mutable_throttle_event();
  void set_allocated_throttle_event(::metrics::PerfDataProto_ThrottleEvent* throttle_event);
  private:
  const ::metrics::PerfDataProto_ThrottleEvent& _internal_throttle_event() const;
  ::metrics::PerfDataProto_ThrottleEvent* _internal_mutable_throttle_event();
  public:
  void unsafe_arena_set_allocated_throttle_event(
      ::metrics::PerfDataProto_ThrottleEvent* throttle_event);
  ::metrics::PerfDataProto_ThrottleEvent* unsafe_arena_release_throttle_event();

  void clear_event_type();
  EventTypeCase event_type_case() const;
  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEvent)
 private:
  class _Internal;
  void set_has_mmap_event();
  void set_has_sample_event();
  void set_has_comm_event();
  void set_has_fork_event();
  void set_has_exit_event();
  void set_has_lost_event();
  void set_has_throttle_event();

  inline bool has_event_type() const;
  inline void clear_has_event_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_EventHeader* header_;
  uint64_t timestamp_;
  union EventTypeUnion {
    constexpr EventTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::metrics::PerfDataProto_MMapEvent* mmap_event_;
    ::metrics::PerfDataProto_SampleEvent* sample_event_;
    ::metrics::PerfDataProto_CommEvent* comm_event_;
    ::metrics::PerfDataProto_ForkEvent* fork_event_;
    ::metrics::PerfDataProto_ForkEvent* exit_event_;
    ::metrics::PerfDataProto_LostEvent* lost_event_;
    ::metrics::PerfDataProto_ThrottleEvent* throttle_event_;
  } event_type_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfEventStats final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfEventStats) */ {
 public:
  inline PerfDataProto_PerfEventStats() : PerfDataProto_PerfEventStats(nullptr) {}
  ~PerfDataProto_PerfEventStats() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_PerfEventStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_PerfEventStats(const PerfDataProto_PerfEventStats& from);
  PerfDataProto_PerfEventStats(PerfDataProto_PerfEventStats&& from) noexcept
    : PerfDataProto_PerfEventStats() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfEventStats& operator=(const PerfDataProto_PerfEventStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfEventStats& operator=(PerfDataProto_PerfEventStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_PerfEventStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_PerfEventStats* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfEventStats*>(
               &_PerfDataProto_PerfEventStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PerfDataProto_PerfEventStats& a, PerfDataProto_PerfEventStats& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_PerfEventStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_PerfEventStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_PerfEventStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_PerfEventStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_PerfEventStats& from);
  void MergeFrom(const PerfDataProto_PerfEventStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfEventStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfEventStats";
  }
  protected:
  explicit PerfDataProto_PerfEventStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumEventsReadFieldNumber = 1,
    kNumSampleEventsFieldNumber = 2,
    kNumMmapEventsFieldNumber = 3,
    kNumForkEventsFieldNumber = 4,
    kNumExitEventsFieldNumber = 5,
    kNumSampleEventsMappedFieldNumber = 6,
    kDidRemapFieldNumber = 7,
  };
  // optional uint32 num_events_read = 1;
  bool has_num_events_read() const;
  private:
  bool _internal_has_num_events_read() const;
  public:
  void clear_num_events_read();
  uint32_t num_events_read() const;
  void set_num_events_read(uint32_t value);
  private:
  uint32_t _internal_num_events_read() const;
  void _internal_set_num_events_read(uint32_t value);
  public:

  // optional uint32 num_sample_events = 2;
  bool has_num_sample_events() const;
  private:
  bool _internal_has_num_sample_events() const;
  public:
  void clear_num_sample_events();
  uint32_t num_sample_events() const;
  void set_num_sample_events(uint32_t value);
  private:
  uint32_t _internal_num_sample_events() const;
  void _internal_set_num_sample_events(uint32_t value);
  public:

  // optional uint32 num_mmap_events = 3;
  bool has_num_mmap_events() const;
  private:
  bool _internal_has_num_mmap_events() const;
  public:
  void clear_num_mmap_events();
  uint32_t num_mmap_events() const;
  void set_num_mmap_events(uint32_t value);
  private:
  uint32_t _internal_num_mmap_events() const;
  void _internal_set_num_mmap_events(uint32_t value);
  public:

  // optional uint32 num_fork_events = 4;
  bool has_num_fork_events() const;
  private:
  bool _internal_has_num_fork_events() const;
  public:
  void clear_num_fork_events();
  uint32_t num_fork_events() const;
  void set_num_fork_events(uint32_t value);
  private:
  uint32_t _internal_num_fork_events() const;
  void _internal_set_num_fork_events(uint32_t value);
  public:

  // optional uint32 num_exit_events = 5;
  bool has_num_exit_events() const;
  private:
  bool _internal_has_num_exit_events() const;
  public:
  void clear_num_exit_events();
  uint32_t num_exit_events() const;
  void set_num_exit_events(uint32_t value);
  private:
  uint32_t _internal_num_exit_events() const;
  void _internal_set_num_exit_events(uint32_t value);
  public:

  // optional uint32 num_sample_events_mapped = 6;
  bool has_num_sample_events_mapped() const;
  private:
  bool _internal_has_num_sample_events_mapped() const;
  public:
  void clear_num_sample_events_mapped();
  uint32_t num_sample_events_mapped() const;
  void set_num_sample_events_mapped(uint32_t value);
  private:
  uint32_t _internal_num_sample_events_mapped() const;
  void _internal_set_num_sample_events_mapped(uint32_t value);
  public:

  // optional bool did_remap = 7;
  bool has_did_remap() const;
  private:
  bool _internal_has_did_remap() const;
  public:
  void clear_did_remap();
  bool did_remap() const;
  void set_did_remap(bool value);
  private:
  bool _internal_did_remap() const;
  void _internal_set_did_remap(bool value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEventStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t num_events_read_;
  uint32_t num_sample_events_;
  uint32_t num_mmap_events_;
  uint32_t num_fork_events_;
  uint32_t num_exit_events_;
  uint32_t num_sample_events_mapped_;
  bool did_remap_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfBuildID final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfBuildID) */ {
 public:
  inline PerfDataProto_PerfBuildID() : PerfDataProto_PerfBuildID(nullptr) {}
  ~PerfDataProto_PerfBuildID() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_PerfBuildID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_PerfBuildID(const PerfDataProto_PerfBuildID& from);
  PerfDataProto_PerfBuildID(PerfDataProto_PerfBuildID&& from) noexcept
    : PerfDataProto_PerfBuildID() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfBuildID& operator=(const PerfDataProto_PerfBuildID& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfBuildID& operator=(PerfDataProto_PerfBuildID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_PerfBuildID& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_PerfBuildID* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfBuildID*>(
               &_PerfDataProto_PerfBuildID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PerfDataProto_PerfBuildID& a, PerfDataProto_PerfBuildID& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_PerfBuildID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_PerfBuildID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_PerfBuildID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_PerfBuildID>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_PerfBuildID& from);
  void MergeFrom(const PerfDataProto_PerfBuildID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfBuildID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfBuildID";
  }
  protected:
  explicit PerfDataProto_PerfBuildID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildIdHashFieldNumber = 3,
    kMiscFieldNumber = 1,
    kPidFieldNumber = 2,
    kFilenameMd5PrefixFieldNumber = 5,
  };
  // optional bytes build_id_hash = 3;
  bool has_build_id_hash() const;
  private:
  bool _internal_has_build_id_hash() const;
  public:
  void clear_build_id_hash();
  const std::string& build_id_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_build_id_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_build_id_hash();
  PROTOBUF_NODISCARD std::string* release_build_id_hash();
  void set_allocated_build_id_hash(std::string* build_id_hash);
  private:
  const std::string& _internal_build_id_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build_id_hash(const std::string& value);
  std::string* _internal_mutable_build_id_hash();
  public:

  // optional uint32 misc = 1;
  bool has_misc() const;
  private:
  bool _internal_has_misc() const;
  public:
  void clear_misc();
  uint32_t misc() const;
  void set_misc(uint32_t value);
  private:
  uint32_t _internal_misc() const;
  void _internal_set_misc(uint32_t value);
  public:

  // optional uint32 pid = 2;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // optional uint64 filename_md5_prefix = 5;
  bool has_filename_md5_prefix() const;
  private:
  bool _internal_has_filename_md5_prefix() const;
  public:
  void clear_filename_md5_prefix();
  uint64_t filename_md5_prefix() const;
  void set_filename_md5_prefix(uint64_t value);
  private:
  uint64_t _internal_filename_md5_prefix() const;
  void _internal_set_filename_md5_prefix(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfBuildID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_id_hash_;
  uint32_t misc_;
  uint32_t pid_;
  uint64_t filename_md5_prefix_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfPMUMappingsMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfPMUMappingsMetadata) */ {
 public:
  inline PerfDataProto_PerfPMUMappingsMetadata() : PerfDataProto_PerfPMUMappingsMetadata(nullptr) {}
  ~PerfDataProto_PerfPMUMappingsMetadata() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_PerfPMUMappingsMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_PerfPMUMappingsMetadata(const PerfDataProto_PerfPMUMappingsMetadata& from);
  PerfDataProto_PerfPMUMappingsMetadata(PerfDataProto_PerfPMUMappingsMetadata&& from) noexcept
    : PerfDataProto_PerfPMUMappingsMetadata() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfPMUMappingsMetadata& operator=(const PerfDataProto_PerfPMUMappingsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfPMUMappingsMetadata& operator=(PerfDataProto_PerfPMUMappingsMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_PerfPMUMappingsMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_PerfPMUMappingsMetadata* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfPMUMappingsMetadata*>(
               &_PerfDataProto_PerfPMUMappingsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PerfDataProto_PerfPMUMappingsMetadata& a, PerfDataProto_PerfPMUMappingsMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_PerfPMUMappingsMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_PerfPMUMappingsMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_PerfPMUMappingsMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_PerfPMUMappingsMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_PerfPMUMappingsMetadata& from);
  void MergeFrom(const PerfDataProto_PerfPMUMappingsMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfPMUMappingsMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfPMUMappingsMetadata";
  }
  protected:
  explicit PerfDataProto_PerfPMUMappingsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameMd5PrefixFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional uint64 name_md5_prefix = 3;
  bool has_name_md5_prefix() const;
  private:
  bool _internal_has_name_md5_prefix() const;
  public:
  void clear_name_md5_prefix();
  uint64_t name_md5_prefix() const;
  void set_name_md5_prefix(uint64_t value);
  private:
  uint64_t _internal_name_md5_prefix() const;
  void _internal_set_name_md5_prefix(uint64_t value);
  public:

  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfPMUMappingsMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t name_md5_prefix_;
  uint32_t type_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_StringMetadata_StringAndMd5sumPrefix final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix) */ {
 public:
  inline PerfDataProto_StringMetadata_StringAndMd5sumPrefix() : PerfDataProto_StringMetadata_StringAndMd5sumPrefix(nullptr) {}
  ~PerfDataProto_StringMetadata_StringAndMd5sumPrefix() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_StringMetadata_StringAndMd5sumPrefix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_StringMetadata_StringAndMd5sumPrefix(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from);
  PerfDataProto_StringMetadata_StringAndMd5sumPrefix(PerfDataProto_StringMetadata_StringAndMd5sumPrefix&& from) noexcept
    : PerfDataProto_StringMetadata_StringAndMd5sumPrefix() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_StringMetadata_StringAndMd5sumPrefix& operator=(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_StringMetadata_StringAndMd5sumPrefix& operator=(PerfDataProto_StringMetadata_StringAndMd5sumPrefix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_StringMetadata_StringAndMd5sumPrefix* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_StringMetadata_StringAndMd5sumPrefix*>(
               &_PerfDataProto_StringMetadata_StringAndMd5sumPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix& a, PerfDataProto_StringMetadata_StringAndMd5sumPrefix& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_StringMetadata_StringAndMd5sumPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_StringMetadata_StringAndMd5sumPrefix>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from);
  void MergeFrom(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix";
  }
  protected:
  explicit PerfDataProto_StringMetadata_StringAndMd5sumPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueMd5PrefixFieldNumber = 2,
  };
  // optional uint64 value_md5_prefix = 2;
  bool has_value_md5_prefix() const;
  private:
  bool _internal_has_value_md5_prefix() const;
  public:
  void clear_value_md5_prefix();
  uint64_t value_md5_prefix() const;
  void set_value_md5_prefix(uint64_t value);
  private:
  uint64_t _internal_value_md5_prefix() const;
  void _internal_set_value_md5_prefix(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t value_md5_prefix_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_StringMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.StringMetadata) */ {
 public:
  inline PerfDataProto_StringMetadata() : PerfDataProto_StringMetadata(nullptr) {}
  ~PerfDataProto_StringMetadata() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto_StringMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto_StringMetadata(const PerfDataProto_StringMetadata& from);
  PerfDataProto_StringMetadata(PerfDataProto_StringMetadata&& from) noexcept
    : PerfDataProto_StringMetadata() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_StringMetadata& operator=(const PerfDataProto_StringMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_StringMetadata& operator=(PerfDataProto_StringMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto_StringMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto_StringMetadata* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_StringMetadata*>(
               &_PerfDataProto_StringMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PerfDataProto_StringMetadata& a, PerfDataProto_StringMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto_StringMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto_StringMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto_StringMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto_StringMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto_StringMetadata& from);
  void MergeFrom(const PerfDataProto_StringMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_StringMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.StringMetadata";
  }
  protected:
  explicit PerfDataProto_StringMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfDataProto_StringMetadata_StringAndMd5sumPrefix StringAndMd5sumPrefix;

  // accessors -------------------------------------------------------

  enum : int {
    kPerfCommandLineWholeFieldNumber = 8,
  };
  // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
  bool has_perf_command_line_whole() const;
  private:
  bool _internal_has_perf_command_line_whole() const;
  public:
  void clear_perf_command_line_whole();
  const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix& perf_command_line_whole() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* release_perf_command_line_whole();
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* mutable_perf_command_line_whole();
  void set_allocated_perf_command_line_whole(::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* perf_command_line_whole);
  private:
  const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix& _internal_perf_command_line_whole() const;
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* _internal_mutable_perf_command_line_whole();
  public:
  void unsafe_arena_set_allocated_perf_command_line_whole(
      ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* perf_command_line_whole);
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* unsafe_arena_release_perf_command_line_whole();

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.StringMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* perf_command_line_whole_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto) */ {
 public:
  inline PerfDataProto() : PerfDataProto(nullptr) {}
  ~PerfDataProto() override;
  explicit PROTOBUF_CONSTEXPR PerfDataProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfDataProto(const PerfDataProto& from);
  PerfDataProto(PerfDataProto&& from) noexcept
    : PerfDataProto() {
    *this = ::std::move(from);
  }

  inline PerfDataProto& operator=(const PerfDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto& operator=(PerfDataProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfDataProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfDataProto* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto*>(
               &_PerfDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PerfDataProto& a, PerfDataProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfDataProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfDataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfDataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfDataProto& from);
  void MergeFrom(const PerfDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto";
  }
  protected:
  explicit PerfDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfDataProto_PerfEventAttr PerfEventAttr;
  typedef PerfDataProto_PerfFileAttr PerfFileAttr;
  typedef PerfDataProto_PerfEventType PerfEventType;
  typedef PerfDataProto_SampleInfo SampleInfo;
  typedef PerfDataProto_CommEvent CommEvent;
  typedef PerfDataProto_MMapEvent MMapEvent;
  typedef PerfDataProto_LostEvent LostEvent;
  typedef PerfDataProto_ThrottleEvent ThrottleEvent;
  typedef PerfDataProto_BranchStackEntry BranchStackEntry;
  typedef PerfDataProto_SampleEvent SampleEvent;
  typedef PerfDataProto_ForkEvent ForkEvent;
  typedef PerfDataProto_EventHeader EventHeader;
  typedef PerfDataProto_PerfEvent PerfEvent;
  typedef PerfDataProto_PerfEventStats PerfEventStats;
  typedef PerfDataProto_PerfBuildID PerfBuildID;
  typedef PerfDataProto_PerfPMUMappingsMetadata PerfPMUMappingsMetadata;
  typedef PerfDataProto_StringMetadata StringMetadata;

  // accessors -------------------------------------------------------

  enum : int {
    kFileAttrsFieldNumber = 1,
    kEventsFieldNumber = 2,
    kBuildIdsFieldNumber = 7,
    kEventTypesFieldNumber = 10,
    kPmuMappingsFieldNumber = 15,
    kStatsFieldNumber = 4,
    kStringMetadataFieldNumber = 13,
    kTimestampSecFieldNumber = 3,
  };
  // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
  int file_attrs_size() const;
  private:
  int _internal_file_attrs_size() const;
  public:
  void clear_file_attrs();
  ::metrics::PerfDataProto_PerfFileAttr* mutable_file_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfFileAttr >*
      mutable_file_attrs();
  private:
  const ::metrics::PerfDataProto_PerfFileAttr& _internal_file_attrs(int index) const;
  ::metrics::PerfDataProto_PerfFileAttr* _internal_add_file_attrs();
  public:
  const ::metrics::PerfDataProto_PerfFileAttr& file_attrs(int index) const;
  ::metrics::PerfDataProto_PerfFileAttr* add_file_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfFileAttr >&
      file_attrs() const;

  // repeated .metrics.PerfDataProto.PerfEvent events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::metrics::PerfDataProto_PerfEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEvent >*
      mutable_events();
  private:
  const ::metrics::PerfDataProto_PerfEvent& _internal_events(int index) const;
  ::metrics::PerfDataProto_PerfEvent* _internal_add_events();
  public:
  const ::metrics::PerfDataProto_PerfEvent& events(int index) const;
  ::metrics::PerfDataProto_PerfEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEvent >&
      events() const;

  // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
  int build_ids_size() const;
  private:
  int _internal_build_ids_size() const;
  public:
  void clear_build_ids();
  ::metrics::PerfDataProto_PerfBuildID* mutable_build_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfBuildID >*
      mutable_build_ids();
  private:
  const ::metrics::PerfDataProto_PerfBuildID& _internal_build_ids(int index) const;
  ::metrics::PerfDataProto_PerfBuildID* _internal_add_build_ids();
  public:
  const ::metrics::PerfDataProto_PerfBuildID& build_ids(int index) const;
  ::metrics::PerfDataProto_PerfBuildID* add_build_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfBuildID >&
      build_ids() const;

  // repeated .metrics.PerfDataProto.PerfEventType event_types = 10;
  int event_types_size() const;
  private:
  int _internal_event_types_size() const;
  public:
  void clear_event_types();
  ::metrics::PerfDataProto_PerfEventType* mutable_event_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEventType >*
      mutable_event_types();
  private:
  const ::metrics::PerfDataProto_PerfEventType& _internal_event_types(int index) const;
  ::metrics::PerfDataProto_PerfEventType* _internal_add_event_types();
  public:
  const ::metrics::PerfDataProto_PerfEventType& event_types(int index) const;
  ::metrics::PerfDataProto_PerfEventType* add_event_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEventType >&
      event_types() const;

  // repeated .metrics.PerfDataProto.PerfPMUMappingsMetadata pmu_mappings = 15;
  int pmu_mappings_size() const;
  private:
  int _internal_pmu_mappings_size() const;
  public:
  void clear_pmu_mappings();
  ::metrics::PerfDataProto_PerfPMUMappingsMetadata* mutable_pmu_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfPMUMappingsMetadata >*
      mutable_pmu_mappings();
  private:
  const ::metrics::PerfDataProto_PerfPMUMappingsMetadata& _internal_pmu_mappings(int index) const;
  ::metrics::PerfDataProto_PerfPMUMappingsMetadata* _internal_add_pmu_mappings();
  public:
  const ::metrics::PerfDataProto_PerfPMUMappingsMetadata& pmu_mappings(int index) const;
  ::metrics::PerfDataProto_PerfPMUMappingsMetadata* add_pmu_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfPMUMappingsMetadata >&
      pmu_mappings() const;

  // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::metrics::PerfDataProto_PerfEventStats& stats() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_PerfEventStats* release_stats();
  ::metrics::PerfDataProto_PerfEventStats* mutable_stats();
  void set_allocated_stats(::metrics::PerfDataProto_PerfEventStats* stats);
  private:
  const ::metrics::PerfDataProto_PerfEventStats& _internal_stats() const;
  ::metrics::PerfDataProto_PerfEventStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::metrics::PerfDataProto_PerfEventStats* stats);
  ::metrics::PerfDataProto_PerfEventStats* unsafe_arena_release_stats();

  // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
  bool has_string_metadata() const;
  private:
  bool _internal_has_string_metadata() const;
  public:
  void clear_string_metadata();
  const ::metrics::PerfDataProto_StringMetadata& string_metadata() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto_StringMetadata* release_string_metadata();
  ::metrics::PerfDataProto_StringMetadata* mutable_string_metadata();
  void set_allocated_string_metadata(::metrics::PerfDataProto_StringMetadata* string_metadata);
  private:
  const ::metrics::PerfDataProto_StringMetadata& _internal_string_metadata() const;
  ::metrics::PerfDataProto_StringMetadata* _internal_mutable_string_metadata();
  public:
  void unsafe_arena_set_allocated_string_metadata(
      ::metrics::PerfDataProto_StringMetadata* string_metadata);
  ::metrics::PerfDataProto_StringMetadata* unsafe_arena_release_string_metadata();

  // optional uint64 timestamp_sec = 3;
  bool has_timestamp_sec() const;
  private:
  bool _internal_has_timestamp_sec() const;
  public:
  void clear_timestamp_sec();
  uint64_t timestamp_sec() const;
  void set_timestamp_sec(uint64_t value);
  private:
  uint64_t _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfFileAttr > file_attrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEvent > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfBuildID > build_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEventType > event_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfPMUMappingsMetadata > pmu_mappings_;
  ::metrics::PerfDataProto_PerfEventStats* stats_;
  ::metrics::PerfDataProto_StringMetadata* string_metadata_;
  uint64_t timestamp_sec_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerfDataProto_PerfEventAttr

// optional uint32 type = 1;
inline bool PerfDataProto_PerfEventAttr::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_type() const {
  return _internal_has_type();
}
inline void PerfDataProto_PerfEventAttr::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PerfDataProto_PerfEventAttr::_internal_type() const {
  return type_;
}
inline uint32_t PerfDataProto_PerfEventAttr::type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.type)
  return _internal_type();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_type(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.type)
}

// optional uint32 size = 2;
inline bool PerfDataProto_PerfEventAttr::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_size() const {
  return _internal_has_size();
}
inline void PerfDataProto_PerfEventAttr::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerfDataProto_PerfEventAttr::_internal_size() const {
  return size_;
}
inline uint32_t PerfDataProto_PerfEventAttr::size() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.size)
  return _internal_size();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_size(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.size)
}

// optional uint64 config = 3;
inline bool PerfDataProto_PerfEventAttr::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_config() const {
  return _internal_has_config();
}
inline void PerfDataProto_PerfEventAttr::clear_config() {
  config_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PerfDataProto_PerfEventAttr::_internal_config() const {
  return config_;
}
inline uint64_t PerfDataProto_PerfEventAttr::config() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.config)
  return _internal_config();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_config(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  config_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_config(uint64_t value) {
  _internal_set_config(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.config)
}

// optional uint64 sample_period = 4;
inline bool PerfDataProto_PerfEventAttr::_internal_has_sample_period() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_sample_period() const {
  return _internal_has_sample_period();
}
inline void PerfDataProto_PerfEventAttr::clear_sample_period() {
  sample_period_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t PerfDataProto_PerfEventAttr::_internal_sample_period() const {
  return sample_period_;
}
inline uint64_t PerfDataProto_PerfEventAttr::sample_period() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_period)
  return _internal_sample_period();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_sample_period(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  sample_period_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_sample_period(uint64_t value) {
  _internal_set_sample_period(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_period)
}

// optional uint64 sample_freq = 5;
inline bool PerfDataProto_PerfEventAttr::_internal_has_sample_freq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_sample_freq() const {
  return _internal_has_sample_freq();
}
inline void PerfDataProto_PerfEventAttr::clear_sample_freq() {
  sample_freq_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t PerfDataProto_PerfEventAttr::_internal_sample_freq() const {
  return sample_freq_;
}
inline uint64_t PerfDataProto_PerfEventAttr::sample_freq() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_freq)
  return _internal_sample_freq();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_sample_freq(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  sample_freq_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_sample_freq(uint64_t value) {
  _internal_set_sample_freq(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_freq)
}

// optional uint64 sample_type = 6;
inline bool PerfDataProto_PerfEventAttr::_internal_has_sample_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_sample_type() const {
  return _internal_has_sample_type();
}
inline void PerfDataProto_PerfEventAttr::clear_sample_type() {
  sample_type_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t PerfDataProto_PerfEventAttr::_internal_sample_type() const {
  return sample_type_;
}
inline uint64_t PerfDataProto_PerfEventAttr::sample_type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_type)
  return _internal_sample_type();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_sample_type(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  sample_type_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_sample_type(uint64_t value) {
  _internal_set_sample_type(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_type)
}

// optional uint64 read_format = 7;
inline bool PerfDataProto_PerfEventAttr::_internal_has_read_format() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_read_format() const {
  return _internal_has_read_format();
}
inline void PerfDataProto_PerfEventAttr::clear_read_format() {
  read_format_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t PerfDataProto_PerfEventAttr::_internal_read_format() const {
  return read_format_;
}
inline uint64_t PerfDataProto_PerfEventAttr::read_format() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.read_format)
  return _internal_read_format();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_read_format(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  read_format_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_read_format(uint64_t value) {
  _internal_set_read_format(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.read_format)
}

// optional bool disabled = 8;
inline bool PerfDataProto_PerfEventAttr::_internal_has_disabled() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_disabled() const {
  return _internal_has_disabled();
}
inline void PerfDataProto_PerfEventAttr::clear_disabled() {
  disabled_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_disabled() const {
  return disabled_;
}
inline bool PerfDataProto_PerfEventAttr::disabled() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.disabled)
  return _internal_disabled();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_disabled(bool value) {
  _has_bits_[0] |= 0x00000080u;
  disabled_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.disabled)
}

// optional bool inherit = 9;
inline bool PerfDataProto_PerfEventAttr::_internal_has_inherit() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_inherit() const {
  return _internal_has_inherit();
}
inline void PerfDataProto_PerfEventAttr::clear_inherit() {
  inherit_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_inherit() const {
  return inherit_;
}
inline bool PerfDataProto_PerfEventAttr::inherit() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.inherit)
  return _internal_inherit();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_inherit(bool value) {
  _has_bits_[0] |= 0x00000100u;
  inherit_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_inherit(bool value) {
  _internal_set_inherit(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.inherit)
}

// optional bool pinned = 10;
inline bool PerfDataProto_PerfEventAttr::_internal_has_pinned() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_pinned() const {
  return _internal_has_pinned();
}
inline void PerfDataProto_PerfEventAttr::clear_pinned() {
  pinned_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_pinned() const {
  return pinned_;
}
inline bool PerfDataProto_PerfEventAttr::pinned() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.pinned)
  return _internal_pinned();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_pinned(bool value) {
  _has_bits_[0] |= 0x00000200u;
  pinned_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_pinned(bool value) {
  _internal_set_pinned(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.pinned)
}

// optional bool exclusive = 11;
inline bool PerfDataProto_PerfEventAttr::_internal_has_exclusive() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_exclusive() const {
  return _internal_has_exclusive();
}
inline void PerfDataProto_PerfEventAttr::clear_exclusive() {
  exclusive_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_exclusive() const {
  return exclusive_;
}
inline bool PerfDataProto_PerfEventAttr::exclusive() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclusive)
  return _internal_exclusive();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_exclusive(bool value) {
  _has_bits_[0] |= 0x00000400u;
  exclusive_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_exclusive(bool value) {
  _internal_set_exclusive(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclusive)
}

// optional bool exclude_user = 12;
inline bool PerfDataProto_PerfEventAttr::_internal_has_exclude_user() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_exclude_user() const {
  return _internal_has_exclude_user();
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_user() {
  exclude_user_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_exclude_user() const {
  return exclude_user_;
}
inline bool PerfDataProto_PerfEventAttr::exclude_user() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_user)
  return _internal_exclude_user();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_exclude_user(bool value) {
  _has_bits_[0] |= 0x00000800u;
  exclude_user_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_user(bool value) {
  _internal_set_exclude_user(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_user)
}

// optional bool exclude_kernel = 13;
inline bool PerfDataProto_PerfEventAttr::_internal_has_exclude_kernel() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_exclude_kernel() const {
  return _internal_has_exclude_kernel();
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_kernel() {
  exclude_kernel_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_exclude_kernel() const {
  return exclude_kernel_;
}
inline bool PerfDataProto_PerfEventAttr::exclude_kernel() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_kernel)
  return _internal_exclude_kernel();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_exclude_kernel(bool value) {
  _has_bits_[0] |= 0x00001000u;
  exclude_kernel_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_kernel(bool value) {
  _internal_set_exclude_kernel(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_kernel)
}

// optional bool exclude_hv = 14;
inline bool PerfDataProto_PerfEventAttr::_internal_has_exclude_hv() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_exclude_hv() const {
  return _internal_has_exclude_hv();
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_hv() {
  exclude_hv_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_exclude_hv() const {
  return exclude_hv_;
}
inline bool PerfDataProto_PerfEventAttr::exclude_hv() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_hv)
  return _internal_exclude_hv();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_exclude_hv(bool value) {
  _has_bits_[0] |= 0x00002000u;
  exclude_hv_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_hv(bool value) {
  _internal_set_exclude_hv(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_hv)
}

// optional bool exclude_idle = 15;
inline bool PerfDataProto_PerfEventAttr::_internal_has_exclude_idle() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_exclude_idle() const {
  return _internal_has_exclude_idle();
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_idle() {
  exclude_idle_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_exclude_idle() const {
  return exclude_idle_;
}
inline bool PerfDataProto_PerfEventAttr::exclude_idle() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_idle)
  return _internal_exclude_idle();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_exclude_idle(bool value) {
  _has_bits_[0] |= 0x00004000u;
  exclude_idle_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_idle(bool value) {
  _internal_set_exclude_idle(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_idle)
}

// optional bool mmap = 16;
inline bool PerfDataProto_PerfEventAttr::_internal_has_mmap() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_mmap() const {
  return _internal_has_mmap();
}
inline void PerfDataProto_PerfEventAttr::clear_mmap() {
  mmap_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_mmap() const {
  return mmap_;
}
inline bool PerfDataProto_PerfEventAttr::mmap() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.mmap)
  return _internal_mmap();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_mmap(bool value) {
  _has_bits_[0] |= 0x00008000u;
  mmap_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_mmap(bool value) {
  _internal_set_mmap(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.mmap)
}

// optional bool comm = 17;
inline bool PerfDataProto_PerfEventAttr::_internal_has_comm() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_comm() const {
  return _internal_has_comm();
}
inline void PerfDataProto_PerfEventAttr::clear_comm() {
  comm_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_comm() const {
  return comm_;
}
inline bool PerfDataProto_PerfEventAttr::comm() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.comm)
  return _internal_comm();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_comm(bool value) {
  _has_bits_[0] |= 0x00010000u;
  comm_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_comm(bool value) {
  _internal_set_comm(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.comm)
}

// optional bool freq = 18;
inline bool PerfDataProto_PerfEventAttr::_internal_has_freq() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_freq() const {
  return _internal_has_freq();
}
inline void PerfDataProto_PerfEventAttr::clear_freq() {
  freq_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_freq() const {
  return freq_;
}
inline bool PerfDataProto_PerfEventAttr::freq() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.freq)
  return _internal_freq();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_freq(bool value) {
  _has_bits_[0] |= 0x00020000u;
  freq_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_freq(bool value) {
  _internal_set_freq(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.freq)
}

// optional bool inherit_stat = 19;
inline bool PerfDataProto_PerfEventAttr::_internal_has_inherit_stat() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_inherit_stat() const {
  return _internal_has_inherit_stat();
}
inline void PerfDataProto_PerfEventAttr::clear_inherit_stat() {
  inherit_stat_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_inherit_stat() const {
  return inherit_stat_;
}
inline bool PerfDataProto_PerfEventAttr::inherit_stat() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.inherit_stat)
  return _internal_inherit_stat();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_inherit_stat(bool value) {
  _has_bits_[0] |= 0x00040000u;
  inherit_stat_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_inherit_stat(bool value) {
  _internal_set_inherit_stat(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.inherit_stat)
}

// optional bool enable_on_exec = 20;
inline bool PerfDataProto_PerfEventAttr::_internal_has_enable_on_exec() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_enable_on_exec() const {
  return _internal_has_enable_on_exec();
}
inline void PerfDataProto_PerfEventAttr::clear_enable_on_exec() {
  enable_on_exec_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_enable_on_exec() const {
  return enable_on_exec_;
}
inline bool PerfDataProto_PerfEventAttr::enable_on_exec() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.enable_on_exec)
  return _internal_enable_on_exec();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_enable_on_exec(bool value) {
  _has_bits_[0] |= 0x00080000u;
  enable_on_exec_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_enable_on_exec(bool value) {
  _internal_set_enable_on_exec(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.enable_on_exec)
}

// optional bool task = 21;
inline bool PerfDataProto_PerfEventAttr::_internal_has_task() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_task() const {
  return _internal_has_task();
}
inline void PerfDataProto_PerfEventAttr::clear_task() {
  task_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_task() const {
  return task_;
}
inline bool PerfDataProto_PerfEventAttr::task() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.task)
  return _internal_task();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_task(bool value) {
  _has_bits_[0] |= 0x00100000u;
  task_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_task(bool value) {
  _internal_set_task(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.task)
}

// optional bool watermark = 22;
inline bool PerfDataProto_PerfEventAttr::_internal_has_watermark() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_watermark() const {
  return _internal_has_watermark();
}
inline void PerfDataProto_PerfEventAttr::clear_watermark() {
  watermark_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_watermark() const {
  return watermark_;
}
inline bool PerfDataProto_PerfEventAttr::watermark() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.watermark)
  return _internal_watermark();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_watermark(bool value) {
  _has_bits_[0] |= 0x00200000u;
  watermark_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_watermark(bool value) {
  _internal_set_watermark(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.watermark)
}

// optional uint32 precise_ip = 23;
inline bool PerfDataProto_PerfEventAttr::_internal_has_precise_ip() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_precise_ip() const {
  return _internal_has_precise_ip();
}
inline void PerfDataProto_PerfEventAttr::clear_precise_ip() {
  precise_ip_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline uint32_t PerfDataProto_PerfEventAttr::_internal_precise_ip() const {
  return precise_ip_;
}
inline uint32_t PerfDataProto_PerfEventAttr::precise_ip() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.precise_ip)
  return _internal_precise_ip();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_precise_ip(uint32_t value) {
  _has_bits_[0] |= 0x00800000u;
  precise_ip_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_precise_ip(uint32_t value) {
  _internal_set_precise_ip(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.precise_ip)
}

// optional bool mmap_data = 24;
inline bool PerfDataProto_PerfEventAttr::_internal_has_mmap_data() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_mmap_data() const {
  return _internal_has_mmap_data();
}
inline void PerfDataProto_PerfEventAttr::clear_mmap_data() {
  mmap_data_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_mmap_data() const {
  return mmap_data_;
}
inline bool PerfDataProto_PerfEventAttr::mmap_data() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.mmap_data)
  return _internal_mmap_data();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_mmap_data(bool value) {
  _has_bits_[0] |= 0x00400000u;
  mmap_data_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_mmap_data(bool value) {
  _internal_set_mmap_data(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.mmap_data)
}

// optional bool sample_id_all = 25;
inline bool PerfDataProto_PerfEventAttr::_internal_has_sample_id_all() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_sample_id_all() const {
  return _internal_has_sample_id_all();
}
inline void PerfDataProto_PerfEventAttr::clear_sample_id_all() {
  sample_id_all_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_sample_id_all() const {
  return sample_id_all_;
}
inline bool PerfDataProto_PerfEventAttr::sample_id_all() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_id_all)
  return _internal_sample_id_all();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_sample_id_all(bool value) {
  _has_bits_[0] |= 0x01000000u;
  sample_id_all_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_sample_id_all(bool value) {
  _internal_set_sample_id_all(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_id_all)
}

// optional bool exclude_host = 26;
inline bool PerfDataProto_PerfEventAttr::_internal_has_exclude_host() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_exclude_host() const {
  return _internal_has_exclude_host();
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_host() {
  exclude_host_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_exclude_host() const {
  return exclude_host_;
}
inline bool PerfDataProto_PerfEventAttr::exclude_host() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_host)
  return _internal_exclude_host();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_exclude_host(bool value) {
  _has_bits_[0] |= 0x02000000u;
  exclude_host_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_host(bool value) {
  _internal_set_exclude_host(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_host)
}

// optional bool exclude_guest = 27;
inline bool PerfDataProto_PerfEventAttr::_internal_has_exclude_guest() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_exclude_guest() const {
  return _internal_has_exclude_guest();
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_guest() {
  exclude_guest_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool PerfDataProto_PerfEventAttr::_internal_exclude_guest() const {
  return exclude_guest_;
}
inline bool PerfDataProto_PerfEventAttr::exclude_guest() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_guest)
  return _internal_exclude_guest();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_exclude_guest(bool value) {
  _has_bits_[0] |= 0x04000000u;
  exclude_guest_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_guest(bool value) {
  _internal_set_exclude_guest(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_guest)
}

// optional uint32 wakeup_events = 28;
inline bool PerfDataProto_PerfEventAttr::_internal_has_wakeup_events() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_wakeup_events() const {
  return _internal_has_wakeup_events();
}
inline void PerfDataProto_PerfEventAttr::clear_wakeup_events() {
  wakeup_events_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline uint32_t PerfDataProto_PerfEventAttr::_internal_wakeup_events() const {
  return wakeup_events_;
}
inline uint32_t PerfDataProto_PerfEventAttr::wakeup_events() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.wakeup_events)
  return _internal_wakeup_events();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_wakeup_events(uint32_t value) {
  _has_bits_[0] |= 0x08000000u;
  wakeup_events_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_wakeup_events(uint32_t value) {
  _internal_set_wakeup_events(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.wakeup_events)
}

// optional uint32 wakeup_watermark = 29;
inline bool PerfDataProto_PerfEventAttr::_internal_has_wakeup_watermark() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_wakeup_watermark() const {
  return _internal_has_wakeup_watermark();
}
inline void PerfDataProto_PerfEventAttr::clear_wakeup_watermark() {
  wakeup_watermark_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline uint32_t PerfDataProto_PerfEventAttr::_internal_wakeup_watermark() const {
  return wakeup_watermark_;
}
inline uint32_t PerfDataProto_PerfEventAttr::wakeup_watermark() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.wakeup_watermark)
  return _internal_wakeup_watermark();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_wakeup_watermark(uint32_t value) {
  _has_bits_[0] |= 0x10000000u;
  wakeup_watermark_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_wakeup_watermark(uint32_t value) {
  _internal_set_wakeup_watermark(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.wakeup_watermark)
}

// optional uint32 bp_type = 30;
inline bool PerfDataProto_PerfEventAttr::_internal_has_bp_type() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_bp_type() const {
  return _internal_has_bp_type();
}
inline void PerfDataProto_PerfEventAttr::clear_bp_type() {
  bp_type_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline uint32_t PerfDataProto_PerfEventAttr::_internal_bp_type() const {
  return bp_type_;
}
inline uint32_t PerfDataProto_PerfEventAttr::bp_type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.bp_type)
  return _internal_bp_type();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_bp_type(uint32_t value) {
  _has_bits_[1] |= 0x00000004u;
  bp_type_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_bp_type(uint32_t value) {
  _internal_set_bp_type(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.bp_type)
}

// optional uint64 bp_addr = 31;
inline bool PerfDataProto_PerfEventAttr::_internal_has_bp_addr() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_bp_addr() const {
  return _internal_has_bp_addr();
}
inline void PerfDataProto_PerfEventAttr::clear_bp_addr() {
  bp_addr_ = uint64_t{0u};
  _has_bits_[0] &= ~0x20000000u;
}
inline uint64_t PerfDataProto_PerfEventAttr::_internal_bp_addr() const {
  return bp_addr_;
}
inline uint64_t PerfDataProto_PerfEventAttr::bp_addr() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.bp_addr)
  return _internal_bp_addr();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_bp_addr(uint64_t value) {
  _has_bits_[0] |= 0x20000000u;
  bp_addr_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_bp_addr(uint64_t value) {
  _internal_set_bp_addr(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.bp_addr)
}

// optional uint64 config1 = 32;
inline bool PerfDataProto_PerfEventAttr::_internal_has_config1() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_config1() const {
  return _internal_has_config1();
}
inline void PerfDataProto_PerfEventAttr::clear_config1() {
  config1_ = uint64_t{0u};
  _has_bits_[0] &= ~0x40000000u;
}
inline uint64_t PerfDataProto_PerfEventAttr::_internal_config1() const {
  return config1_;
}
inline uint64_t PerfDataProto_PerfEventAttr::config1() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.config1)
  return _internal_config1();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_config1(uint64_t value) {
  _has_bits_[0] |= 0x40000000u;
  config1_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_config1(uint64_t value) {
  _internal_set_config1(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.config1)
}

// optional uint64 bp_len = 33;
inline bool PerfDataProto_PerfEventAttr::_internal_has_bp_len() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_bp_len() const {
  return _internal_has_bp_len();
}
inline void PerfDataProto_PerfEventAttr::clear_bp_len() {
  bp_len_ = uint64_t{0u};
  _has_bits_[0] &= ~0x80000000u;
}
inline uint64_t PerfDataProto_PerfEventAttr::_internal_bp_len() const {
  return bp_len_;
}
inline uint64_t PerfDataProto_PerfEventAttr::bp_len() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.bp_len)
  return _internal_bp_len();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_bp_len(uint64_t value) {
  _has_bits_[0] |= 0x80000000u;
  bp_len_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_bp_len(uint64_t value) {
  _internal_set_bp_len(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.bp_len)
}

// optional uint64 config2 = 34;
inline bool PerfDataProto_PerfEventAttr::_internal_has_config2() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_config2() const {
  return _internal_has_config2();
}
inline void PerfDataProto_PerfEventAttr::clear_config2() {
  config2_ = uint64_t{0u};
  _has_bits_[1] &= ~0x00000001u;
}
inline uint64_t PerfDataProto_PerfEventAttr::_internal_config2() const {
  return config2_;
}
inline uint64_t PerfDataProto_PerfEventAttr::config2() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.config2)
  return _internal_config2();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_config2(uint64_t value) {
  _has_bits_[1] |= 0x00000001u;
  config2_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_config2(uint64_t value) {
  _internal_set_config2(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.config2)
}

// optional uint64 branch_sample_type = 35;
inline bool PerfDataProto_PerfEventAttr::_internal_has_branch_sample_type() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventAttr::has_branch_sample_type() const {
  return _internal_has_branch_sample_type();
}
inline void PerfDataProto_PerfEventAttr::clear_branch_sample_type() {
  branch_sample_type_ = uint64_t{0u};
  _has_bits_[1] &= ~0x00000002u;
}
inline uint64_t PerfDataProto_PerfEventAttr::_internal_branch_sample_type() const {
  return branch_sample_type_;
}
inline uint64_t PerfDataProto_PerfEventAttr::branch_sample_type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.branch_sample_type)
  return _internal_branch_sample_type();
}
inline void PerfDataProto_PerfEventAttr::_internal_set_branch_sample_type(uint64_t value) {
  _has_bits_[1] |= 0x00000002u;
  branch_sample_type_ = value;
}
inline void PerfDataProto_PerfEventAttr::set_branch_sample_type(uint64_t value) {
  _internal_set_branch_sample_type(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.branch_sample_type)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfFileAttr

// optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
inline bool PerfDataProto_PerfFileAttr::_internal_has_attr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || attr_ != nullptr);
  return value;
}
inline bool PerfDataProto_PerfFileAttr::has_attr() const {
  return _internal_has_attr();
}
inline void PerfDataProto_PerfFileAttr::clear_attr() {
  if (attr_ != nullptr) attr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_PerfEventAttr& PerfDataProto_PerfFileAttr::_internal_attr() const {
  const ::metrics::PerfDataProto_PerfEventAttr* p = attr_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto_PerfEventAttr&>(
      ::metrics::_PerfDataProto_PerfEventAttr_default_instance_);
}
inline const ::metrics::PerfDataProto_PerfEventAttr& PerfDataProto_PerfFileAttr::attr() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfFileAttr.attr)
  return _internal_attr();
}
inline void PerfDataProto_PerfFileAttr::unsafe_arena_set_allocated_attr(
    ::metrics::PerfDataProto_PerfEventAttr* attr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attr_);
  }
  attr_ = attr;
  if (attr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.PerfFileAttr.attr)
}
inline ::metrics::PerfDataProto_PerfEventAttr* PerfDataProto_PerfFileAttr::release_attr() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_PerfEventAttr* temp = attr_;
  attr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto_PerfEventAttr* PerfDataProto_PerfFileAttr::unsafe_arena_release_attr() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfFileAttr.attr)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_PerfEventAttr* temp = attr_;
  attr_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_PerfEventAttr* PerfDataProto_PerfFileAttr::_internal_mutable_attr() {
  _has_bits_[0] |= 0x00000001u;
  if (attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_PerfEventAttr>(GetArenaForAllocation());
    attr_ = p;
  }
  return attr_;
}
inline ::metrics::PerfDataProto_PerfEventAttr* PerfDataProto_PerfFileAttr::mutable_attr() {
  ::metrics::PerfDataProto_PerfEventAttr* _msg = _internal_mutable_attr();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfFileAttr.attr)
  return _msg;
}
inline void PerfDataProto_PerfFileAttr::set_allocated_attr(::metrics::PerfDataProto_PerfEventAttr* attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attr_;
  }
  if (attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attr);
    if (message_arena != submessage_arena) {
      attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfFileAttr.attr)
}

// repeated uint64 ids = 2;
inline int PerfDataProto_PerfFileAttr::_internal_ids_size() const {
  return ids_.size();
}
inline int PerfDataProto_PerfFileAttr::ids_size() const {
  return _internal_ids_size();
}
inline void PerfDataProto_PerfFileAttr::clear_ids() {
  ids_.Clear();
}
inline uint64_t PerfDataProto_PerfFileAttr::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline uint64_t PerfDataProto_PerfFileAttr::ids(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfFileAttr.ids)
  return _internal_ids(index);
}
inline void PerfDataProto_PerfFileAttr::set_ids(int index, uint64_t value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfFileAttr.ids)
}
inline void PerfDataProto_PerfFileAttr::_internal_add_ids(uint64_t value) {
  ids_.Add(value);
}
inline void PerfDataProto_PerfFileAttr::add_ids(uint64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.PerfFileAttr.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PerfDataProto_PerfFileAttr::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PerfDataProto_PerfFileAttr::ids() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.PerfFileAttr.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PerfDataProto_PerfFileAttr::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PerfDataProto_PerfFileAttr::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.PerfFileAttr.ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// PerfDataProto_PerfEventType

// optional uint64 id = 1;
inline bool PerfDataProto_PerfEventType::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventType::has_id() const {
  return _internal_has_id();
}
inline void PerfDataProto_PerfEventType::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PerfDataProto_PerfEventType::_internal_id() const {
  return id_;
}
inline uint64_t PerfDataProto_PerfEventType::id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventType.id)
  return _internal_id();
}
inline void PerfDataProto_PerfEventType::_internal_set_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void PerfDataProto_PerfEventType::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventType.id)
}

// optional uint64 name_md5_prefix = 3;
inline bool PerfDataProto_PerfEventType::_internal_has_name_md5_prefix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventType::has_name_md5_prefix() const {
  return _internal_has_name_md5_prefix();
}
inline void PerfDataProto_PerfEventType::clear_name_md5_prefix() {
  name_md5_prefix_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t PerfDataProto_PerfEventType::_internal_name_md5_prefix() const {
  return name_md5_prefix_;
}
inline uint64_t PerfDataProto_PerfEventType::name_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventType.name_md5_prefix)
  return _internal_name_md5_prefix();
}
inline void PerfDataProto_PerfEventType::_internal_set_name_md5_prefix(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  name_md5_prefix_ = value;
}
inline void PerfDataProto_PerfEventType::set_name_md5_prefix(uint64_t value) {
  _internal_set_name_md5_prefix(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventType.name_md5_prefix)
}

// -------------------------------------------------------------------

// PerfDataProto_SampleInfo

// optional uint32 pid = 1;
inline bool PerfDataProto_SampleInfo::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_SampleInfo::has_pid() const {
  return _internal_has_pid();
}
inline void PerfDataProto_SampleInfo::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PerfDataProto_SampleInfo::_internal_pid() const {
  return pid_;
}
inline uint32_t PerfDataProto_SampleInfo::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.pid)
  return _internal_pid();
}
inline void PerfDataProto_SampleInfo::_internal_set_pid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  pid_ = value;
}
inline void PerfDataProto_SampleInfo::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.pid)
}

// optional uint32 tid = 2;
inline bool PerfDataProto_SampleInfo::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_SampleInfo::has_tid() const {
  return _internal_has_tid();
}
inline void PerfDataProto_SampleInfo::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerfDataProto_SampleInfo::_internal_tid() const {
  return tid_;
}
inline uint32_t PerfDataProto_SampleInfo::tid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.tid)
  return _internal_tid();
}
inline void PerfDataProto_SampleInfo::_internal_set_tid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  tid_ = value;
}
inline void PerfDataProto_SampleInfo::set_tid(uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.tid)
}

// optional uint64 sample_time_ns = 3;
inline bool PerfDataProto_SampleInfo::_internal_has_sample_time_ns() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_SampleInfo::has_sample_time_ns() const {
  return _internal_has_sample_time_ns();
}
inline void PerfDataProto_SampleInfo::clear_sample_time_ns() {
  sample_time_ns_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PerfDataProto_SampleInfo::_internal_sample_time_ns() const {
  return sample_time_ns_;
}
inline uint64_t PerfDataProto_SampleInfo::sample_time_ns() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.sample_time_ns)
  return _internal_sample_time_ns();
}
inline void PerfDataProto_SampleInfo::_internal_set_sample_time_ns(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  sample_time_ns_ = value;
}
inline void PerfDataProto_SampleInfo::set_sample_time_ns(uint64_t value) {
  _internal_set_sample_time_ns(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.sample_time_ns)
}

// optional uint64 id = 4;
inline bool PerfDataProto_SampleInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerfDataProto_SampleInfo::has_id() const {
  return _internal_has_id();
}
inline void PerfDataProto_SampleInfo::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t PerfDataProto_SampleInfo::_internal_id() const {
  return id_;
}
inline uint64_t PerfDataProto_SampleInfo::id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.id)
  return _internal_id();
}
inline void PerfDataProto_SampleInfo::_internal_set_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void PerfDataProto_SampleInfo::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.id)
}

// optional uint32 cpu = 5;
inline bool PerfDataProto_SampleInfo::_internal_has_cpu() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerfDataProto_SampleInfo::has_cpu() const {
  return _internal_has_cpu();
}
inline void PerfDataProto_SampleInfo::clear_cpu() {
  cpu_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PerfDataProto_SampleInfo::_internal_cpu() const {
  return cpu_;
}
inline uint32_t PerfDataProto_SampleInfo::cpu() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.cpu)
  return _internal_cpu();
}
inline void PerfDataProto_SampleInfo::_internal_set_cpu(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  cpu_ = value;
}
inline void PerfDataProto_SampleInfo::set_cpu(uint32_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.cpu)
}

// -------------------------------------------------------------------

// PerfDataProto_CommEvent

// optional uint32 pid = 1;
inline bool PerfDataProto_CommEvent::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_CommEvent::has_pid() const {
  return _internal_has_pid();
}
inline void PerfDataProto_CommEvent::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerfDataProto_CommEvent::_internal_pid() const {
  return pid_;
}
inline uint32_t PerfDataProto_CommEvent::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.pid)
  return _internal_pid();
}
inline void PerfDataProto_CommEvent::_internal_set_pid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
}
inline void PerfDataProto_CommEvent::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.pid)
}

// optional uint32 tid = 2;
inline bool PerfDataProto_CommEvent::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_CommEvent::has_tid() const {
  return _internal_has_tid();
}
inline void PerfDataProto_CommEvent::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PerfDataProto_CommEvent::_internal_tid() const {
  return tid_;
}
inline uint32_t PerfDataProto_CommEvent::tid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.tid)
  return _internal_tid();
}
inline void PerfDataProto_CommEvent::_internal_set_tid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  tid_ = value;
}
inline void PerfDataProto_CommEvent::set_tid(uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.tid)
}

// optional uint64 comm_md5_prefix = 4;
inline bool PerfDataProto_CommEvent::_internal_has_comm_md5_prefix() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerfDataProto_CommEvent::has_comm_md5_prefix() const {
  return _internal_has_comm_md5_prefix();
}
inline void PerfDataProto_CommEvent::clear_comm_md5_prefix() {
  comm_md5_prefix_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t PerfDataProto_CommEvent::_internal_comm_md5_prefix() const {
  return comm_md5_prefix_;
}
inline uint64_t PerfDataProto_CommEvent::comm_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.comm_md5_prefix)
  return _internal_comm_md5_prefix();
}
inline void PerfDataProto_CommEvent::_internal_set_comm_md5_prefix(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  comm_md5_prefix_ = value;
}
inline void PerfDataProto_CommEvent::set_comm_md5_prefix(uint64_t value) {
  _internal_set_comm_md5_prefix(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.comm_md5_prefix)
}

// optional uint64 sample_time = 5 [deprecated = true];
inline bool PerfDataProto_CommEvent::_internal_has_sample_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerfDataProto_CommEvent::has_sample_time() const {
  return _internal_has_sample_time();
}
inline void PerfDataProto_CommEvent::clear_sample_time() {
  sample_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t PerfDataProto_CommEvent::_internal_sample_time() const {
  return sample_time_;
}
inline uint64_t PerfDataProto_CommEvent::sample_time() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.sample_time)
  return _internal_sample_time();
}
inline void PerfDataProto_CommEvent::_internal_set_sample_time(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  sample_time_ = value;
}
inline void PerfDataProto_CommEvent::set_sample_time(uint64_t value) {
  _internal_set_sample_time(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.sample_time)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
inline bool PerfDataProto_CommEvent::_internal_has_sample_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sample_info_ != nullptr);
  return value;
}
inline bool PerfDataProto_CommEvent::has_sample_info() const {
  return _internal_has_sample_info();
}
inline void PerfDataProto_CommEvent::clear_sample_info() {
  if (sample_info_ != nullptr) sample_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_CommEvent::_internal_sample_info() const {
  const ::metrics::PerfDataProto_SampleInfo* p = sample_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto_SampleInfo&>(
      ::metrics::_PerfDataProto_SampleInfo_default_instance_);
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_CommEvent::sample_info() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.sample_info)
  return _internal_sample_info();
}
inline void PerfDataProto_CommEvent::unsafe_arena_set_allocated_sample_info(
    ::metrics::PerfDataProto_SampleInfo* sample_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_info_);
  }
  sample_info_ = sample_info;
  if (sample_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.CommEvent.sample_info)
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_CommEvent::release_sample_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_CommEvent::unsafe_arena_release_sample_info() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.CommEvent.sample_info)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_CommEvent::_internal_mutable_sample_info() {
  _has_bits_[0] |= 0x00000001u;
  if (sample_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_SampleInfo>(GetArenaForAllocation());
    sample_info_ = p;
  }
  return sample_info_;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_CommEvent::mutable_sample_info() {
  ::metrics::PerfDataProto_SampleInfo* _msg = _internal_mutable_sample_info();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.CommEvent.sample_info)
  return _msg;
}
inline void PerfDataProto_CommEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sample_info_;
  }
  if (sample_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sample_info);
    if (message_arena != submessage_arena) {
      sample_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sample_info_ = sample_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.CommEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_MMapEvent

// optional uint32 pid = 1;
inline bool PerfDataProto_MMapEvent::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_MMapEvent::has_pid() const {
  return _internal_has_pid();
}
inline void PerfDataProto_MMapEvent::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerfDataProto_MMapEvent::_internal_pid() const {
  return pid_;
}
inline uint32_t PerfDataProto_MMapEvent::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.pid)
  return _internal_pid();
}
inline void PerfDataProto_MMapEvent::_internal_set_pid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
}
inline void PerfDataProto_MMapEvent::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.pid)
}

// optional uint32 tid = 2;
inline bool PerfDataProto_MMapEvent::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_MMapEvent::has_tid() const {
  return _internal_has_tid();
}
inline void PerfDataProto_MMapEvent::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PerfDataProto_MMapEvent::_internal_tid() const {
  return tid_;
}
inline uint32_t PerfDataProto_MMapEvent::tid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.tid)
  return _internal_tid();
}
inline void PerfDataProto_MMapEvent::_internal_set_tid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  tid_ = value;
}
inline void PerfDataProto_MMapEvent::set_tid(uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.tid)
}

// optional uint64 start = 3;
inline bool PerfDataProto_MMapEvent::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerfDataProto_MMapEvent::has_start() const {
  return _internal_has_start();
}
inline void PerfDataProto_MMapEvent::clear_start() {
  start_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t PerfDataProto_MMapEvent::_internal_start() const {
  return start_;
}
inline uint64_t PerfDataProto_MMapEvent::start() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.start)
  return _internal_start();
}
inline void PerfDataProto_MMapEvent::_internal_set_start(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  start_ = value;
}
inline void PerfDataProto_MMapEvent::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.start)
}

// optional uint64 len = 4;
inline bool PerfDataProto_MMapEvent::_internal_has_len() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerfDataProto_MMapEvent::has_len() const {
  return _internal_has_len();
}
inline void PerfDataProto_MMapEvent::clear_len() {
  len_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t PerfDataProto_MMapEvent::_internal_len() const {
  return len_;
}
inline uint64_t PerfDataProto_MMapEvent::len() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.len)
  return _internal_len();
}
inline void PerfDataProto_MMapEvent::_internal_set_len(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
}
inline void PerfDataProto_MMapEvent::set_len(uint64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.len)
}

// optional uint64 pgoff = 5;
inline bool PerfDataProto_MMapEvent::_internal_has_pgoff() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerfDataProto_MMapEvent::has_pgoff() const {
  return _internal_has_pgoff();
}
inline void PerfDataProto_MMapEvent::clear_pgoff() {
  pgoff_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t PerfDataProto_MMapEvent::_internal_pgoff() const {
  return pgoff_;
}
inline uint64_t PerfDataProto_MMapEvent::pgoff() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.pgoff)
  return _internal_pgoff();
}
inline void PerfDataProto_MMapEvent::_internal_set_pgoff(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  pgoff_ = value;
}
inline void PerfDataProto_MMapEvent::set_pgoff(uint64_t value) {
  _internal_set_pgoff(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.pgoff)
}

// optional uint64 filename_md5_prefix = 7;
inline bool PerfDataProto_MMapEvent::_internal_has_filename_md5_prefix() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerfDataProto_MMapEvent::has_filename_md5_prefix() const {
  return _internal_has_filename_md5_prefix();
}
inline void PerfDataProto_MMapEvent::clear_filename_md5_prefix() {
  filename_md5_prefix_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t PerfDataProto_MMapEvent::_internal_filename_md5_prefix() const {
  return filename_md5_prefix_;
}
inline uint64_t PerfDataProto_MMapEvent::filename_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.filename_md5_prefix)
  return _internal_filename_md5_prefix();
}
inline void PerfDataProto_MMapEvent::_internal_set_filename_md5_prefix(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  filename_md5_prefix_ = value;
}
inline void PerfDataProto_MMapEvent::set_filename_md5_prefix(uint64_t value) {
  _internal_set_filename_md5_prefix(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.filename_md5_prefix)
}

// optional uint64 root_path_md5_prefix = 16;
inline bool PerfDataProto_MMapEvent::_internal_has_root_path_md5_prefix() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PerfDataProto_MMapEvent::has_root_path_md5_prefix() const {
  return _internal_has_root_path_md5_prefix();
}
inline void PerfDataProto_MMapEvent::clear_root_path_md5_prefix() {
  root_path_md5_prefix_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t PerfDataProto_MMapEvent::_internal_root_path_md5_prefix() const {
  return root_path_md5_prefix_;
}
inline uint64_t PerfDataProto_MMapEvent::root_path_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.root_path_md5_prefix)
  return _internal_root_path_md5_prefix();
}
inline void PerfDataProto_MMapEvent::_internal_set_root_path_md5_prefix(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  root_path_md5_prefix_ = value;
}
inline void PerfDataProto_MMapEvent::set_root_path_md5_prefix(uint64_t value) {
  _internal_set_root_path_md5_prefix(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.root_path_md5_prefix)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
inline bool PerfDataProto_MMapEvent::_internal_has_sample_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sample_info_ != nullptr);
  return value;
}
inline bool PerfDataProto_MMapEvent::has_sample_info() const {
  return _internal_has_sample_info();
}
inline void PerfDataProto_MMapEvent::clear_sample_info() {
  if (sample_info_ != nullptr) sample_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_MMapEvent::_internal_sample_info() const {
  const ::metrics::PerfDataProto_SampleInfo* p = sample_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto_SampleInfo&>(
      ::metrics::_PerfDataProto_SampleInfo_default_instance_);
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_MMapEvent::sample_info() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.sample_info)
  return _internal_sample_info();
}
inline void PerfDataProto_MMapEvent::unsafe_arena_set_allocated_sample_info(
    ::metrics::PerfDataProto_SampleInfo* sample_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_info_);
  }
  sample_info_ = sample_info;
  if (sample_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.MMapEvent.sample_info)
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_MMapEvent::release_sample_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_MMapEvent::unsafe_arena_release_sample_info() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.MMapEvent.sample_info)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_MMapEvent::_internal_mutable_sample_info() {
  _has_bits_[0] |= 0x00000001u;
  if (sample_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_SampleInfo>(GetArenaForAllocation());
    sample_info_ = p;
  }
  return sample_info_;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_MMapEvent::mutable_sample_info() {
  ::metrics::PerfDataProto_SampleInfo* _msg = _internal_mutable_sample_info();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.MMapEvent.sample_info)
  return _msg;
}
inline void PerfDataProto_MMapEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sample_info_;
  }
  if (sample_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sample_info);
    if (message_arena != submessage_arena) {
      sample_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sample_info_ = sample_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.MMapEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_LostEvent

// optional uint64 id = 1;
inline bool PerfDataProto_LostEvent::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_LostEvent::has_id() const {
  return _internal_has_id();
}
inline void PerfDataProto_LostEvent::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t PerfDataProto_LostEvent::_internal_id() const {
  return id_;
}
inline uint64_t PerfDataProto_LostEvent::id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.LostEvent.id)
  return _internal_id();
}
inline void PerfDataProto_LostEvent::_internal_set_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void PerfDataProto_LostEvent::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.LostEvent.id)
}

// optional uint64 lost = 2;
inline bool PerfDataProto_LostEvent::_internal_has_lost() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_LostEvent::has_lost() const {
  return _internal_has_lost();
}
inline void PerfDataProto_LostEvent::clear_lost() {
  lost_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PerfDataProto_LostEvent::_internal_lost() const {
  return lost_;
}
inline uint64_t PerfDataProto_LostEvent::lost() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.LostEvent.lost)
  return _internal_lost();
}
inline void PerfDataProto_LostEvent::_internal_set_lost(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  lost_ = value;
}
inline void PerfDataProto_LostEvent::set_lost(uint64_t value) {
  _internal_set_lost(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.LostEvent.lost)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 3;
inline bool PerfDataProto_LostEvent::_internal_has_sample_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sample_info_ != nullptr);
  return value;
}
inline bool PerfDataProto_LostEvent::has_sample_info() const {
  return _internal_has_sample_info();
}
inline void PerfDataProto_LostEvent::clear_sample_info() {
  if (sample_info_ != nullptr) sample_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_LostEvent::_internal_sample_info() const {
  const ::metrics::PerfDataProto_SampleInfo* p = sample_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto_SampleInfo&>(
      ::metrics::_PerfDataProto_SampleInfo_default_instance_);
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_LostEvent::sample_info() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.LostEvent.sample_info)
  return _internal_sample_info();
}
inline void PerfDataProto_LostEvent::unsafe_arena_set_allocated_sample_info(
    ::metrics::PerfDataProto_SampleInfo* sample_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_info_);
  }
  sample_info_ = sample_info;
  if (sample_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.LostEvent.sample_info)
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_LostEvent::release_sample_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_LostEvent::unsafe_arena_release_sample_info() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.LostEvent.sample_info)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_LostEvent::_internal_mutable_sample_info() {
  _has_bits_[0] |= 0x00000001u;
  if (sample_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_SampleInfo>(GetArenaForAllocation());
    sample_info_ = p;
  }
  return sample_info_;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_LostEvent::mutable_sample_info() {
  ::metrics::PerfDataProto_SampleInfo* _msg = _internal_mutable_sample_info();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.LostEvent.sample_info)
  return _msg;
}
inline void PerfDataProto_LostEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sample_info_;
  }
  if (sample_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sample_info);
    if (message_arena != submessage_arena) {
      sample_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sample_info_ = sample_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.LostEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_ThrottleEvent

// optional uint64 time_ns = 1;
inline bool PerfDataProto_ThrottleEvent::_internal_has_time_ns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_ThrottleEvent::has_time_ns() const {
  return _internal_has_time_ns();
}
inline void PerfDataProto_ThrottleEvent::clear_time_ns() {
  time_ns_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t PerfDataProto_ThrottleEvent::_internal_time_ns() const {
  return time_ns_;
}
inline uint64_t PerfDataProto_ThrottleEvent::time_ns() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ThrottleEvent.time_ns)
  return _internal_time_ns();
}
inline void PerfDataProto_ThrottleEvent::_internal_set_time_ns(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  time_ns_ = value;
}
inline void PerfDataProto_ThrottleEvent::set_time_ns(uint64_t value) {
  _internal_set_time_ns(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ThrottleEvent.time_ns)
}

// optional uint64 id = 2;
inline bool PerfDataProto_ThrottleEvent::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_ThrottleEvent::has_id() const {
  return _internal_has_id();
}
inline void PerfDataProto_ThrottleEvent::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PerfDataProto_ThrottleEvent::_internal_id() const {
  return id_;
}
inline uint64_t PerfDataProto_ThrottleEvent::id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ThrottleEvent.id)
  return _internal_id();
}
inline void PerfDataProto_ThrottleEvent::_internal_set_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void PerfDataProto_ThrottleEvent::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ThrottleEvent.id)
}

// optional uint64 stream_id = 3;
inline bool PerfDataProto_ThrottleEvent::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerfDataProto_ThrottleEvent::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void PerfDataProto_ThrottleEvent::clear_stream_id() {
  stream_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t PerfDataProto_ThrottleEvent::_internal_stream_id() const {
  return stream_id_;
}
inline uint64_t PerfDataProto_ThrottleEvent::stream_id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ThrottleEvent.stream_id)
  return _internal_stream_id();
}
inline void PerfDataProto_ThrottleEvent::_internal_set_stream_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void PerfDataProto_ThrottleEvent::set_stream_id(uint64_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ThrottleEvent.stream_id)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 4;
inline bool PerfDataProto_ThrottleEvent::_internal_has_sample_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sample_info_ != nullptr);
  return value;
}
inline bool PerfDataProto_ThrottleEvent::has_sample_info() const {
  return _internal_has_sample_info();
}
inline void PerfDataProto_ThrottleEvent::clear_sample_info() {
  if (sample_info_ != nullptr) sample_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_ThrottleEvent::_internal_sample_info() const {
  const ::metrics::PerfDataProto_SampleInfo* p = sample_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto_SampleInfo&>(
      ::metrics::_PerfDataProto_SampleInfo_default_instance_);
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_ThrottleEvent::sample_info() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ThrottleEvent.sample_info)
  return _internal_sample_info();
}
inline void PerfDataProto_ThrottleEvent::unsafe_arena_set_allocated_sample_info(
    ::metrics::PerfDataProto_SampleInfo* sample_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_info_);
  }
  sample_info_ = sample_info;
  if (sample_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.ThrottleEvent.sample_info)
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_ThrottleEvent::release_sample_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_ThrottleEvent::unsafe_arena_release_sample_info() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.ThrottleEvent.sample_info)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_ThrottleEvent::_internal_mutable_sample_info() {
  _has_bits_[0] |= 0x00000001u;
  if (sample_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_SampleInfo>(GetArenaForAllocation());
    sample_info_ = p;
  }
  return sample_info_;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_ThrottleEvent::mutable_sample_info() {
  ::metrics::PerfDataProto_SampleInfo* _msg = _internal_mutable_sample_info();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.ThrottleEvent.sample_info)
  return _msg;
}
inline void PerfDataProto_ThrottleEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sample_info_;
  }
  if (sample_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sample_info);
    if (message_arena != submessage_arena) {
      sample_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sample_info_ = sample_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.ThrottleEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_BranchStackEntry

// optional uint64 from_ip = 1;
inline bool PerfDataProto_BranchStackEntry::_internal_has_from_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_BranchStackEntry::has_from_ip() const {
  return _internal_has_from_ip();
}
inline void PerfDataProto_BranchStackEntry::clear_from_ip() {
  from_ip_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PerfDataProto_BranchStackEntry::_internal_from_ip() const {
  return from_ip_;
}
inline uint64_t PerfDataProto_BranchStackEntry::from_ip() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.from_ip)
  return _internal_from_ip();
}
inline void PerfDataProto_BranchStackEntry::_internal_set_from_ip(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  from_ip_ = value;
}
inline void PerfDataProto_BranchStackEntry::set_from_ip(uint64_t value) {
  _internal_set_from_ip(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.from_ip)
}

// optional uint64 to_ip = 2;
inline bool PerfDataProto_BranchStackEntry::_internal_has_to_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_BranchStackEntry::has_to_ip() const {
  return _internal_has_to_ip();
}
inline void PerfDataProto_BranchStackEntry::clear_to_ip() {
  to_ip_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t PerfDataProto_BranchStackEntry::_internal_to_ip() const {
  return to_ip_;
}
inline uint64_t PerfDataProto_BranchStackEntry::to_ip() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.to_ip)
  return _internal_to_ip();
}
inline void PerfDataProto_BranchStackEntry::_internal_set_to_ip(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  to_ip_ = value;
}
inline void PerfDataProto_BranchStackEntry::set_to_ip(uint64_t value) {
  _internal_set_to_ip(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.to_ip)
}

// optional bool mispredicted = 3;
inline bool PerfDataProto_BranchStackEntry::_internal_has_mispredicted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_BranchStackEntry::has_mispredicted() const {
  return _internal_has_mispredicted();
}
inline void PerfDataProto_BranchStackEntry::clear_mispredicted() {
  mispredicted_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PerfDataProto_BranchStackEntry::_internal_mispredicted() const {
  return mispredicted_;
}
inline bool PerfDataProto_BranchStackEntry::mispredicted() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.mispredicted)
  return _internal_mispredicted();
}
inline void PerfDataProto_BranchStackEntry::_internal_set_mispredicted(bool value) {
  _has_bits_[0] |= 0x00000004u;
  mispredicted_ = value;
}
inline void PerfDataProto_BranchStackEntry::set_mispredicted(bool value) {
  _internal_set_mispredicted(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.mispredicted)
}

// optional bool predicted = 4;
inline bool PerfDataProto_BranchStackEntry::_internal_has_predicted() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerfDataProto_BranchStackEntry::has_predicted() const {
  return _internal_has_predicted();
}
inline void PerfDataProto_BranchStackEntry::clear_predicted() {
  predicted_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PerfDataProto_BranchStackEntry::_internal_predicted() const {
  return predicted_;
}
inline bool PerfDataProto_BranchStackEntry::predicted() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.predicted)
  return _internal_predicted();
}
inline void PerfDataProto_BranchStackEntry::_internal_set_predicted(bool value) {
  _has_bits_[0] |= 0x00000008u;
  predicted_ = value;
}
inline void PerfDataProto_BranchStackEntry::set_predicted(bool value) {
  _internal_set_predicted(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.predicted)
}

// optional bool in_transaction = 5;
inline bool PerfDataProto_BranchStackEntry::_internal_has_in_transaction() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerfDataProto_BranchStackEntry::has_in_transaction() const {
  return _internal_has_in_transaction();
}
inline void PerfDataProto_BranchStackEntry::clear_in_transaction() {
  in_transaction_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PerfDataProto_BranchStackEntry::_internal_in_transaction() const {
  return in_transaction_;
}
inline bool PerfDataProto_BranchStackEntry::in_transaction() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.in_transaction)
  return _internal_in_transaction();
}
inline void PerfDataProto_BranchStackEntry::_internal_set_in_transaction(bool value) {
  _has_bits_[0] |= 0x00000010u;
  in_transaction_ = value;
}
inline void PerfDataProto_BranchStackEntry::set_in_transaction(bool value) {
  _internal_set_in_transaction(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.in_transaction)
}

// optional bool abort = 6;
inline bool PerfDataProto_BranchStackEntry::_internal_has_abort() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerfDataProto_BranchStackEntry::has_abort() const {
  return _internal_has_abort();
}
inline void PerfDataProto_BranchStackEntry::clear_abort() {
  abort_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PerfDataProto_BranchStackEntry::_internal_abort() const {
  return abort_;
}
inline bool PerfDataProto_BranchStackEntry::abort() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.abort)
  return _internal_abort();
}
inline void PerfDataProto_BranchStackEntry::_internal_set_abort(bool value) {
  _has_bits_[0] |= 0x00000020u;
  abort_ = value;
}
inline void PerfDataProto_BranchStackEntry::set_abort(bool value) {
  _internal_set_abort(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.abort)
}

// optional uint32 cycles = 7;
inline bool PerfDataProto_BranchStackEntry::_internal_has_cycles() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerfDataProto_BranchStackEntry::has_cycles() const {
  return _internal_has_cycles();
}
inline void PerfDataProto_BranchStackEntry::clear_cycles() {
  cycles_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t PerfDataProto_BranchStackEntry::_internal_cycles() const {
  return cycles_;
}
inline uint32_t PerfDataProto_BranchStackEntry::cycles() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.cycles)
  return _internal_cycles();
}
inline void PerfDataProto_BranchStackEntry::_internal_set_cycles(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  cycles_ = value;
}
inline void PerfDataProto_BranchStackEntry::set_cycles(uint32_t value) {
  _internal_set_cycles(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.cycles)
}

// -------------------------------------------------------------------

// PerfDataProto_SampleEvent

// optional uint64 ip = 1;
inline bool PerfDataProto_SampleEvent::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_ip() const {
  return _internal_has_ip();
}
inline void PerfDataProto_SampleEvent::clear_ip() {
  ip_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PerfDataProto_SampleEvent::_internal_ip() const {
  return ip_;
}
inline uint64_t PerfDataProto_SampleEvent::ip() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.ip)
  return _internal_ip();
}
inline void PerfDataProto_SampleEvent::_internal_set_ip(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  ip_ = value;
}
inline void PerfDataProto_SampleEvent::set_ip(uint64_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.ip)
}

// optional uint32 pid = 2;
inline bool PerfDataProto_SampleEvent::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_pid() const {
  return _internal_has_pid();
}
inline void PerfDataProto_SampleEvent::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerfDataProto_SampleEvent::_internal_pid() const {
  return pid_;
}
inline uint32_t PerfDataProto_SampleEvent::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.pid)
  return _internal_pid();
}
inline void PerfDataProto_SampleEvent::_internal_set_pid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
}
inline void PerfDataProto_SampleEvent::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.pid)
}

// optional uint32 tid = 3;
inline bool PerfDataProto_SampleEvent::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_tid() const {
  return _internal_has_tid();
}
inline void PerfDataProto_SampleEvent::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PerfDataProto_SampleEvent::_internal_tid() const {
  return tid_;
}
inline uint32_t PerfDataProto_SampleEvent::tid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.tid)
  return _internal_tid();
}
inline void PerfDataProto_SampleEvent::_internal_set_tid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  tid_ = value;
}
inline void PerfDataProto_SampleEvent::set_tid(uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.tid)
}

// optional uint64 sample_time_ns = 4;
inline bool PerfDataProto_SampleEvent::_internal_has_sample_time_ns() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_sample_time_ns() const {
  return _internal_has_sample_time_ns();
}
inline void PerfDataProto_SampleEvent::clear_sample_time_ns() {
  sample_time_ns_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t PerfDataProto_SampleEvent::_internal_sample_time_ns() const {
  return sample_time_ns_;
}
inline uint64_t PerfDataProto_SampleEvent::sample_time_ns() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.sample_time_ns)
  return _internal_sample_time_ns();
}
inline void PerfDataProto_SampleEvent::_internal_set_sample_time_ns(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  sample_time_ns_ = value;
}
inline void PerfDataProto_SampleEvent::set_sample_time_ns(uint64_t value) {
  _internal_set_sample_time_ns(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.sample_time_ns)
}

// optional uint64 addr = 5;
inline bool PerfDataProto_SampleEvent::_internal_has_addr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_addr() const {
  return _internal_has_addr();
}
inline void PerfDataProto_SampleEvent::clear_addr() {
  addr_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t PerfDataProto_SampleEvent::_internal_addr() const {
  return addr_;
}
inline uint64_t PerfDataProto_SampleEvent::addr() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.addr)
  return _internal_addr();
}
inline void PerfDataProto_SampleEvent::_internal_set_addr(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  addr_ = value;
}
inline void PerfDataProto_SampleEvent::set_addr(uint64_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.addr)
}

// optional uint64 id = 6;
inline bool PerfDataProto_SampleEvent::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_id() const {
  return _internal_has_id();
}
inline void PerfDataProto_SampleEvent::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t PerfDataProto_SampleEvent::_internal_id() const {
  return id_;
}
inline uint64_t PerfDataProto_SampleEvent::id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.id)
  return _internal_id();
}
inline void PerfDataProto_SampleEvent::_internal_set_id(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
}
inline void PerfDataProto_SampleEvent::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.id)
}

// optional uint64 stream_id = 7;
inline bool PerfDataProto_SampleEvent::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void PerfDataProto_SampleEvent::clear_stream_id() {
  stream_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t PerfDataProto_SampleEvent::_internal_stream_id() const {
  return stream_id_;
}
inline uint64_t PerfDataProto_SampleEvent::stream_id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.stream_id)
  return _internal_stream_id();
}
inline void PerfDataProto_SampleEvent::_internal_set_stream_id(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  stream_id_ = value;
}
inline void PerfDataProto_SampleEvent::set_stream_id(uint64_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.stream_id)
}

// optional uint64 period = 8;
inline bool PerfDataProto_SampleEvent::_internal_has_period() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_period() const {
  return _internal_has_period();
}
inline void PerfDataProto_SampleEvent::clear_period() {
  period_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t PerfDataProto_SampleEvent::_internal_period() const {
  return period_;
}
inline uint64_t PerfDataProto_SampleEvent::period() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.period)
  return _internal_period();
}
inline void PerfDataProto_SampleEvent::_internal_set_period(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  period_ = value;
}
inline void PerfDataProto_SampleEvent::set_period(uint64_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.period)
}

// optional uint32 cpu = 9;
inline bool PerfDataProto_SampleEvent::_internal_has_cpu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_cpu() const {
  return _internal_has_cpu();
}
inline void PerfDataProto_SampleEvent::clear_cpu() {
  cpu_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t PerfDataProto_SampleEvent::_internal_cpu() const {
  return cpu_;
}
inline uint32_t PerfDataProto_SampleEvent::cpu() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.cpu)
  return _internal_cpu();
}
inline void PerfDataProto_SampleEvent::_internal_set_cpu(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  cpu_ = value;
}
inline void PerfDataProto_SampleEvent::set_cpu(uint32_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.cpu)
}

// optional uint32 raw_size = 10;
inline bool PerfDataProto_SampleEvent::_internal_has_raw_size() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_raw_size() const {
  return _internal_has_raw_size();
}
inline void PerfDataProto_SampleEvent::clear_raw_size() {
  raw_size_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t PerfDataProto_SampleEvent::_internal_raw_size() const {
  return raw_size_;
}
inline uint32_t PerfDataProto_SampleEvent::raw_size() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.raw_size)
  return _internal_raw_size();
}
inline void PerfDataProto_SampleEvent::_internal_set_raw_size(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  raw_size_ = value;
}
inline void PerfDataProto_SampleEvent::set_raw_size(uint32_t value) {
  _internal_set_raw_size(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.raw_size)
}

// repeated uint64 callchain = 11;
inline int PerfDataProto_SampleEvent::_internal_callchain_size() const {
  return callchain_.size();
}
inline int PerfDataProto_SampleEvent::callchain_size() const {
  return _internal_callchain_size();
}
inline void PerfDataProto_SampleEvent::clear_callchain() {
  callchain_.Clear();
}
inline uint64_t PerfDataProto_SampleEvent::_internal_callchain(int index) const {
  return callchain_.Get(index);
}
inline uint64_t PerfDataProto_SampleEvent::callchain(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.callchain)
  return _internal_callchain(index);
}
inline void PerfDataProto_SampleEvent::set_callchain(int index, uint64_t value) {
  callchain_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.callchain)
}
inline void PerfDataProto_SampleEvent::_internal_add_callchain(uint64_t value) {
  callchain_.Add(value);
}
inline void PerfDataProto_SampleEvent::add_callchain(uint64_t value) {
  _internal_add_callchain(value);
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.SampleEvent.callchain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PerfDataProto_SampleEvent::_internal_callchain() const {
  return callchain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PerfDataProto_SampleEvent::callchain() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.SampleEvent.callchain)
  return _internal_callchain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PerfDataProto_SampleEvent::_internal_mutable_callchain() {
  return &callchain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PerfDataProto_SampleEvent::mutable_callchain() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.SampleEvent.callchain)
  return _internal_mutable_callchain();
}

// repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
inline int PerfDataProto_SampleEvent::_internal_branch_stack_size() const {
  return branch_stack_.size();
}
inline int PerfDataProto_SampleEvent::branch_stack_size() const {
  return _internal_branch_stack_size();
}
inline void PerfDataProto_SampleEvent::clear_branch_stack() {
  branch_stack_.Clear();
}
inline ::metrics::PerfDataProto_BranchStackEntry* PerfDataProto_SampleEvent::mutable_branch_stack(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.SampleEvent.branch_stack)
  return branch_stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_BranchStackEntry >*
PerfDataProto_SampleEvent::mutable_branch_stack() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.SampleEvent.branch_stack)
  return &branch_stack_;
}
inline const ::metrics::PerfDataProto_BranchStackEntry& PerfDataProto_SampleEvent::_internal_branch_stack(int index) const {
  return branch_stack_.Get(index);
}
inline const ::metrics::PerfDataProto_BranchStackEntry& PerfDataProto_SampleEvent::branch_stack(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.branch_stack)
  return _internal_branch_stack(index);
}
inline ::metrics::PerfDataProto_BranchStackEntry* PerfDataProto_SampleEvent::_internal_add_branch_stack() {
  return branch_stack_.Add();
}
inline ::metrics::PerfDataProto_BranchStackEntry* PerfDataProto_SampleEvent::add_branch_stack() {
  ::metrics::PerfDataProto_BranchStackEntry* _add = _internal_add_branch_stack();
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.SampleEvent.branch_stack)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_BranchStackEntry >&
PerfDataProto_SampleEvent::branch_stack() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.SampleEvent.branch_stack)
  return branch_stack_;
}

// optional uint64 weight = 15;
inline bool PerfDataProto_SampleEvent::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_weight() const {
  return _internal_has_weight();
}
inline void PerfDataProto_SampleEvent::clear_weight() {
  weight_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t PerfDataProto_SampleEvent::_internal_weight() const {
  return weight_;
}
inline uint64_t PerfDataProto_SampleEvent::weight() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.weight)
  return _internal_weight();
}
inline void PerfDataProto_SampleEvent::_internal_set_weight(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  weight_ = value;
}
inline void PerfDataProto_SampleEvent::set_weight(uint64_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.weight)
}

// optional uint64 data_src = 16;
inline bool PerfDataProto_SampleEvent::_internal_has_data_src() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_data_src() const {
  return _internal_has_data_src();
}
inline void PerfDataProto_SampleEvent::clear_data_src() {
  data_src_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline uint64_t PerfDataProto_SampleEvent::_internal_data_src() const {
  return data_src_;
}
inline uint64_t PerfDataProto_SampleEvent::data_src() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.data_src)
  return _internal_data_src();
}
inline void PerfDataProto_SampleEvent::_internal_set_data_src(uint64_t value) {
  _has_bits_[0] |= 0x00000800u;
  data_src_ = value;
}
inline void PerfDataProto_SampleEvent::set_data_src(uint64_t value) {
  _internal_set_data_src(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.data_src)
}

// optional uint64 transaction = 17;
inline bool PerfDataProto_SampleEvent::_internal_has_transaction() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PerfDataProto_SampleEvent::has_transaction() const {
  return _internal_has_transaction();
}
inline void PerfDataProto_SampleEvent::clear_transaction() {
  transaction_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00001000u;
}
inline uint64_t PerfDataProto_SampleEvent::_internal_transaction() const {
  return transaction_;
}
inline uint64_t PerfDataProto_SampleEvent::transaction() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.transaction)
  return _internal_transaction();
}
inline void PerfDataProto_SampleEvent::_internal_set_transaction(uint64_t value) {
  _has_bits_[0] |= 0x00001000u;
  transaction_ = value;
}
inline void PerfDataProto_SampleEvent::set_transaction(uint64_t value) {
  _internal_set_transaction(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.transaction)
}

// -------------------------------------------------------------------

// PerfDataProto_ForkEvent

// optional uint32 pid = 1;
inline bool PerfDataProto_ForkEvent::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_ForkEvent::has_pid() const {
  return _internal_has_pid();
}
inline void PerfDataProto_ForkEvent::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerfDataProto_ForkEvent::_internal_pid() const {
  return pid_;
}
inline uint32_t PerfDataProto_ForkEvent::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.pid)
  return _internal_pid();
}
inline void PerfDataProto_ForkEvent::_internal_set_pid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
}
inline void PerfDataProto_ForkEvent::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.pid)
}

// optional uint32 ppid = 2;
inline bool PerfDataProto_ForkEvent::_internal_has_ppid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_ForkEvent::has_ppid() const {
  return _internal_has_ppid();
}
inline void PerfDataProto_ForkEvent::clear_ppid() {
  ppid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PerfDataProto_ForkEvent::_internal_ppid() const {
  return ppid_;
}
inline uint32_t PerfDataProto_ForkEvent::ppid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.ppid)
  return _internal_ppid();
}
inline void PerfDataProto_ForkEvent::_internal_set_ppid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  ppid_ = value;
}
inline void PerfDataProto_ForkEvent::set_ppid(uint32_t value) {
  _internal_set_ppid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.ppid)
}

// optional uint32 tid = 3;
inline bool PerfDataProto_ForkEvent::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerfDataProto_ForkEvent::has_tid() const {
  return _internal_has_tid();
}
inline void PerfDataProto_ForkEvent::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PerfDataProto_ForkEvent::_internal_tid() const {
  return tid_;
}
inline uint32_t PerfDataProto_ForkEvent::tid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.tid)
  return _internal_tid();
}
inline void PerfDataProto_ForkEvent::_internal_set_tid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  tid_ = value;
}
inline void PerfDataProto_ForkEvent::set_tid(uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.tid)
}

// optional uint32 ptid = 4;
inline bool PerfDataProto_ForkEvent::_internal_has_ptid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerfDataProto_ForkEvent::has_ptid() const {
  return _internal_has_ptid();
}
inline void PerfDataProto_ForkEvent::clear_ptid() {
  ptid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PerfDataProto_ForkEvent::_internal_ptid() const {
  return ptid_;
}
inline uint32_t PerfDataProto_ForkEvent::ptid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.ptid)
  return _internal_ptid();
}
inline void PerfDataProto_ForkEvent::_internal_set_ptid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  ptid_ = value;
}
inline void PerfDataProto_ForkEvent::set_ptid(uint32_t value) {
  _internal_set_ptid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.ptid)
}

// optional uint64 fork_time_ns = 5;
inline bool PerfDataProto_ForkEvent::_internal_has_fork_time_ns() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerfDataProto_ForkEvent::has_fork_time_ns() const {
  return _internal_has_fork_time_ns();
}
inline void PerfDataProto_ForkEvent::clear_fork_time_ns() {
  fork_time_ns_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t PerfDataProto_ForkEvent::_internal_fork_time_ns() const {
  return fork_time_ns_;
}
inline uint64_t PerfDataProto_ForkEvent::fork_time_ns() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.fork_time_ns)
  return _internal_fork_time_ns();
}
inline void PerfDataProto_ForkEvent::_internal_set_fork_time_ns(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  fork_time_ns_ = value;
}
inline void PerfDataProto_ForkEvent::set_fork_time_ns(uint64_t value) {
  _internal_set_fork_time_ns(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.fork_time_ns)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
inline bool PerfDataProto_ForkEvent::_internal_has_sample_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sample_info_ != nullptr);
  return value;
}
inline bool PerfDataProto_ForkEvent::has_sample_info() const {
  return _internal_has_sample_info();
}
inline void PerfDataProto_ForkEvent::clear_sample_info() {
  if (sample_info_ != nullptr) sample_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_ForkEvent::_internal_sample_info() const {
  const ::metrics::PerfDataProto_SampleInfo* p = sample_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto_SampleInfo&>(
      ::metrics::_PerfDataProto_SampleInfo_default_instance_);
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_ForkEvent::sample_info() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.sample_info)
  return _internal_sample_info();
}
inline void PerfDataProto_ForkEvent::unsafe_arena_set_allocated_sample_info(
    ::metrics::PerfDataProto_SampleInfo* sample_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_info_);
  }
  sample_info_ = sample_info;
  if (sample_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.ForkEvent.sample_info)
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_ForkEvent::release_sample_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_ForkEvent::unsafe_arena_release_sample_info() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.ForkEvent.sample_info)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_ForkEvent::_internal_mutable_sample_info() {
  _has_bits_[0] |= 0x00000001u;
  if (sample_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_SampleInfo>(GetArenaForAllocation());
    sample_info_ = p;
  }
  return sample_info_;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_ForkEvent::mutable_sample_info() {
  ::metrics::PerfDataProto_SampleInfo* _msg = _internal_mutable_sample_info();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.ForkEvent.sample_info)
  return _msg;
}
inline void PerfDataProto_ForkEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sample_info_;
  }
  if (sample_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sample_info);
    if (message_arena != submessage_arena) {
      sample_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sample_info_ = sample_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.ForkEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_EventHeader

// optional uint32 type = 1;
inline bool PerfDataProto_EventHeader::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_EventHeader::has_type() const {
  return _internal_has_type();
}
inline void PerfDataProto_EventHeader::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PerfDataProto_EventHeader::_internal_type() const {
  return type_;
}
inline uint32_t PerfDataProto_EventHeader::type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.EventHeader.type)
  return _internal_type();
}
inline void PerfDataProto_EventHeader::_internal_set_type(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void PerfDataProto_EventHeader::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.EventHeader.type)
}

// optional uint32 misc = 2;
inline bool PerfDataProto_EventHeader::_internal_has_misc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_EventHeader::has_misc() const {
  return _internal_has_misc();
}
inline void PerfDataProto_EventHeader::clear_misc() {
  misc_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerfDataProto_EventHeader::_internal_misc() const {
  return misc_;
}
inline uint32_t PerfDataProto_EventHeader::misc() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.EventHeader.misc)
  return _internal_misc();
}
inline void PerfDataProto_EventHeader::_internal_set_misc(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  misc_ = value;
}
inline void PerfDataProto_EventHeader::set_misc(uint32_t value) {
  _internal_set_misc(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.EventHeader.misc)
}

// optional uint32 size = 3;
inline bool PerfDataProto_EventHeader::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_EventHeader::has_size() const {
  return _internal_has_size();
}
inline void PerfDataProto_EventHeader::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PerfDataProto_EventHeader::_internal_size() const {
  return size_;
}
inline uint32_t PerfDataProto_EventHeader::size() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.EventHeader.size)
  return _internal_size();
}
inline void PerfDataProto_EventHeader::_internal_set_size(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
}
inline void PerfDataProto_EventHeader::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.EventHeader.size)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfEvent

// optional .metrics.PerfDataProto.EventHeader header = 1;
inline bool PerfDataProto_PerfEvent::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool PerfDataProto_PerfEvent::has_header() const {
  return _internal_has_header();
}
inline void PerfDataProto_PerfEvent::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_EventHeader& PerfDataProto_PerfEvent::_internal_header() const {
  const ::metrics::PerfDataProto_EventHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto_EventHeader&>(
      ::metrics::_PerfDataProto_EventHeader_default_instance_);
}
inline const ::metrics::PerfDataProto_EventHeader& PerfDataProto_PerfEvent::header() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.header)
  return _internal_header();
}
inline void PerfDataProto_PerfEvent::unsafe_arena_set_allocated_header(
    ::metrics::PerfDataProto_EventHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.PerfEvent.header)
}
inline ::metrics::PerfDataProto_EventHeader* PerfDataProto_PerfEvent::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_EventHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto_EventHeader* PerfDataProto_PerfEvent::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.header)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_EventHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_EventHeader* PerfDataProto_PerfEvent::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_EventHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::metrics::PerfDataProto_EventHeader* PerfDataProto_PerfEvent::mutable_header() {
  ::metrics::PerfDataProto_EventHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.header)
  return _msg;
}
inline void PerfDataProto_PerfEvent::set_allocated_header(::metrics::PerfDataProto_EventHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.header)
}

// .metrics.PerfDataProto.MMapEvent mmap_event = 2;
inline bool PerfDataProto_PerfEvent::_internal_has_mmap_event() const {
  return event_type_case() == kMmapEvent;
}
inline bool PerfDataProto_PerfEvent::has_mmap_event() const {
  return _internal_has_mmap_event();
}
inline void PerfDataProto_PerfEvent::set_has_mmap_event() {
  _oneof_case_[0] = kMmapEvent;
}
inline void PerfDataProto_PerfEvent::clear_mmap_event() {
  if (_internal_has_mmap_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_type_.mmap_event_;
    }
    clear_has_event_type();
  }
}
inline ::metrics::PerfDataProto_MMapEvent* PerfDataProto_PerfEvent::release_mmap_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.mmap_event)
  if (_internal_has_mmap_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_MMapEvent* temp = event_type_.mmap_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_type_.mmap_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::metrics::PerfDataProto_MMapEvent& PerfDataProto_PerfEvent::_internal_mmap_event() const {
  return _internal_has_mmap_event()
      ? *event_type_.mmap_event_
      : reinterpret_cast< ::metrics::PerfDataProto_MMapEvent&>(::metrics::_PerfDataProto_MMapEvent_default_instance_);
}
inline const ::metrics::PerfDataProto_MMapEvent& PerfDataProto_PerfEvent::mmap_event() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.mmap_event)
  return _internal_mmap_event();
}
inline ::metrics::PerfDataProto_MMapEvent* PerfDataProto_PerfEvent::unsafe_arena_release_mmap_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:metrics.PerfDataProto.PerfEvent.mmap_event)
  if (_internal_has_mmap_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_MMapEvent* temp = event_type_.mmap_event_;
    event_type_.mmap_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfDataProto_PerfEvent::unsafe_arena_set_allocated_mmap_event(::metrics::PerfDataProto_MMapEvent* mmap_event) {
  clear_event_type();
  if (mmap_event) {
    set_has_mmap_event();
    event_type_.mmap_event_ = mmap_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.PerfEvent.mmap_event)
}
inline ::metrics::PerfDataProto_MMapEvent* PerfDataProto_PerfEvent::_internal_mutable_mmap_event() {
  if (!_internal_has_mmap_event()) {
    clear_event_type();
    set_has_mmap_event();
    event_type_.mmap_event_ = CreateMaybeMessage< ::metrics::PerfDataProto_MMapEvent >(GetArenaForAllocation());
  }
  return event_type_.mmap_event_;
}
inline ::metrics::PerfDataProto_MMapEvent* PerfDataProto_PerfEvent::mutable_mmap_event() {
  ::metrics::PerfDataProto_MMapEvent* _msg = _internal_mutable_mmap_event();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.mmap_event)
  return _msg;
}

// .metrics.PerfDataProto.SampleEvent sample_event = 3;
inline bool PerfDataProto_PerfEvent::_internal_has_sample_event() const {
  return event_type_case() == kSampleEvent;
}
inline bool PerfDataProto_PerfEvent::has_sample_event() const {
  return _internal_has_sample_event();
}
inline void PerfDataProto_PerfEvent::set_has_sample_event() {
  _oneof_case_[0] = kSampleEvent;
}
inline void PerfDataProto_PerfEvent::clear_sample_event() {
  if (_internal_has_sample_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_type_.sample_event_;
    }
    clear_has_event_type();
  }
}
inline ::metrics::PerfDataProto_SampleEvent* PerfDataProto_PerfEvent::release_sample_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.sample_event)
  if (_internal_has_sample_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_SampleEvent* temp = event_type_.sample_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_type_.sample_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::metrics::PerfDataProto_SampleEvent& PerfDataProto_PerfEvent::_internal_sample_event() const {
  return _internal_has_sample_event()
      ? *event_type_.sample_event_
      : reinterpret_cast< ::metrics::PerfDataProto_SampleEvent&>(::metrics::_PerfDataProto_SampleEvent_default_instance_);
}
inline const ::metrics::PerfDataProto_SampleEvent& PerfDataProto_PerfEvent::sample_event() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.sample_event)
  return _internal_sample_event();
}
inline ::metrics::PerfDataProto_SampleEvent* PerfDataProto_PerfEvent::unsafe_arena_release_sample_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:metrics.PerfDataProto.PerfEvent.sample_event)
  if (_internal_has_sample_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_SampleEvent* temp = event_type_.sample_event_;
    event_type_.sample_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfDataProto_PerfEvent::unsafe_arena_set_allocated_sample_event(::metrics::PerfDataProto_SampleEvent* sample_event) {
  clear_event_type();
  if (sample_event) {
    set_has_sample_event();
    event_type_.sample_event_ = sample_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.PerfEvent.sample_event)
}
inline ::metrics::PerfDataProto_SampleEvent* PerfDataProto_PerfEvent::_internal_mutable_sample_event() {
  if (!_internal_has_sample_event()) {
    clear_event_type();
    set_has_sample_event();
    event_type_.sample_event_ = CreateMaybeMessage< ::metrics::PerfDataProto_SampleEvent >(GetArenaForAllocation());
  }
  return event_type_.sample_event_;
}
inline ::metrics::PerfDataProto_SampleEvent* PerfDataProto_PerfEvent::mutable_sample_event() {
  ::metrics::PerfDataProto_SampleEvent* _msg = _internal_mutable_sample_event();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.sample_event)
  return _msg;
}

// .metrics.PerfDataProto.CommEvent comm_event = 4;
inline bool PerfDataProto_PerfEvent::_internal_has_comm_event() const {
  return event_type_case() == kCommEvent;
}
inline bool PerfDataProto_PerfEvent::has_comm_event() const {
  return _internal_has_comm_event();
}
inline void PerfDataProto_PerfEvent::set_has_comm_event() {
  _oneof_case_[0] = kCommEvent;
}
inline void PerfDataProto_PerfEvent::clear_comm_event() {
  if (_internal_has_comm_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_type_.comm_event_;
    }
    clear_has_event_type();
  }
}
inline ::metrics::PerfDataProto_CommEvent* PerfDataProto_PerfEvent::release_comm_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.comm_event)
  if (_internal_has_comm_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_CommEvent* temp = event_type_.comm_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_type_.comm_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::metrics::PerfDataProto_CommEvent& PerfDataProto_PerfEvent::_internal_comm_event() const {
  return _internal_has_comm_event()
      ? *event_type_.comm_event_
      : reinterpret_cast< ::metrics::PerfDataProto_CommEvent&>(::metrics::_PerfDataProto_CommEvent_default_instance_);
}
inline const ::metrics::PerfDataProto_CommEvent& PerfDataProto_PerfEvent::comm_event() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.comm_event)
  return _internal_comm_event();
}
inline ::metrics::PerfDataProto_CommEvent* PerfDataProto_PerfEvent::unsafe_arena_release_comm_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:metrics.PerfDataProto.PerfEvent.comm_event)
  if (_internal_has_comm_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_CommEvent* temp = event_type_.comm_event_;
    event_type_.comm_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfDataProto_PerfEvent::unsafe_arena_set_allocated_comm_event(::metrics::PerfDataProto_CommEvent* comm_event) {
  clear_event_type();
  if (comm_event) {
    set_has_comm_event();
    event_type_.comm_event_ = comm_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.PerfEvent.comm_event)
}
inline ::metrics::PerfDataProto_CommEvent* PerfDataProto_PerfEvent::_internal_mutable_comm_event() {
  if (!_internal_has_comm_event()) {
    clear_event_type();
    set_has_comm_event();
    event_type_.comm_event_ = CreateMaybeMessage< ::metrics::PerfDataProto_CommEvent >(GetArenaForAllocation());
  }
  return event_type_.comm_event_;
}
inline ::metrics::PerfDataProto_CommEvent* PerfDataProto_PerfEvent::mutable_comm_event() {
  ::metrics::PerfDataProto_CommEvent* _msg = _internal_mutable_comm_event();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.comm_event)
  return _msg;
}

// .metrics.PerfDataProto.ForkEvent fork_event = 5;
inline bool PerfDataProto_PerfEvent::_internal_has_fork_event() const {
  return event_type_case() == kForkEvent;
}
inline bool PerfDataProto_PerfEvent::has_fork_event() const {
  return _internal_has_fork_event();
}
inline void PerfDataProto_PerfEvent::set_has_fork_event() {
  _oneof_case_[0] = kForkEvent;
}
inline void PerfDataProto_PerfEvent::clear_fork_event() {
  if (_internal_has_fork_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_type_.fork_event_;
    }
    clear_has_event_type();
  }
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::release_fork_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.fork_event)
  if (_internal_has_fork_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_ForkEvent* temp = event_type_.fork_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_type_.fork_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::metrics::PerfDataProto_ForkEvent& PerfDataProto_PerfEvent::_internal_fork_event() const {
  return _internal_has_fork_event()
      ? *event_type_.fork_event_
      : reinterpret_cast< ::metrics::PerfDataProto_ForkEvent&>(::metrics::_PerfDataProto_ForkEvent_default_instance_);
}
inline const ::metrics::PerfDataProto_ForkEvent& PerfDataProto_PerfEvent::fork_event() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.fork_event)
  return _internal_fork_event();
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::unsafe_arena_release_fork_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:metrics.PerfDataProto.PerfEvent.fork_event)
  if (_internal_has_fork_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_ForkEvent* temp = event_type_.fork_event_;
    event_type_.fork_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfDataProto_PerfEvent::unsafe_arena_set_allocated_fork_event(::metrics::PerfDataProto_ForkEvent* fork_event) {
  clear_event_type();
  if (fork_event) {
    set_has_fork_event();
    event_type_.fork_event_ = fork_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.PerfEvent.fork_event)
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::_internal_mutable_fork_event() {
  if (!_internal_has_fork_event()) {
    clear_event_type();
    set_has_fork_event();
    event_type_.fork_event_ = CreateMaybeMessage< ::metrics::PerfDataProto_ForkEvent >(GetArenaForAllocation());
  }
  return event_type_.fork_event_;
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::mutable_fork_event() {
  ::metrics::PerfDataProto_ForkEvent* _msg = _internal_mutable_fork_event();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.fork_event)
  return _msg;
}

// .metrics.PerfDataProto.ForkEvent exit_event = 9;
inline bool PerfDataProto_PerfEvent::_internal_has_exit_event() const {
  return event_type_case() == kExitEvent;
}
inline bool PerfDataProto_PerfEvent::has_exit_event() const {
  return _internal_has_exit_event();
}
inline void PerfDataProto_PerfEvent::set_has_exit_event() {
  _oneof_case_[0] = kExitEvent;
}
inline void PerfDataProto_PerfEvent::clear_exit_event() {
  if (_internal_has_exit_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_type_.exit_event_;
    }
    clear_has_event_type();
  }
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::release_exit_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.exit_event)
  if (_internal_has_exit_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_ForkEvent* temp = event_type_.exit_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_type_.exit_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::metrics::PerfDataProto_ForkEvent& PerfDataProto_PerfEvent::_internal_exit_event() const {
  return _internal_has_exit_event()
      ? *event_type_.exit_event_
      : reinterpret_cast< ::metrics::PerfDataProto_ForkEvent&>(::metrics::_PerfDataProto_ForkEvent_default_instance_);
}
inline const ::metrics::PerfDataProto_ForkEvent& PerfDataProto_PerfEvent::exit_event() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.exit_event)
  return _internal_exit_event();
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::unsafe_arena_release_exit_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:metrics.PerfDataProto.PerfEvent.exit_event)
  if (_internal_has_exit_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_ForkEvent* temp = event_type_.exit_event_;
    event_type_.exit_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfDataProto_PerfEvent::unsafe_arena_set_allocated_exit_event(::metrics::PerfDataProto_ForkEvent* exit_event) {
  clear_event_type();
  if (exit_event) {
    set_has_exit_event();
    event_type_.exit_event_ = exit_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.PerfEvent.exit_event)
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::_internal_mutable_exit_event() {
  if (!_internal_has_exit_event()) {
    clear_event_type();
    set_has_exit_event();
    event_type_.exit_event_ = CreateMaybeMessage< ::metrics::PerfDataProto_ForkEvent >(GetArenaForAllocation());
  }
  return event_type_.exit_event_;
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::mutable_exit_event() {
  ::metrics::PerfDataProto_ForkEvent* _msg = _internal_mutable_exit_event();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.exit_event)
  return _msg;
}

// .metrics.PerfDataProto.LostEvent lost_event = 6;
inline bool PerfDataProto_PerfEvent::_internal_has_lost_event() const {
  return event_type_case() == kLostEvent;
}
inline bool PerfDataProto_PerfEvent::has_lost_event() const {
  return _internal_has_lost_event();
}
inline void PerfDataProto_PerfEvent::set_has_lost_event() {
  _oneof_case_[0] = kLostEvent;
}
inline void PerfDataProto_PerfEvent::clear_lost_event() {
  if (_internal_has_lost_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_type_.lost_event_;
    }
    clear_has_event_type();
  }
}
inline ::metrics::PerfDataProto_LostEvent* PerfDataProto_PerfEvent::release_lost_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.lost_event)
  if (_internal_has_lost_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_LostEvent* temp = event_type_.lost_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_type_.lost_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::metrics::PerfDataProto_LostEvent& PerfDataProto_PerfEvent::_internal_lost_event() const {
  return _internal_has_lost_event()
      ? *event_type_.lost_event_
      : reinterpret_cast< ::metrics::PerfDataProto_LostEvent&>(::metrics::_PerfDataProto_LostEvent_default_instance_);
}
inline const ::metrics::PerfDataProto_LostEvent& PerfDataProto_PerfEvent::lost_event() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.lost_event)
  return _internal_lost_event();
}
inline ::metrics::PerfDataProto_LostEvent* PerfDataProto_PerfEvent::unsafe_arena_release_lost_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:metrics.PerfDataProto.PerfEvent.lost_event)
  if (_internal_has_lost_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_LostEvent* temp = event_type_.lost_event_;
    event_type_.lost_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfDataProto_PerfEvent::unsafe_arena_set_allocated_lost_event(::metrics::PerfDataProto_LostEvent* lost_event) {
  clear_event_type();
  if (lost_event) {
    set_has_lost_event();
    event_type_.lost_event_ = lost_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.PerfEvent.lost_event)
}
inline ::metrics::PerfDataProto_LostEvent* PerfDataProto_PerfEvent::_internal_mutable_lost_event() {
  if (!_internal_has_lost_event()) {
    clear_event_type();
    set_has_lost_event();
    event_type_.lost_event_ = CreateMaybeMessage< ::metrics::PerfDataProto_LostEvent >(GetArenaForAllocation());
  }
  return event_type_.lost_event_;
}
inline ::metrics::PerfDataProto_LostEvent* PerfDataProto_PerfEvent::mutable_lost_event() {
  ::metrics::PerfDataProto_LostEvent* _msg = _internal_mutable_lost_event();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.lost_event)
  return _msg;
}

// .metrics.PerfDataProto.ThrottleEvent throttle_event = 7;
inline bool PerfDataProto_PerfEvent::_internal_has_throttle_event() const {
  return event_type_case() == kThrottleEvent;
}
inline bool PerfDataProto_PerfEvent::has_throttle_event() const {
  return _internal_has_throttle_event();
}
inline void PerfDataProto_PerfEvent::set_has_throttle_event() {
  _oneof_case_[0] = kThrottleEvent;
}
inline void PerfDataProto_PerfEvent::clear_throttle_event() {
  if (_internal_has_throttle_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_type_.throttle_event_;
    }
    clear_has_event_type();
  }
}
inline ::metrics::PerfDataProto_ThrottleEvent* PerfDataProto_PerfEvent::release_throttle_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.throttle_event)
  if (_internal_has_throttle_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_ThrottleEvent* temp = event_type_.throttle_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_type_.throttle_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::metrics::PerfDataProto_ThrottleEvent& PerfDataProto_PerfEvent::_internal_throttle_event() const {
  return _internal_has_throttle_event()
      ? *event_type_.throttle_event_
      : reinterpret_cast< ::metrics::PerfDataProto_ThrottleEvent&>(::metrics::_PerfDataProto_ThrottleEvent_default_instance_);
}
inline const ::metrics::PerfDataProto_ThrottleEvent& PerfDataProto_PerfEvent::throttle_event() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.throttle_event)
  return _internal_throttle_event();
}
inline ::metrics::PerfDataProto_ThrottleEvent* PerfDataProto_PerfEvent::unsafe_arena_release_throttle_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:metrics.PerfDataProto.PerfEvent.throttle_event)
  if (_internal_has_throttle_event()) {
    clear_has_event_type();
    ::metrics::PerfDataProto_ThrottleEvent* temp = event_type_.throttle_event_;
    event_type_.throttle_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfDataProto_PerfEvent::unsafe_arena_set_allocated_throttle_event(::metrics::PerfDataProto_ThrottleEvent* throttle_event) {
  clear_event_type();
  if (throttle_event) {
    set_has_throttle_event();
    event_type_.throttle_event_ = throttle_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.PerfEvent.throttle_event)
}
inline ::metrics::PerfDataProto_ThrottleEvent* PerfDataProto_PerfEvent::_internal_mutable_throttle_event() {
  if (!_internal_has_throttle_event()) {
    clear_event_type();
    set_has_throttle_event();
    event_type_.throttle_event_ = CreateMaybeMessage< ::metrics::PerfDataProto_ThrottleEvent >(GetArenaForAllocation());
  }
  return event_type_.throttle_event_;
}
inline ::metrics::PerfDataProto_ThrottleEvent* PerfDataProto_PerfEvent::mutable_throttle_event() {
  ::metrics::PerfDataProto_ThrottleEvent* _msg = _internal_mutable_throttle_event();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.throttle_event)
  return _msg;
}

// optional uint64 timestamp = 10;
inline bool PerfDataProto_PerfEvent::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void PerfDataProto_PerfEvent::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t PerfDataProto_PerfEvent::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t PerfDataProto_PerfEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.timestamp)
  return _internal_timestamp();
}
inline void PerfDataProto_PerfEvent::_internal_set_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void PerfDataProto_PerfEvent::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEvent.timestamp)
}

inline bool PerfDataProto_PerfEvent::has_event_type() const {
  return event_type_case() != EVENT_TYPE_NOT_SET;
}
inline void PerfDataProto_PerfEvent::clear_has_event_type() {
  _oneof_case_[0] = EVENT_TYPE_NOT_SET;
}
inline PerfDataProto_PerfEvent::EventTypeCase PerfDataProto_PerfEvent::event_type_case() const {
  return PerfDataProto_PerfEvent::EventTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PerfDataProto_PerfEventStats

// optional uint32 num_events_read = 1;
inline bool PerfDataProto_PerfEventStats::_internal_has_num_events_read() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventStats::has_num_events_read() const {
  return _internal_has_num_events_read();
}
inline void PerfDataProto_PerfEventStats::clear_num_events_read() {
  num_events_read_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PerfDataProto_PerfEventStats::_internal_num_events_read() const {
  return num_events_read_;
}
inline uint32_t PerfDataProto_PerfEventStats::num_events_read() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_events_read)
  return _internal_num_events_read();
}
inline void PerfDataProto_PerfEventStats::_internal_set_num_events_read(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  num_events_read_ = value;
}
inline void PerfDataProto_PerfEventStats::set_num_events_read(uint32_t value) {
  _internal_set_num_events_read(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_events_read)
}

// optional uint32 num_sample_events = 2;
inline bool PerfDataProto_PerfEventStats::_internal_has_num_sample_events() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventStats::has_num_sample_events() const {
  return _internal_has_num_sample_events();
}
inline void PerfDataProto_PerfEventStats::clear_num_sample_events() {
  num_sample_events_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerfDataProto_PerfEventStats::_internal_num_sample_events() const {
  return num_sample_events_;
}
inline uint32_t PerfDataProto_PerfEventStats::num_sample_events() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_sample_events)
  return _internal_num_sample_events();
}
inline void PerfDataProto_PerfEventStats::_internal_set_num_sample_events(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_sample_events_ = value;
}
inline void PerfDataProto_PerfEventStats::set_num_sample_events(uint32_t value) {
  _internal_set_num_sample_events(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_sample_events)
}

// optional uint32 num_mmap_events = 3;
inline bool PerfDataProto_PerfEventStats::_internal_has_num_mmap_events() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventStats::has_num_mmap_events() const {
  return _internal_has_num_mmap_events();
}
inline void PerfDataProto_PerfEventStats::clear_num_mmap_events() {
  num_mmap_events_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PerfDataProto_PerfEventStats::_internal_num_mmap_events() const {
  return num_mmap_events_;
}
inline uint32_t PerfDataProto_PerfEventStats::num_mmap_events() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_mmap_events)
  return _internal_num_mmap_events();
}
inline void PerfDataProto_PerfEventStats::_internal_set_num_mmap_events(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  num_mmap_events_ = value;
}
inline void PerfDataProto_PerfEventStats::set_num_mmap_events(uint32_t value) {
  _internal_set_num_mmap_events(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_mmap_events)
}

// optional uint32 num_fork_events = 4;
inline bool PerfDataProto_PerfEventStats::_internal_has_num_fork_events() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventStats::has_num_fork_events() const {
  return _internal_has_num_fork_events();
}
inline void PerfDataProto_PerfEventStats::clear_num_fork_events() {
  num_fork_events_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PerfDataProto_PerfEventStats::_internal_num_fork_events() const {
  return num_fork_events_;
}
inline uint32_t PerfDataProto_PerfEventStats::num_fork_events() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_fork_events)
  return _internal_num_fork_events();
}
inline void PerfDataProto_PerfEventStats::_internal_set_num_fork_events(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_fork_events_ = value;
}
inline void PerfDataProto_PerfEventStats::set_num_fork_events(uint32_t value) {
  _internal_set_num_fork_events(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_fork_events)
}

// optional uint32 num_exit_events = 5;
inline bool PerfDataProto_PerfEventStats::_internal_has_num_exit_events() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventStats::has_num_exit_events() const {
  return _internal_has_num_exit_events();
}
inline void PerfDataProto_PerfEventStats::clear_num_exit_events() {
  num_exit_events_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PerfDataProto_PerfEventStats::_internal_num_exit_events() const {
  return num_exit_events_;
}
inline uint32_t PerfDataProto_PerfEventStats::num_exit_events() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_exit_events)
  return _internal_num_exit_events();
}
inline void PerfDataProto_PerfEventStats::_internal_set_num_exit_events(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  num_exit_events_ = value;
}
inline void PerfDataProto_PerfEventStats::set_num_exit_events(uint32_t value) {
  _internal_set_num_exit_events(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_exit_events)
}

// optional uint32 num_sample_events_mapped = 6;
inline bool PerfDataProto_PerfEventStats::_internal_has_num_sample_events_mapped() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventStats::has_num_sample_events_mapped() const {
  return _internal_has_num_sample_events_mapped();
}
inline void PerfDataProto_PerfEventStats::clear_num_sample_events_mapped() {
  num_sample_events_mapped_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PerfDataProto_PerfEventStats::_internal_num_sample_events_mapped() const {
  return num_sample_events_mapped_;
}
inline uint32_t PerfDataProto_PerfEventStats::num_sample_events_mapped() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_sample_events_mapped)
  return _internal_num_sample_events_mapped();
}
inline void PerfDataProto_PerfEventStats::_internal_set_num_sample_events_mapped(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  num_sample_events_mapped_ = value;
}
inline void PerfDataProto_PerfEventStats::set_num_sample_events_mapped(uint32_t value) {
  _internal_set_num_sample_events_mapped(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_sample_events_mapped)
}

// optional bool did_remap = 7;
inline bool PerfDataProto_PerfEventStats::_internal_has_did_remap() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerfDataProto_PerfEventStats::has_did_remap() const {
  return _internal_has_did_remap();
}
inline void PerfDataProto_PerfEventStats::clear_did_remap() {
  did_remap_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PerfDataProto_PerfEventStats::_internal_did_remap() const {
  return did_remap_;
}
inline bool PerfDataProto_PerfEventStats::did_remap() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.did_remap)
  return _internal_did_remap();
}
inline void PerfDataProto_PerfEventStats::_internal_set_did_remap(bool value) {
  _has_bits_[0] |= 0x00000040u;
  did_remap_ = value;
}
inline void PerfDataProto_PerfEventStats::set_did_remap(bool value) {
  _internal_set_did_remap(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.did_remap)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfBuildID

// optional uint32 misc = 1;
inline bool PerfDataProto_PerfBuildID::_internal_has_misc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_PerfBuildID::has_misc() const {
  return _internal_has_misc();
}
inline void PerfDataProto_PerfBuildID::clear_misc() {
  misc_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerfDataProto_PerfBuildID::_internal_misc() const {
  return misc_;
}
inline uint32_t PerfDataProto_PerfBuildID::misc() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.misc)
  return _internal_misc();
}
inline void PerfDataProto_PerfBuildID::_internal_set_misc(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  misc_ = value;
}
inline void PerfDataProto_PerfBuildID::set_misc(uint32_t value) {
  _internal_set_misc(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.misc)
}

// optional uint32 pid = 2;
inline bool PerfDataProto_PerfBuildID::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto_PerfBuildID::has_pid() const {
  return _internal_has_pid();
}
inline void PerfDataProto_PerfBuildID::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PerfDataProto_PerfBuildID::_internal_pid() const {
  return pid_;
}
inline uint32_t PerfDataProto_PerfBuildID::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.pid)
  return _internal_pid();
}
inline void PerfDataProto_PerfBuildID::_internal_set_pid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
}
inline void PerfDataProto_PerfBuildID::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.pid)
}

// optional bytes build_id_hash = 3;
inline bool PerfDataProto_PerfBuildID::_internal_has_build_id_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_PerfBuildID::has_build_id_hash() const {
  return _internal_has_build_id_hash();
}
inline void PerfDataProto_PerfBuildID::clear_build_id_hash() {
  build_id_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerfDataProto_PerfBuildID::build_id_hash() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.build_id_hash)
  return _internal_build_id_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerfDataProto_PerfBuildID::set_build_id_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 build_id_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.build_id_hash)
}
inline std::string* PerfDataProto_PerfBuildID::mutable_build_id_hash() {
  std::string* _s = _internal_mutable_build_id_hash();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfBuildID.build_id_hash)
  return _s;
}
inline const std::string& PerfDataProto_PerfBuildID::_internal_build_id_hash() const {
  return build_id_hash_.Get();
}
inline void PerfDataProto_PerfBuildID::_internal_set_build_id_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  build_id_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* PerfDataProto_PerfBuildID::_internal_mutable_build_id_hash() {
  _has_bits_[0] |= 0x00000001u;
  return build_id_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* PerfDataProto_PerfBuildID::release_build_id_hash() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfBuildID.build_id_hash)
  if (!_internal_has_build_id_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = build_id_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (build_id_hash_.IsDefault()) {
    build_id_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PerfDataProto_PerfBuildID::set_allocated_build_id_hash(std::string* build_id_hash) {
  if (build_id_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  build_id_hash_.SetAllocated(build_id_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (build_id_hash_.IsDefault()) {
    build_id_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfBuildID.build_id_hash)
}

// optional uint64 filename_md5_prefix = 5;
inline bool PerfDataProto_PerfBuildID::_internal_has_filename_md5_prefix() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerfDataProto_PerfBuildID::has_filename_md5_prefix() const {
  return _internal_has_filename_md5_prefix();
}
inline void PerfDataProto_PerfBuildID::clear_filename_md5_prefix() {
  filename_md5_prefix_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t PerfDataProto_PerfBuildID::_internal_filename_md5_prefix() const {
  return filename_md5_prefix_;
}
inline uint64_t PerfDataProto_PerfBuildID::filename_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.filename_md5_prefix)
  return _internal_filename_md5_prefix();
}
inline void PerfDataProto_PerfBuildID::_internal_set_filename_md5_prefix(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  filename_md5_prefix_ = value;
}
inline void PerfDataProto_PerfBuildID::set_filename_md5_prefix(uint64_t value) {
  _internal_set_filename_md5_prefix(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.filename_md5_prefix)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfPMUMappingsMetadata

// optional uint32 type = 1;
inline bool PerfDataProto_PerfPMUMappingsMetadata::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfDataProto_PerfPMUMappingsMetadata::has_type() const {
  return _internal_has_type();
}
inline void PerfDataProto_PerfPMUMappingsMetadata::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerfDataProto_PerfPMUMappingsMetadata::_internal_type() const {
  return type_;
}
inline uint32_t PerfDataProto_PerfPMUMappingsMetadata::type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfPMUMappingsMetadata.type)
  return _internal_type();
}
inline void PerfDataProto_PerfPMUMappingsMetadata::_internal_set_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void PerfDataProto_PerfPMUMappingsMetadata::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfPMUMappingsMetadata.type)
}

// optional uint64 name_md5_prefix = 3;
inline bool PerfDataProto_PerfPMUMappingsMetadata::_internal_has_name_md5_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_PerfPMUMappingsMetadata::has_name_md5_prefix() const {
  return _internal_has_name_md5_prefix();
}
inline void PerfDataProto_PerfPMUMappingsMetadata::clear_name_md5_prefix() {
  name_md5_prefix_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PerfDataProto_PerfPMUMappingsMetadata::_internal_name_md5_prefix() const {
  return name_md5_prefix_;
}
inline uint64_t PerfDataProto_PerfPMUMappingsMetadata::name_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfPMUMappingsMetadata.name_md5_prefix)
  return _internal_name_md5_prefix();
}
inline void PerfDataProto_PerfPMUMappingsMetadata::_internal_set_name_md5_prefix(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  name_md5_prefix_ = value;
}
inline void PerfDataProto_PerfPMUMappingsMetadata::set_name_md5_prefix(uint64_t value) {
  _internal_set_name_md5_prefix(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfPMUMappingsMetadata.name_md5_prefix)
}

// -------------------------------------------------------------------

// PerfDataProto_StringMetadata_StringAndMd5sumPrefix

// optional uint64 value_md5_prefix = 2;
inline bool PerfDataProto_StringMetadata_StringAndMd5sumPrefix::_internal_has_value_md5_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfDataProto_StringMetadata_StringAndMd5sumPrefix::has_value_md5_prefix() const {
  return _internal_has_value_md5_prefix();
}
inline void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::clear_value_md5_prefix() {
  value_md5_prefix_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PerfDataProto_StringMetadata_StringAndMd5sumPrefix::_internal_value_md5_prefix() const {
  return value_md5_prefix_;
}
inline uint64_t PerfDataProto_StringMetadata_StringAndMd5sumPrefix::value_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.value_md5_prefix)
  return _internal_value_md5_prefix();
}
inline void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::_internal_set_value_md5_prefix(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  value_md5_prefix_ = value;
}
inline void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::set_value_md5_prefix(uint64_t value) {
  _internal_set_value_md5_prefix(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.value_md5_prefix)
}

// -------------------------------------------------------------------

// PerfDataProto_StringMetadata

// optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
inline bool PerfDataProto_StringMetadata::_internal_has_perf_command_line_whole() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || perf_command_line_whole_ != nullptr);
  return value;
}
inline bool PerfDataProto_StringMetadata::has_perf_command_line_whole() const {
  return _internal_has_perf_command_line_whole();
}
inline void PerfDataProto_StringMetadata::clear_perf_command_line_whole() {
  if (perf_command_line_whole_ != nullptr) perf_command_line_whole_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix& PerfDataProto_StringMetadata::_internal_perf_command_line_whole() const {
  const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* p = perf_command_line_whole_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix&>(
      ::metrics::_PerfDataProto_StringMetadata_StringAndMd5sumPrefix_default_instance_);
}
inline const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix& PerfDataProto_StringMetadata::perf_command_line_whole() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
  return _internal_perf_command_line_whole();
}
inline void PerfDataProto_StringMetadata::unsafe_arena_set_allocated_perf_command_line_whole(
    ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* perf_command_line_whole) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_command_line_whole_);
  }
  perf_command_line_whole_ = perf_command_line_whole;
  if (perf_command_line_whole) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
}
inline ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* PerfDataProto_StringMetadata::release_perf_command_line_whole() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* temp = perf_command_line_whole_;
  perf_command_line_whole_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* PerfDataProto_StringMetadata::unsafe_arena_release_perf_command_line_whole() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* temp = perf_command_line_whole_;
  perf_command_line_whole_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* PerfDataProto_StringMetadata::_internal_mutable_perf_command_line_whole() {
  _has_bits_[0] |= 0x00000001u;
  if (perf_command_line_whole_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix>(GetArenaForAllocation());
    perf_command_line_whole_ = p;
  }
  return perf_command_line_whole_;
}
inline ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* PerfDataProto_StringMetadata::mutable_perf_command_line_whole() {
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* _msg = _internal_mutable_perf_command_line_whole();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
  return _msg;
}
inline void PerfDataProto_StringMetadata::set_allocated_perf_command_line_whole(::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* perf_command_line_whole) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete perf_command_line_whole_;
  }
  if (perf_command_line_whole) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(perf_command_line_whole);
    if (message_arena != submessage_arena) {
      perf_command_line_whole = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_command_line_whole, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  perf_command_line_whole_ = perf_command_line_whole;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
}

// -------------------------------------------------------------------

// PerfDataProto

// repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
inline int PerfDataProto::_internal_file_attrs_size() const {
  return file_attrs_.size();
}
inline int PerfDataProto::file_attrs_size() const {
  return _internal_file_attrs_size();
}
inline void PerfDataProto::clear_file_attrs() {
  file_attrs_.Clear();
}
inline ::metrics::PerfDataProto_PerfFileAttr* PerfDataProto::mutable_file_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.file_attrs)
  return file_attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfFileAttr >*
PerfDataProto::mutable_file_attrs() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.file_attrs)
  return &file_attrs_;
}
inline const ::metrics::PerfDataProto_PerfFileAttr& PerfDataProto::_internal_file_attrs(int index) const {
  return file_attrs_.Get(index);
}
inline const ::metrics::PerfDataProto_PerfFileAttr& PerfDataProto::file_attrs(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.file_attrs)
  return _internal_file_attrs(index);
}
inline ::metrics::PerfDataProto_PerfFileAttr* PerfDataProto::_internal_add_file_attrs() {
  return file_attrs_.Add();
}
inline ::metrics::PerfDataProto_PerfFileAttr* PerfDataProto::add_file_attrs() {
  ::metrics::PerfDataProto_PerfFileAttr* _add = _internal_add_file_attrs();
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.file_attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfFileAttr >&
PerfDataProto::file_attrs() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.file_attrs)
  return file_attrs_;
}

// repeated .metrics.PerfDataProto.PerfEvent events = 2;
inline int PerfDataProto::_internal_events_size() const {
  return events_.size();
}
inline int PerfDataProto::events_size() const {
  return _internal_events_size();
}
inline void PerfDataProto::clear_events() {
  events_.Clear();
}
inline ::metrics::PerfDataProto_PerfEvent* PerfDataProto::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEvent >*
PerfDataProto::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.events)
  return &events_;
}
inline const ::metrics::PerfDataProto_PerfEvent& PerfDataProto::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::metrics::PerfDataProto_PerfEvent& PerfDataProto::events(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.events)
  return _internal_events(index);
}
inline ::metrics::PerfDataProto_PerfEvent* PerfDataProto::_internal_add_events() {
  return events_.Add();
}
inline ::metrics::PerfDataProto_PerfEvent* PerfDataProto::add_events() {
  ::metrics::PerfDataProto_PerfEvent* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEvent >&
PerfDataProto::events() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.events)
  return events_;
}

// repeated .metrics.PerfDataProto.PerfEventType event_types = 10;
inline int PerfDataProto::_internal_event_types_size() const {
  return event_types_.size();
}
inline int PerfDataProto::event_types_size() const {
  return _internal_event_types_size();
}
inline void PerfDataProto::clear_event_types() {
  event_types_.Clear();
}
inline ::metrics::PerfDataProto_PerfEventType* PerfDataProto::mutable_event_types(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.event_types)
  return event_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEventType >*
PerfDataProto::mutable_event_types() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.event_types)
  return &event_types_;
}
inline const ::metrics::PerfDataProto_PerfEventType& PerfDataProto::_internal_event_types(int index) const {
  return event_types_.Get(index);
}
inline const ::metrics::PerfDataProto_PerfEventType& PerfDataProto::event_types(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.event_types)
  return _internal_event_types(index);
}
inline ::metrics::PerfDataProto_PerfEventType* PerfDataProto::_internal_add_event_types() {
  return event_types_.Add();
}
inline ::metrics::PerfDataProto_PerfEventType* PerfDataProto::add_event_types() {
  ::metrics::PerfDataProto_PerfEventType* _add = _internal_add_event_types();
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.event_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEventType >&
PerfDataProto::event_types() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.event_types)
  return event_types_;
}

// optional uint64 timestamp_sec = 3;
inline bool PerfDataProto::_internal_has_timestamp_sec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfDataProto::has_timestamp_sec() const {
  return _internal_has_timestamp_sec();
}
inline void PerfDataProto::clear_timestamp_sec() {
  timestamp_sec_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PerfDataProto::_internal_timestamp_sec() const {
  return timestamp_sec_;
}
inline uint64_t PerfDataProto::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void PerfDataProto::_internal_set_timestamp_sec(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_sec_ = value;
}
inline void PerfDataProto::set_timestamp_sec(uint64_t value) {
  _internal_set_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.timestamp_sec)
}

// optional .metrics.PerfDataProto.PerfEventStats stats = 4;
inline bool PerfDataProto::_internal_has_stats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stats_ != nullptr);
  return value;
}
inline bool PerfDataProto::has_stats() const {
  return _internal_has_stats();
}
inline void PerfDataProto::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_PerfEventStats& PerfDataProto::_internal_stats() const {
  const ::metrics::PerfDataProto_PerfEventStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto_PerfEventStats&>(
      ::metrics::_PerfDataProto_PerfEventStats_default_instance_);
}
inline const ::metrics::PerfDataProto_PerfEventStats& PerfDataProto::stats() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.stats)
  return _internal_stats();
}
inline void PerfDataProto::unsafe_arena_set_allocated_stats(
    ::metrics::PerfDataProto_PerfEventStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.stats)
}
inline ::metrics::PerfDataProto_PerfEventStats* PerfDataProto::release_stats() {
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_PerfEventStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto_PerfEventStats* PerfDataProto::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.stats)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_PerfEventStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_PerfEventStats* PerfDataProto::_internal_mutable_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_PerfEventStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::metrics::PerfDataProto_PerfEventStats* PerfDataProto::mutable_stats() {
  ::metrics::PerfDataProto_PerfEventStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.stats)
  return _msg;
}
inline void PerfDataProto::set_allocated_stats(::metrics::PerfDataProto_PerfEventStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.stats)
}

// repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
inline int PerfDataProto::_internal_build_ids_size() const {
  return build_ids_.size();
}
inline int PerfDataProto::build_ids_size() const {
  return _internal_build_ids_size();
}
inline void PerfDataProto::clear_build_ids() {
  build_ids_.Clear();
}
inline ::metrics::PerfDataProto_PerfBuildID* PerfDataProto::mutable_build_ids(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.build_ids)
  return build_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfBuildID >*
PerfDataProto::mutable_build_ids() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.build_ids)
  return &build_ids_;
}
inline const ::metrics::PerfDataProto_PerfBuildID& PerfDataProto::_internal_build_ids(int index) const {
  return build_ids_.Get(index);
}
inline const ::metrics::PerfDataProto_PerfBuildID& PerfDataProto::build_ids(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.build_ids)
  return _internal_build_ids(index);
}
inline ::metrics::PerfDataProto_PerfBuildID* PerfDataProto::_internal_add_build_ids() {
  return build_ids_.Add();
}
inline ::metrics::PerfDataProto_PerfBuildID* PerfDataProto::add_build_ids() {
  ::metrics::PerfDataProto_PerfBuildID* _add = _internal_add_build_ids();
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.build_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfBuildID >&
PerfDataProto::build_ids() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.build_ids)
  return build_ids_;
}

// repeated .metrics.PerfDataProto.PerfPMUMappingsMetadata pmu_mappings = 15;
inline int PerfDataProto::_internal_pmu_mappings_size() const {
  return pmu_mappings_.size();
}
inline int PerfDataProto::pmu_mappings_size() const {
  return _internal_pmu_mappings_size();
}
inline void PerfDataProto::clear_pmu_mappings() {
  pmu_mappings_.Clear();
}
inline ::metrics::PerfDataProto_PerfPMUMappingsMetadata* PerfDataProto::mutable_pmu_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.pmu_mappings)
  return pmu_mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfPMUMappingsMetadata >*
PerfDataProto::mutable_pmu_mappings() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.pmu_mappings)
  return &pmu_mappings_;
}
inline const ::metrics::PerfDataProto_PerfPMUMappingsMetadata& PerfDataProto::_internal_pmu_mappings(int index) const {
  return pmu_mappings_.Get(index);
}
inline const ::metrics::PerfDataProto_PerfPMUMappingsMetadata& PerfDataProto::pmu_mappings(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.pmu_mappings)
  return _internal_pmu_mappings(index);
}
inline ::metrics::PerfDataProto_PerfPMUMappingsMetadata* PerfDataProto::_internal_add_pmu_mappings() {
  return pmu_mappings_.Add();
}
inline ::metrics::PerfDataProto_PerfPMUMappingsMetadata* PerfDataProto::add_pmu_mappings() {
  ::metrics::PerfDataProto_PerfPMUMappingsMetadata* _add = _internal_add_pmu_mappings();
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.pmu_mappings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfPMUMappingsMetadata >&
PerfDataProto::pmu_mappings() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.pmu_mappings)
  return pmu_mappings_;
}

// optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
inline bool PerfDataProto::_internal_has_string_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || string_metadata_ != nullptr);
  return value;
}
inline bool PerfDataProto::has_string_metadata() const {
  return _internal_has_string_metadata();
}
inline void PerfDataProto::clear_string_metadata() {
  if (string_metadata_ != nullptr) string_metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::metrics::PerfDataProto_StringMetadata& PerfDataProto::_internal_string_metadata() const {
  const ::metrics::PerfDataProto_StringMetadata* p = string_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto_StringMetadata&>(
      ::metrics::_PerfDataProto_StringMetadata_default_instance_);
}
inline const ::metrics::PerfDataProto_StringMetadata& PerfDataProto::string_metadata() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.string_metadata)
  return _internal_string_metadata();
}
inline void PerfDataProto::unsafe_arena_set_allocated_string_metadata(
    ::metrics::PerfDataProto_StringMetadata* string_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_metadata_);
  }
  string_metadata_ = string_metadata;
  if (string_metadata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.PerfDataProto.string_metadata)
}
inline ::metrics::PerfDataProto_StringMetadata* PerfDataProto::release_string_metadata() {
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::PerfDataProto_StringMetadata* temp = string_metadata_;
  string_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto_StringMetadata* PerfDataProto::unsafe_arena_release_string_metadata() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.string_metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::PerfDataProto_StringMetadata* temp = string_metadata_;
  string_metadata_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_StringMetadata* PerfDataProto::_internal_mutable_string_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (string_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_StringMetadata>(GetArenaForAllocation());
    string_metadata_ = p;
  }
  return string_metadata_;
}
inline ::metrics::PerfDataProto_StringMetadata* PerfDataProto::mutable_string_metadata() {
  ::metrics::PerfDataProto_StringMetadata* _msg = _internal_mutable_string_metadata();
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.string_metadata)
  return _msg;
}
inline void PerfDataProto::set_allocated_string_metadata(::metrics::PerfDataProto_StringMetadata* string_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete string_metadata_;
  }
  if (string_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string_metadata);
    if (message_arena != submessage_arena) {
      string_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_metadata_ = string_metadata;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.string_metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_perf_5fdata_2eproto
