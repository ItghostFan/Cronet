// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/source.proto

#include "ukm/source.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ukm {
PROTOBUF_CONSTEXPR UrlInfo::UrlInfo(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , previous_url_count_(0){}
struct UrlInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UrlInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UrlInfoDefaultTypeInternal() {}
  union {
    UrlInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UrlInfoDefaultTypeInternal _UrlInfo_default_instance_;
PROTOBUF_CONSTEXPR NavigationMetadata::NavigationMetadata(
    ::_pbi::ConstantInitialized)
  : same_origin_status_(0)

  , is_renderer_initiated_(false)
  , is_error_page_(false){}
struct NavigationMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavigationMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavigationMetadataDefaultTypeInternal() {}
  union {
    NavigationMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavigationMetadataDefaultTypeInternal _NavigationMetadata_default_instance_;
PROTOBUF_CONSTEXPR Source::Source(
    ::_pbi::ConstantInitialized)
  : urls_()
  , resolved_urls_()
  , deprecated_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , deprecated_initial_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , navigation_metadata_(nullptr)
  , id_(int64_t{0})
  , navigation_time_msec_(int64_t{0})
  , tab_id_(int64_t{0})
  , previous_source_id_(int64_t{0})
  , opener_source_id_(int64_t{0})
  , previous_same_document_source_id_(int64_t{0})
  , is_same_document_navigation_(false)
  , type_(0)

  , android_activity_type_(0)
{}
struct SourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceDefaultTypeInternal() {}
  union {
    Source _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceDefaultTypeInternal _Source_default_instance_;
}  // namespace ukm
namespace ukm {
bool SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SourceType_strings[13] = {};

static const char SourceType_names[] =
  "APP_ID"
  "CHROMEOS_WEBSITE_ID"
  "DEFAULT"
  "DESKTOP_WEB_APP_ID"
  "EXTENSION_ID"
  "HISTORY_ID"
  "NAVIGATION_ID"
  "NO_URL_ID"
  "PAYMENT_APP_ID"
  "REDIRECT_ID"
  "WEBAPK_ID"
  "WEB_IDENTITY_ID"
  "WORKER_ID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SourceType_entries[] = {
  { {SourceType_names + 0, 6}, 2 },
  { {SourceType_names + 6, 19}, 11 },
  { {SourceType_names + 25, 7}, 0 },
  { {SourceType_names + 32, 18}, 6 },
  { {SourceType_names + 50, 12}, 12 },
  { {SourceType_names + 62, 10}, 3 },
  { {SourceType_names + 72, 13}, 1 },
  { {SourceType_names + 85, 9}, 8 },
  { {SourceType_names + 94, 14}, 5 },
  { {SourceType_names + 108, 11}, 9 },
  { {SourceType_names + 119, 9}, 4 },
  { {SourceType_names + 128, 15}, 10 },
  { {SourceType_names + 143, 9}, 7 },
};

static const int SourceType_entries_by_number[] = {
  2, // 0 -> DEFAULT
  6, // 1 -> NAVIGATION_ID
  0, // 2 -> APP_ID
  5, // 3 -> HISTORY_ID
  10, // 4 -> WEBAPK_ID
  8, // 5 -> PAYMENT_APP_ID
  3, // 6 -> DESKTOP_WEB_APP_ID
  12, // 7 -> WORKER_ID
  7, // 8 -> NO_URL_ID
  9, // 9 -> REDIRECT_ID
  11, // 10 -> WEB_IDENTITY_ID
  1, // 11 -> CHROMEOS_WEBSITE_ID
  4, // 12 -> EXTENSION_ID
};

const std::string& SourceType_Name(
    SourceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SourceType_entries,
          SourceType_entries_by_number,
          13, SourceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SourceType_entries,
      SourceType_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SourceType_strings[idx].get();
}
bool SourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SourceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SourceType_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<SourceType>(int_value);
  }
  return success;
}
bool AndroidActivityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidActivityType_strings[6] = {};

static const char AndroidActivityType_names[] =
  "CUSTOM_TAB"
  "PRE_FIRST_TAB"
  "TABBED"
  "TRUSTED_WEB_ACTIVITY"
  "WEB_APK"
  "WEB_APP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidActivityType_entries[] = {
  { {AndroidActivityType_names + 0, 10}, 1 },
  { {AndroidActivityType_names + 10, 13}, 5 },
  { {AndroidActivityType_names + 23, 6}, 0 },
  { {AndroidActivityType_names + 29, 20}, 2 },
  { {AndroidActivityType_names + 49, 7}, 4 },
  { {AndroidActivityType_names + 56, 7}, 3 },
};

static const int AndroidActivityType_entries_by_number[] = {
  2, // 0 -> TABBED
  0, // 1 -> CUSTOM_TAB
  3, // 2 -> TRUSTED_WEB_ACTIVITY
  5, // 3 -> WEB_APP
  4, // 4 -> WEB_APK
  1, // 5 -> PRE_FIRST_TAB
};

const std::string& AndroidActivityType_Name(
    AndroidActivityType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidActivityType_entries,
          AndroidActivityType_entries_by_number,
          6, AndroidActivityType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidActivityType_entries,
      AndroidActivityType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidActivityType_strings[idx].get();
}
bool AndroidActivityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AndroidActivityType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidActivityType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<AndroidActivityType>(int_value);
  }
  return success;
}
bool SameOriginStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SameOriginStatus_strings[3] = {};

static const char SameOriginStatus_names[] =
  "CROSS_ORIGIN"
  "SAME_ORIGIN"
  "SAME_ORIGIN_STATUS_UNSET";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SameOriginStatus_entries[] = {
  { {SameOriginStatus_names + 0, 12}, 2 },
  { {SameOriginStatus_names + 12, 11}, 1 },
  { {SameOriginStatus_names + 23, 24}, 0 },
};

static const int SameOriginStatus_entries_by_number[] = {
  2, // 0 -> SAME_ORIGIN_STATUS_UNSET
  1, // 1 -> SAME_ORIGIN
  0, // 2 -> CROSS_ORIGIN
};

const std::string& SameOriginStatus_Name(
    SameOriginStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SameOriginStatus_entries,
          SameOriginStatus_entries_by_number,
          3, SameOriginStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SameOriginStatus_entries,
      SameOriginStatus_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SameOriginStatus_strings[idx].get();
}
bool SameOriginStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SameOriginStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SameOriginStatus_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SameOriginStatus>(int_value);
  }
  return success;
}
bool UrlScheme_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UrlScheme_strings[8] = {};

static const char UrlScheme_names[] =
  "ABOUT"
  "APP"
  "CHROME"
  "CHROME_EXTENSION"
  "FTP"
  "HTTP"
  "HTTPS"
  "URL_SCHEME_UNSUPPORTED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UrlScheme_entries[] = {
  { {UrlScheme_names + 0, 5}, 4 },
  { {UrlScheme_names + 5, 3}, 7 },
  { {UrlScheme_names + 8, 6}, 5 },
  { {UrlScheme_names + 14, 16}, 6 },
  { {UrlScheme_names + 30, 3}, 3 },
  { {UrlScheme_names + 33, 4}, 1 },
  { {UrlScheme_names + 37, 5}, 2 },
  { {UrlScheme_names + 42, 22}, 0 },
};

static const int UrlScheme_entries_by_number[] = {
  7, // 0 -> URL_SCHEME_UNSUPPORTED
  5, // 1 -> HTTP
  6, // 2 -> HTTPS
  4, // 3 -> FTP
  0, // 4 -> ABOUT
  2, // 5 -> CHROME
  3, // 6 -> CHROME_EXTENSION
  1, // 7 -> APP
};

const std::string& UrlScheme_Name(
    UrlScheme value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UrlScheme_entries,
          UrlScheme_entries_by_number,
          8, UrlScheme_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UrlScheme_entries,
      UrlScheme_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UrlScheme_strings[idx].get();
}
bool UrlScheme_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UrlScheme* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UrlScheme_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<UrlScheme>(int_value);
  }
  return success;
}

// ===================================================================

class UrlInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UrlInfo>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_url_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UrlInfo::UrlInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ukm.UrlInfo)
}
UrlInfo::UrlInfo(const UrlInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  previous_url_count_ = from.previous_url_count_;
  // @@protoc_insertion_point(copy_constructor:ukm.UrlInfo)
}

inline void UrlInfo::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
previous_url_count_ = 0;
}

UrlInfo::~UrlInfo() {
  // @@protoc_insertion_point(destructor:ukm.UrlInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UrlInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void UrlInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UrlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.UrlInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  previous_url_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UrlInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 previous_url_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_previous_url_count(&has_bits);
          previous_url_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UrlInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukm.UrlInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional int32 previous_url_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_previous_url_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukm.UrlInfo)
  return target;
}

size_t UrlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.UrlInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional int32 previous_url_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_previous_url_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UrlInfo*>(
      &from));
}

void UrlInfo::MergeFrom(const UrlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.UrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      previous_url_count_ = from.previous_url_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UrlInfo::CopyFrom(const UrlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.UrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlInfo::IsInitialized() const {
  return true;
}

void UrlInfo::InternalSwap(UrlInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  swap(previous_url_count_, other->previous_url_count_);
}

std::string UrlInfo::GetTypeName() const {
  return "ukm.UrlInfo";
}


// ===================================================================

class NavigationMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationMetadata>()._has_bits_);
  static void set_has_same_origin_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_renderer_initiated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_error_page(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NavigationMetadata::NavigationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ukm.NavigationMetadata)
}
NavigationMetadata::NavigationMetadata(const NavigationMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&same_origin_status_, &from.same_origin_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_error_page_) -
    reinterpret_cast<char*>(&same_origin_status_)) + sizeof(is_error_page_));
  // @@protoc_insertion_point(copy_constructor:ukm.NavigationMetadata)
}

inline void NavigationMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&same_origin_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_error_page_) -
    reinterpret_cast<char*>(&same_origin_status_)) + sizeof(is_error_page_));
}

NavigationMetadata::~NavigationMetadata() {
  // @@protoc_insertion_point(destructor:ukm.NavigationMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NavigationMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NavigationMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NavigationMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.NavigationMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&same_origin_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_error_page_) -
        reinterpret_cast<char*>(&same_origin_status_)) + sizeof(is_error_page_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NavigationMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ukm.SameOriginStatus same_origin_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ukm::SameOriginStatus_IsValid(val))) {
            _internal_set_same_origin_status(static_cast<::ukm::SameOriginStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_renderer_initiated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_renderer_initiated(&has_bits);
          is_renderer_initiated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_error_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_error_page(&has_bits);
          is_error_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NavigationMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukm.NavigationMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ukm.SameOriginStatus same_origin_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_same_origin_status(), target);
  }

  // optional bool is_renderer_initiated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_renderer_initiated(), target);
  }

  // optional bool is_error_page = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_error_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukm.NavigationMetadata)
  return target;
}

size_t NavigationMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.NavigationMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ukm.SameOriginStatus same_origin_status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_same_origin_status());
    }

    // optional bool is_renderer_initiated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_error_page = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NavigationMetadata*>(
      &from));
}

void NavigationMetadata::MergeFrom(const NavigationMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.NavigationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      same_origin_status_ = from.same_origin_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_renderer_initiated_ = from.is_renderer_initiated_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_error_page_ = from.is_error_page_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NavigationMetadata::CopyFrom(const NavigationMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.NavigationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationMetadata::IsInitialized() const {
  return true;
}

void NavigationMetadata::InternalSwap(NavigationMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationMetadata, is_error_page_)
      + sizeof(NavigationMetadata::is_error_page_)
      - PROTOBUF_FIELD_OFFSET(NavigationMetadata, same_origin_status_)>(
          reinterpret_cast<char*>(&same_origin_status_),
          reinterpret_cast<char*>(&other->same_origin_status_));
}

std::string NavigationMetadata::GetTypeName() const {
  return "ukm.NavigationMetadata";
}


// ===================================================================

class Source::_Internal {
 public:
  using HasBits = decltype(std::declval<Source>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tab_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_previous_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_previous_same_document_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_opener_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_same_document_navigation(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ukm::NavigationMetadata& navigation_metadata(const Source* msg);
  static void set_has_navigation_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deprecated_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deprecated_initial_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_android_activity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_navigation_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ukm::NavigationMetadata&
Source::_Internal::navigation_metadata(const Source* msg) {
  return *msg->navigation_metadata_;
}
Source::Source(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  urls_(arena),
  resolved_urls_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ukm.Source)
}
Source::Source(const Source& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      urls_(from.urls_),
      resolved_urls_(from.resolved_urls_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  deprecated_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deprecated_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deprecated_url()) {
    deprecated_url_.Set(from._internal_deprecated_url(), 
      GetArenaForAllocation());
  }
  deprecated_initial_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deprecated_initial_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deprecated_initial_url()) {
    deprecated_initial_url_.Set(from._internal_deprecated_initial_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_navigation_metadata()) {
    navigation_metadata_ = new ::ukm::NavigationMetadata(*from.navigation_metadata_);
  } else {
    navigation_metadata_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&android_activity_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(android_activity_type_));
  // @@protoc_insertion_point(copy_constructor:ukm.Source)
}

inline void Source::SharedCtor() {
deprecated_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deprecated_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deprecated_initial_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deprecated_initial_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&navigation_metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&android_activity_type_) -
    reinterpret_cast<char*>(&navigation_metadata_)) + sizeof(android_activity_type_));
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:ukm.Source)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Source::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deprecated_url_.Destroy();
  deprecated_initial_url_.Destroy();
  if (this != internal_default_instance()) delete navigation_metadata_;
}

void Source::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Source)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  resolved_urls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      deprecated_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      deprecated_initial_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(navigation_metadata_ != nullptr);
      navigation_metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opener_source_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(opener_source_id_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&previous_same_document_source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&android_activity_type_) -
        reinterpret_cast<char*>(&previous_same_document_source_id_)) + sizeof(android_activity_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Source::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string deprecated_url = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deprecated_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 navigation_time_msec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_navigation_time_msec(&has_bits);
          navigation_time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string deprecated_initial_url = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_deprecated_initial_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ukm.UrlInfo urls = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_urls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 tab_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tab_id(&has_bits);
          tab_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 previous_source_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_previous_source_id(&has_bits);
          previous_source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 opener_source_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_opener_source_id(&has_bits);
          opener_source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_same_document_navigation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_same_document_navigation(&has_bits);
          is_same_document_navigation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 previous_same_document_source_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_previous_same_document_source_id(&has_bits);
          previous_same_document_source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ukm.UrlInfo resolved_urls = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resolved_urls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .ukm.SourceType type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ukm::SourceType_IsValid(val))) {
            _internal_set_type(static_cast<::ukm::SourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ukm.NavigationMetadata navigation_metadata = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ukm.AndroidActivityType android_activity_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ukm::AndroidActivityType_IsValid(val))) {
            _internal_set_android_activity_type(static_cast<::ukm::AndroidActivityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Source::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukm.Source)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string deprecated_url = 2 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deprecated_url(), target);
  }

  // optional int64 navigation_time_msec = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_navigation_time_msec(), target);
  }

  // optional string deprecated_initial_url = 6 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_deprecated_initial_url(), target);
  }

  // repeated .ukm.UrlInfo urls = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_urls_size()); i < n; i++) {
    const auto& repfield = this->_internal_urls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 tab_id = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_tab_id(), target);
  }

  // optional int64 previous_source_id = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_previous_source_id(), target);
  }

  // optional int64 opener_source_id = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_opener_source_id(), target);
  }

  // optional bool is_same_document_navigation = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_same_document_navigation(), target);
  }

  // optional int64 previous_same_document_source_id = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_previous_same_document_source_id(), target);
  }

  // repeated .ukm.UrlInfo resolved_urls = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resolved_urls_size()); i < n; i++) {
    const auto& repfield = this->_internal_resolved_urls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .ukm.SourceType type = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_type(), target);
  }

  // optional .ukm.NavigationMetadata navigation_metadata = 17;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::navigation_metadata(this),
        _Internal::navigation_metadata(this).GetCachedSize(), target, stream);
  }

  // optional .ukm.AndroidActivityType android_activity_type = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_android_activity_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukm.Source)
  return target;
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Source)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ukm.UrlInfo urls = 8;
  total_size += 1UL * this->_internal_urls_size();
  for (const auto& msg : this->urls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ukm.UrlInfo resolved_urls = 15;
  total_size += 1UL * this->_internal_resolved_urls_size();
  for (const auto& msg : this->resolved_urls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string deprecated_url = 2 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deprecated_url());
    }

    // optional string deprecated_initial_url = 6 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deprecated_initial_url());
    }

    // optional .ukm.NavigationMetadata navigation_metadata = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navigation_metadata_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

    // optional int64 navigation_time_msec = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_navigation_time_msec());
    }

    // optional int64 tab_id = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tab_id());
    }

    // optional int64 previous_source_id = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_previous_source_id());
    }

    // optional int64 opener_source_id = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_opener_source_id());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int64 previous_same_document_source_id = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_previous_same_document_source_id());
    }

    // optional bool is_same_document_navigation = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional .ukm.SourceType type = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .ukm.AndroidActivityType android_activity_type = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_android_activity_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Source::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Source*>(
      &from));
}

void Source::MergeFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Source)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  resolved_urls_.MergeFrom(from.resolved_urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deprecated_url(from._internal_deprecated_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_deprecated_initial_url(from._internal_deprecated_initial_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_navigation_metadata()->::ukm::NavigationMetadata::MergeFrom(from._internal_navigation_metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      navigation_time_msec_ = from.navigation_time_msec_;
    }
    if (cached_has_bits & 0x00000020u) {
      tab_id_ = from.tab_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      previous_source_id_ = from.previous_source_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      opener_source_id_ = from.opener_source_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      previous_same_document_source_id_ = from.previous_same_document_source_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_same_document_navigation_ = from.is_same_document_navigation_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000800u) {
      android_activity_type_ = from.android_activity_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::InternalSwap(Source* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  urls_.InternalSwap(&other->urls_);
  resolved_urls_.InternalSwap(&other->resolved_urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &deprecated_url_, lhs_arena,
      &other->deprecated_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &deprecated_initial_url_, lhs_arena,
      &other->deprecated_initial_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Source, android_activity_type_)
      + sizeof(Source::android_activity_type_)
      - PROTOBUF_FIELD_OFFSET(Source, navigation_metadata_)>(
          reinterpret_cast<char*>(&navigation_metadata_),
          reinterpret_cast<char*>(&other->navigation_metadata_));
}

std::string Source::GetTypeName() const {
  return "ukm.Source";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ukm::UrlInfo*
Arena::CreateMaybeMessage< ::ukm::UrlInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ukm::UrlInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ukm::NavigationMetadata*
Arena::CreateMaybeMessage< ::ukm::NavigationMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ukm::NavigationMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::ukm::Source*
Arena::CreateMaybeMessage< ::ukm::Source >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ukm::Source >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
