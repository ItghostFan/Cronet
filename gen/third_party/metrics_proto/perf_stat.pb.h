// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf_stat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_perf_5fstat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_perf_5fstat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_perf_5fstat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_perf_5fstat_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class PerfStatProto;
struct PerfStatProtoDefaultTypeInternal;
extern PerfStatProtoDefaultTypeInternal _PerfStatProto_default_instance_;
class PerfStatProto_PerfStatLine;
struct PerfStatProto_PerfStatLineDefaultTypeInternal;
extern PerfStatProto_PerfStatLineDefaultTypeInternal _PerfStatProto_PerfStatLine_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::PerfStatProto* Arena::CreateMaybeMessage<::metrics::PerfStatProto>(Arena*);
template<> ::metrics::PerfStatProto_PerfStatLine* Arena::CreateMaybeMessage<::metrics::PerfStatProto_PerfStatLine>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

// ===================================================================

class PerfStatProto_PerfStatLine final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfStatProto.PerfStatLine) */ {
 public:
  inline PerfStatProto_PerfStatLine() : PerfStatProto_PerfStatLine(nullptr) {}
  ~PerfStatProto_PerfStatLine() override;
  explicit PROTOBUF_CONSTEXPR PerfStatProto_PerfStatLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfStatProto_PerfStatLine(const PerfStatProto_PerfStatLine& from);
  PerfStatProto_PerfStatLine(PerfStatProto_PerfStatLine&& from) noexcept
    : PerfStatProto_PerfStatLine() {
    *this = ::std::move(from);
  }

  inline PerfStatProto_PerfStatLine& operator=(const PerfStatProto_PerfStatLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfStatProto_PerfStatLine& operator=(PerfStatProto_PerfStatLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfStatProto_PerfStatLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfStatProto_PerfStatLine* internal_default_instance() {
    return reinterpret_cast<const PerfStatProto_PerfStatLine*>(
               &_PerfStatProto_PerfStatLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfStatProto_PerfStatLine& a, PerfStatProto_PerfStatLine& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfStatProto_PerfStatLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfStatProto_PerfStatLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfStatProto_PerfStatLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfStatProto_PerfStatLine>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfStatProto_PerfStatLine& from);
  void MergeFrom(const PerfStatProto_PerfStatLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfStatProto_PerfStatLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfStatProto.PerfStatLine";
  }
  protected:
  explicit PerfStatProto_PerfStatLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventNameFieldNumber = 3,
    kTimeMsFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional string event_name = 3;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_name();
  PROTOBUF_NODISCARD std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // optional uint64 time_ms = 1;
  bool has_time_ms() const;
  private:
  bool _internal_has_time_ms() const;
  public:
  void clear_time_ms();
  uint64_t time_ms() const;
  void set_time_ms(uint64_t value);
  private:
  uint64_t _internal_time_ms() const;
  void _internal_set_time_ms(uint64_t value);
  public:

  // optional uint64 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfStatProto.PerfStatLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  uint64_t time_ms_;
  uint64_t count_;
  friend struct ::TableStruct_perf_5fstat_2eproto;
};
// -------------------------------------------------------------------

class PerfStatProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfStatProto) */ {
 public:
  inline PerfStatProto() : PerfStatProto(nullptr) {}
  ~PerfStatProto() override;
  explicit PROTOBUF_CONSTEXPR PerfStatProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfStatProto(const PerfStatProto& from);
  PerfStatProto(PerfStatProto&& from) noexcept
    : PerfStatProto() {
    *this = ::std::move(from);
  }

  inline PerfStatProto& operator=(const PerfStatProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfStatProto& operator=(PerfStatProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerfStatProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfStatProto* internal_default_instance() {
    return reinterpret_cast<const PerfStatProto*>(
               &_PerfStatProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerfStatProto& a, PerfStatProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerfStatProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfStatProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfStatProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfStatProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerfStatProto& from);
  void MergeFrom(const PerfStatProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfStatProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfStatProto";
  }
  protected:
  explicit PerfStatProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfStatProto_PerfStatLine PerfStatLine;

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
    kCommandLineFieldNumber = 2,
  };
  // repeated .metrics.PerfStatProto.PerfStatLine line = 1;
  int line_size() const;
  private:
  int _internal_line_size() const;
  public:
  void clear_line();
  ::metrics::PerfStatProto_PerfStatLine* mutable_line(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfStatProto_PerfStatLine >*
      mutable_line();
  private:
  const ::metrics::PerfStatProto_PerfStatLine& _internal_line(int index) const;
  ::metrics::PerfStatProto_PerfStatLine* _internal_add_line();
  public:
  const ::metrics::PerfStatProto_PerfStatLine& line(int index) const;
  ::metrics::PerfStatProto_PerfStatLine* add_line();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfStatProto_PerfStatLine >&
      line() const;

  // optional string command_line = 2;
  bool has_command_line() const;
  private:
  bool _internal_has_command_line() const;
  public:
  void clear_command_line();
  const std::string& command_line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command_line();
  PROTOBUF_NODISCARD std::string* release_command_line();
  void set_allocated_command_line(std::string* command_line);
  private:
  const std::string& _internal_command_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command_line(const std::string& value);
  std::string* _internal_mutable_command_line();
  public:

  // @@protoc_insertion_point(class_scope:metrics.PerfStatProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfStatProto_PerfStatLine > line_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_line_;
  friend struct ::TableStruct_perf_5fstat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerfStatProto_PerfStatLine

// optional uint64 time_ms = 1;
inline bool PerfStatProto_PerfStatLine::_internal_has_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerfStatProto_PerfStatLine::has_time_ms() const {
  return _internal_has_time_ms();
}
inline void PerfStatProto_PerfStatLine::clear_time_ms() {
  time_ms_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t PerfStatProto_PerfStatLine::_internal_time_ms() const {
  return time_ms_;
}
inline uint64_t PerfStatProto_PerfStatLine::time_ms() const {
  // @@protoc_insertion_point(field_get:metrics.PerfStatProto.PerfStatLine.time_ms)
  return _internal_time_ms();
}
inline void PerfStatProto_PerfStatLine::_internal_set_time_ms(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  time_ms_ = value;
}
inline void PerfStatProto_PerfStatLine::set_time_ms(uint64_t value) {
  _internal_set_time_ms(value);
  // @@protoc_insertion_point(field_set:metrics.PerfStatProto.PerfStatLine.time_ms)
}

// optional uint64 count = 2;
inline bool PerfStatProto_PerfStatLine::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerfStatProto_PerfStatLine::has_count() const {
  return _internal_has_count();
}
inline void PerfStatProto_PerfStatLine::clear_count() {
  count_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PerfStatProto_PerfStatLine::_internal_count() const {
  return count_;
}
inline uint64_t PerfStatProto_PerfStatLine::count() const {
  // @@protoc_insertion_point(field_get:metrics.PerfStatProto.PerfStatLine.count)
  return _internal_count();
}
inline void PerfStatProto_PerfStatLine::_internal_set_count(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void PerfStatProto_PerfStatLine::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:metrics.PerfStatProto.PerfStatLine.count)
}

// optional string event_name = 3;
inline bool PerfStatProto_PerfStatLine::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfStatProto_PerfStatLine::has_event_name() const {
  return _internal_has_event_name();
}
inline void PerfStatProto_PerfStatLine::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerfStatProto_PerfStatLine::event_name() const {
  // @@protoc_insertion_point(field_get:metrics.PerfStatProto.PerfStatLine.event_name)
  return _internal_event_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerfStatProto_PerfStatLine::set_event_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 event_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.PerfStatProto.PerfStatLine.event_name)
}
inline std::string* PerfStatProto_PerfStatLine::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:metrics.PerfStatProto.PerfStatLine.event_name)
  return _s;
}
inline const std::string& PerfStatProto_PerfStatLine::_internal_event_name() const {
  return event_name_.Get();
}
inline void PerfStatProto_PerfStatLine::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PerfStatProto_PerfStatLine::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000001u;
  return event_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PerfStatProto_PerfStatLine::release_event_name() {
  // @@protoc_insertion_point(field_release:metrics.PerfStatProto.PerfStatLine.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = event_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (event_name_.IsDefault()) {
    event_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PerfStatProto_PerfStatLine::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_name_.SetAllocated(event_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (event_name_.IsDefault()) {
    event_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfStatProto.PerfStatLine.event_name)
}

// -------------------------------------------------------------------

// PerfStatProto

// repeated .metrics.PerfStatProto.PerfStatLine line = 1;
inline int PerfStatProto::_internal_line_size() const {
  return line_.size();
}
inline int PerfStatProto::line_size() const {
  return _internal_line_size();
}
inline void PerfStatProto::clear_line() {
  line_.Clear();
}
inline ::metrics::PerfStatProto_PerfStatLine* PerfStatProto::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfStatProto.line)
  return line_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfStatProto_PerfStatLine >*
PerfStatProto::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfStatProto.line)
  return &line_;
}
inline const ::metrics::PerfStatProto_PerfStatLine& PerfStatProto::_internal_line(int index) const {
  return line_.Get(index);
}
inline const ::metrics::PerfStatProto_PerfStatLine& PerfStatProto::line(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfStatProto.line)
  return _internal_line(index);
}
inline ::metrics::PerfStatProto_PerfStatLine* PerfStatProto::_internal_add_line() {
  return line_.Add();
}
inline ::metrics::PerfStatProto_PerfStatLine* PerfStatProto::add_line() {
  ::metrics::PerfStatProto_PerfStatLine* _add = _internal_add_line();
  // @@protoc_insertion_point(field_add:metrics.PerfStatProto.line)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfStatProto_PerfStatLine >&
PerfStatProto::line() const {
  // @@protoc_insertion_point(field_list:metrics.PerfStatProto.line)
  return line_;
}

// optional string command_line = 2;
inline bool PerfStatProto::_internal_has_command_line() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerfStatProto::has_command_line() const {
  return _internal_has_command_line();
}
inline void PerfStatProto::clear_command_line() {
  command_line_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerfStatProto::command_line() const {
  // @@protoc_insertion_point(field_get:metrics.PerfStatProto.command_line)
  return _internal_command_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerfStatProto::set_command_line(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 command_line_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.PerfStatProto.command_line)
}
inline std::string* PerfStatProto::mutable_command_line() {
  std::string* _s = _internal_mutable_command_line();
  // @@protoc_insertion_point(field_mutable:metrics.PerfStatProto.command_line)
  return _s;
}
inline const std::string& PerfStatProto::_internal_command_line() const {
  return command_line_.Get();
}
inline void PerfStatProto::_internal_set_command_line(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_line_.Set(value, GetArenaForAllocation());
}
inline std::string* PerfStatProto::_internal_mutable_command_line() {
  _has_bits_[0] |= 0x00000001u;
  return command_line_.Mutable(GetArenaForAllocation());
}
inline std::string* PerfStatProto::release_command_line() {
  // @@protoc_insertion_point(field_release:metrics.PerfStatProto.command_line)
  if (!_internal_has_command_line()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = command_line_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_line_.IsDefault()) {
    command_line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PerfStatProto::set_allocated_command_line(std::string* command_line) {
  if (command_line != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_line_.SetAllocated(command_line, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_line_.IsDefault()) {
    command_line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfStatProto.command_line)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_perf_5fstat_2eproto
