// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sampled_profile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sampled_5fprofile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sampled_5fprofile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
#include "call_stack_profile.pb.h"
#include "execution_context.pb.h"
#include "perf_data.pb.h"
#include "perf_stat.pb.h"
#include "system_profile.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sampled_5fprofile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sampled_5fprofile_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class SampledProfile;
struct SampledProfileDefaultTypeInternal;
extern SampledProfileDefaultTypeInternal _SampledProfile_default_instance_;
class SampledProfile_ProcessTypesEntry_DoNotUse;
struct SampledProfile_ProcessTypesEntry_DoNotUseDefaultTypeInternal;
extern SampledProfile_ProcessTypesEntry_DoNotUseDefaultTypeInternal _SampledProfile_ProcessTypesEntry_DoNotUse_default_instance_;
class SampledProfile_ThreadTypesEntry_DoNotUse;
struct SampledProfile_ThreadTypesEntry_DoNotUseDefaultTypeInternal;
extern SampledProfile_ThreadTypesEntry_DoNotUseDefaultTypeInternal _SampledProfile_ThreadTypesEntry_DoNotUse_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::SampledProfile* Arena::CreateMaybeMessage<::metrics::SampledProfile>(Arena*);
template<> ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse* Arena::CreateMaybeMessage<::metrics::SampledProfile_ProcessTypesEntry_DoNotUse>(Arena*);
template<> ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse* Arena::CreateMaybeMessage<::metrics::SampledProfile_ThreadTypesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum SampledProfile_TriggerEvent : int {
  SampledProfile_TriggerEvent_UNKNOWN_TRIGGER_EVENT = 0,
  SampledProfile_TriggerEvent_PERIODIC_COLLECTION = 1,
  SampledProfile_TriggerEvent_RESUME_FROM_SUSPEND = 2,
  SampledProfile_TriggerEvent_RESTORE_SESSION = 3,
  SampledProfile_TriggerEvent_PROCESS_STARTUP = 4,
  SampledProfile_TriggerEvent_JANKY_TASK = 5,
  SampledProfile_TriggerEvent_THREAD_HUNG = 6,
  SampledProfile_TriggerEvent_PERIODIC_HEAP_COLLECTION = 7
};
bool SampledProfile_TriggerEvent_IsValid(int value);
constexpr SampledProfile_TriggerEvent SampledProfile_TriggerEvent_TriggerEvent_MIN = SampledProfile_TriggerEvent_UNKNOWN_TRIGGER_EVENT;
constexpr SampledProfile_TriggerEvent SampledProfile_TriggerEvent_TriggerEvent_MAX = SampledProfile_TriggerEvent_PERIODIC_HEAP_COLLECTION;
constexpr int SampledProfile_TriggerEvent_TriggerEvent_ARRAYSIZE = SampledProfile_TriggerEvent_TriggerEvent_MAX + 1;

const std::string& SampledProfile_TriggerEvent_Name(SampledProfile_TriggerEvent value);
template<typename T>
inline const std::string& SampledProfile_TriggerEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SampledProfile_TriggerEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SampledProfile_TriggerEvent_Name.");
  return SampledProfile_TriggerEvent_Name(static_cast<SampledProfile_TriggerEvent>(enum_t_value));
}
bool SampledProfile_TriggerEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SampledProfile_TriggerEvent* value);
// ===================================================================

class SampledProfile_ProcessTypesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<SampledProfile_ProcessTypesEntry_DoNotUse, 
    uint32_t, ::metrics::Process,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<SampledProfile_ProcessTypesEntry_DoNotUse, 
    uint32_t, ::metrics::Process,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> SuperType;
  SampledProfile_ProcessTypesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SampledProfile_ProcessTypesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SampledProfile_ProcessTypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SampledProfile_ProcessTypesEntry_DoNotUse& other);
  static const SampledProfile_ProcessTypesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SampledProfile_ProcessTypesEntry_DoNotUse*>(&_SampledProfile_ProcessTypesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_sampled_5fprofile_2eproto;
};

// -------------------------------------------------------------------

class SampledProfile_ThreadTypesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<SampledProfile_ThreadTypesEntry_DoNotUse, 
    uint32_t, ::metrics::Thread,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<SampledProfile_ThreadTypesEntry_DoNotUse, 
    uint32_t, ::metrics::Thread,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> SuperType;
  SampledProfile_ThreadTypesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SampledProfile_ThreadTypesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SampledProfile_ThreadTypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SampledProfile_ThreadTypesEntry_DoNotUse& other);
  static const SampledProfile_ThreadTypesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SampledProfile_ThreadTypesEntry_DoNotUse*>(&_SampledProfile_ThreadTypesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_sampled_5fprofile_2eproto;
};

// -------------------------------------------------------------------

class SampledProfile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SampledProfile) */ {
 public:
  inline SampledProfile() : SampledProfile(nullptr) {}
  ~SampledProfile() override;
  explicit PROTOBUF_CONSTEXPR SampledProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampledProfile(const SampledProfile& from);
  SampledProfile(SampledProfile&& from) noexcept
    : SampledProfile() {
    *this = ::std::move(from);
  }

  inline SampledProfile& operator=(const SampledProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampledProfile& operator=(SampledProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SampledProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampledProfile* internal_default_instance() {
    return reinterpret_cast<const SampledProfile*>(
               &_SampledProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SampledProfile& a, SampledProfile& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SampledProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampledProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SampledProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SampledProfile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SampledProfile& from);
  void MergeFrom(const SampledProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SampledProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SampledProfile";
  }
  protected:
  explicit SampledProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  typedef SampledProfile_TriggerEvent TriggerEvent;
  static constexpr TriggerEvent UNKNOWN_TRIGGER_EVENT =
    SampledProfile_TriggerEvent_UNKNOWN_TRIGGER_EVENT;
  static constexpr TriggerEvent PERIODIC_COLLECTION =
    SampledProfile_TriggerEvent_PERIODIC_COLLECTION;
  static constexpr TriggerEvent RESUME_FROM_SUSPEND =
    SampledProfile_TriggerEvent_RESUME_FROM_SUSPEND;
  static constexpr TriggerEvent RESTORE_SESSION =
    SampledProfile_TriggerEvent_RESTORE_SESSION;
  static constexpr TriggerEvent PROCESS_STARTUP =
    SampledProfile_TriggerEvent_PROCESS_STARTUP;
  static constexpr TriggerEvent JANKY_TASK =
    SampledProfile_TriggerEvent_JANKY_TASK;
  static constexpr TriggerEvent THREAD_HUNG =
    SampledProfile_TriggerEvent_THREAD_HUNG;
  static constexpr TriggerEvent PERIODIC_HEAP_COLLECTION =
    SampledProfile_TriggerEvent_PERIODIC_HEAP_COLLECTION;
  static inline bool TriggerEvent_IsValid(int value) {
    return SampledProfile_TriggerEvent_IsValid(value);
  }
  static constexpr TriggerEvent TriggerEvent_MIN =
    SampledProfile_TriggerEvent_TriggerEvent_MIN;
  static constexpr TriggerEvent TriggerEvent_MAX =
    SampledProfile_TriggerEvent_TriggerEvent_MAX;
  static constexpr int TriggerEvent_ARRAYSIZE =
    SampledProfile_TriggerEvent_TriggerEvent_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TriggerEvent_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TriggerEvent>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TriggerEvent_Name.");
    return SampledProfile_TriggerEvent_Name(enum_t_value);
  }
  static inline bool TriggerEvent_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TriggerEvent* value) {
    return SampledProfile_TriggerEvent_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProcessTypesFieldNumber = 13,
    kThreadTypesFieldNumber = 14,
    kCpuMaxFrequencyMhzFieldNumber = 15,
    kLacrosPidsFieldNumber = 18,
    kLacrosVersionFieldNumber = 19,
    kPerfDataFieldNumber = 4,
    kCallStackProfileFieldNumber = 9,
    kPerfStatFieldNumber = 10,
    kMsAfterBootFieldNumber = 2,
    kMsAfterLoginFieldNumber = 3,
    kTriggerEventFieldNumber = 1,
    kNumTabsRestoredFieldNumber = 7,
    kSuspendDurationMsFieldNumber = 5,
    kMsAfterResumeFieldNumber = 6,
    kMsAfterRestoreFieldNumber = 8,
    kProcessFieldNumber = 11,
    kThreadFieldNumber = 12,
    kPsiCpuLast10SPctFieldNumber = 16,
    kPsiCpuLast60SPctFieldNumber = 17,
    kLacrosChannelFieldNumber = 20,
  };
  // map<uint32, .metrics.Process> process_types = 13;
  int process_types_size() const;
  private:
  int _internal_process_types_size() const;
  public:
  void clear_process_types();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Process >&
      _internal_process_types() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Process >*
      _internal_mutable_process_types();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Process >&
      process_types() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Process >*
      mutable_process_types();

  // map<uint32, .metrics.Thread> thread_types = 14;
  int thread_types_size() const;
  private:
  int _internal_thread_types_size() const;
  public:
  void clear_thread_types();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Thread >&
      _internal_thread_types() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Thread >*
      _internal_mutable_thread_types();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Thread >&
      thread_types() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Thread >*
      mutable_thread_types();

  // repeated uint32 cpu_max_frequency_mhz = 15;
  int cpu_max_frequency_mhz_size() const;
  private:
  int _internal_cpu_max_frequency_mhz_size() const;
  public:
  void clear_cpu_max_frequency_mhz();
  private:
  uint32_t _internal_cpu_max_frequency_mhz(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cpu_max_frequency_mhz() const;
  void _internal_add_cpu_max_frequency_mhz(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cpu_max_frequency_mhz();
  public:
  uint32_t cpu_max_frequency_mhz(int index) const;
  void set_cpu_max_frequency_mhz(int index, uint32_t value);
  void add_cpu_max_frequency_mhz(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cpu_max_frequency_mhz() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cpu_max_frequency_mhz();

  // repeated uint32 lacros_pids = 18 [packed = true];
  int lacros_pids_size() const;
  private:
  int _internal_lacros_pids_size() const;
  public:
  void clear_lacros_pids();
  private:
  uint32_t _internal_lacros_pids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_lacros_pids() const;
  void _internal_add_lacros_pids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_lacros_pids();
  public:
  uint32_t lacros_pids(int index) const;
  void set_lacros_pids(int index, uint32_t value);
  void add_lacros_pids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      lacros_pids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_lacros_pids();

  // optional string lacros_version = 19;
  bool has_lacros_version() const;
  private:
  bool _internal_has_lacros_version() const;
  public:
  void clear_lacros_version();
  const std::string& lacros_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lacros_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lacros_version();
  PROTOBUF_NODISCARD std::string* release_lacros_version();
  void set_allocated_lacros_version(std::string* lacros_version);
  private:
  const std::string& _internal_lacros_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lacros_version(const std::string& value);
  std::string* _internal_mutable_lacros_version();
  public:

  // optional .metrics.PerfDataProto perf_data = 4;
  bool has_perf_data() const;
  private:
  bool _internal_has_perf_data() const;
  public:
  void clear_perf_data();
  const ::metrics::PerfDataProto& perf_data() const;
  PROTOBUF_NODISCARD ::metrics::PerfDataProto* release_perf_data();
  ::metrics::PerfDataProto* mutable_perf_data();
  void set_allocated_perf_data(::metrics::PerfDataProto* perf_data);
  private:
  const ::metrics::PerfDataProto& _internal_perf_data() const;
  ::metrics::PerfDataProto* _internal_mutable_perf_data();
  public:
  void unsafe_arena_set_allocated_perf_data(
      ::metrics::PerfDataProto* perf_data);
  ::metrics::PerfDataProto* unsafe_arena_release_perf_data();

  // optional .metrics.CallStackProfile call_stack_profile = 9;
  bool has_call_stack_profile() const;
  private:
  bool _internal_has_call_stack_profile() const;
  public:
  void clear_call_stack_profile();
  const ::metrics::CallStackProfile& call_stack_profile() const;
  PROTOBUF_NODISCARD ::metrics::CallStackProfile* release_call_stack_profile();
  ::metrics::CallStackProfile* mutable_call_stack_profile();
  void set_allocated_call_stack_profile(::metrics::CallStackProfile* call_stack_profile);
  private:
  const ::metrics::CallStackProfile& _internal_call_stack_profile() const;
  ::metrics::CallStackProfile* _internal_mutable_call_stack_profile();
  public:
  void unsafe_arena_set_allocated_call_stack_profile(
      ::metrics::CallStackProfile* call_stack_profile);
  ::metrics::CallStackProfile* unsafe_arena_release_call_stack_profile();

  // optional .metrics.PerfStatProto perf_stat = 10;
  bool has_perf_stat() const;
  private:
  bool _internal_has_perf_stat() const;
  public:
  void clear_perf_stat();
  const ::metrics::PerfStatProto& perf_stat() const;
  PROTOBUF_NODISCARD ::metrics::PerfStatProto* release_perf_stat();
  ::metrics::PerfStatProto* mutable_perf_stat();
  void set_allocated_perf_stat(::metrics::PerfStatProto* perf_stat);
  private:
  const ::metrics::PerfStatProto& _internal_perf_stat() const;
  ::metrics::PerfStatProto* _internal_mutable_perf_stat();
  public:
  void unsafe_arena_set_allocated_perf_stat(
      ::metrics::PerfStatProto* perf_stat);
  ::metrics::PerfStatProto* unsafe_arena_release_perf_stat();

  // optional int64 ms_after_boot = 2;
  bool has_ms_after_boot() const;
  private:
  bool _internal_has_ms_after_boot() const;
  public:
  void clear_ms_after_boot();
  int64_t ms_after_boot() const;
  void set_ms_after_boot(int64_t value);
  private:
  int64_t _internal_ms_after_boot() const;
  void _internal_set_ms_after_boot(int64_t value);
  public:

  // optional int64 ms_after_login = 3;
  bool has_ms_after_login() const;
  private:
  bool _internal_has_ms_after_login() const;
  public:
  void clear_ms_after_login();
  int64_t ms_after_login() const;
  void set_ms_after_login(int64_t value);
  private:
  int64_t _internal_ms_after_login() const;
  void _internal_set_ms_after_login(int64_t value);
  public:

  // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
  bool has_trigger_event() const;
  private:
  bool _internal_has_trigger_event() const;
  public:
  void clear_trigger_event();
  ::metrics::SampledProfile_TriggerEvent trigger_event() const;
  void set_trigger_event(::metrics::SampledProfile_TriggerEvent value);
  private:
  ::metrics::SampledProfile_TriggerEvent _internal_trigger_event() const;
  void _internal_set_trigger_event(::metrics::SampledProfile_TriggerEvent value);
  public:

  // optional int32 num_tabs_restored = 7;
  bool has_num_tabs_restored() const;
  private:
  bool _internal_has_num_tabs_restored() const;
  public:
  void clear_num_tabs_restored();
  int32_t num_tabs_restored() const;
  void set_num_tabs_restored(int32_t value);
  private:
  int32_t _internal_num_tabs_restored() const;
  void _internal_set_num_tabs_restored(int32_t value);
  public:

  // optional int64 suspend_duration_ms = 5;
  bool has_suspend_duration_ms() const;
  private:
  bool _internal_has_suspend_duration_ms() const;
  public:
  void clear_suspend_duration_ms();
  int64_t suspend_duration_ms() const;
  void set_suspend_duration_ms(int64_t value);
  private:
  int64_t _internal_suspend_duration_ms() const;
  void _internal_set_suspend_duration_ms(int64_t value);
  public:

  // optional int64 ms_after_resume = 6;
  bool has_ms_after_resume() const;
  private:
  bool _internal_has_ms_after_resume() const;
  public:
  void clear_ms_after_resume();
  int64_t ms_after_resume() const;
  void set_ms_after_resume(int64_t value);
  private:
  int64_t _internal_ms_after_resume() const;
  void _internal_set_ms_after_resume(int64_t value);
  public:

  // optional int64 ms_after_restore = 8;
  bool has_ms_after_restore() const;
  private:
  bool _internal_has_ms_after_restore() const;
  public:
  void clear_ms_after_restore();
  int64_t ms_after_restore() const;
  void set_ms_after_restore(int64_t value);
  private:
  int64_t _internal_ms_after_restore() const;
  void _internal_set_ms_after_restore(int64_t value);
  public:

  // optional .metrics.Process process = 11;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  ::metrics::Process process() const;
  void set_process(::metrics::Process value);
  private:
  ::metrics::Process _internal_process() const;
  void _internal_set_process(::metrics::Process value);
  public:

  // optional .metrics.Thread thread = 12;
  bool has_thread() const;
  private:
  bool _internal_has_thread() const;
  public:
  void clear_thread();
  ::metrics::Thread thread() const;
  void set_thread(::metrics::Thread value);
  private:
  ::metrics::Thread _internal_thread() const;
  void _internal_set_thread(::metrics::Thread value);
  public:

  // optional float psi_cpu_last_10s_pct = 16;
  bool has_psi_cpu_last_10s_pct() const;
  private:
  bool _internal_has_psi_cpu_last_10s_pct() const;
  public:
  void clear_psi_cpu_last_10s_pct();
  float psi_cpu_last_10s_pct() const;
  void set_psi_cpu_last_10s_pct(float value);
  private:
  float _internal_psi_cpu_last_10s_pct() const;
  void _internal_set_psi_cpu_last_10s_pct(float value);
  public:

  // optional float psi_cpu_last_60s_pct = 17;
  bool has_psi_cpu_last_60s_pct() const;
  private:
  bool _internal_has_psi_cpu_last_60s_pct() const;
  public:
  void clear_psi_cpu_last_60s_pct();
  float psi_cpu_last_60s_pct() const;
  void set_psi_cpu_last_60s_pct(float value);
  private:
  float _internal_psi_cpu_last_60s_pct() const;
  void _internal_set_psi_cpu_last_60s_pct(float value);
  public:

  // optional .metrics.SystemProfileProto.Channel lacros_channel = 20;
  bool has_lacros_channel() const;
  private:
  bool _internal_has_lacros_channel() const;
  public:
  void clear_lacros_channel();
  ::metrics::SystemProfileProto_Channel lacros_channel() const;
  void set_lacros_channel(::metrics::SystemProfileProto_Channel value);
  private:
  ::metrics::SystemProfileProto_Channel _internal_lacros_channel() const;
  void _internal_set_lacros_channel(::metrics::SystemProfileProto_Channel value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.SampledProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      SampledProfile_ProcessTypesEntry_DoNotUse,
      uint32_t, ::metrics::Process,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> process_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      SampledProfile_ThreadTypesEntry_DoNotUse,
      uint32_t, ::metrics::Thread,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> thread_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cpu_max_frequency_mhz_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > lacros_pids_;
  mutable std::atomic<int> _lacros_pids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lacros_version_;
  ::metrics::PerfDataProto* perf_data_;
  ::metrics::CallStackProfile* call_stack_profile_;
  ::metrics::PerfStatProto* perf_stat_;
  int64_t ms_after_boot_;
  int64_t ms_after_login_;
  int trigger_event_;
  int32_t num_tabs_restored_;
  int64_t suspend_duration_ms_;
  int64_t ms_after_resume_;
  int64_t ms_after_restore_;
  int process_;
  int thread_;
  float psi_cpu_last_10s_pct_;
  float psi_cpu_last_60s_pct_;
  int lacros_channel_;
  friend struct ::TableStruct_sampled_5fprofile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SampledProfile

// optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
inline bool SampledProfile::_internal_has_trigger_event() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SampledProfile::has_trigger_event() const {
  return _internal_has_trigger_event();
}
inline void SampledProfile::clear_trigger_event() {
  trigger_event_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::metrics::SampledProfile_TriggerEvent SampledProfile::_internal_trigger_event() const {
  return static_cast< ::metrics::SampledProfile_TriggerEvent >(trigger_event_);
}
inline ::metrics::SampledProfile_TriggerEvent SampledProfile::trigger_event() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.trigger_event)
  return _internal_trigger_event();
}
inline void SampledProfile::_internal_set_trigger_event(::metrics::SampledProfile_TriggerEvent value) {
  assert(::metrics::SampledProfile_TriggerEvent_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  trigger_event_ = value;
}
inline void SampledProfile::set_trigger_event(::metrics::SampledProfile_TriggerEvent value) {
  _internal_set_trigger_event(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.trigger_event)
}

// optional .metrics.Process process = 11;
inline bool SampledProfile::_internal_has_process() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SampledProfile::has_process() const {
  return _internal_has_process();
}
inline void SampledProfile::clear_process() {
  process_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::metrics::Process SampledProfile::_internal_process() const {
  return static_cast< ::metrics::Process >(process_);
}
inline ::metrics::Process SampledProfile::process() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.process)
  return _internal_process();
}
inline void SampledProfile::_internal_set_process(::metrics::Process value) {
  assert(::metrics::Process_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  process_ = value;
}
inline void SampledProfile::set_process(::metrics::Process value) {
  _internal_set_process(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.process)
}

// optional .metrics.Thread thread = 12;
inline bool SampledProfile::_internal_has_thread() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SampledProfile::has_thread() const {
  return _internal_has_thread();
}
inline void SampledProfile::clear_thread() {
  thread_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::metrics::Thread SampledProfile::_internal_thread() const {
  return static_cast< ::metrics::Thread >(thread_);
}
inline ::metrics::Thread SampledProfile::thread() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.thread)
  return _internal_thread();
}
inline void SampledProfile::_internal_set_thread(::metrics::Thread value) {
  assert(::metrics::Thread_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  thread_ = value;
}
inline void SampledProfile::set_thread(::metrics::Thread value) {
  _internal_set_thread(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.thread)
}

// map<uint32, .metrics.Process> process_types = 13;
inline int SampledProfile::_internal_process_types_size() const {
  return process_types_.size();
}
inline int SampledProfile::process_types_size() const {
  return _internal_process_types_size();
}
inline void SampledProfile::clear_process_types() {
  process_types_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Process >&
SampledProfile::_internal_process_types() const {
  return process_types_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Process >&
SampledProfile::process_types() const {
  // @@protoc_insertion_point(field_map:metrics.SampledProfile.process_types)
  return _internal_process_types();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Process >*
SampledProfile::_internal_mutable_process_types() {
  return process_types_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Process >*
SampledProfile::mutable_process_types() {
  // @@protoc_insertion_point(field_mutable_map:metrics.SampledProfile.process_types)
  return _internal_mutable_process_types();
}

// repeated uint32 lacros_pids = 18 [packed = true];
inline int SampledProfile::_internal_lacros_pids_size() const {
  return lacros_pids_.size();
}
inline int SampledProfile::lacros_pids_size() const {
  return _internal_lacros_pids_size();
}
inline void SampledProfile::clear_lacros_pids() {
  lacros_pids_.Clear();
}
inline uint32_t SampledProfile::_internal_lacros_pids(int index) const {
  return lacros_pids_.Get(index);
}
inline uint32_t SampledProfile::lacros_pids(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.lacros_pids)
  return _internal_lacros_pids(index);
}
inline void SampledProfile::set_lacros_pids(int index, uint32_t value) {
  lacros_pids_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.lacros_pids)
}
inline void SampledProfile::_internal_add_lacros_pids(uint32_t value) {
  lacros_pids_.Add(value);
}
inline void SampledProfile::add_lacros_pids(uint32_t value) {
  _internal_add_lacros_pids(value);
  // @@protoc_insertion_point(field_add:metrics.SampledProfile.lacros_pids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SampledProfile::_internal_lacros_pids() const {
  return lacros_pids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SampledProfile::lacros_pids() const {
  // @@protoc_insertion_point(field_list:metrics.SampledProfile.lacros_pids)
  return _internal_lacros_pids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SampledProfile::_internal_mutable_lacros_pids() {
  return &lacros_pids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SampledProfile::mutable_lacros_pids() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SampledProfile.lacros_pids)
  return _internal_mutable_lacros_pids();
}

// optional string lacros_version = 19;
inline bool SampledProfile::_internal_has_lacros_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SampledProfile::has_lacros_version() const {
  return _internal_has_lacros_version();
}
inline void SampledProfile::clear_lacros_version() {
  lacros_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SampledProfile::lacros_version() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.lacros_version)
  return _internal_lacros_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SampledProfile::set_lacros_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 lacros_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.lacros_version)
}
inline std::string* SampledProfile::mutable_lacros_version() {
  std::string* _s = _internal_mutable_lacros_version();
  // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.lacros_version)
  return _s;
}
inline const std::string& SampledProfile::_internal_lacros_version() const {
  return lacros_version_.Get();
}
inline void SampledProfile::_internal_set_lacros_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lacros_version_.Set(value, GetArenaForAllocation());
}
inline std::string* SampledProfile::_internal_mutable_lacros_version() {
  _has_bits_[0] |= 0x00000001u;
  return lacros_version_.Mutable(GetArenaForAllocation());
}
inline std::string* SampledProfile::release_lacros_version() {
  // @@protoc_insertion_point(field_release:metrics.SampledProfile.lacros_version)
  if (!_internal_has_lacros_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = lacros_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lacros_version_.IsDefault()) {
    lacros_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SampledProfile::set_allocated_lacros_version(std::string* lacros_version) {
  if (lacros_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lacros_version_.SetAllocated(lacros_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lacros_version_.IsDefault()) {
    lacros_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.lacros_version)
}

// optional .metrics.SystemProfileProto.Channel lacros_channel = 20;
inline bool SampledProfile::_internal_has_lacros_channel() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SampledProfile::has_lacros_channel() const {
  return _internal_has_lacros_channel();
}
inline void SampledProfile::clear_lacros_channel() {
  lacros_channel_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::metrics::SystemProfileProto_Channel SampledProfile::_internal_lacros_channel() const {
  return static_cast< ::metrics::SystemProfileProto_Channel >(lacros_channel_);
}
inline ::metrics::SystemProfileProto_Channel SampledProfile::lacros_channel() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.lacros_channel)
  return _internal_lacros_channel();
}
inline void SampledProfile::_internal_set_lacros_channel(::metrics::SystemProfileProto_Channel value) {
  assert(::metrics::SystemProfileProto_Channel_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  lacros_channel_ = value;
}
inline void SampledProfile::set_lacros_channel(::metrics::SystemProfileProto_Channel value) {
  _internal_set_lacros_channel(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.lacros_channel)
}

// map<uint32, .metrics.Thread> thread_types = 14;
inline int SampledProfile::_internal_thread_types_size() const {
  return thread_types_.size();
}
inline int SampledProfile::thread_types_size() const {
  return _internal_thread_types_size();
}
inline void SampledProfile::clear_thread_types() {
  thread_types_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Thread >&
SampledProfile::_internal_thread_types() const {
  return thread_types_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Thread >&
SampledProfile::thread_types() const {
  // @@protoc_insertion_point(field_map:metrics.SampledProfile.thread_types)
  return _internal_thread_types();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Thread >*
SampledProfile::_internal_mutable_thread_types() {
  return thread_types_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Thread >*
SampledProfile::mutable_thread_types() {
  // @@protoc_insertion_point(field_mutable_map:metrics.SampledProfile.thread_types)
  return _internal_mutable_thread_types();
}

// optional int64 ms_after_boot = 2;
inline bool SampledProfile::_internal_has_ms_after_boot() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SampledProfile::has_ms_after_boot() const {
  return _internal_has_ms_after_boot();
}
inline void SampledProfile::clear_ms_after_boot() {
  ms_after_boot_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t SampledProfile::_internal_ms_after_boot() const {
  return ms_after_boot_;
}
inline int64_t SampledProfile::ms_after_boot() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_boot)
  return _internal_ms_after_boot();
}
inline void SampledProfile::_internal_set_ms_after_boot(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  ms_after_boot_ = value;
}
inline void SampledProfile::set_ms_after_boot(int64_t value) {
  _internal_set_ms_after_boot(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_boot)
}

// optional int64 ms_after_login = 3;
inline bool SampledProfile::_internal_has_ms_after_login() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SampledProfile::has_ms_after_login() const {
  return _internal_has_ms_after_login();
}
inline void SampledProfile::clear_ms_after_login() {
  ms_after_login_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t SampledProfile::_internal_ms_after_login() const {
  return ms_after_login_;
}
inline int64_t SampledProfile::ms_after_login() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_login)
  return _internal_ms_after_login();
}
inline void SampledProfile::_internal_set_ms_after_login(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  ms_after_login_ = value;
}
inline void SampledProfile::set_ms_after_login(int64_t value) {
  _internal_set_ms_after_login(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_login)
}

// optional int64 suspend_duration_ms = 5;
inline bool SampledProfile::_internal_has_suspend_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SampledProfile::has_suspend_duration_ms() const {
  return _internal_has_suspend_duration_ms();
}
inline void SampledProfile::clear_suspend_duration_ms() {
  suspend_duration_ms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000100u;
}
inline int64_t SampledProfile::_internal_suspend_duration_ms() const {
  return suspend_duration_ms_;
}
inline int64_t SampledProfile::suspend_duration_ms() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.suspend_duration_ms)
  return _internal_suspend_duration_ms();
}
inline void SampledProfile::_internal_set_suspend_duration_ms(int64_t value) {
  _has_bits_[0] |= 0x00000100u;
  suspend_duration_ms_ = value;
}
inline void SampledProfile::set_suspend_duration_ms(int64_t value) {
  _internal_set_suspend_duration_ms(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.suspend_duration_ms)
}

// optional int64 ms_after_resume = 6;
inline bool SampledProfile::_internal_has_ms_after_resume() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SampledProfile::has_ms_after_resume() const {
  return _internal_has_ms_after_resume();
}
inline void SampledProfile::clear_ms_after_resume() {
  ms_after_resume_ = int64_t{0};
  _has_bits_[0] &= ~0x00000200u;
}
inline int64_t SampledProfile::_internal_ms_after_resume() const {
  return ms_after_resume_;
}
inline int64_t SampledProfile::ms_after_resume() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_resume)
  return _internal_ms_after_resume();
}
inline void SampledProfile::_internal_set_ms_after_resume(int64_t value) {
  _has_bits_[0] |= 0x00000200u;
  ms_after_resume_ = value;
}
inline void SampledProfile::set_ms_after_resume(int64_t value) {
  _internal_set_ms_after_resume(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_resume)
}

// optional int32 num_tabs_restored = 7;
inline bool SampledProfile::_internal_has_num_tabs_restored() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SampledProfile::has_num_tabs_restored() const {
  return _internal_has_num_tabs_restored();
}
inline void SampledProfile::clear_num_tabs_restored() {
  num_tabs_restored_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t SampledProfile::_internal_num_tabs_restored() const {
  return num_tabs_restored_;
}
inline int32_t SampledProfile::num_tabs_restored() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.num_tabs_restored)
  return _internal_num_tabs_restored();
}
inline void SampledProfile::_internal_set_num_tabs_restored(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  num_tabs_restored_ = value;
}
inline void SampledProfile::set_num_tabs_restored(int32_t value) {
  _internal_set_num_tabs_restored(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.num_tabs_restored)
}

// optional int64 ms_after_restore = 8;
inline bool SampledProfile::_internal_has_ms_after_restore() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SampledProfile::has_ms_after_restore() const {
  return _internal_has_ms_after_restore();
}
inline void SampledProfile::clear_ms_after_restore() {
  ms_after_restore_ = int64_t{0};
  _has_bits_[0] &= ~0x00000400u;
}
inline int64_t SampledProfile::_internal_ms_after_restore() const {
  return ms_after_restore_;
}
inline int64_t SampledProfile::ms_after_restore() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_restore)
  return _internal_ms_after_restore();
}
inline void SampledProfile::_internal_set_ms_after_restore(int64_t value) {
  _has_bits_[0] |= 0x00000400u;
  ms_after_restore_ = value;
}
inline void SampledProfile::set_ms_after_restore(int64_t value) {
  _internal_set_ms_after_restore(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_restore)
}

// optional .metrics.PerfDataProto perf_data = 4;
inline bool SampledProfile::_internal_has_perf_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || perf_data_ != nullptr);
  return value;
}
inline bool SampledProfile::has_perf_data() const {
  return _internal_has_perf_data();
}
inline const ::metrics::PerfDataProto& SampledProfile::_internal_perf_data() const {
  const ::metrics::PerfDataProto* p = perf_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfDataProto&>(
      ::metrics::_PerfDataProto_default_instance_);
}
inline const ::metrics::PerfDataProto& SampledProfile::perf_data() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.perf_data)
  return _internal_perf_data();
}
inline void SampledProfile::unsafe_arena_set_allocated_perf_data(
    ::metrics::PerfDataProto* perf_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_data_);
  }
  perf_data_ = perf_data;
  if (perf_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.SampledProfile.perf_data)
}
inline ::metrics::PerfDataProto* SampledProfile::release_perf_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::PerfDataProto* temp = perf_data_;
  perf_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfDataProto* SampledProfile::unsafe_arena_release_perf_data() {
  // @@protoc_insertion_point(field_release:metrics.SampledProfile.perf_data)
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::PerfDataProto* temp = perf_data_;
  perf_data_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto* SampledProfile::_internal_mutable_perf_data() {
  _has_bits_[0] |= 0x00000002u;
  if (perf_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto>(GetArenaForAllocation());
    perf_data_ = p;
  }
  return perf_data_;
}
inline ::metrics::PerfDataProto* SampledProfile::mutable_perf_data() {
  ::metrics::PerfDataProto* _msg = _internal_mutable_perf_data();
  // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.perf_data)
  return _msg;
}
inline void SampledProfile::set_allocated_perf_data(::metrics::PerfDataProto* perf_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_data_);
  }
  if (perf_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_data));
    if (message_arena != submessage_arena) {
      perf_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  perf_data_ = perf_data;
  // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.perf_data)
}

// optional .metrics.CallStackProfile call_stack_profile = 9;
inline bool SampledProfile::_internal_has_call_stack_profile() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || call_stack_profile_ != nullptr);
  return value;
}
inline bool SampledProfile::has_call_stack_profile() const {
  return _internal_has_call_stack_profile();
}
inline const ::metrics::CallStackProfile& SampledProfile::_internal_call_stack_profile() const {
  const ::metrics::CallStackProfile* p = call_stack_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::CallStackProfile&>(
      ::metrics::_CallStackProfile_default_instance_);
}
inline const ::metrics::CallStackProfile& SampledProfile::call_stack_profile() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.call_stack_profile)
  return _internal_call_stack_profile();
}
inline void SampledProfile::unsafe_arena_set_allocated_call_stack_profile(
    ::metrics::CallStackProfile* call_stack_profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_stack_profile_);
  }
  call_stack_profile_ = call_stack_profile;
  if (call_stack_profile) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.SampledProfile.call_stack_profile)
}
inline ::metrics::CallStackProfile* SampledProfile::release_call_stack_profile() {
  _has_bits_[0] &= ~0x00000004u;
  ::metrics::CallStackProfile* temp = call_stack_profile_;
  call_stack_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::CallStackProfile* SampledProfile::unsafe_arena_release_call_stack_profile() {
  // @@protoc_insertion_point(field_release:metrics.SampledProfile.call_stack_profile)
  _has_bits_[0] &= ~0x00000004u;
  ::metrics::CallStackProfile* temp = call_stack_profile_;
  call_stack_profile_ = nullptr;
  return temp;
}
inline ::metrics::CallStackProfile* SampledProfile::_internal_mutable_call_stack_profile() {
  _has_bits_[0] |= 0x00000004u;
  if (call_stack_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::CallStackProfile>(GetArenaForAllocation());
    call_stack_profile_ = p;
  }
  return call_stack_profile_;
}
inline ::metrics::CallStackProfile* SampledProfile::mutable_call_stack_profile() {
  ::metrics::CallStackProfile* _msg = _internal_mutable_call_stack_profile();
  // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.call_stack_profile)
  return _msg;
}
inline void SampledProfile::set_allocated_call_stack_profile(::metrics::CallStackProfile* call_stack_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_stack_profile_);
  }
  if (call_stack_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_stack_profile));
    if (message_arena != submessage_arena) {
      call_stack_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_stack_profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  call_stack_profile_ = call_stack_profile;
  // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.call_stack_profile)
}

// optional .metrics.PerfStatProto perf_stat = 10;
inline bool SampledProfile::_internal_has_perf_stat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || perf_stat_ != nullptr);
  return value;
}
inline bool SampledProfile::has_perf_stat() const {
  return _internal_has_perf_stat();
}
inline const ::metrics::PerfStatProto& SampledProfile::_internal_perf_stat() const {
  const ::metrics::PerfStatProto* p = perf_stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::PerfStatProto&>(
      ::metrics::_PerfStatProto_default_instance_);
}
inline const ::metrics::PerfStatProto& SampledProfile::perf_stat() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.perf_stat)
  return _internal_perf_stat();
}
inline void SampledProfile::unsafe_arena_set_allocated_perf_stat(
    ::metrics::PerfStatProto* perf_stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_stat_);
  }
  perf_stat_ = perf_stat;
  if (perf_stat) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.SampledProfile.perf_stat)
}
inline ::metrics::PerfStatProto* SampledProfile::release_perf_stat() {
  _has_bits_[0] &= ~0x00000008u;
  ::metrics::PerfStatProto* temp = perf_stat_;
  perf_stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::PerfStatProto* SampledProfile::unsafe_arena_release_perf_stat() {
  // @@protoc_insertion_point(field_release:metrics.SampledProfile.perf_stat)
  _has_bits_[0] &= ~0x00000008u;
  ::metrics::PerfStatProto* temp = perf_stat_;
  perf_stat_ = nullptr;
  return temp;
}
inline ::metrics::PerfStatProto* SampledProfile::_internal_mutable_perf_stat() {
  _has_bits_[0] |= 0x00000008u;
  if (perf_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfStatProto>(GetArenaForAllocation());
    perf_stat_ = p;
  }
  return perf_stat_;
}
inline ::metrics::PerfStatProto* SampledProfile::mutable_perf_stat() {
  ::metrics::PerfStatProto* _msg = _internal_mutable_perf_stat();
  // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.perf_stat)
  return _msg;
}
inline void SampledProfile::set_allocated_perf_stat(::metrics::PerfStatProto* perf_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_stat_);
  }
  if (perf_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_stat));
    if (message_arena != submessage_arena) {
      perf_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_stat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  perf_stat_ = perf_stat;
  // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.perf_stat)
}

// repeated uint32 cpu_max_frequency_mhz = 15;
inline int SampledProfile::_internal_cpu_max_frequency_mhz_size() const {
  return cpu_max_frequency_mhz_.size();
}
inline int SampledProfile::cpu_max_frequency_mhz_size() const {
  return _internal_cpu_max_frequency_mhz_size();
}
inline void SampledProfile::clear_cpu_max_frequency_mhz() {
  cpu_max_frequency_mhz_.Clear();
}
inline uint32_t SampledProfile::_internal_cpu_max_frequency_mhz(int index) const {
  return cpu_max_frequency_mhz_.Get(index);
}
inline uint32_t SampledProfile::cpu_max_frequency_mhz(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.cpu_max_frequency_mhz)
  return _internal_cpu_max_frequency_mhz(index);
}
inline void SampledProfile::set_cpu_max_frequency_mhz(int index, uint32_t value) {
  cpu_max_frequency_mhz_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.cpu_max_frequency_mhz)
}
inline void SampledProfile::_internal_add_cpu_max_frequency_mhz(uint32_t value) {
  cpu_max_frequency_mhz_.Add(value);
}
inline void SampledProfile::add_cpu_max_frequency_mhz(uint32_t value) {
  _internal_add_cpu_max_frequency_mhz(value);
  // @@protoc_insertion_point(field_add:metrics.SampledProfile.cpu_max_frequency_mhz)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SampledProfile::_internal_cpu_max_frequency_mhz() const {
  return cpu_max_frequency_mhz_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SampledProfile::cpu_max_frequency_mhz() const {
  // @@protoc_insertion_point(field_list:metrics.SampledProfile.cpu_max_frequency_mhz)
  return _internal_cpu_max_frequency_mhz();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SampledProfile::_internal_mutable_cpu_max_frequency_mhz() {
  return &cpu_max_frequency_mhz_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SampledProfile::mutable_cpu_max_frequency_mhz() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SampledProfile.cpu_max_frequency_mhz)
  return _internal_mutable_cpu_max_frequency_mhz();
}

// optional float psi_cpu_last_10s_pct = 16;
inline bool SampledProfile::_internal_has_psi_cpu_last_10s_pct() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SampledProfile::has_psi_cpu_last_10s_pct() const {
  return _internal_has_psi_cpu_last_10s_pct();
}
inline void SampledProfile::clear_psi_cpu_last_10s_pct() {
  psi_cpu_last_10s_pct_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float SampledProfile::_internal_psi_cpu_last_10s_pct() const {
  return psi_cpu_last_10s_pct_;
}
inline float SampledProfile::psi_cpu_last_10s_pct() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.psi_cpu_last_10s_pct)
  return _internal_psi_cpu_last_10s_pct();
}
inline void SampledProfile::_internal_set_psi_cpu_last_10s_pct(float value) {
  _has_bits_[0] |= 0x00002000u;
  psi_cpu_last_10s_pct_ = value;
}
inline void SampledProfile::set_psi_cpu_last_10s_pct(float value) {
  _internal_set_psi_cpu_last_10s_pct(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.psi_cpu_last_10s_pct)
}

// optional float psi_cpu_last_60s_pct = 17;
inline bool SampledProfile::_internal_has_psi_cpu_last_60s_pct() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SampledProfile::has_psi_cpu_last_60s_pct() const {
  return _internal_has_psi_cpu_last_60s_pct();
}
inline void SampledProfile::clear_psi_cpu_last_60s_pct() {
  psi_cpu_last_60s_pct_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float SampledProfile::_internal_psi_cpu_last_60s_pct() const {
  return psi_cpu_last_60s_pct_;
}
inline float SampledProfile::psi_cpu_last_60s_pct() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.psi_cpu_last_60s_pct)
  return _internal_psi_cpu_last_60s_pct();
}
inline void SampledProfile::_internal_set_psi_cpu_last_60s_pct(float value) {
  _has_bits_[0] |= 0x00004000u;
  psi_cpu_last_60s_pct_ = value;
}
inline void SampledProfile::set_psi_cpu_last_60s_pct(float value) {
  _internal_set_psi_cpu_last_60s_pct(value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.psi_cpu_last_60s_pct)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::SampledProfile_TriggerEvent> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sampled_5fprofile_2eproto
