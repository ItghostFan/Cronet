// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_demographics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5fdemographics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5fdemographics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5fdemographics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5fdemographics_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class UserDemographicsProto;
struct UserDemographicsProtoDefaultTypeInternal;
extern UserDemographicsProtoDefaultTypeInternal _UserDemographicsProto_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::UserDemographicsProto* Arena::CreateMaybeMessage<::metrics::UserDemographicsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum UserDemographicsProto_Gender : int {
  UserDemographicsProto_Gender_GENDER_UNKNOWN = 0,
  UserDemographicsProto_Gender_GENDER_MALE = 1,
  UserDemographicsProto_Gender_GENDER_FEMALE = 2,
  UserDemographicsProto_Gender_GENDER_CUSTOM_OR_OTHER = 3
};
bool UserDemographicsProto_Gender_IsValid(int value);
constexpr UserDemographicsProto_Gender UserDemographicsProto_Gender_Gender_MIN = UserDemographicsProto_Gender_GENDER_UNKNOWN;
constexpr UserDemographicsProto_Gender UserDemographicsProto_Gender_Gender_MAX = UserDemographicsProto_Gender_GENDER_CUSTOM_OR_OTHER;
constexpr int UserDemographicsProto_Gender_Gender_ARRAYSIZE = UserDemographicsProto_Gender_Gender_MAX + 1;

const std::string& UserDemographicsProto_Gender_Name(UserDemographicsProto_Gender value);
template<typename T>
inline const std::string& UserDemographicsProto_Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserDemographicsProto_Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserDemographicsProto_Gender_Name.");
  return UserDemographicsProto_Gender_Name(static_cast<UserDemographicsProto_Gender>(enum_t_value));
}
bool UserDemographicsProto_Gender_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserDemographicsProto_Gender* value);
// ===================================================================

class UserDemographicsProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.UserDemographicsProto) */ {
 public:
  inline UserDemographicsProto() : UserDemographicsProto(nullptr) {}
  ~UserDemographicsProto() override;
  explicit PROTOBUF_CONSTEXPR UserDemographicsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserDemographicsProto(const UserDemographicsProto& from);
  UserDemographicsProto(UserDemographicsProto&& from) noexcept
    : UserDemographicsProto() {
    *this = ::std::move(from);
  }

  inline UserDemographicsProto& operator=(const UserDemographicsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDemographicsProto& operator=(UserDemographicsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserDemographicsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserDemographicsProto* internal_default_instance() {
    return reinterpret_cast<const UserDemographicsProto*>(
               &_UserDemographicsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserDemographicsProto& a, UserDemographicsProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserDemographicsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDemographicsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserDemographicsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserDemographicsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserDemographicsProto& from);
  void MergeFrom(const UserDemographicsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserDemographicsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.UserDemographicsProto";
  }
  protected:
  explicit UserDemographicsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserDemographicsProto_Gender Gender;
  static constexpr Gender GENDER_UNKNOWN =
    UserDemographicsProto_Gender_GENDER_UNKNOWN;
  static constexpr Gender GENDER_MALE =
    UserDemographicsProto_Gender_GENDER_MALE;
  static constexpr Gender GENDER_FEMALE =
    UserDemographicsProto_Gender_GENDER_FEMALE;
  static constexpr Gender GENDER_CUSTOM_OR_OTHER =
    UserDemographicsProto_Gender_GENDER_CUSTOM_OR_OTHER;
  static inline bool Gender_IsValid(int value) {
    return UserDemographicsProto_Gender_IsValid(value);
  }
  static constexpr Gender Gender_MIN =
    UserDemographicsProto_Gender_Gender_MIN;
  static constexpr Gender Gender_MAX =
    UserDemographicsProto_Gender_Gender_MAX;
  static constexpr int Gender_ARRAYSIZE =
    UserDemographicsProto_Gender_Gender_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Gender_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gender>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gender_Name.");
    return UserDemographicsProto_Gender_Name(enum_t_value);
  }
  static inline bool Gender_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Gender* value) {
    return UserDemographicsProto_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBirthYearFieldNumber = 1,
    kGenderFieldNumber = 2,
  };
  // optional int32 birth_year = 1;
  bool has_birth_year() const;
  private:
  bool _internal_has_birth_year() const;
  public:
  void clear_birth_year();
  int32_t birth_year() const;
  void set_birth_year(int32_t value);
  private:
  int32_t _internal_birth_year() const;
  void _internal_set_birth_year(int32_t value);
  public:

  // optional .metrics.UserDemographicsProto.Gender gender = 2;
  bool has_gender() const;
  private:
  bool _internal_has_gender() const;
  public:
  void clear_gender();
  ::metrics::UserDemographicsProto_Gender gender() const;
  void set_gender(::metrics::UserDemographicsProto_Gender value);
  private:
  ::metrics::UserDemographicsProto_Gender _internal_gender() const;
  void _internal_set_gender(::metrics::UserDemographicsProto_Gender value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.UserDemographicsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t birth_year_;
  int gender_;
  friend struct ::TableStruct_user_5fdemographics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserDemographicsProto

// optional int32 birth_year = 1;
inline bool UserDemographicsProto::_internal_has_birth_year() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserDemographicsProto::has_birth_year() const {
  return _internal_has_birth_year();
}
inline void UserDemographicsProto::clear_birth_year() {
  birth_year_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t UserDemographicsProto::_internal_birth_year() const {
  return birth_year_;
}
inline int32_t UserDemographicsProto::birth_year() const {
  // @@protoc_insertion_point(field_get:metrics.UserDemographicsProto.birth_year)
  return _internal_birth_year();
}
inline void UserDemographicsProto::_internal_set_birth_year(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  birth_year_ = value;
}
inline void UserDemographicsProto::set_birth_year(int32_t value) {
  _internal_set_birth_year(value);
  // @@protoc_insertion_point(field_set:metrics.UserDemographicsProto.birth_year)
}

// optional .metrics.UserDemographicsProto.Gender gender = 2;
inline bool UserDemographicsProto::_internal_has_gender() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserDemographicsProto::has_gender() const {
  return _internal_has_gender();
}
inline void UserDemographicsProto::clear_gender() {
  gender_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::metrics::UserDemographicsProto_Gender UserDemographicsProto::_internal_gender() const {
  return static_cast< ::metrics::UserDemographicsProto_Gender >(gender_);
}
inline ::metrics::UserDemographicsProto_Gender UserDemographicsProto::gender() const {
  // @@protoc_insertion_point(field_get:metrics.UserDemographicsProto.gender)
  return _internal_gender();
}
inline void UserDemographicsProto::_internal_set_gender(::metrics::UserDemographicsProto_Gender value) {
  assert(::metrics::UserDemographicsProto_Gender_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  gender_ = value;
}
inline void UserDemographicsProto::set_gender(::metrics::UserDemographicsProto_Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:metrics.UserDemographicsProto.gender)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::UserDemographicsProto_Gender> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5fdemographics_2eproto
