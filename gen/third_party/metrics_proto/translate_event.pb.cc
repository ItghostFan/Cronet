// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: translate_event.proto

#include "translate_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR TranslateEventProto::TranslateEventProto(
    ::_pbi::ConstantInitialized)
  : language_list_()
  , decision_overrides_()
  , source_language_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , target_language_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , modified_source_language_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , modified_target_language_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , country_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , accept_count_(0)
  , decline_count_(0)
  , ignore_count_(0)
  , ranker_version_(0u)
  , ranker_request_timestamp_sec_(int64_t{0})
  , event_timestamp_sec_(int64_t{0})
  , event_type_(0)

  , ranker_response_(2)
{}
struct TranslateEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranslateEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranslateEventProtoDefaultTypeInternal() {}
  union {
    TranslateEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranslateEventProtoDefaultTypeInternal _TranslateEventProto_default_instance_;
}  // namespace metrics
namespace metrics {
bool TranslateEventProto_RankerResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TranslateEventProto_RankerResponse_strings[3] = {};

static const char TranslateEventProto_RankerResponse_names[] =
  "DONT_SHOW"
  "NOT_QUERIED"
  "SHOW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TranslateEventProto_RankerResponse_entries[] = {
  { {TranslateEventProto_RankerResponse_names + 0, 9}, 1 },
  { {TranslateEventProto_RankerResponse_names + 9, 11}, 2 },
  { {TranslateEventProto_RankerResponse_names + 20, 4}, 0 },
};

static const int TranslateEventProto_RankerResponse_entries_by_number[] = {
  2, // 0 -> SHOW
  0, // 1 -> DONT_SHOW
  1, // 2 -> NOT_QUERIED
};

const std::string& TranslateEventProto_RankerResponse_Name(
    TranslateEventProto_RankerResponse value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TranslateEventProto_RankerResponse_entries,
          TranslateEventProto_RankerResponse_entries_by_number,
          3, TranslateEventProto_RankerResponse_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TranslateEventProto_RankerResponse_entries,
      TranslateEventProto_RankerResponse_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TranslateEventProto_RankerResponse_strings[idx].get();
}
bool TranslateEventProto_RankerResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TranslateEventProto_RankerResponse* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TranslateEventProto_RankerResponse_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TranslateEventProto_RankerResponse>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TranslateEventProto_RankerResponse TranslateEventProto::SHOW;
constexpr TranslateEventProto_RankerResponse TranslateEventProto::DONT_SHOW;
constexpr TranslateEventProto_RankerResponse TranslateEventProto::NOT_QUERIED;
constexpr TranslateEventProto_RankerResponse TranslateEventProto::RankerResponse_MIN;
constexpr TranslateEventProto_RankerResponse TranslateEventProto::RankerResponse_MAX;
constexpr int TranslateEventProto::RankerResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool TranslateEventProto_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TranslateEventProto_EventType_strings[28] = {};

static const char TranslateEventProto_EventType_names[] =
  "AUTOMATICALLY_TRANSLATED"
  "AUTO_TRANSLATION_BY_LINK"
  "AUTO_TRANSLATION_BY_PREF"
  "BROWSER_WINDOW_IS_INVALID"
  "BROWSER_WINDOW_IS_MINIMIZED"
  "BROWSER_WINDOW_NOT_ACTIVE"
  "DISABLED_BY_PREF"
  "DISABLED_BY_RANKER"
  "EDITABLE_FIELD_IS_ACTIVE"
  "INITIALIZATION_ERROR"
  "LANGUAGE_DISABLED_BY_AUTO_BLACKLIST"
  "LANGUAGE_DISABLED_BY_USER_CONFIG"
  "LANGUAGE_IN_ULP"
  "MATCHES_PREVIOUS_LANGUAGE"
  "UNKNOWN"
  "UNSUPPORTED_LANGUAGE"
  "UNSUPPORTED_URL"
  "URL_DISABLED_BY_USER_CONFIG"
  "USER_ACCEPT"
  "USER_ALWAYS_TRANSLATE_LANGUAGE"
  "USER_CONTEXT_MENU_TRANSLATE"
  "USER_DECLINE"
  "USER_DISMISS"
  "USER_IGNORE"
  "USER_NEVER_TRANSLATE_LANGUAGE"
  "USER_NEVER_TRANSLATE_SITE"
  "USER_REVERT"
  "WEB_CONTENTS_NOT_ACTIVE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TranslateEventProto_EventType_entries[] = {
  { {TranslateEventProto_EventType_names + 0, 24}, 10 },
  { {TranslateEventProto_EventType_names + 24, 24}, 26 },
  { {TranslateEventProto_EventType_names + 48, 24}, 25 },
  { {TranslateEventProto_EventType_names + 72, 25}, 19 },
  { {TranslateEventProto_EventType_names + 97, 27}, 21 },
  { {TranslateEventProto_EventType_names + 124, 25}, 20 },
  { {TranslateEventProto_EventType_names + 149, 16}, 11 },
  { {TranslateEventProto_EventType_names + 165, 18}, 15 },
  { {TranslateEventProto_EventType_names + 183, 24}, 23 },
  { {TranslateEventProto_EventType_names + 207, 20}, 27 },
  { {TranslateEventProto_EventType_names + 227, 35}, 14 },
  { {TranslateEventProto_EventType_names + 262, 32}, 12 },
  { {TranslateEventProto_EventType_names + 294, 15}, 24 },
  { {TranslateEventProto_EventType_names + 309, 25}, 18 },
  { {TranslateEventProto_EventType_names + 334, 7}, 0 },
  { {TranslateEventProto_EventType_names + 341, 20}, 16 },
  { {TranslateEventProto_EventType_names + 361, 15}, 17 },
  { {TranslateEventProto_EventType_names + 376, 27}, 13 },
  { {TranslateEventProto_EventType_names + 403, 11}, 2 },
  { {TranslateEventProto_EventType_names + 414, 30}, 7 },
  { {TranslateEventProto_EventType_names + 444, 27}, 8 },
  { {TranslateEventProto_EventType_names + 471, 12}, 1 },
  { {TranslateEventProto_EventType_names + 483, 12}, 3 },
  { {TranslateEventProto_EventType_names + 495, 11}, 4 },
  { {TranslateEventProto_EventType_names + 506, 29}, 5 },
  { {TranslateEventProto_EventType_names + 535, 25}, 6 },
  { {TranslateEventProto_EventType_names + 560, 11}, 9 },
  { {TranslateEventProto_EventType_names + 571, 23}, 22 },
};

static const int TranslateEventProto_EventType_entries_by_number[] = {
  14, // 0 -> UNKNOWN
  21, // 1 -> USER_DECLINE
  18, // 2 -> USER_ACCEPT
  22, // 3 -> USER_DISMISS
  23, // 4 -> USER_IGNORE
  24, // 5 -> USER_NEVER_TRANSLATE_LANGUAGE
  25, // 6 -> USER_NEVER_TRANSLATE_SITE
  19, // 7 -> USER_ALWAYS_TRANSLATE_LANGUAGE
  20, // 8 -> USER_CONTEXT_MENU_TRANSLATE
  26, // 9 -> USER_REVERT
  0, // 10 -> AUTOMATICALLY_TRANSLATED
  6, // 11 -> DISABLED_BY_PREF
  11, // 12 -> LANGUAGE_DISABLED_BY_USER_CONFIG
  17, // 13 -> URL_DISABLED_BY_USER_CONFIG
  10, // 14 -> LANGUAGE_DISABLED_BY_AUTO_BLACKLIST
  7, // 15 -> DISABLED_BY_RANKER
  15, // 16 -> UNSUPPORTED_LANGUAGE
  16, // 17 -> UNSUPPORTED_URL
  13, // 18 -> MATCHES_PREVIOUS_LANGUAGE
  3, // 19 -> BROWSER_WINDOW_IS_INVALID
  5, // 20 -> BROWSER_WINDOW_NOT_ACTIVE
  4, // 21 -> BROWSER_WINDOW_IS_MINIMIZED
  27, // 22 -> WEB_CONTENTS_NOT_ACTIVE
  8, // 23 -> EDITABLE_FIELD_IS_ACTIVE
  12, // 24 -> LANGUAGE_IN_ULP
  2, // 25 -> AUTO_TRANSLATION_BY_PREF
  1, // 26 -> AUTO_TRANSLATION_BY_LINK
  9, // 27 -> INITIALIZATION_ERROR
};

const std::string& TranslateEventProto_EventType_Name(
    TranslateEventProto_EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TranslateEventProto_EventType_entries,
          TranslateEventProto_EventType_entries_by_number,
          28, TranslateEventProto_EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TranslateEventProto_EventType_entries,
      TranslateEventProto_EventType_entries_by_number,
      28, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TranslateEventProto_EventType_strings[idx].get();
}
bool TranslateEventProto_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TranslateEventProto_EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TranslateEventProto_EventType_entries, 28, name, &int_value);
  if (success) {
    *value = static_cast<TranslateEventProto_EventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TranslateEventProto_EventType TranslateEventProto::UNKNOWN;
constexpr TranslateEventProto_EventType TranslateEventProto::USER_DECLINE;
constexpr TranslateEventProto_EventType TranslateEventProto::USER_ACCEPT;
constexpr TranslateEventProto_EventType TranslateEventProto::USER_DISMISS;
constexpr TranslateEventProto_EventType TranslateEventProto::USER_IGNORE;
constexpr TranslateEventProto_EventType TranslateEventProto::USER_NEVER_TRANSLATE_LANGUAGE;
constexpr TranslateEventProto_EventType TranslateEventProto::USER_NEVER_TRANSLATE_SITE;
constexpr TranslateEventProto_EventType TranslateEventProto::USER_ALWAYS_TRANSLATE_LANGUAGE;
constexpr TranslateEventProto_EventType TranslateEventProto::USER_CONTEXT_MENU_TRANSLATE;
constexpr TranslateEventProto_EventType TranslateEventProto::USER_REVERT;
constexpr TranslateEventProto_EventType TranslateEventProto::AUTOMATICALLY_TRANSLATED;
constexpr TranslateEventProto_EventType TranslateEventProto::AUTO_TRANSLATION_BY_PREF;
constexpr TranslateEventProto_EventType TranslateEventProto::AUTO_TRANSLATION_BY_LINK;
constexpr TranslateEventProto_EventType TranslateEventProto::DISABLED_BY_PREF;
constexpr TranslateEventProto_EventType TranslateEventProto::LANGUAGE_DISABLED_BY_USER_CONFIG;
constexpr TranslateEventProto_EventType TranslateEventProto::URL_DISABLED_BY_USER_CONFIG;
constexpr TranslateEventProto_EventType TranslateEventProto::LANGUAGE_DISABLED_BY_AUTO_BLACKLIST;
constexpr TranslateEventProto_EventType TranslateEventProto::DISABLED_BY_RANKER;
constexpr TranslateEventProto_EventType TranslateEventProto::UNSUPPORTED_LANGUAGE;
constexpr TranslateEventProto_EventType TranslateEventProto::UNSUPPORTED_URL;
constexpr TranslateEventProto_EventType TranslateEventProto::MATCHES_PREVIOUS_LANGUAGE;
constexpr TranslateEventProto_EventType TranslateEventProto::BROWSER_WINDOW_IS_INVALID;
constexpr TranslateEventProto_EventType TranslateEventProto::BROWSER_WINDOW_NOT_ACTIVE;
constexpr TranslateEventProto_EventType TranslateEventProto::BROWSER_WINDOW_IS_MINIMIZED;
constexpr TranslateEventProto_EventType TranslateEventProto::WEB_CONTENTS_NOT_ACTIVE;
constexpr TranslateEventProto_EventType TranslateEventProto::EDITABLE_FIELD_IS_ACTIVE;
constexpr TranslateEventProto_EventType TranslateEventProto::LANGUAGE_IN_ULP;
constexpr TranslateEventProto_EventType TranslateEventProto::INITIALIZATION_ERROR;
constexpr TranslateEventProto_EventType TranslateEventProto::EventType_MIN;
constexpr TranslateEventProto_EventType TranslateEventProto::EventType_MAX;
constexpr int TranslateEventProto::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TranslateEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TranslateEventProto>()._has_bits_);
  static void set_has_source_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_accept_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_decline_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ignore_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ranker_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ranker_request_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ranker_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_event_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_modified_source_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_modified_target_language(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TranslateEventProto::TranslateEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  language_list_(arena),
  decision_overrides_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.TranslateEventProto)
}
TranslateEventProto::TranslateEventProto(const TranslateEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      language_list_(from.language_list_),
      decision_overrides_(from.decision_overrides_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  source_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_language()) {
    source_language_.Set(from._internal_source_language(), 
      GetArenaForAllocation());
  }
  target_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_language()) {
    target_language_.Set(from._internal_target_language(), 
      GetArenaForAllocation());
  }
  modified_source_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    modified_source_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_modified_source_language()) {
    modified_source_language_.Set(from._internal_modified_source_language(), 
      GetArenaForAllocation());
  }
  modified_target_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    modified_target_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_modified_target_language()) {
    modified_target_language_.Set(from._internal_modified_target_language(), 
      GetArenaForAllocation());
  }
  country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    country_.Set(from._internal_country(), 
      GetArenaForAllocation());
  }
  ::memcpy(&accept_count_, &from.accept_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&ranker_response_) -
    reinterpret_cast<char*>(&accept_count_)) + sizeof(ranker_response_));
  // @@protoc_insertion_point(copy_constructor:metrics.TranslateEventProto)
}

inline void TranslateEventProto::SharedCtor() {
source_language_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_language_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_language_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_language_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
modified_source_language_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  modified_source_language_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
modified_target_language_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  modified_target_language_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
country_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accept_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&accept_count_)) + sizeof(event_type_));
ranker_response_ = 2;
}

TranslateEventProto::~TranslateEventProto() {
  // @@protoc_insertion_point(destructor:metrics.TranslateEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TranslateEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_language_.Destroy();
  target_language_.Destroy();
  modified_source_language_.Destroy();
  modified_target_language_.Destroy();
  country_.Destroy();
}

void TranslateEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TranslateEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.TranslateEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_list_.Clear();
  decision_overrides_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      source_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      target_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      modified_source_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      modified_target_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      country_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&accept_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ignore_count_) -
        reinterpret_cast<char*>(&accept_count_)) + sizeof(ignore_count_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&ranker_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_type_) -
        reinterpret_cast<char*>(&ranker_version_)) + sizeof(event_type_));
    ranker_response_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TranslateEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source_language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string target_language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 accept_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_accept_count(&has_bits);
          accept_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 decline_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_decline_count(&has_bits);
          decline_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ignore_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ignore_count(&has_bits);
          ignore_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string language_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_language_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ranker_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ranker_version(&has_bits);
          ranker_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ranker_request_timestamp_sec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_ranker_request_timestamp_sec(&has_bits);
          ranker_request_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.TranslateEventProto.RankerResponse ranker_response = 9 [default = NOT_QUERIED];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::TranslateEventProto_RankerResponse_IsValid(val))) {
            _internal_set_ranker_response(static_cast<::metrics::TranslateEventProto_RankerResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.TranslateEventProto.EventType event_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::TranslateEventProto_EventType_IsValid(val))) {
            _internal_set_event_type(static_cast<::metrics::TranslateEventProto_EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 event_timestamp_sec = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_event_timestamp_sec(&has_bits);
          event_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string modified_source_language = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_modified_source_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string modified_target_language = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_modified_target_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.TranslateEventProto.EventType decision_overrides = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::metrics::TranslateEventProto_EventType_IsValid(val))) {
              _internal_add_decision_overrides(static_cast<::metrics::TranslateEventProto_EventType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_decision_overrides(), ptr, ctx, ::metrics::TranslateEventProto_EventType_IsValid, &_internal_metadata_, 15);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranslateEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.TranslateEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_language = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_language(), target);
  }

  // optional string target_language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_language(), target);
  }

  // optional int32 accept_count = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_accept_count(), target);
  }

  // optional int32 decline_count = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_decline_count(), target);
  }

  // optional int32 ignore_count = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ignore_count(), target);
  }

  // repeated string language_list = 6;
  for (int i = 0, n = this->_internal_language_list_size(); i < n; i++) {
    const auto& s = this->_internal_language_list(i);
    target = stream->WriteString(6, s, target);
  }

  // optional uint32 ranker_version = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ranker_version(), target);
  }

  // optional int64 ranker_request_timestamp_sec = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_ranker_request_timestamp_sec(), target);
  }

  // optional .metrics.TranslateEventProto.RankerResponse ranker_response = 9 [default = NOT_QUERIED];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_ranker_response(), target);
  }

  // optional .metrics.TranslateEventProto.EventType event_type = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_event_type(), target);
  }

  // optional int64 event_timestamp_sec = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_event_timestamp_sec(), target);
  }

  // optional string modified_source_language = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_modified_source_language(), target);
  }

  // optional string modified_target_language = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_modified_target_language(), target);
  }

  // optional string country = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_country(), target);
  }

  // repeated .metrics.TranslateEventProto.EventType decision_overrides = 15;
  for (int i = 0, n = this->_internal_decision_overrides_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        15, this->_internal_decision_overrides(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.TranslateEventProto)
  return target;
}

size_t TranslateEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.TranslateEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string language_list = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(language_list_.size());
  for (int i = 0, n = language_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      language_list_.Get(i));
  }

  // repeated .metrics.TranslateEventProto.EventType decision_overrides = 15;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_decision_overrides_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_decision_overrides(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source_language = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_language());
    }

    // optional string target_language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_language());
    }

    // optional string modified_source_language = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_modified_source_language());
    }

    // optional string modified_target_language = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_modified_target_language());
    }

    // optional string country = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional int32 accept_count = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_accept_count());
    }

    // optional int32 decline_count = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_decline_count());
    }

    // optional int32 ignore_count = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ignore_count());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 ranker_version = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ranker_version());
    }

    // optional int64 ranker_request_timestamp_sec = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ranker_request_timestamp_sec());
    }

    // optional int64 event_timestamp_sec = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_event_timestamp_sec());
    }

    // optional .metrics.TranslateEventProto.EventType event_type = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

    // optional .metrics.TranslateEventProto.RankerResponse ranker_response = 9 [default = NOT_QUERIED];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ranker_response());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranslateEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TranslateEventProto*>(
      &from));
}

void TranslateEventProto::MergeFrom(const TranslateEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.TranslateEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  language_list_.MergeFrom(from.language_list_);
  decision_overrides_.MergeFrom(from.decision_overrides_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_language(from._internal_source_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_target_language(from._internal_target_language());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_modified_source_language(from._internal_modified_source_language());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_modified_target_language(from._internal_modified_target_language());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000020u) {
      accept_count_ = from.accept_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      decline_count_ = from.decline_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      ignore_count_ = from.ignore_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ranker_version_ = from.ranker_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      ranker_request_timestamp_sec_ = from.ranker_request_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000400u) {
      event_timestamp_sec_ = from.event_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000800u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      ranker_response_ = from.ranker_response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TranslateEventProto::CopyFrom(const TranslateEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.TranslateEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslateEventProto::IsInitialized() const {
  return true;
}

void TranslateEventProto::InternalSwap(TranslateEventProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_list_.InternalSwap(&other->language_list_);
  decision_overrides_.InternalSwap(&other->decision_overrides_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_language_, lhs_arena,
      &other->source_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &target_language_, lhs_arena,
      &other->target_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &modified_source_language_, lhs_arena,
      &other->modified_source_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &modified_target_language_, lhs_arena,
      &other->modified_target_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &country_, lhs_arena,
      &other->country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TranslateEventProto, event_type_)
      + sizeof(TranslateEventProto::event_type_)
      - PROTOBUF_FIELD_OFFSET(TranslateEventProto, accept_count_)>(
          reinterpret_cast<char*>(&accept_count_),
          reinterpret_cast<char*>(&other->accept_count_));
  swap(ranker_response_, other->ranker_response_);
}

std::string TranslateEventProto::GetTypeName() const {
  return "metrics.TranslateEventProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::TranslateEventProto*
Arena::CreateMaybeMessage< ::metrics::TranslateEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::TranslateEventProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
