// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sampled_profile.proto

#include "sampled_profile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR SampledProfile_ProcessTypesEntry_DoNotUse::SampledProfile_ProcessTypesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct SampledProfile_ProcessTypesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SampledProfile_ProcessTypesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SampledProfile_ProcessTypesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SampledProfile_ProcessTypesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SampledProfile_ProcessTypesEntry_DoNotUseDefaultTypeInternal _SampledProfile_ProcessTypesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SampledProfile_ThreadTypesEntry_DoNotUse::SampledProfile_ThreadTypesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct SampledProfile_ThreadTypesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SampledProfile_ThreadTypesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SampledProfile_ThreadTypesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SampledProfile_ThreadTypesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SampledProfile_ThreadTypesEntry_DoNotUseDefaultTypeInternal _SampledProfile_ThreadTypesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SampledProfile::SampledProfile(
    ::_pbi::ConstantInitialized)
  : process_types_()
  , thread_types_()
  , cpu_max_frequency_mhz_()
  , lacros_pids_()
  , _lacros_pids_cached_byte_size_(0)
  , lacros_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , perf_data_(nullptr)
  , call_stack_profile_(nullptr)
  , perf_stat_(nullptr)
  , ms_after_boot_(int64_t{0})
  , ms_after_login_(int64_t{0})
  , trigger_event_(0)

  , num_tabs_restored_(0)
  , suspend_duration_ms_(int64_t{0})
  , ms_after_resume_(int64_t{0})
  , ms_after_restore_(int64_t{0})
  , process_(0)

  , thread_(0)

  , psi_cpu_last_10s_pct_(0)
  , psi_cpu_last_60s_pct_(0)
  , lacros_channel_(0)
{}
struct SampledProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SampledProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SampledProfileDefaultTypeInternal() {}
  union {
    SampledProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SampledProfileDefaultTypeInternal _SampledProfile_default_instance_;
}  // namespace metrics
namespace metrics {
bool SampledProfile_TriggerEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SampledProfile_TriggerEvent_strings[8] = {};

static const char SampledProfile_TriggerEvent_names[] =
  "JANKY_TASK"
  "PERIODIC_COLLECTION"
  "PERIODIC_HEAP_COLLECTION"
  "PROCESS_STARTUP"
  "RESTORE_SESSION"
  "RESUME_FROM_SUSPEND"
  "THREAD_HUNG"
  "UNKNOWN_TRIGGER_EVENT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SampledProfile_TriggerEvent_entries[] = {
  { {SampledProfile_TriggerEvent_names + 0, 10}, 5 },
  { {SampledProfile_TriggerEvent_names + 10, 19}, 1 },
  { {SampledProfile_TriggerEvent_names + 29, 24}, 7 },
  { {SampledProfile_TriggerEvent_names + 53, 15}, 4 },
  { {SampledProfile_TriggerEvent_names + 68, 15}, 3 },
  { {SampledProfile_TriggerEvent_names + 83, 19}, 2 },
  { {SampledProfile_TriggerEvent_names + 102, 11}, 6 },
  { {SampledProfile_TriggerEvent_names + 113, 21}, 0 },
};

static const int SampledProfile_TriggerEvent_entries_by_number[] = {
  7, // 0 -> UNKNOWN_TRIGGER_EVENT
  1, // 1 -> PERIODIC_COLLECTION
  5, // 2 -> RESUME_FROM_SUSPEND
  4, // 3 -> RESTORE_SESSION
  3, // 4 -> PROCESS_STARTUP
  0, // 5 -> JANKY_TASK
  6, // 6 -> THREAD_HUNG
  2, // 7 -> PERIODIC_HEAP_COLLECTION
};

const std::string& SampledProfile_TriggerEvent_Name(
    SampledProfile_TriggerEvent value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SampledProfile_TriggerEvent_entries,
          SampledProfile_TriggerEvent_entries_by_number,
          8, SampledProfile_TriggerEvent_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SampledProfile_TriggerEvent_entries,
      SampledProfile_TriggerEvent_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SampledProfile_TriggerEvent_strings[idx].get();
}
bool SampledProfile_TriggerEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SampledProfile_TriggerEvent* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SampledProfile_TriggerEvent_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<SampledProfile_TriggerEvent>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SampledProfile_TriggerEvent SampledProfile::UNKNOWN_TRIGGER_EVENT;
constexpr SampledProfile_TriggerEvent SampledProfile::PERIODIC_COLLECTION;
constexpr SampledProfile_TriggerEvent SampledProfile::RESUME_FROM_SUSPEND;
constexpr SampledProfile_TriggerEvent SampledProfile::RESTORE_SESSION;
constexpr SampledProfile_TriggerEvent SampledProfile::PROCESS_STARTUP;
constexpr SampledProfile_TriggerEvent SampledProfile::JANKY_TASK;
constexpr SampledProfile_TriggerEvent SampledProfile::THREAD_HUNG;
constexpr SampledProfile_TriggerEvent SampledProfile::PERIODIC_HEAP_COLLECTION;
constexpr SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MIN;
constexpr SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MAX;
constexpr int SampledProfile::TriggerEvent_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

SampledProfile_ProcessTypesEntry_DoNotUse::SampledProfile_ProcessTypesEntry_DoNotUse() {}
SampledProfile_ProcessTypesEntry_DoNotUse::SampledProfile_ProcessTypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SampledProfile_ProcessTypesEntry_DoNotUse::MergeFrom(const SampledProfile_ProcessTypesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

SampledProfile_ThreadTypesEntry_DoNotUse::SampledProfile_ThreadTypesEntry_DoNotUse() {}
SampledProfile_ThreadTypesEntry_DoNotUse::SampledProfile_ThreadTypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SampledProfile_ThreadTypesEntry_DoNotUse::MergeFrom(const SampledProfile_ThreadTypesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class SampledProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<SampledProfile>()._has_bits_);
  static void set_has_trigger_event(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lacros_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lacros_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ms_after_boot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ms_after_login(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_suspend_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ms_after_resume(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_tabs_restored(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ms_after_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::metrics::PerfDataProto& perf_data(const SampledProfile* msg);
  static void set_has_perf_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::metrics::CallStackProfile& call_stack_profile(const SampledProfile* msg);
  static void set_has_call_stack_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::metrics::PerfStatProto& perf_stat(const SampledProfile* msg);
  static void set_has_perf_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_psi_cpu_last_10s_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_psi_cpu_last_60s_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::metrics::PerfDataProto&
SampledProfile::_Internal::perf_data(const SampledProfile* msg) {
  return *msg->perf_data_;
}
const ::metrics::CallStackProfile&
SampledProfile::_Internal::call_stack_profile(const SampledProfile* msg) {
  return *msg->call_stack_profile_;
}
const ::metrics::PerfStatProto&
SampledProfile::_Internal::perf_stat(const SampledProfile* msg) {
  return *msg->perf_stat_;
}
void SampledProfile::clear_perf_data() {
  if (perf_data_ != nullptr) perf_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SampledProfile::clear_call_stack_profile() {
  if (call_stack_profile_ != nullptr) call_stack_profile_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SampledProfile::clear_perf_stat() {
  if (perf_stat_ != nullptr) perf_stat_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SampledProfile::SampledProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  process_types_(arena),
  thread_types_(arena),
  cpu_max_frequency_mhz_(arena),
  lacros_pids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.SampledProfile)
}
SampledProfile::SampledProfile(const SampledProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      cpu_max_frequency_mhz_(from.cpu_max_frequency_mhz_),
      lacros_pids_(from.lacros_pids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  process_types_.MergeFrom(from.process_types_);
  thread_types_.MergeFrom(from.thread_types_);
  lacros_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    lacros_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lacros_version()) {
    lacros_version_.Set(from._internal_lacros_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_perf_data()) {
    perf_data_ = new ::metrics::PerfDataProto(*from.perf_data_);
  } else {
    perf_data_ = nullptr;
  }
  if (from._internal_has_call_stack_profile()) {
    call_stack_profile_ = new ::metrics::CallStackProfile(*from.call_stack_profile_);
  } else {
    call_stack_profile_ = nullptr;
  }
  if (from._internal_has_perf_stat()) {
    perf_stat_ = new ::metrics::PerfStatProto(*from.perf_stat_);
  } else {
    perf_stat_ = nullptr;
  }
  ::memcpy(&ms_after_boot_, &from.ms_after_boot_,
    static_cast<size_t>(reinterpret_cast<char*>(&lacros_channel_) -
    reinterpret_cast<char*>(&ms_after_boot_)) + sizeof(lacros_channel_));
  // @@protoc_insertion_point(copy_constructor:metrics.SampledProfile)
}

inline void SampledProfile::SharedCtor() {
lacros_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  lacros_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&perf_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lacros_channel_) -
    reinterpret_cast<char*>(&perf_data_)) + sizeof(lacros_channel_));
}

SampledProfile::~SampledProfile() {
  // @@protoc_insertion_point(destructor:metrics.SampledProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SampledProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  process_types_.Destruct();
  thread_types_.Destruct();
  lacros_version_.Destroy();
  if (this != internal_default_instance()) delete perf_data_;
  if (this != internal_default_instance()) delete call_stack_profile_;
  if (this != internal_default_instance()) delete perf_stat_;
}

void SampledProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SampledProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SampledProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_types_.Clear();
  thread_types_.Clear();
  cpu_max_frequency_mhz_.Clear();
  lacros_pids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lacros_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(perf_data_ != nullptr);
      perf_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(call_stack_profile_ != nullptr);
      call_stack_profile_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(perf_stat_ != nullptr);
      perf_stat_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&ms_after_boot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_tabs_restored_) -
        reinterpret_cast<char*>(&ms_after_boot_)) + sizeof(num_tabs_restored_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&suspend_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lacros_channel_) -
        reinterpret_cast<char*>(&suspend_duration_ms_)) + sizeof(lacros_channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SampledProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::SampledProfile_TriggerEvent_IsValid(val))) {
            _internal_set_trigger_event(static_cast<::metrics::SampledProfile_TriggerEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 ms_after_boot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ms_after_boot(&has_bits);
          ms_after_boot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ms_after_login = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ms_after_login(&has_bits);
          ms_after_login_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.PerfDataProto perf_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_perf_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 suspend_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_suspend_duration_ms(&has_bits);
          suspend_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ms_after_resume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ms_after_resume(&has_bits);
          ms_after_resume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_tabs_restored = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_num_tabs_restored(&has_bits);
          num_tabs_restored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ms_after_restore = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_ms_after_restore(&has_bits);
          ms_after_restore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CallStackProfile call_stack_profile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_stack_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.PerfStatProto perf_stat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_perf_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.Process process = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::Process_IsValid(val))) {
            _internal_set_process(static_cast<::metrics::Process>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.Thread thread = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::Thread_IsValid(val))) {
            _internal_set_thread(static_cast<::metrics::Thread>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .metrics.Process> process_types = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<std::string>(&process_types_, ::metrics::Process_IsValid, 13, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .metrics.Thread> thread_types = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<std::string>(&thread_types_, ::metrics::Thread_IsValid, 14, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cpu_max_frequency_mhz = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cpu_max_frequency_mhz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cpu_max_frequency_mhz(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float psi_cpu_last_10s_pct = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_psi_cpu_last_10s_pct(&has_bits);
          psi_cpu_last_10s_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float psi_cpu_last_60s_pct = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_psi_cpu_last_60s_pct(&has_bits);
          psi_cpu_last_60s_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 lacros_pids = 18 [packed = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_lacros_pids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 144) {
          _internal_add_lacros_pids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lacros_version = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_lacros_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.SystemProfileProto.Channel lacros_channel = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::SystemProfileProto_Channel_IsValid(val))) {
            _internal_set_lacros_channel(static_cast<::metrics::SystemProfileProto_Channel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SampledProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.SampledProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trigger_event(), target);
  }

  // optional int64 ms_after_boot = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ms_after_boot(), target);
  }

  // optional int64 ms_after_login = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ms_after_login(), target);
  }

  // optional .metrics.PerfDataProto perf_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::perf_data(this),
        _Internal::perf_data(this).GetCachedSize(), target, stream);
  }

  // optional int64 suspend_duration_ms = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_suspend_duration_ms(), target);
  }

  // optional int64 ms_after_resume = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_ms_after_resume(), target);
  }

  // optional int32 num_tabs_restored = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_tabs_restored(), target);
  }

  // optional int64 ms_after_restore = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_ms_after_restore(), target);
  }

  // optional .metrics.CallStackProfile call_stack_profile = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::call_stack_profile(this),
        _Internal::call_stack_profile(this).GetCachedSize(), target, stream);
  }

  // optional .metrics.PerfStatProto perf_stat = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::perf_stat(this),
        _Internal::perf_stat(this).GetCachedSize(), target, stream);
  }

  // optional .metrics.Process process = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_process(), target);
  }

  // optional .metrics.Thread thread = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_thread(), target);
  }

  // map<uint32, .metrics.Process> process_types = 13;
  if (!this->_internal_process_types().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::metrics::Process>;
    using WireHelper = SampledProfile_ProcessTypesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_process_types();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .metrics.Thread> thread_types = 14;
  if (!this->_internal_thread_types().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::metrics::Thread>;
    using WireHelper = SampledProfile_ThreadTypesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_thread_types();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated uint32 cpu_max_frequency_mhz = 15;
  for (int i = 0, n = this->_internal_cpu_max_frequency_mhz_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_cpu_max_frequency_mhz(i), target);
  }

  // optional float psi_cpu_last_10s_pct = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_psi_cpu_last_10s_pct(), target);
  }

  // optional float psi_cpu_last_60s_pct = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_psi_cpu_last_60s_pct(), target);
  }

  // repeated uint32 lacros_pids = 18 [packed = true];
  {
    int byte_size = _lacros_pids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          18, _internal_lacros_pids(), byte_size, target);
    }
  }

  // optional string lacros_version = 19;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_lacros_version(), target);
  }

  // optional .metrics.SystemProfileProto.Channel lacros_channel = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_lacros_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.SampledProfile)
  return target;
}

size_t SampledProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SampledProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .metrics.Process> process_types = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_process_types_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Process >::const_iterator
      it = this->_internal_process_types().begin();
      it != this->_internal_process_types().end(); ++it) {
    total_size += SampledProfile_ProcessTypesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .metrics.Thread> thread_types = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_thread_types_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::metrics::Thread >::const_iterator
      it = this->_internal_thread_types().begin();
      it != this->_internal_thread_types().end(); ++it) {
    total_size += SampledProfile_ThreadTypesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint32 cpu_max_frequency_mhz = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->cpu_max_frequency_mhz_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_cpu_max_frequency_mhz_size());
    total_size += data_size;
  }

  // repeated uint32 lacros_pids = 18 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->lacros_pids_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _lacros_pids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lacros_version = 19;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lacros_version());
    }

    // optional .metrics.PerfDataProto perf_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perf_data_);
    }

    // optional .metrics.CallStackProfile call_stack_profile = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *call_stack_profile_);
    }

    // optional .metrics.PerfStatProto perf_stat = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perf_stat_);
    }

    // optional int64 ms_after_boot = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ms_after_boot());
    }

    // optional int64 ms_after_login = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ms_after_login());
    }

    // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_trigger_event());
    }

    // optional int32 num_tabs_restored = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_tabs_restored());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 suspend_duration_ms = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_suspend_duration_ms());
    }

    // optional int64 ms_after_resume = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ms_after_resume());
    }

    // optional int64 ms_after_restore = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ms_after_restore());
    }

    // optional .metrics.Process process = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_process());
    }

    // optional .metrics.Thread thread = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_thread());
    }

    // optional float psi_cpu_last_10s_pct = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float psi_cpu_last_60s_pct = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional .metrics.SystemProfileProto.Channel lacros_channel = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lacros_channel());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SampledProfile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SampledProfile*>(
      &from));
}

void SampledProfile::MergeFrom(const SampledProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SampledProfile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  process_types_.MergeFrom(from.process_types_);
  thread_types_.MergeFrom(from.thread_types_);
  cpu_max_frequency_mhz_.MergeFrom(from.cpu_max_frequency_mhz_);
  lacros_pids_.MergeFrom(from.lacros_pids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lacros_version(from._internal_lacros_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_perf_data()->::metrics::PerfDataProto::MergeFrom(from._internal_perf_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_call_stack_profile()->::metrics::CallStackProfile::MergeFrom(from._internal_call_stack_profile());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_perf_stat()->::metrics::PerfStatProto::MergeFrom(from._internal_perf_stat());
    }
    if (cached_has_bits & 0x00000010u) {
      ms_after_boot_ = from.ms_after_boot_;
    }
    if (cached_has_bits & 0x00000020u) {
      ms_after_login_ = from.ms_after_login_;
    }
    if (cached_has_bits & 0x00000040u) {
      trigger_event_ = from.trigger_event_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_tabs_restored_ = from.num_tabs_restored_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      suspend_duration_ms_ = from.suspend_duration_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      ms_after_resume_ = from.ms_after_resume_;
    }
    if (cached_has_bits & 0x00000400u) {
      ms_after_restore_ = from.ms_after_restore_;
    }
    if (cached_has_bits & 0x00000800u) {
      process_ = from.process_;
    }
    if (cached_has_bits & 0x00001000u) {
      thread_ = from.thread_;
    }
    if (cached_has_bits & 0x00002000u) {
      psi_cpu_last_10s_pct_ = from.psi_cpu_last_10s_pct_;
    }
    if (cached_has_bits & 0x00004000u) {
      psi_cpu_last_60s_pct_ = from.psi_cpu_last_60s_pct_;
    }
    if (cached_has_bits & 0x00008000u) {
      lacros_channel_ = from.lacros_channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SampledProfile::CopyFrom(const SampledProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SampledProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampledProfile::IsInitialized() const {
  return true;
}

void SampledProfile::InternalSwap(SampledProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  process_types_.InternalSwap(&other->process_types_);
  thread_types_.InternalSwap(&other->thread_types_);
  cpu_max_frequency_mhz_.InternalSwap(&other->cpu_max_frequency_mhz_);
  lacros_pids_.InternalSwap(&other->lacros_pids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &lacros_version_, lhs_arena,
      &other->lacros_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SampledProfile, lacros_channel_)
      + sizeof(SampledProfile::lacros_channel_)
      - PROTOBUF_FIELD_OFFSET(SampledProfile, perf_data_)>(
          reinterpret_cast<char*>(&perf_data_),
          reinterpret_cast<char*>(&other->perf_data_));
}

std::string SampledProfile::GetTypeName() const {
  return "metrics.SampledProfile";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::SampledProfile*
Arena::CreateMaybeMessage< ::metrics::SampledProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::SampledProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
