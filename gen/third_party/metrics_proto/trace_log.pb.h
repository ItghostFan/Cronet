// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trace_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trace_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trace_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trace_5flog_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class TraceLog;
struct TraceLogDefaultTypeInternal;
extern TraceLogDefaultTypeInternal _TraceLog_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::TraceLog* Arena::CreateMaybeMessage<::metrics::TraceLog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum TraceLog_CompressionType : int {
  TraceLog_CompressionType_COMPRESSION_TYPE_NONE = 0,
  TraceLog_CompressionType_COMPRESSION_TYPE_ZLIB = 1
};
bool TraceLog_CompressionType_IsValid(int value);
constexpr TraceLog_CompressionType TraceLog_CompressionType_CompressionType_MIN = TraceLog_CompressionType_COMPRESSION_TYPE_NONE;
constexpr TraceLog_CompressionType TraceLog_CompressionType_CompressionType_MAX = TraceLog_CompressionType_COMPRESSION_TYPE_ZLIB;
constexpr int TraceLog_CompressionType_CompressionType_ARRAYSIZE = TraceLog_CompressionType_CompressionType_MAX + 1;

const std::string& TraceLog_CompressionType_Name(TraceLog_CompressionType value);
template<typename T>
inline const std::string& TraceLog_CompressionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TraceLog_CompressionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TraceLog_CompressionType_Name.");
  return TraceLog_CompressionType_Name(static_cast<TraceLog_CompressionType>(enum_t_value));
}
bool TraceLog_CompressionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TraceLog_CompressionType* value);
// ===================================================================

class TraceLog final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.TraceLog) */ {
 public:
  inline TraceLog() : TraceLog(nullptr) {}
  ~TraceLog() override;
  explicit PROTOBUF_CONSTEXPR TraceLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceLog(const TraceLog& from);
  TraceLog(TraceLog&& from) noexcept
    : TraceLog() {
    *this = ::std::move(from);
  }

  inline TraceLog& operator=(const TraceLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceLog& operator=(TraceLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TraceLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceLog* internal_default_instance() {
    return reinterpret_cast<const TraceLog*>(
               &_TraceLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TraceLog& a, TraceLog& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TraceLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceLog>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TraceLog& from);
  void MergeFrom(const TraceLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.TraceLog";
  }
  protected:
  explicit TraceLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TraceLog_CompressionType CompressionType;
  static constexpr CompressionType COMPRESSION_TYPE_NONE =
    TraceLog_CompressionType_COMPRESSION_TYPE_NONE;
  static constexpr CompressionType COMPRESSION_TYPE_ZLIB =
    TraceLog_CompressionType_COMPRESSION_TYPE_ZLIB;
  static inline bool CompressionType_IsValid(int value) {
    return TraceLog_CompressionType_IsValid(value);
  }
  static constexpr CompressionType CompressionType_MIN =
    TraceLog_CompressionType_CompressionType_MIN;
  static constexpr CompressionType CompressionType_MAX =
    TraceLog_CompressionType_CompressionType_MAX;
  static constexpr int CompressionType_ARRAYSIZE =
    TraceLog_CompressionType_CompressionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CompressionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompressionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompressionType_Name.");
    return TraceLog_CompressionType_Name(enum_t_value);
  }
  static inline bool CompressionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CompressionType* value) {
    return TraceLog_CompressionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRawDataFieldNumber = 1,
    kCompressionTypeFieldNumber = 5,
  };
  // optional bytes raw_data = 1;
  bool has_raw_data() const;
  private:
  bool _internal_has_raw_data() const;
  public:
  void clear_raw_data();
  const std::string& raw_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_data();
  PROTOBUF_NODISCARD std::string* release_raw_data();
  void set_allocated_raw_data(std::string* raw_data);
  private:
  const std::string& _internal_raw_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_data(const std::string& value);
  std::string* _internal_mutable_raw_data();
  public:

  // optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];
  bool has_compression_type() const;
  private:
  bool _internal_has_compression_type() const;
  public:
  void clear_compression_type();
  ::metrics::TraceLog_CompressionType compression_type() const;
  void set_compression_type(::metrics::TraceLog_CompressionType value);
  private:
  ::metrics::TraceLog_CompressionType _internal_compression_type() const;
  void _internal_set_compression_type(::metrics::TraceLog_CompressionType value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.TraceLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_data_;
  int compression_type_;
  friend struct ::TableStruct_trace_5flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TraceLog

// optional bytes raw_data = 1;
inline bool TraceLog::_internal_has_raw_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TraceLog::has_raw_data() const {
  return _internal_has_raw_data();
}
inline void TraceLog::clear_raw_data() {
  raw_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceLog::raw_data() const {
  // @@protoc_insertion_point(field_get:metrics.TraceLog.raw_data)
  return _internal_raw_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TraceLog::set_raw_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 raw_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.TraceLog.raw_data)
}
inline std::string* TraceLog::mutable_raw_data() {
  std::string* _s = _internal_mutable_raw_data();
  // @@protoc_insertion_point(field_mutable:metrics.TraceLog.raw_data)
  return _s;
}
inline const std::string& TraceLog::_internal_raw_data() const {
  return raw_data_.Get();
}
inline void TraceLog::_internal_set_raw_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_data_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceLog::_internal_mutable_raw_data() {
  _has_bits_[0] |= 0x00000001u;
  return raw_data_.Mutable(GetArenaForAllocation());
}
inline std::string* TraceLog::release_raw_data() {
  // @@protoc_insertion_point(field_release:metrics.TraceLog.raw_data)
  if (!_internal_has_raw_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = raw_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (raw_data_.IsDefault()) {
    raw_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TraceLog::set_allocated_raw_data(std::string* raw_data) {
  if (raw_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  raw_data_.SetAllocated(raw_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (raw_data_.IsDefault()) {
    raw_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.TraceLog.raw_data)
}

// optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];
inline bool TraceLog::_internal_has_compression_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TraceLog::has_compression_type() const {
  return _internal_has_compression_type();
}
inline void TraceLog::clear_compression_type() {
  compression_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::metrics::TraceLog_CompressionType TraceLog::_internal_compression_type() const {
  return static_cast< ::metrics::TraceLog_CompressionType >(compression_type_);
}
inline ::metrics::TraceLog_CompressionType TraceLog::compression_type() const {
  // @@protoc_insertion_point(field_get:metrics.TraceLog.compression_type)
  return _internal_compression_type();
}
inline void TraceLog::_internal_set_compression_type(::metrics::TraceLog_CompressionType value) {
  assert(::metrics::TraceLog_CompressionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  compression_type_ = value;
}
inline void TraceLog::set_compression_type(::metrics::TraceLog_CompressionType value) {
  _internal_set_compression_type(value);
  // @@protoc_insertion_point(field_set:metrics.TraceLog.compression_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::TraceLog_CompressionType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trace_5flog_2eproto
