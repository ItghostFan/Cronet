// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/process_descriptor.proto

#include "protos/perfetto/trace/track_event/process_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ProcessDescriptor::ProcessDescriptor(
    ::_pbi::ConstantInitialized)
  : cmdline_()
  , process_labels_()
  , process_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(0)
  , legacy_sort_index_(0)
  , chrome_process_type_(0)

  , process_priority_(0)
  , start_timestamp_ns_(int64_t{0}){}
struct ProcessDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessDescriptorDefaultTypeInternal() {}
  union {
    ProcessDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessDescriptorDefaultTypeInternal _ProcessDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool ProcessDescriptor_ChromeProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProcessDescriptor_ChromeProcessType_strings[9] = {};

static const char ProcessDescriptor_ChromeProcessType_names[] =
  "PROCESS_BROWSER"
  "PROCESS_GPU"
  "PROCESS_PPAPI_BROKER"
  "PROCESS_PPAPI_PLUGIN"
  "PROCESS_RENDERER"
  "PROCESS_SANDBOX_HELPER"
  "PROCESS_UNSPECIFIED"
  "PROCESS_UTILITY"
  "PROCESS_ZYGOTE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProcessDescriptor_ChromeProcessType_entries[] = {
  { {ProcessDescriptor_ChromeProcessType_names + 0, 15}, 1 },
  { {ProcessDescriptor_ChromeProcessType_names + 15, 11}, 6 },
  { {ProcessDescriptor_ChromeProcessType_names + 26, 20}, 8 },
  { {ProcessDescriptor_ChromeProcessType_names + 46, 20}, 7 },
  { {ProcessDescriptor_ChromeProcessType_names + 66, 16}, 2 },
  { {ProcessDescriptor_ChromeProcessType_names + 82, 22}, 5 },
  { {ProcessDescriptor_ChromeProcessType_names + 104, 19}, 0 },
  { {ProcessDescriptor_ChromeProcessType_names + 123, 15}, 3 },
  { {ProcessDescriptor_ChromeProcessType_names + 138, 14}, 4 },
};

static const int ProcessDescriptor_ChromeProcessType_entries_by_number[] = {
  6, // 0 -> PROCESS_UNSPECIFIED
  0, // 1 -> PROCESS_BROWSER
  4, // 2 -> PROCESS_RENDERER
  7, // 3 -> PROCESS_UTILITY
  8, // 4 -> PROCESS_ZYGOTE
  5, // 5 -> PROCESS_SANDBOX_HELPER
  1, // 6 -> PROCESS_GPU
  3, // 7 -> PROCESS_PPAPI_PLUGIN
  2, // 8 -> PROCESS_PPAPI_BROKER
};

const std::string& ProcessDescriptor_ChromeProcessType_Name(
    ProcessDescriptor_ChromeProcessType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProcessDescriptor_ChromeProcessType_entries,
          ProcessDescriptor_ChromeProcessType_entries_by_number,
          9, ProcessDescriptor_ChromeProcessType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProcessDescriptor_ChromeProcessType_entries,
      ProcessDescriptor_ChromeProcessType_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProcessDescriptor_ChromeProcessType_strings[idx].get();
}
bool ProcessDescriptor_ChromeProcessType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProcessDescriptor_ChromeProcessType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProcessDescriptor_ChromeProcessType_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<ProcessDescriptor_ChromeProcessType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_UNSPECIFIED;
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_BROWSER;
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_RENDERER;
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_UTILITY;
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_ZYGOTE;
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_SANDBOX_HELPER;
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_GPU;
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_PPAPI_PLUGIN;
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_PPAPI_BROKER;
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::ChromeProcessType_MIN;
constexpr ProcessDescriptor_ChromeProcessType ProcessDescriptor::ChromeProcessType_MAX;
constexpr int ProcessDescriptor::ChromeProcessType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ProcessDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessDescriptor>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_timestamp_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_chrome_process_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_legacy_sort_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ProcessDescriptor::ProcessDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  cmdline_(arena),
  process_labels_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessDescriptor)
}
ProcessDescriptor::ProcessDescriptor(const ProcessDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      cmdline_(from.cmdline_),
      process_labels_(from.process_labels_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  process_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    process_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_process_name()) {
    process_name_.Set(from._internal_process_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_timestamp_ns_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(start_timestamp_ns_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessDescriptor)
}

inline void ProcessDescriptor::SharedCtor() {
process_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  process_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_timestamp_ns_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(start_timestamp_ns_));
}

ProcessDescriptor::~ProcessDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  process_name_.Destroy();
}

void ProcessDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmdline_.Clear();
  process_labels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    process_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_timestamp_ns_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(start_timestamp_ns_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProcessDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cmdline();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 legacy_sort_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_legacy_sort_index(&has_bits);
          legacy_sort_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProcessDescriptor.ChromeProcessType chrome_process_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ProcessDescriptor_ChromeProcessType_IsValid(val))) {
            _internal_set_chrome_process_type(static_cast<::perfetto::protos::ProcessDescriptor_ChromeProcessType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 process_priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_process_priority(&has_bits);
          process_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string process_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_process_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_timestamp_ns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_start_timestamp_ns(&has_bits);
          start_timestamp_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string process_labels = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_process_labels();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated string cmdline = 2;
  for (int i = 0, n = this->_internal_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_cmdline(i);
    target = stream->WriteString(2, s, target);
  }

  // optional int32 legacy_sort_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_legacy_sort_index(), target);
  }

  // optional .perfetto.protos.ProcessDescriptor.ChromeProcessType chrome_process_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_chrome_process_type(), target);
  }

  // optional int32 process_priority = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_process_priority(), target);
  }

  // optional string process_name = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_process_name(), target);
  }

  // optional int64 start_timestamp_ns = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_start_timestamp_ns(), target);
  }

  // repeated string process_labels = 8;
  for (int i = 0, n = this->_internal_process_labels_size(); i < n; i++) {
    const auto& s = this->_internal_process_labels(i);
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessDescriptor)
  return target;
}

size_t ProcessDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cmdline = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cmdline_.size());
  for (int i = 0, n = cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cmdline_.Get(i));
  }

  // repeated string process_labels = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(process_labels_.size());
  for (int i = 0, n = process_labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      process_labels_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string process_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_process_name());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional int32 legacy_sort_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_legacy_sort_index());
    }

    // optional .perfetto.protos.ProcessDescriptor.ChromeProcessType chrome_process_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_chrome_process_type());
    }

    // optional int32 process_priority = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_process_priority());
    }

    // optional int64 start_timestamp_ns = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_timestamp_ns());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProcessDescriptor*>(
      &from));
}

void ProcessDescriptor::MergeFrom(const ProcessDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cmdline_.MergeFrom(from.cmdline_);
  process_labels_.MergeFrom(from.process_labels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_process_name(from._internal_process_name());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_sort_index_ = from.legacy_sort_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      chrome_process_type_ = from.chrome_process_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      process_priority_ = from.process_priority_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_timestamp_ns_ = from.start_timestamp_ns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProcessDescriptor::CopyFrom(const ProcessDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessDescriptor::IsInitialized() const {
  return true;
}

void ProcessDescriptor::InternalSwap(ProcessDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cmdline_.InternalSwap(&other->cmdline_);
  process_labels_.InternalSwap(&other->process_labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &process_name_, lhs_arena,
      &other->process_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessDescriptor, start_timestamp_ns_)
      + sizeof(ProcessDescriptor::start_timestamp_ns_)
      - PROTOBUF_FIELD_OFFSET(ProcessDescriptor, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

std::string ProcessDescriptor::GetTypeName() const {
  return "perfetto.protos.ProcessDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
