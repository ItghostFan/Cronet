// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/debug_annotation.proto

#include "protos/perfetto/trace/track_event/debug_annotation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR DebugAnnotation_NestedValue::DebugAnnotation_NestedValue(
    ::_pbi::ConstantInitialized)
  : dict_keys_()
  , dict_values_()
  , array_values_()
  , string_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , nested_type_(0)

  , bool_value_(false)
  , int_value_(int64_t{0})
  , double_value_(0){}
struct DebugAnnotation_NestedValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugAnnotation_NestedValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugAnnotation_NestedValueDefaultTypeInternal() {}
  union {
    DebugAnnotation_NestedValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugAnnotation_NestedValueDefaultTypeInternal _DebugAnnotation_NestedValue_default_instance_;
PROTOBUF_CONSTEXPR DebugAnnotation::DebugAnnotation(
    ::_pbi::ConstantInitialized)
  : dict_entries_()
  , array_values_()
  , proto_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , _oneof_case_{}{}
struct DebugAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugAnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugAnnotationDefaultTypeInternal() {}
  union {
    DebugAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugAnnotationDefaultTypeInternal _DebugAnnotation_default_instance_;
PROTOBUF_CONSTEXPR DebugAnnotationName::DebugAnnotationName(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , iid_(uint64_t{0u}){}
struct DebugAnnotationNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugAnnotationNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugAnnotationNameDefaultTypeInternal() {}
  union {
    DebugAnnotationName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugAnnotationNameDefaultTypeInternal _DebugAnnotationName_default_instance_;
PROTOBUF_CONSTEXPR DebugAnnotationValueTypeName::DebugAnnotationValueTypeName(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , iid_(uint64_t{0u}){}
struct DebugAnnotationValueTypeNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugAnnotationValueTypeNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugAnnotationValueTypeNameDefaultTypeInternal() {}
  union {
    DebugAnnotationValueTypeName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugAnnotationValueTypeNameDefaultTypeInternal _DebugAnnotationValueTypeName_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool DebugAnnotation_NestedValue_NestedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DebugAnnotation_NestedValue_NestedType_strings[3] = {};

static const char DebugAnnotation_NestedValue_NestedType_names[] =
  "ARRAY"
  "DICT"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DebugAnnotation_NestedValue_NestedType_entries[] = {
  { {DebugAnnotation_NestedValue_NestedType_names + 0, 5}, 2 },
  { {DebugAnnotation_NestedValue_NestedType_names + 5, 4}, 1 },
  { {DebugAnnotation_NestedValue_NestedType_names + 9, 11}, 0 },
};

static const int DebugAnnotation_NestedValue_NestedType_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  1, // 1 -> DICT
  0, // 2 -> ARRAY
};

const std::string& DebugAnnotation_NestedValue_NestedType_Name(
    DebugAnnotation_NestedValue_NestedType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DebugAnnotation_NestedValue_NestedType_entries,
          DebugAnnotation_NestedValue_NestedType_entries_by_number,
          3, DebugAnnotation_NestedValue_NestedType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DebugAnnotation_NestedValue_NestedType_entries,
      DebugAnnotation_NestedValue_NestedType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DebugAnnotation_NestedValue_NestedType_strings[idx].get();
}
bool DebugAnnotation_NestedValue_NestedType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DebugAnnotation_NestedValue_NestedType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DebugAnnotation_NestedValue_NestedType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DebugAnnotation_NestedValue_NestedType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::UNSPECIFIED;
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::DICT;
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::ARRAY;
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::NestedType_MIN;
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::NestedType_MAX;
constexpr int DebugAnnotation_NestedValue::NestedType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DebugAnnotation_NestedValue::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugAnnotation_NestedValue>()._has_bits_);
  static void set_has_nested_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DebugAnnotation_NestedValue::DebugAnnotation_NestedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  dict_keys_(arena),
  dict_values_(arena),
  array_values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DebugAnnotation.NestedValue)
}
DebugAnnotation_NestedValue::DebugAnnotation_NestedValue(const DebugAnnotation_NestedValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      dict_keys_(from.dict_keys_),
      dict_values_(from.dict_values_),
      array_values_(from.array_values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    string_value_.Set(from._internal_string_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&nested_type_, &from.nested_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&double_value_) -
    reinterpret_cast<char*>(&nested_type_)) + sizeof(double_value_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DebugAnnotation.NestedValue)
}

inline void DebugAnnotation_NestedValue::SharedCtor() {
string_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  string_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nested_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&double_value_) -
    reinterpret_cast<char*>(&nested_type_)) + sizeof(double_value_));
}

DebugAnnotation_NestedValue::~DebugAnnotation_NestedValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DebugAnnotation.NestedValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugAnnotation_NestedValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_value_.Destroy();
}

void DebugAnnotation_NestedValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DebugAnnotation_NestedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DebugAnnotation.NestedValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dict_keys_.Clear();
  dict_values_.Clear();
  array_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&nested_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&double_value_) -
        reinterpret_cast<char*>(&nested_type_)) + sizeof(double_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DebugAnnotation_NestedValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.DebugAnnotation.NestedValue.NestedType nested_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::DebugAnnotation_NestedValue_NestedType_IsValid(val))) {
            _internal_set_nested_type(static_cast<::perfetto::protos::DebugAnnotation_NestedValue_NestedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string dict_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dict_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.DebugAnnotation.NestedValue dict_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dict_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.DebugAnnotation.NestedValue array_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 int_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_int_value(&has_bits);
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double double_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_double_value(&has_bits);
          double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool bool_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bool_value(&has_bits);
          bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugAnnotation_NestedValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DebugAnnotation.NestedValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.DebugAnnotation.NestedValue.NestedType nested_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_nested_type(), target);
  }

  // repeated string dict_keys = 2;
  for (int i = 0, n = this->_internal_dict_keys_size(); i < n; i++) {
    const auto& s = this->_internal_dict_keys(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated .perfetto.protos.DebugAnnotation.NestedValue dict_values = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dict_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_dict_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.DebugAnnotation.NestedValue array_values = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_array_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_array_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 int_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_int_value(), target);
  }

  // optional double double_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_double_value(), target);
  }

  // optional bool bool_value = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_bool_value(), target);
  }

  // optional string string_value = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DebugAnnotation.NestedValue)
  return target;
}

size_t DebugAnnotation_NestedValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DebugAnnotation.NestedValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dict_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dict_keys_.size());
  for (int i = 0, n = dict_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dict_keys_.Get(i));
  }

  // repeated .perfetto.protos.DebugAnnotation.NestedValue dict_values = 3;
  total_size += 1UL * this->_internal_dict_values_size();
  for (const auto& msg : this->dict_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.DebugAnnotation.NestedValue array_values = 4;
  total_size += 1UL * this->_internal_array_values_size();
  for (const auto& msg : this->array_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string string_value = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional .perfetto.protos.DebugAnnotation.NestedValue.NestedType nested_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_nested_type());
    }

    // optional bool bool_value = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int64 int_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int_value());
    }

    // optional double double_value = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugAnnotation_NestedValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DebugAnnotation_NestedValue*>(
      &from));
}

void DebugAnnotation_NestedValue::MergeFrom(const DebugAnnotation_NestedValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DebugAnnotation.NestedValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dict_keys_.MergeFrom(from.dict_keys_);
  dict_values_.MergeFrom(from.dict_values_);
  array_values_.MergeFrom(from.array_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      nested_type_ = from.nested_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      bool_value_ = from.bool_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      int_value_ = from.int_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      double_value_ = from.double_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DebugAnnotation_NestedValue::CopyFrom(const DebugAnnotation_NestedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DebugAnnotation.NestedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugAnnotation_NestedValue::IsInitialized() const {
  return true;
}

void DebugAnnotation_NestedValue::InternalSwap(DebugAnnotation_NestedValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dict_keys_.InternalSwap(&other->dict_keys_);
  dict_values_.InternalSwap(&other->dict_values_);
  array_values_.InternalSwap(&other->array_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &string_value_, lhs_arena,
      &other->string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugAnnotation_NestedValue, double_value_)
      + sizeof(DebugAnnotation_NestedValue::double_value_)
      - PROTOBUF_FIELD_OFFSET(DebugAnnotation_NestedValue, nested_type_)>(
          reinterpret_cast<char*>(&nested_type_),
          reinterpret_cast<char*>(&other->nested_type_));
}

std::string DebugAnnotation_NestedValue::GetTypeName() const {
  return "perfetto.protos.DebugAnnotation.NestedValue";
}


// ===================================================================

class DebugAnnotation::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugAnnotation>()._has_bits_);
  static const ::perfetto::protos::DebugAnnotation_NestedValue& nested_value(const DebugAnnotation* msg);
  static void set_has_proto_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::DebugAnnotation_NestedValue&
DebugAnnotation::_Internal::nested_value(const DebugAnnotation* msg) {
  return *msg->value_.nested_value_;
}
void DebugAnnotation::set_allocated_nested_value(::perfetto::protos::DebugAnnotation_NestedValue* nested_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (nested_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nested_value);
    if (message_arena != submessage_arena) {
      nested_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_value, submessage_arena);
    }
    set_has_nested_value();
    value_.nested_value_ = nested_value;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.nested_value)
}
DebugAnnotation::DebugAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  dict_entries_(arena),
  array_values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DebugAnnotation)
}
DebugAnnotation::DebugAnnotation(const DebugAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      dict_entries_(from.dict_entries_),
      array_values_(from.array_values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  proto_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proto_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proto_value()) {
    proto_value_.Set(from._internal_proto_value(), 
      GetArenaForAllocation());
  }
  clear_has_name_field();
  switch (from.name_field_case()) {
    case kNameIid: {
      _internal_set_name_iid(from._internal_name_iid());
      break;
    }
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  clear_has_value();
  switch (from.value_case()) {
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kUintValue: {
      _internal_set_uint_value(from._internal_uint_value());
      break;
    }
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kPointerValue: {
      _internal_set_pointer_value(from._internal_pointer_value());
      break;
    }
    case kNestedValue: {
      _internal_mutable_nested_value()->::perfetto::protos::DebugAnnotation_NestedValue::MergeFrom(from._internal_nested_value());
      break;
    }
    case kLegacyJsonValue: {
      _internal_set_legacy_json_value(from._internal_legacy_json_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kStringValueIid: {
      _internal_set_string_value_iid(from._internal_string_value_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  clear_has_proto_type_descriptor();
  switch (from.proto_type_descriptor_case()) {
    case kProtoTypeName: {
      _internal_set_proto_type_name(from._internal_proto_type_name());
      break;
    }
    case kProtoTypeNameIid: {
      _internal_set_proto_type_name_iid(from._internal_proto_type_name_iid());
      break;
    }
    case PROTO_TYPE_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DebugAnnotation)
}

inline void DebugAnnotation::SharedCtor() {
proto_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proto_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_name_field();
clear_has_value();
clear_has_proto_type_descriptor();
}

DebugAnnotation::~DebugAnnotation() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DebugAnnotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proto_value_.Destroy();
  if (has_name_field()) {
    clear_name_field();
  }
  if (has_value()) {
    clear_value();
  }
  if (has_proto_type_descriptor()) {
    clear_proto_type_descriptor();
  }
}

void DebugAnnotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DebugAnnotation::clear_name_field() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.DebugAnnotation)
  switch (name_field_case()) {
    case kNameIid: {
      // No need to clear
      break;
    }
    case kName: {
      name_field_.name_.Destroy();
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NAME_FIELD_NOT_SET;
}

void DebugAnnotation::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.DebugAnnotation)
  switch (value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kUintValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kPointerValue: {
      // No need to clear
      break;
    }
    case kNestedValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.nested_value_;
      }
      break;
    }
    case kLegacyJsonValue: {
      value_.legacy_json_value_.Destroy();
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy();
      break;
    }
    case kStringValueIid: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = VALUE_NOT_SET;
}

void DebugAnnotation::clear_proto_type_descriptor() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.DebugAnnotation)
  switch (proto_type_descriptor_case()) {
    case kProtoTypeName: {
      proto_type_descriptor_.proto_type_name_.Destroy();
      break;
    }
    case kProtoTypeNameIid: {
      // No need to clear
      break;
    }
    case PROTO_TYPE_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = PROTO_TYPE_DESCRIPTOR_NOT_SET;
}


void DebugAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DebugAnnotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dict_entries_.Clear();
  array_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    proto_value_.ClearNonDefaultToEmpty();
  }
  clear_name_field();
  clear_value();
  clear_proto_type_descriptor();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DebugAnnotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 name_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_name_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uint_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_uint_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string string_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pointer_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_pointer_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.DebugAnnotation.NestedValue nested_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string legacy_json_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_legacy_json_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.DebugAnnotation dict_entries = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dict_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.DebugAnnotation array_values = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 proto_type_name_iid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _internal_set_proto_type_name_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes proto_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_proto_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string proto_type_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_proto_type_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 string_value_iid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _internal_set_string_value_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugAnnotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DebugAnnotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 name_iid = 1;
  if (_internal_has_name_iid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_name_iid(), target);
  }

  switch (value_case()) {
    case kBoolValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bool_value(), target);
      break;
    }
    case kUintValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uint_value(), target);
      break;
    }
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_int_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_double_value(), target);
      break;
    }
    case kStringValue: {
      target = stream->WriteStringMaybeAliased(
          6, this->_internal_string_value(), target);
      break;
    }
    case kPointerValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_pointer_value(), target);
      break;
    }
    case kNestedValue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::nested_value(this),
          _Internal::nested_value(this).GetCachedSize(), target, stream);
      break;
    }
    case kLegacyJsonValue: {
      target = stream->WriteStringMaybeAliased(
          9, this->_internal_legacy_json_value(), target);
      break;
    }
    default: ;
  }
  // string name = 10;
  if (_internal_has_name()) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // repeated .perfetto.protos.DebugAnnotation dict_entries = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dict_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_dict_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.DebugAnnotation array_values = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_array_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_array_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 proto_type_name_iid = 13;
  if (_internal_has_proto_type_name_iid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_proto_type_name_iid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes proto_value = 14;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_proto_value(), target);
  }

  // string proto_type_name = 16;
  if (_internal_has_proto_type_name()) {
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_proto_type_name(), target);
  }

  // uint64 string_value_iid = 17;
  if (_internal_has_string_value_iid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_string_value_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DebugAnnotation)
  return target;
}

size_t DebugAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DebugAnnotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.DebugAnnotation dict_entries = 11;
  total_size += 1UL * this->_internal_dict_entries_size();
  for (const auto& msg : this->dict_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.DebugAnnotation array_values = 12;
  total_size += 1UL * this->_internal_array_values_size();
  for (const auto& msg : this->array_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes proto_value = 14;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proto_value());
  }

  switch (name_field_case()) {
    // uint64 name_iid = 1;
    case kNameIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_name_iid());
      break;
    }
    // string name = 10;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  switch (value_case()) {
    // bool bool_value = 2;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // uint64 uint_value = 3;
    case kUintValue: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uint_value());
      break;
    }
    // int64 int_value = 4;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int_value());
      break;
    }
    // double double_value = 5;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // uint64 pointer_value = 7;
    case kPointerValue: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pointer_value());
      break;
    }
    // .perfetto.protos.DebugAnnotation.NestedValue nested_value = 8;
    case kNestedValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.nested_value_);
      break;
    }
    // string legacy_json_value = 9;
    case kLegacyJsonValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_legacy_json_value());
      break;
    }
    // string string_value = 6;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // uint64 string_value_iid = 17;
    case kStringValueIid: {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_string_value_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  switch (proto_type_descriptor_case()) {
    // string proto_type_name = 16;
    case kProtoTypeName: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_type_name());
      break;
    }
    // uint64 proto_type_name_iid = 13;
    case kProtoTypeNameIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_proto_type_name_iid());
      break;
    }
    case PROTO_TYPE_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugAnnotation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DebugAnnotation*>(
      &from));
}

void DebugAnnotation::MergeFrom(const DebugAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DebugAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dict_entries_.MergeFrom(from.dict_entries_);
  array_values_.MergeFrom(from.array_values_);
  if (from._internal_has_proto_value()) {
    _internal_set_proto_value(from._internal_proto_value());
  }
  switch (from.name_field_case()) {
    case kNameIid: {
      _internal_set_name_iid(from._internal_name_iid());
      break;
    }
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  switch (from.value_case()) {
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kUintValue: {
      _internal_set_uint_value(from._internal_uint_value());
      break;
    }
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kPointerValue: {
      _internal_set_pointer_value(from._internal_pointer_value());
      break;
    }
    case kNestedValue: {
      _internal_mutable_nested_value()->::perfetto::protos::DebugAnnotation_NestedValue::MergeFrom(from._internal_nested_value());
      break;
    }
    case kLegacyJsonValue: {
      _internal_set_legacy_json_value(from._internal_legacy_json_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kStringValueIid: {
      _internal_set_string_value_iid(from._internal_string_value_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  switch (from.proto_type_descriptor_case()) {
    case kProtoTypeName: {
      _internal_set_proto_type_name(from._internal_proto_type_name());
      break;
    }
    case kProtoTypeNameIid: {
      _internal_set_proto_type_name_iid(from._internal_proto_type_name_iid());
      break;
    }
    case PROTO_TYPE_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DebugAnnotation::CopyFrom(const DebugAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DebugAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugAnnotation::IsInitialized() const {
  return true;
}

void DebugAnnotation::InternalSwap(DebugAnnotation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dict_entries_.InternalSwap(&other->dict_entries_);
  array_values_.InternalSwap(&other->array_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &proto_value_, lhs_arena,
      &other->proto_value_, rhs_arena
  );
  swap(name_field_, other->name_field_);
  swap(value_, other->value_);
  swap(proto_type_descriptor_, other->proto_type_descriptor_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

std::string DebugAnnotation::GetTypeName() const {
  return "perfetto.protos.DebugAnnotation";
}


// ===================================================================

class DebugAnnotationName::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugAnnotationName>()._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DebugAnnotationName::DebugAnnotationName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DebugAnnotationName)
}
DebugAnnotationName::DebugAnnotationName(const DebugAnnotationName& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  iid_ = from.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DebugAnnotationName)
}

inline void DebugAnnotationName::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
iid_ = uint64_t{0u};
}

DebugAnnotationName::~DebugAnnotationName() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DebugAnnotationName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugAnnotationName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void DebugAnnotationName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DebugAnnotationName::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DebugAnnotationName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  iid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DebugAnnotationName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugAnnotationName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DebugAnnotationName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DebugAnnotationName)
  return target;
}

size_t DebugAnnotationName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DebugAnnotationName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_iid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugAnnotationName::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DebugAnnotationName*>(
      &from));
}

void DebugAnnotationName::MergeFrom(const DebugAnnotationName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DebugAnnotationName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      iid_ = from.iid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DebugAnnotationName::CopyFrom(const DebugAnnotationName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DebugAnnotationName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugAnnotationName::IsInitialized() const {
  return true;
}

void DebugAnnotationName::InternalSwap(DebugAnnotationName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(iid_, other->iid_);
}

std::string DebugAnnotationName::GetTypeName() const {
  return "perfetto.protos.DebugAnnotationName";
}


// ===================================================================

class DebugAnnotationValueTypeName::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugAnnotationValueTypeName>()._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DebugAnnotationValueTypeName::DebugAnnotationValueTypeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DebugAnnotationValueTypeName)
}
DebugAnnotationValueTypeName::DebugAnnotationValueTypeName(const DebugAnnotationValueTypeName& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  iid_ = from.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DebugAnnotationValueTypeName)
}

inline void DebugAnnotationValueTypeName::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
iid_ = uint64_t{0u};
}

DebugAnnotationValueTypeName::~DebugAnnotationValueTypeName() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DebugAnnotationValueTypeName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugAnnotationValueTypeName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void DebugAnnotationValueTypeName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DebugAnnotationValueTypeName::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DebugAnnotationValueTypeName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  iid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DebugAnnotationValueTypeName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugAnnotationValueTypeName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DebugAnnotationValueTypeName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DebugAnnotationValueTypeName)
  return target;
}

size_t DebugAnnotationValueTypeName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DebugAnnotationValueTypeName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_iid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugAnnotationValueTypeName::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DebugAnnotationValueTypeName*>(
      &from));
}

void DebugAnnotationValueTypeName::MergeFrom(const DebugAnnotationValueTypeName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DebugAnnotationValueTypeName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      iid_ = from.iid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DebugAnnotationValueTypeName::CopyFrom(const DebugAnnotationValueTypeName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DebugAnnotationValueTypeName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugAnnotationValueTypeName::IsInitialized() const {
  return true;
}

void DebugAnnotationValueTypeName::InternalSwap(DebugAnnotationValueTypeName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(iid_, other->iid_);
}

std::string DebugAnnotationValueTypeName::GetTypeName() const {
  return "perfetto.protos.DebugAnnotationValueTypeName";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::DebugAnnotation_NestedValue*
Arena::CreateMaybeMessage< ::perfetto::protos::DebugAnnotation_NestedValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DebugAnnotation_NestedValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DebugAnnotation*
Arena::CreateMaybeMessage< ::perfetto::protos::DebugAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DebugAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DebugAnnotationName*
Arena::CreateMaybeMessage< ::perfetto::protos::DebugAnnotationName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DebugAnnotationName >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DebugAnnotationValueTypeName*
Arena::CreateMaybeMessage< ::perfetto::protos::DebugAnnotationValueTypeName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DebugAnnotationValueTypeName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
