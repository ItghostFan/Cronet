// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/trusty.proto

#include "protos/perfetto/trace/ftrace/trusty.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR TrustySmcFtraceEvent::TrustySmcFtraceEvent(
    ::_pbi::ConstantInitialized)
  : r0_(uint64_t{0u})
  , r1_(uint64_t{0u})
  , r2_(uint64_t{0u})
  , r3_(uint64_t{0u}){}
struct TrustySmcFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustySmcFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustySmcFtraceEventDefaultTypeInternal() {}
  union {
    TrustySmcFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustySmcFtraceEventDefaultTypeInternal _TrustySmcFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustySmcDoneFtraceEvent::TrustySmcDoneFtraceEvent(
    ::_pbi::ConstantInitialized)
  : ret_(uint64_t{0u}){}
struct TrustySmcDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustySmcDoneFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustySmcDoneFtraceEventDefaultTypeInternal() {}
  union {
    TrustySmcDoneFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustySmcDoneFtraceEventDefaultTypeInternal _TrustySmcDoneFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyStdCall32FtraceEvent::TrustyStdCall32FtraceEvent(
    ::_pbi::ConstantInitialized)
  : r0_(uint64_t{0u})
  , r1_(uint64_t{0u})
  , r2_(uint64_t{0u})
  , r3_(uint64_t{0u}){}
struct TrustyStdCall32FtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyStdCall32FtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyStdCall32FtraceEventDefaultTypeInternal() {}
  union {
    TrustyStdCall32FtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyStdCall32FtraceEventDefaultTypeInternal _TrustyStdCall32FtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyStdCall32DoneFtraceEvent::TrustyStdCall32DoneFtraceEvent(
    ::_pbi::ConstantInitialized)
  : ret_(int64_t{0}){}
struct TrustyStdCall32DoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyStdCall32DoneFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyStdCall32DoneFtraceEventDefaultTypeInternal() {}
  union {
    TrustyStdCall32DoneFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyStdCall32DoneFtraceEventDefaultTypeInternal _TrustyStdCall32DoneFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyShareMemoryFtraceEvent::TrustyShareMemoryFtraceEvent(
    ::_pbi::ConstantInitialized)
  : len_(uint64_t{0u})
  , lend_(0u)
  , nents_(0u){}
struct TrustyShareMemoryFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyShareMemoryFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyShareMemoryFtraceEventDefaultTypeInternal() {}
  union {
    TrustyShareMemoryFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyShareMemoryFtraceEventDefaultTypeInternal _TrustyShareMemoryFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyShareMemoryDoneFtraceEvent::TrustyShareMemoryDoneFtraceEvent(
    ::_pbi::ConstantInitialized)
  : handle_(uint64_t{0u})
  , len_(uint64_t{0u})
  , lend_(0u)
  , nents_(0u)
  , ret_(0){}
struct TrustyShareMemoryDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyShareMemoryDoneFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyShareMemoryDoneFtraceEventDefaultTypeInternal() {}
  union {
    TrustyShareMemoryDoneFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyShareMemoryDoneFtraceEventDefaultTypeInternal _TrustyShareMemoryDoneFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyReclaimMemoryFtraceEvent::TrustyReclaimMemoryFtraceEvent(
    ::_pbi::ConstantInitialized)
  : id_(uint64_t{0u}){}
struct TrustyReclaimMemoryFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyReclaimMemoryFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyReclaimMemoryFtraceEventDefaultTypeInternal() {}
  union {
    TrustyReclaimMemoryFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyReclaimMemoryFtraceEventDefaultTypeInternal _TrustyReclaimMemoryFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyReclaimMemoryDoneFtraceEvent::TrustyReclaimMemoryDoneFtraceEvent(
    ::_pbi::ConstantInitialized)
  : id_(uint64_t{0u})
  , ret_(0){}
struct TrustyReclaimMemoryDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyReclaimMemoryDoneFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyReclaimMemoryDoneFtraceEventDefaultTypeInternal() {}
  union {
    TrustyReclaimMemoryDoneFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyReclaimMemoryDoneFtraceEventDefaultTypeInternal _TrustyReclaimMemoryDoneFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyIrqFtraceEvent::TrustyIrqFtraceEvent(
    ::_pbi::ConstantInitialized)
  : irq_(0){}
struct TrustyIrqFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIrqFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIrqFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIrqFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIrqFtraceEventDefaultTypeInternal _TrustyIrqFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyIpcHandleEventFtraceEvent::TrustyIpcHandleEventFtraceEvent(
    ::_pbi::ConstantInitialized)
  : srv_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chan_(0u)
  , event_id_(0u){}
struct TrustyIpcHandleEventFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcHandleEventFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcHandleEventFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcHandleEventFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcHandleEventFtraceEventDefaultTypeInternal _TrustyIpcHandleEventFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyIpcConnectFtraceEvent::TrustyIpcConnectFtraceEvent(
    ::_pbi::ConstantInitialized)
  : port_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chan_(0u)
  , state_(0){}
struct TrustyIpcConnectFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcConnectFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcConnectFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcConnectFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcConnectFtraceEventDefaultTypeInternal _TrustyIpcConnectFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyIpcConnectEndFtraceEvent::TrustyIpcConnectEndFtraceEvent(
    ::_pbi::ConstantInitialized)
  : chan_(0u)
  , err_(0)
  , state_(0){}
struct TrustyIpcConnectEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcConnectEndFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcConnectEndFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcConnectEndFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcConnectEndFtraceEventDefaultTypeInternal _TrustyIpcConnectEndFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyIpcWriteFtraceEvent::TrustyIpcWriteFtraceEvent(
    ::_pbi::ConstantInitialized)
  : srv_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , buf_id_(uint64_t{0u})
  , chan_(0u)
  , kind_shm_(0)
  , shm_cnt_(uint64_t{0u})
  , len_or_err_(0){}
struct TrustyIpcWriteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcWriteFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcWriteFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcWriteFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcWriteFtraceEventDefaultTypeInternal _TrustyIpcWriteFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyIpcPollFtraceEvent::TrustyIpcPollFtraceEvent(
    ::_pbi::ConstantInitialized)
  : srv_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chan_(0u)
  , poll_mask_(0u){}
struct TrustyIpcPollFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcPollFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcPollFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcPollFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcPollFtraceEventDefaultTypeInternal _TrustyIpcPollFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyIpcReadFtraceEvent::TrustyIpcReadFtraceEvent(
    ::_pbi::ConstantInitialized)
  : srv_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chan_(0u){}
struct TrustyIpcReadFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcReadFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcReadFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcReadFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcReadFtraceEventDefaultTypeInternal _TrustyIpcReadFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyIpcReadEndFtraceEvent::TrustyIpcReadEndFtraceEvent(
    ::_pbi::ConstantInitialized)
  : srv_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , buf_id_(uint64_t{0u})
  , chan_(0u)
  , len_or_err_(0)
  , shm_cnt_(uint64_t{0u}){}
struct TrustyIpcReadEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcReadEndFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcReadEndFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcReadEndFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcReadEndFtraceEventDefaultTypeInternal _TrustyIpcReadEndFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyIpcRxFtraceEvent::TrustyIpcRxFtraceEvent(
    ::_pbi::ConstantInitialized)
  : srv_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , buf_id_(uint64_t{0u})
  , chan_(0u){}
struct TrustyIpcRxFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcRxFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcRxFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcRxFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcRxFtraceEventDefaultTypeInternal _TrustyIpcRxFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR TrustyEnqueueNopFtraceEvent::TrustyEnqueueNopFtraceEvent(
    ::_pbi::ConstantInitialized)
  : arg1_(0u)
  , arg2_(0u)
  , arg3_(0u){}
struct TrustyEnqueueNopFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyEnqueueNopFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyEnqueueNopFtraceEventDefaultTypeInternal() {}
  union {
    TrustyEnqueueNopFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyEnqueueNopFtraceEventDefaultTypeInternal _TrustyEnqueueNopFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class TrustySmcFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustySmcFtraceEvent>()._has_bits_);
  static void set_has_r0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_r1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_r2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_r3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TrustySmcFtraceEvent::TrustySmcFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustySmcFtraceEvent)
}
TrustySmcFtraceEvent::TrustySmcFtraceEvent(const TrustySmcFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&r0_, &from.r0_,
    static_cast<size_t>(reinterpret_cast<char*>(&r3_) -
    reinterpret_cast<char*>(&r0_)) + sizeof(r3_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustySmcFtraceEvent)
}

inline void TrustySmcFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&r3_) -
    reinterpret_cast<char*>(&r0_)) + sizeof(r3_));
}

TrustySmcFtraceEvent::~TrustySmcFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustySmcFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustySmcFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustySmcFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustySmcFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustySmcFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&r0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&r3_) -
        reinterpret_cast<char*>(&r0_)) + sizeof(r3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustySmcFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 r0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_r0(&has_bits);
          r0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 r1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_r1(&has_bits);
          r1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 r2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_r2(&has_bits);
          r2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 r3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_r3(&has_bits);
          r3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustySmcFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustySmcFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 r0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_r0(), target);
  }

  // optional uint64 r1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_r1(), target);
  }

  // optional uint64 r2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_r2(), target);
  }

  // optional uint64 r3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_r3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustySmcFtraceEvent)
  return target;
}

size_t TrustySmcFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustySmcFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 r0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_r0());
    }

    // optional uint64 r1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_r1());
    }

    // optional uint64 r2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_r2());
    }

    // optional uint64 r3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_r3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustySmcFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustySmcFtraceEvent*>(
      &from));
}

void TrustySmcFtraceEvent::MergeFrom(const TrustySmcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustySmcFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      r0_ = from.r0_;
    }
    if (cached_has_bits & 0x00000002u) {
      r1_ = from.r1_;
    }
    if (cached_has_bits & 0x00000004u) {
      r2_ = from.r2_;
    }
    if (cached_has_bits & 0x00000008u) {
      r3_ = from.r3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustySmcFtraceEvent::CopyFrom(const TrustySmcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustySmcFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustySmcFtraceEvent::IsInitialized() const {
  return true;
}

void TrustySmcFtraceEvent::InternalSwap(TrustySmcFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustySmcFtraceEvent, r3_)
      + sizeof(TrustySmcFtraceEvent::r3_)
      - PROTOBUF_FIELD_OFFSET(TrustySmcFtraceEvent, r0_)>(
          reinterpret_cast<char*>(&r0_),
          reinterpret_cast<char*>(&other->r0_));
}

std::string TrustySmcFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustySmcFtraceEvent";
}


// ===================================================================

class TrustySmcDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustySmcDoneFtraceEvent>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustySmcDoneFtraceEvent::TrustySmcDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustySmcDoneFtraceEvent)
}
TrustySmcDoneFtraceEvent::TrustySmcDoneFtraceEvent(const TrustySmcDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustySmcDoneFtraceEvent)
}

inline void TrustySmcDoneFtraceEvent::SharedCtor() {
ret_ = uint64_t{0u};
}

TrustySmcDoneFtraceEvent::~TrustySmcDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustySmcDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustySmcDoneFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustySmcDoneFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustySmcDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustySmcDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustySmcDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustySmcDoneFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustySmcDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustySmcDoneFtraceEvent)
  return target;
}

size_t TrustySmcDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustySmcDoneFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 ret = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustySmcDoneFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustySmcDoneFtraceEvent*>(
      &from));
}

void TrustySmcDoneFtraceEvent::MergeFrom(const TrustySmcDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustySmcDoneFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ret()) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustySmcDoneFtraceEvent::CopyFrom(const TrustySmcDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustySmcDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustySmcDoneFtraceEvent::IsInitialized() const {
  return true;
}

void TrustySmcDoneFtraceEvent::InternalSwap(TrustySmcDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
}

std::string TrustySmcDoneFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustySmcDoneFtraceEvent";
}


// ===================================================================

class TrustyStdCall32FtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyStdCall32FtraceEvent>()._has_bits_);
  static void set_has_r0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_r1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_r2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_r3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TrustyStdCall32FtraceEvent::TrustyStdCall32FtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyStdCall32FtraceEvent)
}
TrustyStdCall32FtraceEvent::TrustyStdCall32FtraceEvent(const TrustyStdCall32FtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&r0_, &from.r0_,
    static_cast<size_t>(reinterpret_cast<char*>(&r3_) -
    reinterpret_cast<char*>(&r0_)) + sizeof(r3_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyStdCall32FtraceEvent)
}

inline void TrustyStdCall32FtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&r3_) -
    reinterpret_cast<char*>(&r0_)) + sizeof(r3_));
}

TrustyStdCall32FtraceEvent::~TrustyStdCall32FtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyStdCall32FtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyStdCall32FtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyStdCall32FtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyStdCall32FtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyStdCall32FtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&r0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&r3_) -
        reinterpret_cast<char*>(&r0_)) + sizeof(r3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyStdCall32FtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 r0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_r0(&has_bits);
          r0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 r1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_r1(&has_bits);
          r1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 r2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_r2(&has_bits);
          r2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 r3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_r3(&has_bits);
          r3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyStdCall32FtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyStdCall32FtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 r0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_r0(), target);
  }

  // optional uint64 r1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_r1(), target);
  }

  // optional uint64 r2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_r2(), target);
  }

  // optional uint64 r3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_r3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyStdCall32FtraceEvent)
  return target;
}

size_t TrustyStdCall32FtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyStdCall32FtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 r0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_r0());
    }

    // optional uint64 r1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_r1());
    }

    // optional uint64 r2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_r2());
    }

    // optional uint64 r3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_r3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyStdCall32FtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyStdCall32FtraceEvent*>(
      &from));
}

void TrustyStdCall32FtraceEvent::MergeFrom(const TrustyStdCall32FtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyStdCall32FtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      r0_ = from.r0_;
    }
    if (cached_has_bits & 0x00000002u) {
      r1_ = from.r1_;
    }
    if (cached_has_bits & 0x00000004u) {
      r2_ = from.r2_;
    }
    if (cached_has_bits & 0x00000008u) {
      r3_ = from.r3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyStdCall32FtraceEvent::CopyFrom(const TrustyStdCall32FtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyStdCall32FtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyStdCall32FtraceEvent::IsInitialized() const {
  return true;
}

void TrustyStdCall32FtraceEvent::InternalSwap(TrustyStdCall32FtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyStdCall32FtraceEvent, r3_)
      + sizeof(TrustyStdCall32FtraceEvent::r3_)
      - PROTOBUF_FIELD_OFFSET(TrustyStdCall32FtraceEvent, r0_)>(
          reinterpret_cast<char*>(&r0_),
          reinterpret_cast<char*>(&other->r0_));
}

std::string TrustyStdCall32FtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyStdCall32FtraceEvent";
}


// ===================================================================

class TrustyStdCall32DoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyStdCall32DoneFtraceEvent>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyStdCall32DoneFtraceEvent::TrustyStdCall32DoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
}
TrustyStdCall32DoneFtraceEvent::TrustyStdCall32DoneFtraceEvent(const TrustyStdCall32DoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
}

inline void TrustyStdCall32DoneFtraceEvent::SharedCtor() {
ret_ = int64_t{0};
}

TrustyStdCall32DoneFtraceEvent::~TrustyStdCall32DoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyStdCall32DoneFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyStdCall32DoneFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyStdCall32DoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyStdCall32DoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyStdCall32DoneFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  return target;
}

size_t TrustyStdCall32DoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 ret = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyStdCall32DoneFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyStdCall32DoneFtraceEvent*>(
      &from));
}

void TrustyStdCall32DoneFtraceEvent::MergeFrom(const TrustyStdCall32DoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ret()) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyStdCall32DoneFtraceEvent::CopyFrom(const TrustyStdCall32DoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyStdCall32DoneFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyStdCall32DoneFtraceEvent::InternalSwap(TrustyStdCall32DoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
}

std::string TrustyStdCall32DoneFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyStdCall32DoneFtraceEvent";
}


// ===================================================================

class TrustyShareMemoryFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyShareMemoryFtraceEvent>()._has_bits_);
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lend(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nents(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrustyShareMemoryFtraceEvent::TrustyShareMemoryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyShareMemoryFtraceEvent)
}
TrustyShareMemoryFtraceEvent::TrustyShareMemoryFtraceEvent(const TrustyShareMemoryFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&len_, &from.len_,
    static_cast<size_t>(reinterpret_cast<char*>(&nents_) -
    reinterpret_cast<char*>(&len_)) + sizeof(nents_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyShareMemoryFtraceEvent)
}

inline void TrustyShareMemoryFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&len_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nents_) -
    reinterpret_cast<char*>(&len_)) + sizeof(nents_));
}

TrustyShareMemoryFtraceEvent::~TrustyShareMemoryFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyShareMemoryFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyShareMemoryFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyShareMemoryFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyShareMemoryFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyShareMemoryFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nents_) -
        reinterpret_cast<char*>(&len_)) + sizeof(nents_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyShareMemoryFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_len(&has_bits);
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lend(&has_bits);
          lend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nents(&has_bits);
          nents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyShareMemoryFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyShareMemoryFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 len = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_len(), target);
  }

  // optional uint32 lend = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lend(), target);
  }

  // optional uint32 nents = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyShareMemoryFtraceEvent)
  return target;
}

size_t TrustyShareMemoryFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyShareMemoryFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 len = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
    }

    // optional uint32 lend = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lend());
    }

    // optional uint32 nents = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nents());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyShareMemoryFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyShareMemoryFtraceEvent*>(
      &from));
}

void TrustyShareMemoryFtraceEvent::MergeFrom(const TrustyShareMemoryFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyShareMemoryFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      len_ = from.len_;
    }
    if (cached_has_bits & 0x00000002u) {
      lend_ = from.lend_;
    }
    if (cached_has_bits & 0x00000004u) {
      nents_ = from.nents_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyShareMemoryFtraceEvent::CopyFrom(const TrustyShareMemoryFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyShareMemoryFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyShareMemoryFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyShareMemoryFtraceEvent::InternalSwap(TrustyShareMemoryFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyShareMemoryFtraceEvent, nents_)
      + sizeof(TrustyShareMemoryFtraceEvent::nents_)
      - PROTOBUF_FIELD_OFFSET(TrustyShareMemoryFtraceEvent, len_)>(
          reinterpret_cast<char*>(&len_),
          reinterpret_cast<char*>(&other->len_));
}

std::string TrustyShareMemoryFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyShareMemoryFtraceEvent";
}


// ===================================================================

class TrustyShareMemoryDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyShareMemoryDoneFtraceEvent>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lend(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nents(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TrustyShareMemoryDoneFtraceEvent::TrustyShareMemoryDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
}
TrustyShareMemoryDoneFtraceEvent::TrustyShareMemoryDoneFtraceEvent(const TrustyShareMemoryDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
}

inline void TrustyShareMemoryDoneFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(ret_));
}

TrustyShareMemoryDoneFtraceEvent::~TrustyShareMemoryDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyShareMemoryDoneFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyShareMemoryDoneFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyShareMemoryDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&handle_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyShareMemoryDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_len(&has_bits);
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lend(&has_bits);
          lend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_nents(&has_bits);
          nents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyShareMemoryDoneFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_handle(), target);
  }

  // optional uint64 len = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_len(), target);
  }

  // optional uint32 lend = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lend(), target);
  }

  // optional uint32 nents = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nents(), target);
  }

  // optional int32 ret = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  return target;
}

size_t TrustyShareMemoryDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_handle());
    }

    // optional uint64 len = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
    }

    // optional uint32 lend = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lend());
    }

    // optional uint32 nents = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nents());
    }

    // optional int32 ret = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyShareMemoryDoneFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyShareMemoryDoneFtraceEvent*>(
      &from));
}

void TrustyShareMemoryDoneFtraceEvent::MergeFrom(const TrustyShareMemoryDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    if (cached_has_bits & 0x00000004u) {
      lend_ = from.lend_;
    }
    if (cached_has_bits & 0x00000008u) {
      nents_ = from.nents_;
    }
    if (cached_has_bits & 0x00000010u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyShareMemoryDoneFtraceEvent::CopyFrom(const TrustyShareMemoryDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyShareMemoryDoneFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyShareMemoryDoneFtraceEvent::InternalSwap(TrustyShareMemoryDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyShareMemoryDoneFtraceEvent, ret_)
      + sizeof(TrustyShareMemoryDoneFtraceEvent::ret_)
      - PROTOBUF_FIELD_OFFSET(TrustyShareMemoryDoneFtraceEvent, handle_)>(
          reinterpret_cast<char*>(&handle_),
          reinterpret_cast<char*>(&other->handle_));
}

std::string TrustyShareMemoryDoneFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyShareMemoryDoneFtraceEvent";
}


// ===================================================================

class TrustyReclaimMemoryFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyReclaimMemoryFtraceEvent>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyReclaimMemoryFtraceEvent::TrustyReclaimMemoryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
}
TrustyReclaimMemoryFtraceEvent::TrustyReclaimMemoryFtraceEvent(const TrustyReclaimMemoryFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
}

inline void TrustyReclaimMemoryFtraceEvent::SharedCtor() {
id_ = uint64_t{0u};
}

TrustyReclaimMemoryFtraceEvent::~TrustyReclaimMemoryFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyReclaimMemoryFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyReclaimMemoryFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyReclaimMemoryFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyReclaimMemoryFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyReclaimMemoryFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  return target;
}

size_t TrustyReclaimMemoryFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyReclaimMemoryFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyReclaimMemoryFtraceEvent*>(
      &from));
}

void TrustyReclaimMemoryFtraceEvent::MergeFrom(const TrustyReclaimMemoryFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyReclaimMemoryFtraceEvent::CopyFrom(const TrustyReclaimMemoryFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyReclaimMemoryFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyReclaimMemoryFtraceEvent::InternalSwap(TrustyReclaimMemoryFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

std::string TrustyReclaimMemoryFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyReclaimMemoryFtraceEvent";
}


// ===================================================================

class TrustyReclaimMemoryDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyReclaimMemoryDoneFtraceEvent>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TrustyReclaimMemoryDoneFtraceEvent::TrustyReclaimMemoryDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
}
TrustyReclaimMemoryDoneFtraceEvent::TrustyReclaimMemoryDoneFtraceEvent(const TrustyReclaimMemoryDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
}

inline void TrustyReclaimMemoryDoneFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ret_));
}

TrustyReclaimMemoryDoneFtraceEvent::~TrustyReclaimMemoryDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyReclaimMemoryDoneFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyReclaimMemoryDoneFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyReclaimMemoryDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&id_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyReclaimMemoryDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyReclaimMemoryDoneFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  return target;
}

size_t TrustyReclaimMemoryDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional int32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyReclaimMemoryDoneFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyReclaimMemoryDoneFtraceEvent*>(
      &from));
}

void TrustyReclaimMemoryDoneFtraceEvent::MergeFrom(const TrustyReclaimMemoryDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyReclaimMemoryDoneFtraceEvent::CopyFrom(const TrustyReclaimMemoryDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyReclaimMemoryDoneFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyReclaimMemoryDoneFtraceEvent::InternalSwap(TrustyReclaimMemoryDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyReclaimMemoryDoneFtraceEvent, ret_)
      + sizeof(TrustyReclaimMemoryDoneFtraceEvent::ret_)
      - PROTOBUF_FIELD_OFFSET(TrustyReclaimMemoryDoneFtraceEvent, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string TrustyReclaimMemoryDoneFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent";
}


// ===================================================================

class TrustyIrqFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIrqFtraceEvent>()._has_bits_);
  static void set_has_irq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIrqFtraceEvent::TrustyIrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIrqFtraceEvent)
}
TrustyIrqFtraceEvent::TrustyIrqFtraceEvent(const TrustyIrqFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  irq_ = from.irq_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIrqFtraceEvent)
}

inline void TrustyIrqFtraceEvent::SharedCtor() {
irq_ = 0;
}

TrustyIrqFtraceEvent::~TrustyIrqFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIrqFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIrqFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyIrqFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyIrqFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIrqFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  irq_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyIrqFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 irq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_irq(&has_bits);
          irq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyIrqFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIrqFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 irq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_irq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIrqFtraceEvent)
  return target;
}

size_t TrustyIrqFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIrqFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 irq = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_irq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyIrqFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyIrqFtraceEvent*>(
      &from));
}

void TrustyIrqFtraceEvent::MergeFrom(const TrustyIrqFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIrqFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_irq()) {
    _internal_set_irq(from._internal_irq());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyIrqFtraceEvent::CopyFrom(const TrustyIrqFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIrqFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIrqFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIrqFtraceEvent::InternalSwap(TrustyIrqFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(irq_, other->irq_);
}

std::string TrustyIrqFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyIrqFtraceEvent";
}


// ===================================================================

class TrustyIpcHandleEventFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcHandleEventFtraceEvent>()._has_bits_);
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcHandleEventFtraceEvent::TrustyIpcHandleEventFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
}
TrustyIpcHandleEventFtraceEvent::TrustyIpcHandleEventFtraceEvent(const TrustyIpcHandleEventFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srv_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_srv_name()) {
    srv_name_.Set(from._internal_srv_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chan_, &from.chan_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&chan_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
}

inline void TrustyIpcHandleEventFtraceEvent::SharedCtor() {
srv_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srv_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&chan_)) + sizeof(event_id_));
}

TrustyIpcHandleEventFtraceEvent::~TrustyIpcHandleEventFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcHandleEventFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  srv_name_.Destroy();
}

void TrustyIpcHandleEventFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyIpcHandleEventFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    srv_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&chan_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyIpcHandleEventFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chan(&has_bits);
          chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string srv_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyIpcHandleEventFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chan = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chan(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(), target);
  }

  // optional string srv_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_srv_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  return target;
}

size_t TrustyIpcHandleEventFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string srv_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_srv_name());
    }

    // optional uint32 chan = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyIpcHandleEventFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyIpcHandleEventFtraceEvent*>(
      &from));
}

void TrustyIpcHandleEventFtraceEvent::MergeFrom(const TrustyIpcHandleEventFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      chan_ = from.chan_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyIpcHandleEventFtraceEvent::CopyFrom(const TrustyIpcHandleEventFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcHandleEventFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcHandleEventFtraceEvent::InternalSwap(TrustyIpcHandleEventFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &srv_name_, lhs_arena,
      &other->srv_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcHandleEventFtraceEvent, event_id_)
      + sizeof(TrustyIpcHandleEventFtraceEvent::event_id_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcHandleEventFtraceEvent, chan_)>(
          reinterpret_cast<char*>(&chan_),
          reinterpret_cast<char*>(&other->chan_));
}

std::string TrustyIpcHandleEventFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyIpcHandleEventFtraceEvent";
}


// ===================================================================

class TrustyIpcConnectFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcConnectFtraceEvent>()._has_bits_);
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrustyIpcConnectFtraceEvent::TrustyIpcConnectFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcConnectFtraceEvent)
}
TrustyIpcConnectFtraceEvent::TrustyIpcConnectFtraceEvent(const TrustyIpcConnectFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_port()) {
    port_.Set(from._internal_port(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chan_, &from.chan_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&chan_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcConnectFtraceEvent)
}

inline void TrustyIpcConnectFtraceEvent::SharedCtor() {
port_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  port_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&chan_)) + sizeof(state_));
}

TrustyIpcConnectFtraceEvent::~TrustyIpcConnectFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcConnectFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcConnectFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  port_.Destroy();
}

void TrustyIpcConnectFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyIpcConnectFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcConnectFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    port_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&chan_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyIpcConnectFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chan(&has_bits);
          chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyIpcConnectFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcConnectFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chan = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chan(), target);
  }

  // optional string port = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_port(), target);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcConnectFtraceEvent)
  return target;
}

size_t TrustyIpcConnectFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcConnectFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string port = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_port());
    }

    // optional uint32 chan = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan());
    }

    // optional int32 state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyIpcConnectFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyIpcConnectFtraceEvent*>(
      &from));
}

void TrustyIpcConnectFtraceEvent::MergeFrom(const TrustyIpcConnectFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcConnectFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_port(from._internal_port());
    }
    if (cached_has_bits & 0x00000002u) {
      chan_ = from.chan_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyIpcConnectFtraceEvent::CopyFrom(const TrustyIpcConnectFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcConnectFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcConnectFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcConnectFtraceEvent::InternalSwap(TrustyIpcConnectFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &port_, lhs_arena,
      &other->port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcConnectFtraceEvent, state_)
      + sizeof(TrustyIpcConnectFtraceEvent::state_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcConnectFtraceEvent, chan_)>(
          reinterpret_cast<char*>(&chan_),
          reinterpret_cast<char*>(&other->chan_));
}

std::string TrustyIpcConnectFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyIpcConnectFtraceEvent";
}


// ===================================================================

class TrustyIpcConnectEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcConnectEndFtraceEvent>()._has_bits_);
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrustyIpcConnectEndFtraceEvent::TrustyIpcConnectEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
}
TrustyIpcConnectEndFtraceEvent::TrustyIpcConnectEndFtraceEvent(const TrustyIpcConnectEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&chan_, &from.chan_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&chan_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
}

inline void TrustyIpcConnectEndFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&chan_)) + sizeof(state_));
}

TrustyIpcConnectEndFtraceEvent::~TrustyIpcConnectEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcConnectEndFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyIpcConnectEndFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyIpcConnectEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&chan_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyIpcConnectEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chan(&has_bits);
          chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_err(&has_bits);
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyIpcConnectEndFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chan(), target);
  }

  // optional int32 err = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_err(), target);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  return target;
}

size_t TrustyIpcConnectEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 chan = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan());
    }

    // optional int32 err = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_err());
    }

    // optional int32 state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyIpcConnectEndFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyIpcConnectEndFtraceEvent*>(
      &from));
}

void TrustyIpcConnectEndFtraceEvent::MergeFrom(const TrustyIpcConnectEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chan_ = from.chan_;
    }
    if (cached_has_bits & 0x00000002u) {
      err_ = from.err_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyIpcConnectEndFtraceEvent::CopyFrom(const TrustyIpcConnectEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcConnectEndFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcConnectEndFtraceEvent::InternalSwap(TrustyIpcConnectEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcConnectEndFtraceEvent, state_)
      + sizeof(TrustyIpcConnectEndFtraceEvent::state_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcConnectEndFtraceEvent, chan_)>(
          reinterpret_cast<char*>(&chan_),
          reinterpret_cast<char*>(&other->chan_));
}

std::string TrustyIpcConnectEndFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyIpcConnectEndFtraceEvent";
}


// ===================================================================

class TrustyIpcWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcWriteFtraceEvent>()._has_bits_);
  static void set_has_buf_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kind_shm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_len_or_err(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_shm_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcWriteFtraceEvent::TrustyIpcWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcWriteFtraceEvent)
}
TrustyIpcWriteFtraceEvent::TrustyIpcWriteFtraceEvent(const TrustyIpcWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srv_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_srv_name()) {
    srv_name_.Set(from._internal_srv_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&buf_id_, &from.buf_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_or_err_) -
    reinterpret_cast<char*>(&buf_id_)) + sizeof(len_or_err_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcWriteFtraceEvent)
}

inline void TrustyIpcWriteFtraceEvent::SharedCtor() {
srv_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srv_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buf_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&len_or_err_) -
    reinterpret_cast<char*>(&buf_id_)) + sizeof(len_or_err_));
}

TrustyIpcWriteFtraceEvent::~TrustyIpcWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcWriteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcWriteFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  srv_name_.Destroy();
}

void TrustyIpcWriteFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyIpcWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcWriteFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    srv_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&buf_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&len_or_err_) -
        reinterpret_cast<char*>(&buf_id_)) + sizeof(len_or_err_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyIpcWriteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 buf_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_buf_id(&has_bits);
          buf_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chan(&has_bits);
          chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kind_shm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kind_shm(&has_bits);
          kind_shm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 len_or_err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_len_or_err(&has_bits);
          len_or_err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 shm_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_shm_cnt(&has_bits);
          shm_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string srv_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyIpcWriteFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcWriteFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 buf_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_buf_id(), target);
  }

  // optional uint32 chan = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chan(), target);
  }

  // optional int32 kind_shm = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_kind_shm(), target);
  }

  // optional int32 len_or_err = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_len_or_err(), target);
  }

  // optional uint64 shm_cnt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_shm_cnt(), target);
  }

  // optional string srv_name = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_srv_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcWriteFtraceEvent)
  return target;
}

size_t TrustyIpcWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcWriteFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string srv_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_srv_name());
    }

    // optional uint64 buf_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_buf_id());
    }

    // optional uint32 chan = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan());
    }

    // optional int32 kind_shm = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kind_shm());
    }

    // optional uint64 shm_cnt = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shm_cnt());
    }

    // optional int32 len_or_err = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_len_or_err());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyIpcWriteFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyIpcWriteFtraceEvent*>(
      &from));
}

void TrustyIpcWriteFtraceEvent::MergeFrom(const TrustyIpcWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcWriteFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      buf_id_ = from.buf_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chan_ = from.chan_;
    }
    if (cached_has_bits & 0x00000008u) {
      kind_shm_ = from.kind_shm_;
    }
    if (cached_has_bits & 0x00000010u) {
      shm_cnt_ = from.shm_cnt_;
    }
    if (cached_has_bits & 0x00000020u) {
      len_or_err_ = from.len_or_err_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyIpcWriteFtraceEvent::CopyFrom(const TrustyIpcWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcWriteFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcWriteFtraceEvent::InternalSwap(TrustyIpcWriteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &srv_name_, lhs_arena,
      &other->srv_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcWriteFtraceEvent, len_or_err_)
      + sizeof(TrustyIpcWriteFtraceEvent::len_or_err_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcWriteFtraceEvent, buf_id_)>(
          reinterpret_cast<char*>(&buf_id_),
          reinterpret_cast<char*>(&other->buf_id_));
}

std::string TrustyIpcWriteFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyIpcWriteFtraceEvent";
}


// ===================================================================

class TrustyIpcPollFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcPollFtraceEvent>()._has_bits_);
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_poll_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcPollFtraceEvent::TrustyIpcPollFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcPollFtraceEvent)
}
TrustyIpcPollFtraceEvent::TrustyIpcPollFtraceEvent(const TrustyIpcPollFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srv_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_srv_name()) {
    srv_name_.Set(from._internal_srv_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chan_, &from.chan_,
    static_cast<size_t>(reinterpret_cast<char*>(&poll_mask_) -
    reinterpret_cast<char*>(&chan_)) + sizeof(poll_mask_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcPollFtraceEvent)
}

inline void TrustyIpcPollFtraceEvent::SharedCtor() {
srv_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srv_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&poll_mask_) -
    reinterpret_cast<char*>(&chan_)) + sizeof(poll_mask_));
}

TrustyIpcPollFtraceEvent::~TrustyIpcPollFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcPollFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcPollFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  srv_name_.Destroy();
}

void TrustyIpcPollFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyIpcPollFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcPollFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    srv_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&poll_mask_) -
        reinterpret_cast<char*>(&chan_)) + sizeof(poll_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyIpcPollFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chan(&has_bits);
          chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 poll_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_poll_mask(&has_bits);
          poll_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string srv_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyIpcPollFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcPollFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chan = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chan(), target);
  }

  // optional uint32 poll_mask = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_poll_mask(), target);
  }

  // optional string srv_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_srv_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcPollFtraceEvent)
  return target;
}

size_t TrustyIpcPollFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcPollFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string srv_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_srv_name());
    }

    // optional uint32 chan = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan());
    }

    // optional uint32 poll_mask = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_poll_mask());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyIpcPollFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyIpcPollFtraceEvent*>(
      &from));
}

void TrustyIpcPollFtraceEvent::MergeFrom(const TrustyIpcPollFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcPollFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      chan_ = from.chan_;
    }
    if (cached_has_bits & 0x00000004u) {
      poll_mask_ = from.poll_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyIpcPollFtraceEvent::CopyFrom(const TrustyIpcPollFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcPollFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcPollFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcPollFtraceEvent::InternalSwap(TrustyIpcPollFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &srv_name_, lhs_arena,
      &other->srv_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcPollFtraceEvent, poll_mask_)
      + sizeof(TrustyIpcPollFtraceEvent::poll_mask_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcPollFtraceEvent, chan_)>(
          reinterpret_cast<char*>(&chan_),
          reinterpret_cast<char*>(&other->chan_));
}

std::string TrustyIpcPollFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyIpcPollFtraceEvent";
}


// ===================================================================

class TrustyIpcReadFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcReadFtraceEvent>()._has_bits_);
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcReadFtraceEvent::TrustyIpcReadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcReadFtraceEvent)
}
TrustyIpcReadFtraceEvent::TrustyIpcReadFtraceEvent(const TrustyIpcReadFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srv_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_srv_name()) {
    srv_name_.Set(from._internal_srv_name(), 
      GetArenaForAllocation());
  }
  chan_ = from.chan_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcReadFtraceEvent)
}

inline void TrustyIpcReadFtraceEvent::SharedCtor() {
srv_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srv_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chan_ = 0u;
}

TrustyIpcReadFtraceEvent::~TrustyIpcReadFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcReadFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcReadFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  srv_name_.Destroy();
}

void TrustyIpcReadFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyIpcReadFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcReadFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    srv_name_.ClearNonDefaultToEmpty();
  }
  chan_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyIpcReadFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chan(&has_bits);
          chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string srv_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyIpcReadFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcReadFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chan = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chan(), target);
  }

  // optional string srv_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srv_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcReadFtraceEvent)
  return target;
}

size_t TrustyIpcReadFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcReadFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string srv_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_srv_name());
    }

    // optional uint32 chan = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyIpcReadFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyIpcReadFtraceEvent*>(
      &from));
}

void TrustyIpcReadFtraceEvent::MergeFrom(const TrustyIpcReadFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcReadFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      chan_ = from.chan_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyIpcReadFtraceEvent::CopyFrom(const TrustyIpcReadFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcReadFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcReadFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcReadFtraceEvent::InternalSwap(TrustyIpcReadFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &srv_name_, lhs_arena,
      &other->srv_name_, rhs_arena
  );
  swap(chan_, other->chan_);
}

std::string TrustyIpcReadFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyIpcReadFtraceEvent";
}


// ===================================================================

class TrustyIpcReadEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcReadEndFtraceEvent>()._has_bits_);
  static void set_has_buf_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_len_or_err(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shm_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcReadEndFtraceEvent::TrustyIpcReadEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcReadEndFtraceEvent)
}
TrustyIpcReadEndFtraceEvent::TrustyIpcReadEndFtraceEvent(const TrustyIpcReadEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srv_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_srv_name()) {
    srv_name_.Set(from._internal_srv_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&buf_id_, &from.buf_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shm_cnt_) -
    reinterpret_cast<char*>(&buf_id_)) + sizeof(shm_cnt_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcReadEndFtraceEvent)
}

inline void TrustyIpcReadEndFtraceEvent::SharedCtor() {
srv_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srv_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buf_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shm_cnt_) -
    reinterpret_cast<char*>(&buf_id_)) + sizeof(shm_cnt_));
}

TrustyIpcReadEndFtraceEvent::~TrustyIpcReadEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcReadEndFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  srv_name_.Destroy();
}

void TrustyIpcReadEndFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyIpcReadEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    srv_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&buf_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shm_cnt_) -
        reinterpret_cast<char*>(&buf_id_)) + sizeof(shm_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyIpcReadEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 buf_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_buf_id(&has_bits);
          buf_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chan(&has_bits);
          chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 len_or_err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_len_or_err(&has_bits);
          len_or_err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 shm_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_shm_cnt(&has_bits);
          shm_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string srv_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyIpcReadEndFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 buf_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_buf_id(), target);
  }

  // optional uint32 chan = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chan(), target);
  }

  // optional int32 len_or_err = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_len_or_err(), target);
  }

  // optional uint64 shm_cnt = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_shm_cnt(), target);
  }

  // optional string srv_name = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_srv_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  return target;
}

size_t TrustyIpcReadEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string srv_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_srv_name());
    }

    // optional uint64 buf_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_buf_id());
    }

    // optional uint32 chan = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan());
    }

    // optional int32 len_or_err = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_len_or_err());
    }

    // optional uint64 shm_cnt = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shm_cnt());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyIpcReadEndFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyIpcReadEndFtraceEvent*>(
      &from));
}

void TrustyIpcReadEndFtraceEvent::MergeFrom(const TrustyIpcReadEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      buf_id_ = from.buf_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chan_ = from.chan_;
    }
    if (cached_has_bits & 0x00000008u) {
      len_or_err_ = from.len_or_err_;
    }
    if (cached_has_bits & 0x00000010u) {
      shm_cnt_ = from.shm_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyIpcReadEndFtraceEvent::CopyFrom(const TrustyIpcReadEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcReadEndFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcReadEndFtraceEvent::InternalSwap(TrustyIpcReadEndFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &srv_name_, lhs_arena,
      &other->srv_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcReadEndFtraceEvent, shm_cnt_)
      + sizeof(TrustyIpcReadEndFtraceEvent::shm_cnt_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcReadEndFtraceEvent, buf_id_)>(
          reinterpret_cast<char*>(&buf_id_),
          reinterpret_cast<char*>(&other->buf_id_));
}

std::string TrustyIpcReadEndFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyIpcReadEndFtraceEvent";
}


// ===================================================================

class TrustyIpcRxFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcRxFtraceEvent>()._has_bits_);
  static void set_has_buf_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcRxFtraceEvent::TrustyIpcRxFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcRxFtraceEvent)
}
TrustyIpcRxFtraceEvent::TrustyIpcRxFtraceEvent(const TrustyIpcRxFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srv_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_srv_name()) {
    srv_name_.Set(from._internal_srv_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&buf_id_, &from.buf_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chan_) -
    reinterpret_cast<char*>(&buf_id_)) + sizeof(chan_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcRxFtraceEvent)
}

inline void TrustyIpcRxFtraceEvent::SharedCtor() {
srv_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srv_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buf_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chan_) -
    reinterpret_cast<char*>(&buf_id_)) + sizeof(chan_));
}

TrustyIpcRxFtraceEvent::~TrustyIpcRxFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcRxFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcRxFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  srv_name_.Destroy();
}

void TrustyIpcRxFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyIpcRxFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcRxFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    srv_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&buf_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chan_) -
        reinterpret_cast<char*>(&buf_id_)) + sizeof(chan_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyIpcRxFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 buf_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_buf_id(&has_bits);
          buf_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chan(&has_bits);
          chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string srv_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyIpcRxFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcRxFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 buf_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_buf_id(), target);
  }

  // optional uint32 chan = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chan(), target);
  }

  // optional string srv_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_srv_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcRxFtraceEvent)
  return target;
}

size_t TrustyIpcRxFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcRxFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string srv_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_srv_name());
    }

    // optional uint64 buf_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_buf_id());
    }

    // optional uint32 chan = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyIpcRxFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyIpcRxFtraceEvent*>(
      &from));
}

void TrustyIpcRxFtraceEvent::MergeFrom(const TrustyIpcRxFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcRxFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      buf_id_ = from.buf_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chan_ = from.chan_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyIpcRxFtraceEvent::CopyFrom(const TrustyIpcRxFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcRxFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcRxFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcRxFtraceEvent::InternalSwap(TrustyIpcRxFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &srv_name_, lhs_arena,
      &other->srv_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcRxFtraceEvent, chan_)
      + sizeof(TrustyIpcRxFtraceEvent::chan_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcRxFtraceEvent, buf_id_)>(
          reinterpret_cast<char*>(&buf_id_),
          reinterpret_cast<char*>(&other->buf_id_));
}

std::string TrustyIpcRxFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyIpcRxFtraceEvent";
}


// ===================================================================

class TrustyEnqueueNopFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyEnqueueNopFtraceEvent>()._has_bits_);
  static void set_has_arg1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_arg2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_arg3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrustyEnqueueNopFtraceEvent::TrustyEnqueueNopFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyEnqueueNopFtraceEvent)
}
TrustyEnqueueNopFtraceEvent::TrustyEnqueueNopFtraceEvent(const TrustyEnqueueNopFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&arg1_, &from.arg1_,
    static_cast<size_t>(reinterpret_cast<char*>(&arg3_) -
    reinterpret_cast<char*>(&arg1_)) + sizeof(arg3_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyEnqueueNopFtraceEvent)
}

inline void TrustyEnqueueNopFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&arg1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&arg3_) -
    reinterpret_cast<char*>(&arg1_)) + sizeof(arg3_));
}

TrustyEnqueueNopFtraceEvent::~TrustyEnqueueNopFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyEnqueueNopFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyEnqueueNopFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustyEnqueueNopFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&arg1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&arg3_) -
        reinterpret_cast<char*>(&arg1_)) + sizeof(arg3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustyEnqueueNopFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 arg1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_arg1(&has_bits);
          arg1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 arg2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_arg2(&has_bits);
          arg2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 arg3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_arg3(&has_bits);
          arg3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustyEnqueueNopFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 arg1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_arg1(), target);
  }

  // optional uint32 arg2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_arg2(), target);
  }

  // optional uint32 arg3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arg3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  return target;
}

size_t TrustyEnqueueNopFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 arg1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arg1());
    }

    // optional uint32 arg2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arg2());
    }

    // optional uint32 arg3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arg3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustyEnqueueNopFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustyEnqueueNopFtraceEvent*>(
      &from));
}

void TrustyEnqueueNopFtraceEvent::MergeFrom(const TrustyEnqueueNopFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      arg1_ = from.arg1_;
    }
    if (cached_has_bits & 0x00000002u) {
      arg2_ = from.arg2_;
    }
    if (cached_has_bits & 0x00000004u) {
      arg3_ = from.arg3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustyEnqueueNopFtraceEvent::CopyFrom(const TrustyEnqueueNopFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyEnqueueNopFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyEnqueueNopFtraceEvent::InternalSwap(TrustyEnqueueNopFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyEnqueueNopFtraceEvent, arg3_)
      + sizeof(TrustyEnqueueNopFtraceEvent::arg3_)
      - PROTOBUF_FIELD_OFFSET(TrustyEnqueueNopFtraceEvent, arg1_)>(
          reinterpret_cast<char*>(&arg1_),
          reinterpret_cast<char*>(&other->arg1_));
}

std::string TrustyEnqueueNopFtraceEvent::GetTypeName() const {
  return "perfetto.protos.TrustyEnqueueNopFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustySmcFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustySmcFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustySmcFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustySmcDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustySmcDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustySmcDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyStdCall32FtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyStdCall32FtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyStdCall32FtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyStdCall32DoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyStdCall32DoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyStdCall32DoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyShareMemoryFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyShareMemoryFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyShareMemoryFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyReclaimMemoryFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyReclaimMemoryFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyReclaimMemoryFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIrqFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIrqFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIrqFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcHandleEventFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcHandleEventFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcHandleEventFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcConnectFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcConnectFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcConnectFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcConnectEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcConnectEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcConnectEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcWriteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcPollFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcPollFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcPollFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcReadFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcReadFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcReadFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcReadEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcReadEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcReadEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcRxFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcRxFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcRxFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyEnqueueNopFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyEnqueueNopFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyEnqueueNopFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
