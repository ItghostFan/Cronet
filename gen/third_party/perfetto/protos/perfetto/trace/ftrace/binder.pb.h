// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/binder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class BinderLockFtraceEvent;
struct BinderLockFtraceEventDefaultTypeInternal;
extern BinderLockFtraceEventDefaultTypeInternal _BinderLockFtraceEvent_default_instance_;
class BinderLockedFtraceEvent;
struct BinderLockedFtraceEventDefaultTypeInternal;
extern BinderLockedFtraceEventDefaultTypeInternal _BinderLockedFtraceEvent_default_instance_;
class BinderSetPriorityFtraceEvent;
struct BinderSetPriorityFtraceEventDefaultTypeInternal;
extern BinderSetPriorityFtraceEventDefaultTypeInternal _BinderSetPriorityFtraceEvent_default_instance_;
class BinderTransactionAllocBufFtraceEvent;
struct BinderTransactionAllocBufFtraceEventDefaultTypeInternal;
extern BinderTransactionAllocBufFtraceEventDefaultTypeInternal _BinderTransactionAllocBufFtraceEvent_default_instance_;
class BinderTransactionFtraceEvent;
struct BinderTransactionFtraceEventDefaultTypeInternal;
extern BinderTransactionFtraceEventDefaultTypeInternal _BinderTransactionFtraceEvent_default_instance_;
class BinderTransactionReceivedFtraceEvent;
struct BinderTransactionReceivedFtraceEventDefaultTypeInternal;
extern BinderTransactionReceivedFtraceEventDefaultTypeInternal _BinderTransactionReceivedFtraceEvent_default_instance_;
class BinderUnlockFtraceEvent;
struct BinderUnlockFtraceEventDefaultTypeInternal;
extern BinderUnlockFtraceEventDefaultTypeInternal _BinderUnlockFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::BinderLockFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderLockFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderLockedFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderLockedFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderSetPriorityFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderSetPriorityFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderTransactionAllocBufFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderTransactionFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderTransactionFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderTransactionReceivedFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderTransactionReceivedFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderUnlockFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderUnlockFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class BinderTransactionFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderTransactionFtraceEvent) */ {
 public:
  inline BinderTransactionFtraceEvent() : BinderTransactionFtraceEvent(nullptr) {}
  ~BinderTransactionFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR BinderTransactionFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinderTransactionFtraceEvent(const BinderTransactionFtraceEvent& from);
  BinderTransactionFtraceEvent(BinderTransactionFtraceEvent&& from) noexcept
    : BinderTransactionFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderTransactionFtraceEvent& operator=(const BinderTransactionFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderTransactionFtraceEvent& operator=(BinderTransactionFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BinderTransactionFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinderTransactionFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderTransactionFtraceEvent*>(
               &_BinderTransactionFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BinderTransactionFtraceEvent& a, BinderTransactionFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BinderTransactionFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinderTransactionFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinderTransactionFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinderTransactionFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BinderTransactionFtraceEvent& from);
  void MergeFrom(const BinderTransactionFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderTransactionFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderTransactionFtraceEvent";
  }
  protected:
  explicit BinderTransactionFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugIdFieldNumber = 1,
    kTargetNodeFieldNumber = 2,
    kToProcFieldNumber = 3,
    kToThreadFieldNumber = 4,
    kReplyFieldNumber = 5,
    kCodeFieldNumber = 6,
    kFlagsFieldNumber = 7,
  };
  // optional int32 debug_id = 1;
  bool has_debug_id() const;
  private:
  bool _internal_has_debug_id() const;
  public:
  void clear_debug_id();
  int32_t debug_id() const;
  void set_debug_id(int32_t value);
  private:
  int32_t _internal_debug_id() const;
  void _internal_set_debug_id(int32_t value);
  public:

  // optional int32 target_node = 2;
  bool has_target_node() const;
  private:
  bool _internal_has_target_node() const;
  public:
  void clear_target_node();
  int32_t target_node() const;
  void set_target_node(int32_t value);
  private:
  int32_t _internal_target_node() const;
  void _internal_set_target_node(int32_t value);
  public:

  // optional int32 to_proc = 3;
  bool has_to_proc() const;
  private:
  bool _internal_has_to_proc() const;
  public:
  void clear_to_proc();
  int32_t to_proc() const;
  void set_to_proc(int32_t value);
  private:
  int32_t _internal_to_proc() const;
  void _internal_set_to_proc(int32_t value);
  public:

  // optional int32 to_thread = 4;
  bool has_to_thread() const;
  private:
  bool _internal_has_to_thread() const;
  public:
  void clear_to_thread();
  int32_t to_thread() const;
  void set_to_thread(int32_t value);
  private:
  int32_t _internal_to_thread() const;
  void _internal_set_to_thread(int32_t value);
  public:

  // optional int32 reply = 5;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  int32_t reply() const;
  void set_reply(int32_t value);
  private:
  int32_t _internal_reply() const;
  void _internal_set_reply(int32_t value);
  public:

  // optional uint32 code = 6;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // optional uint32 flags = 7;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderTransactionFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t debug_id_;
  int32_t target_node_;
  int32_t to_proc_;
  int32_t to_thread_;
  int32_t reply_;
  uint32_t code_;
  uint32_t flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderTransactionReceivedFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderTransactionReceivedFtraceEvent) */ {
 public:
  inline BinderTransactionReceivedFtraceEvent() : BinderTransactionReceivedFtraceEvent(nullptr) {}
  ~BinderTransactionReceivedFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR BinderTransactionReceivedFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinderTransactionReceivedFtraceEvent(const BinderTransactionReceivedFtraceEvent& from);
  BinderTransactionReceivedFtraceEvent(BinderTransactionReceivedFtraceEvent&& from) noexcept
    : BinderTransactionReceivedFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderTransactionReceivedFtraceEvent& operator=(const BinderTransactionReceivedFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderTransactionReceivedFtraceEvent& operator=(BinderTransactionReceivedFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BinderTransactionReceivedFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinderTransactionReceivedFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderTransactionReceivedFtraceEvent*>(
               &_BinderTransactionReceivedFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BinderTransactionReceivedFtraceEvent& a, BinderTransactionReceivedFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BinderTransactionReceivedFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinderTransactionReceivedFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinderTransactionReceivedFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinderTransactionReceivedFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BinderTransactionReceivedFtraceEvent& from);
  void MergeFrom(const BinderTransactionReceivedFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderTransactionReceivedFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderTransactionReceivedFtraceEvent";
  }
  protected:
  explicit BinderTransactionReceivedFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugIdFieldNumber = 1,
  };
  // optional int32 debug_id = 1;
  bool has_debug_id() const;
  private:
  bool _internal_has_debug_id() const;
  public:
  void clear_debug_id();
  int32_t debug_id() const;
  void set_debug_id(int32_t value);
  private:
  int32_t _internal_debug_id() const;
  void _internal_set_debug_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderTransactionReceivedFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t debug_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderSetPriorityFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderSetPriorityFtraceEvent) */ {
 public:
  inline BinderSetPriorityFtraceEvent() : BinderSetPriorityFtraceEvent(nullptr) {}
  ~BinderSetPriorityFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR BinderSetPriorityFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinderSetPriorityFtraceEvent(const BinderSetPriorityFtraceEvent& from);
  BinderSetPriorityFtraceEvent(BinderSetPriorityFtraceEvent&& from) noexcept
    : BinderSetPriorityFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderSetPriorityFtraceEvent& operator=(const BinderSetPriorityFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderSetPriorityFtraceEvent& operator=(BinderSetPriorityFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BinderSetPriorityFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinderSetPriorityFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderSetPriorityFtraceEvent*>(
               &_BinderSetPriorityFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BinderSetPriorityFtraceEvent& a, BinderSetPriorityFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BinderSetPriorityFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinderSetPriorityFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinderSetPriorityFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinderSetPriorityFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BinderSetPriorityFtraceEvent& from);
  void MergeFrom(const BinderSetPriorityFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderSetPriorityFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderSetPriorityFtraceEvent";
  }
  protected:
  explicit BinderSetPriorityFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcFieldNumber = 1,
    kThreadFieldNumber = 2,
    kOldPrioFieldNumber = 3,
    kNewPrioFieldNumber = 4,
    kDesiredPrioFieldNumber = 5,
  };
  // optional int32 proc = 1;
  bool has_proc() const;
  private:
  bool _internal_has_proc() const;
  public:
  void clear_proc();
  int32_t proc() const;
  void set_proc(int32_t value);
  private:
  int32_t _internal_proc() const;
  void _internal_set_proc(int32_t value);
  public:

  // optional int32 thread = 2;
  bool has_thread() const;
  private:
  bool _internal_has_thread() const;
  public:
  void clear_thread();
  int32_t thread() const;
  void set_thread(int32_t value);
  private:
  int32_t _internal_thread() const;
  void _internal_set_thread(int32_t value);
  public:

  // optional uint32 old_prio = 3;
  bool has_old_prio() const;
  private:
  bool _internal_has_old_prio() const;
  public:
  void clear_old_prio();
  uint32_t old_prio() const;
  void set_old_prio(uint32_t value);
  private:
  uint32_t _internal_old_prio() const;
  void _internal_set_old_prio(uint32_t value);
  public:

  // optional uint32 new_prio = 4;
  bool has_new_prio() const;
  private:
  bool _internal_has_new_prio() const;
  public:
  void clear_new_prio();
  uint32_t new_prio() const;
  void set_new_prio(uint32_t value);
  private:
  uint32_t _internal_new_prio() const;
  void _internal_set_new_prio(uint32_t value);
  public:

  // optional uint32 desired_prio = 5;
  bool has_desired_prio() const;
  private:
  bool _internal_has_desired_prio() const;
  public:
  void clear_desired_prio();
  uint32_t desired_prio() const;
  void set_desired_prio(uint32_t value);
  private:
  uint32_t _internal_desired_prio() const;
  void _internal_set_desired_prio(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderSetPriorityFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t proc_;
  int32_t thread_;
  uint32_t old_prio_;
  uint32_t new_prio_;
  uint32_t desired_prio_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderLockFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderLockFtraceEvent) */ {
 public:
  inline BinderLockFtraceEvent() : BinderLockFtraceEvent(nullptr) {}
  ~BinderLockFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR BinderLockFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinderLockFtraceEvent(const BinderLockFtraceEvent& from);
  BinderLockFtraceEvent(BinderLockFtraceEvent&& from) noexcept
    : BinderLockFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderLockFtraceEvent& operator=(const BinderLockFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderLockFtraceEvent& operator=(BinderLockFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BinderLockFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinderLockFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderLockFtraceEvent*>(
               &_BinderLockFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BinderLockFtraceEvent& a, BinderLockFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BinderLockFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinderLockFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinderLockFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinderLockFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BinderLockFtraceEvent& from);
  void MergeFrom(const BinderLockFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderLockFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderLockFtraceEvent";
  }
  protected:
  explicit BinderLockFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // optional string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderLockFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderLockedFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderLockedFtraceEvent) */ {
 public:
  inline BinderLockedFtraceEvent() : BinderLockedFtraceEvent(nullptr) {}
  ~BinderLockedFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR BinderLockedFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinderLockedFtraceEvent(const BinderLockedFtraceEvent& from);
  BinderLockedFtraceEvent(BinderLockedFtraceEvent&& from) noexcept
    : BinderLockedFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderLockedFtraceEvent& operator=(const BinderLockedFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderLockedFtraceEvent& operator=(BinderLockedFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BinderLockedFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinderLockedFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderLockedFtraceEvent*>(
               &_BinderLockedFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BinderLockedFtraceEvent& a, BinderLockedFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BinderLockedFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinderLockedFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinderLockedFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinderLockedFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BinderLockedFtraceEvent& from);
  void MergeFrom(const BinderLockedFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderLockedFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderLockedFtraceEvent";
  }
  protected:
  explicit BinderLockedFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // optional string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderLockedFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderUnlockFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderUnlockFtraceEvent) */ {
 public:
  inline BinderUnlockFtraceEvent() : BinderUnlockFtraceEvent(nullptr) {}
  ~BinderUnlockFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR BinderUnlockFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinderUnlockFtraceEvent(const BinderUnlockFtraceEvent& from);
  BinderUnlockFtraceEvent(BinderUnlockFtraceEvent&& from) noexcept
    : BinderUnlockFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderUnlockFtraceEvent& operator=(const BinderUnlockFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderUnlockFtraceEvent& operator=(BinderUnlockFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BinderUnlockFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinderUnlockFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderUnlockFtraceEvent*>(
               &_BinderUnlockFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BinderUnlockFtraceEvent& a, BinderUnlockFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BinderUnlockFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinderUnlockFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinderUnlockFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinderUnlockFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BinderUnlockFtraceEvent& from);
  void MergeFrom(const BinderUnlockFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderUnlockFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderUnlockFtraceEvent";
  }
  protected:
  explicit BinderUnlockFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // optional string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderUnlockFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderTransactionAllocBufFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderTransactionAllocBufFtraceEvent) */ {
 public:
  inline BinderTransactionAllocBufFtraceEvent() : BinderTransactionAllocBufFtraceEvent(nullptr) {}
  ~BinderTransactionAllocBufFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR BinderTransactionAllocBufFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinderTransactionAllocBufFtraceEvent(const BinderTransactionAllocBufFtraceEvent& from);
  BinderTransactionAllocBufFtraceEvent(BinderTransactionAllocBufFtraceEvent&& from) noexcept
    : BinderTransactionAllocBufFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderTransactionAllocBufFtraceEvent& operator=(const BinderTransactionAllocBufFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderTransactionAllocBufFtraceEvent& operator=(BinderTransactionAllocBufFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BinderTransactionAllocBufFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinderTransactionAllocBufFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderTransactionAllocBufFtraceEvent*>(
               &_BinderTransactionAllocBufFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BinderTransactionAllocBufFtraceEvent& a, BinderTransactionAllocBufFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BinderTransactionAllocBufFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinderTransactionAllocBufFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinderTransactionAllocBufFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinderTransactionAllocBufFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BinderTransactionAllocBufFtraceEvent& from);
  void MergeFrom(const BinderTransactionAllocBufFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderTransactionAllocBufFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderTransactionAllocBufFtraceEvent";
  }
  protected:
  explicit BinderTransactionAllocBufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSizeFieldNumber = 1,
    kOffsetsSizeFieldNumber = 3,
    kExtraBuffersSizeFieldNumber = 4,
    kDebugIdFieldNumber = 2,
  };
  // optional uint64 data_size = 1;
  bool has_data_size() const;
  private:
  bool _internal_has_data_size() const;
  public:
  void clear_data_size();
  uint64_t data_size() const;
  void set_data_size(uint64_t value);
  private:
  uint64_t _internal_data_size() const;
  void _internal_set_data_size(uint64_t value);
  public:

  // optional uint64 offsets_size = 3;
  bool has_offsets_size() const;
  private:
  bool _internal_has_offsets_size() const;
  public:
  void clear_offsets_size();
  uint64_t offsets_size() const;
  void set_offsets_size(uint64_t value);
  private:
  uint64_t _internal_offsets_size() const;
  void _internal_set_offsets_size(uint64_t value);
  public:

  // optional uint64 extra_buffers_size = 4;
  bool has_extra_buffers_size() const;
  private:
  bool _internal_has_extra_buffers_size() const;
  public:
  void clear_extra_buffers_size();
  uint64_t extra_buffers_size() const;
  void set_extra_buffers_size(uint64_t value);
  private:
  uint64_t _internal_extra_buffers_size() const;
  void _internal_set_extra_buffers_size(uint64_t value);
  public:

  // optional int32 debug_id = 2;
  bool has_debug_id() const;
  private:
  bool _internal_has_debug_id() const;
  public:
  void clear_debug_id();
  int32_t debug_id() const;
  void set_debug_id(int32_t value);
  private:
  int32_t _internal_debug_id() const;
  void _internal_set_debug_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t data_size_;
  uint64_t offsets_size_;
  uint64_t extra_buffers_size_;
  int32_t debug_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BinderTransactionFtraceEvent

// optional int32 debug_id = 1;
inline bool BinderTransactionFtraceEvent::_internal_has_debug_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BinderTransactionFtraceEvent::has_debug_id() const {
  return _internal_has_debug_id();
}
inline void BinderTransactionFtraceEvent::clear_debug_id() {
  debug_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t BinderTransactionFtraceEvent::_internal_debug_id() const {
  return debug_id_;
}
inline int32_t BinderTransactionFtraceEvent::debug_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.debug_id)
  return _internal_debug_id();
}
inline void BinderTransactionFtraceEvent::_internal_set_debug_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  debug_id_ = value;
}
inline void BinderTransactionFtraceEvent::set_debug_id(int32_t value) {
  _internal_set_debug_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.debug_id)
}

// optional int32 target_node = 2;
inline bool BinderTransactionFtraceEvent::_internal_has_target_node() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BinderTransactionFtraceEvent::has_target_node() const {
  return _internal_has_target_node();
}
inline void BinderTransactionFtraceEvent::clear_target_node() {
  target_node_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t BinderTransactionFtraceEvent::_internal_target_node() const {
  return target_node_;
}
inline int32_t BinderTransactionFtraceEvent::target_node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.target_node)
  return _internal_target_node();
}
inline void BinderTransactionFtraceEvent::_internal_set_target_node(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  target_node_ = value;
}
inline void BinderTransactionFtraceEvent::set_target_node(int32_t value) {
  _internal_set_target_node(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.target_node)
}

// optional int32 to_proc = 3;
inline bool BinderTransactionFtraceEvent::_internal_has_to_proc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BinderTransactionFtraceEvent::has_to_proc() const {
  return _internal_has_to_proc();
}
inline void BinderTransactionFtraceEvent::clear_to_proc() {
  to_proc_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t BinderTransactionFtraceEvent::_internal_to_proc() const {
  return to_proc_;
}
inline int32_t BinderTransactionFtraceEvent::to_proc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.to_proc)
  return _internal_to_proc();
}
inline void BinderTransactionFtraceEvent::_internal_set_to_proc(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  to_proc_ = value;
}
inline void BinderTransactionFtraceEvent::set_to_proc(int32_t value) {
  _internal_set_to_proc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.to_proc)
}

// optional int32 to_thread = 4;
inline bool BinderTransactionFtraceEvent::_internal_has_to_thread() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BinderTransactionFtraceEvent::has_to_thread() const {
  return _internal_has_to_thread();
}
inline void BinderTransactionFtraceEvent::clear_to_thread() {
  to_thread_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t BinderTransactionFtraceEvent::_internal_to_thread() const {
  return to_thread_;
}
inline int32_t BinderTransactionFtraceEvent::to_thread() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.to_thread)
  return _internal_to_thread();
}
inline void BinderTransactionFtraceEvent::_internal_set_to_thread(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  to_thread_ = value;
}
inline void BinderTransactionFtraceEvent::set_to_thread(int32_t value) {
  _internal_set_to_thread(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.to_thread)
}

// optional int32 reply = 5;
inline bool BinderTransactionFtraceEvent::_internal_has_reply() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BinderTransactionFtraceEvent::has_reply() const {
  return _internal_has_reply();
}
inline void BinderTransactionFtraceEvent::clear_reply() {
  reply_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t BinderTransactionFtraceEvent::_internal_reply() const {
  return reply_;
}
inline int32_t BinderTransactionFtraceEvent::reply() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.reply)
  return _internal_reply();
}
inline void BinderTransactionFtraceEvent::_internal_set_reply(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  reply_ = value;
}
inline void BinderTransactionFtraceEvent::set_reply(int32_t value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.reply)
}

// optional uint32 code = 6;
inline bool BinderTransactionFtraceEvent::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BinderTransactionFtraceEvent::has_code() const {
  return _internal_has_code();
}
inline void BinderTransactionFtraceEvent::clear_code() {
  code_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t BinderTransactionFtraceEvent::_internal_code() const {
  return code_;
}
inline uint32_t BinderTransactionFtraceEvent::code() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.code)
  return _internal_code();
}
inline void BinderTransactionFtraceEvent::_internal_set_code(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  code_ = value;
}
inline void BinderTransactionFtraceEvent::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.code)
}

// optional uint32 flags = 7;
inline bool BinderTransactionFtraceEvent::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BinderTransactionFtraceEvent::has_flags() const {
  return _internal_has_flags();
}
inline void BinderTransactionFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t BinderTransactionFtraceEvent::_internal_flags() const {
  return flags_;
}
inline uint32_t BinderTransactionFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.flags)
  return _internal_flags();
}
inline void BinderTransactionFtraceEvent::_internal_set_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  flags_ = value;
}
inline void BinderTransactionFtraceEvent::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.flags)
}

// -------------------------------------------------------------------

// BinderTransactionReceivedFtraceEvent

// optional int32 debug_id = 1;
inline bool BinderTransactionReceivedFtraceEvent::_internal_has_debug_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BinderTransactionReceivedFtraceEvent::has_debug_id() const {
  return _internal_has_debug_id();
}
inline void BinderTransactionReceivedFtraceEvent::clear_debug_id() {
  debug_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t BinderTransactionReceivedFtraceEvent::_internal_debug_id() const {
  return debug_id_;
}
inline int32_t BinderTransactionReceivedFtraceEvent::debug_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionReceivedFtraceEvent.debug_id)
  return _internal_debug_id();
}
inline void BinderTransactionReceivedFtraceEvent::_internal_set_debug_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  debug_id_ = value;
}
inline void BinderTransactionReceivedFtraceEvent::set_debug_id(int32_t value) {
  _internal_set_debug_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionReceivedFtraceEvent.debug_id)
}

// -------------------------------------------------------------------

// BinderSetPriorityFtraceEvent

// optional int32 proc = 1;
inline bool BinderSetPriorityFtraceEvent::_internal_has_proc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BinderSetPriorityFtraceEvent::has_proc() const {
  return _internal_has_proc();
}
inline void BinderSetPriorityFtraceEvent::clear_proc() {
  proc_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t BinderSetPriorityFtraceEvent::_internal_proc() const {
  return proc_;
}
inline int32_t BinderSetPriorityFtraceEvent::proc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderSetPriorityFtraceEvent.proc)
  return _internal_proc();
}
inline void BinderSetPriorityFtraceEvent::_internal_set_proc(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  proc_ = value;
}
inline void BinderSetPriorityFtraceEvent::set_proc(int32_t value) {
  _internal_set_proc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderSetPriorityFtraceEvent.proc)
}

// optional int32 thread = 2;
inline bool BinderSetPriorityFtraceEvent::_internal_has_thread() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BinderSetPriorityFtraceEvent::has_thread() const {
  return _internal_has_thread();
}
inline void BinderSetPriorityFtraceEvent::clear_thread() {
  thread_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t BinderSetPriorityFtraceEvent::_internal_thread() const {
  return thread_;
}
inline int32_t BinderSetPriorityFtraceEvent::thread() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderSetPriorityFtraceEvent.thread)
  return _internal_thread();
}
inline void BinderSetPriorityFtraceEvent::_internal_set_thread(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  thread_ = value;
}
inline void BinderSetPriorityFtraceEvent::set_thread(int32_t value) {
  _internal_set_thread(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderSetPriorityFtraceEvent.thread)
}

// optional uint32 old_prio = 3;
inline bool BinderSetPriorityFtraceEvent::_internal_has_old_prio() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BinderSetPriorityFtraceEvent::has_old_prio() const {
  return _internal_has_old_prio();
}
inline void BinderSetPriorityFtraceEvent::clear_old_prio() {
  old_prio_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BinderSetPriorityFtraceEvent::_internal_old_prio() const {
  return old_prio_;
}
inline uint32_t BinderSetPriorityFtraceEvent::old_prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderSetPriorityFtraceEvent.old_prio)
  return _internal_old_prio();
}
inline void BinderSetPriorityFtraceEvent::_internal_set_old_prio(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  old_prio_ = value;
}
inline void BinderSetPriorityFtraceEvent::set_old_prio(uint32_t value) {
  _internal_set_old_prio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderSetPriorityFtraceEvent.old_prio)
}

// optional uint32 new_prio = 4;
inline bool BinderSetPriorityFtraceEvent::_internal_has_new_prio() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BinderSetPriorityFtraceEvent::has_new_prio() const {
  return _internal_has_new_prio();
}
inline void BinderSetPriorityFtraceEvent::clear_new_prio() {
  new_prio_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t BinderSetPriorityFtraceEvent::_internal_new_prio() const {
  return new_prio_;
}
inline uint32_t BinderSetPriorityFtraceEvent::new_prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderSetPriorityFtraceEvent.new_prio)
  return _internal_new_prio();
}
inline void BinderSetPriorityFtraceEvent::_internal_set_new_prio(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  new_prio_ = value;
}
inline void BinderSetPriorityFtraceEvent::set_new_prio(uint32_t value) {
  _internal_set_new_prio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderSetPriorityFtraceEvent.new_prio)
}

// optional uint32 desired_prio = 5;
inline bool BinderSetPriorityFtraceEvent::_internal_has_desired_prio() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BinderSetPriorityFtraceEvent::has_desired_prio() const {
  return _internal_has_desired_prio();
}
inline void BinderSetPriorityFtraceEvent::clear_desired_prio() {
  desired_prio_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t BinderSetPriorityFtraceEvent::_internal_desired_prio() const {
  return desired_prio_;
}
inline uint32_t BinderSetPriorityFtraceEvent::desired_prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderSetPriorityFtraceEvent.desired_prio)
  return _internal_desired_prio();
}
inline void BinderSetPriorityFtraceEvent::_internal_set_desired_prio(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  desired_prio_ = value;
}
inline void BinderSetPriorityFtraceEvent::set_desired_prio(uint32_t value) {
  _internal_set_desired_prio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderSetPriorityFtraceEvent.desired_prio)
}

// -------------------------------------------------------------------

// BinderLockFtraceEvent

// optional string tag = 1;
inline bool BinderLockFtraceEvent::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BinderLockFtraceEvent::has_tag() const {
  return _internal_has_tag();
}
inline void BinderLockFtraceEvent::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BinderLockFtraceEvent::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderLockFtraceEvent.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinderLockFtraceEvent::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderLockFtraceEvent.tag)
}
inline std::string* BinderLockFtraceEvent::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BinderLockFtraceEvent.tag)
  return _s;
}
inline const std::string& BinderLockFtraceEvent::_internal_tag() const {
  return tag_.Get();
}
inline void BinderLockFtraceEvent::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(value, GetArenaForAllocation());
}
inline std::string* BinderLockFtraceEvent::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(GetArenaForAllocation());
}
inline std::string* BinderLockFtraceEvent::release_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BinderLockFtraceEvent.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BinderLockFtraceEvent::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BinderLockFtraceEvent.tag)
}

// -------------------------------------------------------------------

// BinderLockedFtraceEvent

// optional string tag = 1;
inline bool BinderLockedFtraceEvent::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BinderLockedFtraceEvent::has_tag() const {
  return _internal_has_tag();
}
inline void BinderLockedFtraceEvent::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BinderLockedFtraceEvent::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderLockedFtraceEvent.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinderLockedFtraceEvent::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderLockedFtraceEvent.tag)
}
inline std::string* BinderLockedFtraceEvent::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BinderLockedFtraceEvent.tag)
  return _s;
}
inline const std::string& BinderLockedFtraceEvent::_internal_tag() const {
  return tag_.Get();
}
inline void BinderLockedFtraceEvent::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(value, GetArenaForAllocation());
}
inline std::string* BinderLockedFtraceEvent::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(GetArenaForAllocation());
}
inline std::string* BinderLockedFtraceEvent::release_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BinderLockedFtraceEvent.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BinderLockedFtraceEvent::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BinderLockedFtraceEvent.tag)
}

// -------------------------------------------------------------------

// BinderUnlockFtraceEvent

// optional string tag = 1;
inline bool BinderUnlockFtraceEvent::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BinderUnlockFtraceEvent::has_tag() const {
  return _internal_has_tag();
}
inline void BinderUnlockFtraceEvent::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BinderUnlockFtraceEvent::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderUnlockFtraceEvent.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinderUnlockFtraceEvent::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderUnlockFtraceEvent.tag)
}
inline std::string* BinderUnlockFtraceEvent::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BinderUnlockFtraceEvent.tag)
  return _s;
}
inline const std::string& BinderUnlockFtraceEvent::_internal_tag() const {
  return tag_.Get();
}
inline void BinderUnlockFtraceEvent::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(value, GetArenaForAllocation());
}
inline std::string* BinderUnlockFtraceEvent::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(GetArenaForAllocation());
}
inline std::string* BinderUnlockFtraceEvent::release_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BinderUnlockFtraceEvent.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BinderUnlockFtraceEvent::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BinderUnlockFtraceEvent.tag)
}

// -------------------------------------------------------------------

// BinderTransactionAllocBufFtraceEvent

// optional uint64 data_size = 1;
inline bool BinderTransactionAllocBufFtraceEvent::_internal_has_data_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BinderTransactionAllocBufFtraceEvent::has_data_size() const {
  return _internal_has_data_size();
}
inline void BinderTransactionAllocBufFtraceEvent::clear_data_size() {
  data_size_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t BinderTransactionAllocBufFtraceEvent::_internal_data_size() const {
  return data_size_;
}
inline uint64_t BinderTransactionAllocBufFtraceEvent::data_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionAllocBufFtraceEvent.data_size)
  return _internal_data_size();
}
inline void BinderTransactionAllocBufFtraceEvent::_internal_set_data_size(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  data_size_ = value;
}
inline void BinderTransactionAllocBufFtraceEvent::set_data_size(uint64_t value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionAllocBufFtraceEvent.data_size)
}

// optional int32 debug_id = 2;
inline bool BinderTransactionAllocBufFtraceEvent::_internal_has_debug_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BinderTransactionAllocBufFtraceEvent::has_debug_id() const {
  return _internal_has_debug_id();
}
inline void BinderTransactionAllocBufFtraceEvent::clear_debug_id() {
  debug_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t BinderTransactionAllocBufFtraceEvent::_internal_debug_id() const {
  return debug_id_;
}
inline int32_t BinderTransactionAllocBufFtraceEvent::debug_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionAllocBufFtraceEvent.debug_id)
  return _internal_debug_id();
}
inline void BinderTransactionAllocBufFtraceEvent::_internal_set_debug_id(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  debug_id_ = value;
}
inline void BinderTransactionAllocBufFtraceEvent::set_debug_id(int32_t value) {
  _internal_set_debug_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionAllocBufFtraceEvent.debug_id)
}

// optional uint64 offsets_size = 3;
inline bool BinderTransactionAllocBufFtraceEvent::_internal_has_offsets_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BinderTransactionAllocBufFtraceEvent::has_offsets_size() const {
  return _internal_has_offsets_size();
}
inline void BinderTransactionAllocBufFtraceEvent::clear_offsets_size() {
  offsets_size_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t BinderTransactionAllocBufFtraceEvent::_internal_offsets_size() const {
  return offsets_size_;
}
inline uint64_t BinderTransactionAllocBufFtraceEvent::offsets_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionAllocBufFtraceEvent.offsets_size)
  return _internal_offsets_size();
}
inline void BinderTransactionAllocBufFtraceEvent::_internal_set_offsets_size(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  offsets_size_ = value;
}
inline void BinderTransactionAllocBufFtraceEvent::set_offsets_size(uint64_t value) {
  _internal_set_offsets_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionAllocBufFtraceEvent.offsets_size)
}

// optional uint64 extra_buffers_size = 4;
inline bool BinderTransactionAllocBufFtraceEvent::_internal_has_extra_buffers_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BinderTransactionAllocBufFtraceEvent::has_extra_buffers_size() const {
  return _internal_has_extra_buffers_size();
}
inline void BinderTransactionAllocBufFtraceEvent::clear_extra_buffers_size() {
  extra_buffers_size_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t BinderTransactionAllocBufFtraceEvent::_internal_extra_buffers_size() const {
  return extra_buffers_size_;
}
inline uint64_t BinderTransactionAllocBufFtraceEvent::extra_buffers_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionAllocBufFtraceEvent.extra_buffers_size)
  return _internal_extra_buffers_size();
}
inline void BinderTransactionAllocBufFtraceEvent::_internal_set_extra_buffers_size(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  extra_buffers_size_ = value;
}
inline void BinderTransactionAllocBufFtraceEvent::set_extra_buffers_size(uint64_t value) {
  _internal_set_extra_buffers_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionAllocBufFtraceEvent.extra_buffers_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto
