// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/mali.proto

#include "protos/perfetto/trace/ftrace/mali.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(0)
  , type_(0u)
  , value_(0){}
struct MaliTracingMarkWriteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliTracingMarkWriteFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliTracingMarkWriteFtraceEventDefaultTypeInternal() {}
  union {
    MaliTracingMarkWriteFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliTracingMarkWriteFtraceEventDefaultTypeInternal _MaliTracingMarkWriteFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(
    ::_pbi::ConstantInitialized)
  : info_val1_(uint64_t{0u})
  , id_(0u)
  , kctx_id_(0u)
  , info_val2_(uint64_t{0u})
  , kctx_tgid_(0){}
struct MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUCQSSETFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal _MaliMaliKCPUCQSSETFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(
    ::_pbi::ConstantInitialized)
  : info_val1_(uint64_t{0u})
  , id_(0u)
  , kctx_id_(0u)
  , info_val2_(uint64_t{0u})
  , kctx_tgid_(0){}
struct MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUCQSWAITSTARTFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal _MaliMaliKCPUCQSWAITSTARTFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(
    ::_pbi::ConstantInitialized)
  : info_val1_(uint64_t{0u})
  , id_(0u)
  , kctx_id_(0u)
  , info_val2_(uint64_t{0u})
  , kctx_tgid_(0){}
struct MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUCQSWAITENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal _MaliMaliKCPUCQSWAITENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(
    ::_pbi::ConstantInitialized)
  : info_val1_(uint64_t{0u})
  , info_val2_(uint64_t{0u})
  , kctx_tgid_(0)
  , kctx_id_(0u)
  , id_(0u){}
struct MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUFENCESIGNALFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal _MaliMaliKCPUFENCESIGNALFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(
    ::_pbi::ConstantInitialized)
  : info_val1_(uint64_t{0u})
  , info_val2_(uint64_t{0u})
  , kctx_tgid_(0)
  , kctx_id_(0u)
  , id_(0u){}
struct MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUFENCEWAITSTARTFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal _MaliMaliKCPUFENCEWAITSTARTFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(
    ::_pbi::ConstantInitialized)
  : info_val1_(uint64_t{0u})
  , info_val2_(uint64_t{0u})
  , kctx_tgid_(0)
  , kctx_id_(0u)
  , id_(0u){}
struct MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUFENCEWAITENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal _MaliMaliKCPUFENCEWAITENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(
    ::_pbi::ConstantInitialized)
  : kctx_tgid_(0)
  , kctx_id_(0u)
  , info_val_(uint64_t{0u}){}
struct MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliCSFINTERRUPTSTARTFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal _MaliMaliCSFINTERRUPTSTARTFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(
    ::_pbi::ConstantInitialized)
  : kctx_tgid_(0)
  , kctx_id_(0u)
  , info_val_(uint64_t{0u}){}
struct MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliCSFINTERRUPTENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal _MaliMaliCSFINTERRUPTENDFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class MaliTracingMarkWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliTracingMarkWriteFtraceEvent>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
}
MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(const MaliTracingMarkWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
}

inline void MaliTracingMarkWriteFtraceEvent::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(value_));
}

MaliTracingMarkWriteFtraceEvent::~MaliTracingMarkWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliTracingMarkWriteFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void MaliTracingMarkWriteFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaliTracingMarkWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliTracingMarkWriteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliTracingMarkWriteFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pid(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // optional int32 value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  return target;
}

size_t MaliTracingMarkWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional int32 value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliTracingMarkWriteFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliTracingMarkWriteFtraceEvent*>(
      &from));
}

void MaliTracingMarkWriteFtraceEvent::MergeFrom(const MaliTracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliTracingMarkWriteFtraceEvent::CopyFrom(const MaliTracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliTracingMarkWriteFtraceEvent::IsInitialized() const {
  return true;
}

void MaliTracingMarkWriteFtraceEvent::InternalSwap(MaliTracingMarkWriteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliTracingMarkWriteFtraceEvent, value_)
      + sizeof(MaliTracingMarkWriteFtraceEvent::value_)
      - PROTOBUF_FIELD_OFFSET(MaliTracingMarkWriteFtraceEvent, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

std::string MaliTracingMarkWriteFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliTracingMarkWriteFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUCQSSETFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUCQSSETFtraceEvent>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
}
MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(const MaliMaliKCPUCQSSETFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&info_val1_, &from.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&kctx_tgid_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(kctx_tgid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
}

inline void MaliMaliKCPUCQSSETFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_val1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kctx_tgid_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(kctx_tgid_));
}

MaliMaliKCPUCQSSETFtraceEvent::~MaliMaliKCPUCQSSETFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUCQSSETFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUCQSSETFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaliMaliKCPUCQSSETFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kctx_tgid_) -
        reinterpret_cast<char*>(&info_val1_)) + sizeof(kctx_tgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUCQSSETFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val1(&has_bits);
          info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val2(&has_bits);
          info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUCQSSETFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 info_val1 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val2(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional int32 kctx_tgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_kctx_tgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  return target;
}

size_t MaliMaliKCPUCQSSETFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUCQSSETFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUCQSSETFtraceEvent*>(
      &from));
}

void MaliMaliKCPUCQSSETFtraceEvent::MergeFrom(const MaliMaliKCPUCQSSETFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      info_val1_ = from.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      kctx_id_ = from.kctx_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      info_val2_ = from.info_val2_;
    }
    if (cached_has_bits & 0x00000010u) {
      kctx_tgid_ = from.kctx_tgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUCQSSETFtraceEvent::CopyFrom(const MaliMaliKCPUCQSSETFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUCQSSETFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUCQSSETFtraceEvent::InternalSwap(MaliMaliKCPUCQSSETFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSSETFtraceEvent, kctx_tgid_)
      + sizeof(MaliMaliKCPUCQSSETFtraceEvent::kctx_tgid_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSSETFtraceEvent, info_val1_)>(
          reinterpret_cast<char*>(&info_val1_),
          reinterpret_cast<char*>(&other->info_val1_));
}

std::string MaliMaliKCPUCQSSETFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUCQSWAITSTARTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUCQSWAITSTARTFtraceEvent>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
}
MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&info_val1_, &from.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&kctx_tgid_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(kctx_tgid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
}

inline void MaliMaliKCPUCQSWAITSTARTFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_val1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kctx_tgid_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(kctx_tgid_));
}

MaliMaliKCPUCQSWAITSTARTFtraceEvent::~MaliMaliKCPUCQSWAITSTARTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUCQSWAITSTARTFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kctx_tgid_) -
        reinterpret_cast<char*>(&info_val1_)) + sizeof(kctx_tgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUCQSWAITSTARTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val1(&has_bits);
          info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val2(&has_bits);
          info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUCQSWAITSTARTFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 info_val1 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val2(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional int32 kctx_tgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_kctx_tgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  return target;
}

size_t MaliMaliKCPUCQSWAITSTARTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUCQSWAITSTARTFtraceEvent*>(
      &from));
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::MergeFrom(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      info_val1_ = from.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      kctx_id_ = from.kctx_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      info_val2_ = from.info_val2_;
    }
    if (cached_has_bits & 0x00000010u) {
      kctx_tgid_ = from.kctx_tgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::CopyFrom(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUCQSWAITSTARTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::InternalSwap(MaliMaliKCPUCQSWAITSTARTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITSTARTFtraceEvent, kctx_tgid_)
      + sizeof(MaliMaliKCPUCQSWAITSTARTFtraceEvent::kctx_tgid_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITSTARTFtraceEvent, info_val1_)>(
          reinterpret_cast<char*>(&info_val1_),
          reinterpret_cast<char*>(&other->info_val1_));
}

std::string MaliMaliKCPUCQSWAITSTARTFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUCQSWAITENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUCQSWAITENDFtraceEvent>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
}
MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(const MaliMaliKCPUCQSWAITENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&info_val1_, &from.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&kctx_tgid_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(kctx_tgid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
}

inline void MaliMaliKCPUCQSWAITENDFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_val1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kctx_tgid_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(kctx_tgid_));
}

MaliMaliKCPUCQSWAITENDFtraceEvent::~MaliMaliKCPUCQSWAITENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUCQSWAITENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kctx_tgid_) -
        reinterpret_cast<char*>(&info_val1_)) + sizeof(kctx_tgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUCQSWAITENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val1(&has_bits);
          info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val2(&has_bits);
          info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUCQSWAITENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 info_val1 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val2(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional int32 kctx_tgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_kctx_tgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  return target;
}

size_t MaliMaliKCPUCQSWAITENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUCQSWAITENDFtraceEvent*>(
      &from));
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::MergeFrom(const MaliMaliKCPUCQSWAITENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      info_val1_ = from.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      kctx_id_ = from.kctx_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      info_val2_ = from.info_val2_;
    }
    if (cached_has_bits & 0x00000010u) {
      kctx_tgid_ = from.kctx_tgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::CopyFrom(const MaliMaliKCPUCQSWAITENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUCQSWAITENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::InternalSwap(MaliMaliKCPUCQSWAITENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITENDFtraceEvent, kctx_tgid_)
      + sizeof(MaliMaliKCPUCQSWAITENDFtraceEvent::kctx_tgid_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITENDFtraceEvent, info_val1_)>(
          reinterpret_cast<char*>(&info_val1_),
          reinterpret_cast<char*>(&other->info_val1_));
}

std::string MaliMaliKCPUCQSWAITENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUFENCESIGNALFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUFENCESIGNALFtraceEvent>()._has_bits_);
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
}
MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(const MaliMaliKCPUFENCESIGNALFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&info_val1_, &from.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
}

inline void MaliMaliKCPUFENCESIGNALFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_val1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(id_));
}

MaliMaliKCPUFENCESIGNALFtraceEvent::~MaliMaliKCPUFENCESIGNALFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUFENCESIGNALFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&info_val1_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUFENCESIGNALFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 info_val1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_info_val1(&has_bits);
          info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val2(&has_bits);
          info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUFENCESIGNALFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 info_val1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val2(), target);
  }

  // optional int32 kctx_tgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  return target;
}

size_t MaliMaliKCPUFENCESIGNALFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint64 info_val2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUFENCESIGNALFtraceEvent*>(
      &from));
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::MergeFrom(const MaliMaliKCPUFENCESIGNALFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      info_val1_ = from.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      info_val2_ = from.info_val2_;
    }
    if (cached_has_bits & 0x00000004u) {
      kctx_tgid_ = from.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      kctx_id_ = from.kctx_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::CopyFrom(const MaliMaliKCPUFENCESIGNALFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUFENCESIGNALFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::InternalSwap(MaliMaliKCPUFENCESIGNALFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCESIGNALFtraceEvent, id_)
      + sizeof(MaliMaliKCPUFENCESIGNALFtraceEvent::id_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCESIGNALFtraceEvent, info_val1_)>(
          reinterpret_cast<char*>(&info_val1_),
          reinterpret_cast<char*>(&other->info_val1_));
}

std::string MaliMaliKCPUFENCESIGNALFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUFENCEWAITSTARTFtraceEvent>()._has_bits_);
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
}
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&info_val1_, &from.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
}

inline void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_val1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(id_));
}

MaliMaliKCPUFENCEWAITSTARTFtraceEvent::~MaliMaliKCPUFENCEWAITSTARTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&info_val1_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 info_val1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_info_val1(&has_bits);
          info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val2(&has_bits);
          info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 info_val1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val2(), target);
  }

  // optional int32 kctx_tgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  return target;
}

size_t MaliMaliKCPUFENCEWAITSTARTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint64 info_val2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUFENCEWAITSTARTFtraceEvent*>(
      &from));
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MergeFrom(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      info_val1_ = from.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      info_val2_ = from.info_val2_;
    }
    if (cached_has_bits & 0x00000004u) {
      kctx_tgid_ = from.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      kctx_id_ = from.kctx_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::CopyFrom(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUFENCEWAITSTARTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::InternalSwap(MaliMaliKCPUFENCEWAITSTARTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITSTARTFtraceEvent, id_)
      + sizeof(MaliMaliKCPUFENCEWAITSTARTFtraceEvent::id_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITSTARTFtraceEvent, info_val1_)>(
          reinterpret_cast<char*>(&info_val1_),
          reinterpret_cast<char*>(&other->info_val1_));
}

std::string MaliMaliKCPUFENCEWAITSTARTFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUFENCEWAITENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUFENCEWAITENDFtraceEvent>()._has_bits_);
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
}
MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(const MaliMaliKCPUFENCEWAITENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&info_val1_, &from.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
}

inline void MaliMaliKCPUFENCEWAITENDFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_val1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&info_val1_)) + sizeof(id_));
}

MaliMaliKCPUFENCEWAITENDFtraceEvent::~MaliMaliKCPUFENCEWAITENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUFENCEWAITENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&info_val1_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUFENCEWAITENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 info_val1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_info_val1(&has_bits);
          info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val2(&has_bits);
          info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUFENCEWAITENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 info_val1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val2(), target);
  }

  // optional int32 kctx_tgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  return target;
}

size_t MaliMaliKCPUFENCEWAITENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint64 info_val2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUFENCEWAITENDFtraceEvent*>(
      &from));
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::MergeFrom(const MaliMaliKCPUFENCEWAITENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      info_val1_ = from.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      info_val2_ = from.info_val2_;
    }
    if (cached_has_bits & 0x00000004u) {
      kctx_tgid_ = from.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      kctx_id_ = from.kctx_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::CopyFrom(const MaliMaliKCPUFENCEWAITENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUFENCEWAITENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::InternalSwap(MaliMaliKCPUFENCEWAITENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITENDFtraceEvent, id_)
      + sizeof(MaliMaliKCPUFENCEWAITENDFtraceEvent::id_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITENDFtraceEvent, info_val1_)>(
          reinterpret_cast<char*>(&info_val1_),
          reinterpret_cast<char*>(&other->info_val1_));
}

std::string MaliMaliKCPUFENCEWAITENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent";
}


// ===================================================================

class MaliMaliCSFINTERRUPTSTARTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliCSFINTERRUPTSTARTFtraceEvent>()._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
}
MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&kctx_tgid_, &from.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&info_val_) -
    reinterpret_cast<char*>(&kctx_tgid_)) + sizeof(info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
}

inline void MaliMaliCSFINTERRUPTSTARTFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kctx_tgid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&info_val_) -
    reinterpret_cast<char*>(&kctx_tgid_)) + sizeof(info_val_));
}

MaliMaliCSFINTERRUPTSTARTFtraceEvent::~MaliMaliCSFINTERRUPTSTARTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliCSFINTERRUPTSTARTFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&info_val_) -
        reinterpret_cast<char*>(&kctx_tgid_)) + sizeof(info_val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliCSFINTERRUPTSTARTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliCSFINTERRUPTSTARTFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  return target;
}

size_t MaliMaliCSFINTERRUPTSTARTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliCSFINTERRUPTSTARTFtraceEvent*>(
      &from));
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::MergeFrom(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      kctx_tgid_ = from.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      kctx_id_ = from.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      info_val_ = from.info_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::CopyFrom(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliCSFINTERRUPTSTARTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::InternalSwap(MaliMaliCSFINTERRUPTSTARTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTSTARTFtraceEvent, info_val_)
      + sizeof(MaliMaliCSFINTERRUPTSTARTFtraceEvent::info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTSTARTFtraceEvent, kctx_tgid_)>(
          reinterpret_cast<char*>(&kctx_tgid_),
          reinterpret_cast<char*>(&other->kctx_tgid_));
}

std::string MaliMaliCSFINTERRUPTSTARTFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent";
}


// ===================================================================

class MaliMaliCSFINTERRUPTENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliCSFINTERRUPTENDFtraceEvent>()._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
}
MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(const MaliMaliCSFINTERRUPTENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&kctx_tgid_, &from.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&info_val_) -
    reinterpret_cast<char*>(&kctx_tgid_)) + sizeof(info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
}

inline void MaliMaliCSFINTERRUPTENDFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kctx_tgid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&info_val_) -
    reinterpret_cast<char*>(&kctx_tgid_)) + sizeof(info_val_));
}

MaliMaliCSFINTERRUPTENDFtraceEvent::~MaliMaliCSFINTERRUPTENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliCSFINTERRUPTENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&info_val_) -
        reinterpret_cast<char*>(&kctx_tgid_)) + sizeof(info_val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliCSFINTERRUPTENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliCSFINTERRUPTENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  return target;
}

size_t MaliMaliCSFINTERRUPTENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliCSFINTERRUPTENDFtraceEvent*>(
      &from));
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::MergeFrom(const MaliMaliCSFINTERRUPTENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      kctx_tgid_ = from.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      kctx_id_ = from.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      info_val_ = from.info_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::CopyFrom(const MaliMaliCSFINTERRUPTENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliCSFINTERRUPTENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::InternalSwap(MaliMaliCSFINTERRUPTENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTENDFtraceEvent, info_val_)
      + sizeof(MaliMaliCSFINTERRUPTENDFtraceEvent::info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTENDFtraceEvent, kctx_tgid_)>(
          reinterpret_cast<char*>(&kctx_tgid_),
          reinterpret_cast<char*>(&other->kctx_tgid_));
}

std::string MaliMaliCSFINTERRUPTENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliTracingMarkWriteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliTracingMarkWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliTracingMarkWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
