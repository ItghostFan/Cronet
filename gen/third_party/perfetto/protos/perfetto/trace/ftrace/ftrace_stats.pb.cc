// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_stats.proto

#include "protos/perfetto/trace/ftrace/ftrace_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR FtraceCpuStats::FtraceCpuStats(
    ::_pbi::ConstantInitialized)
  : cpu_(uint64_t{0u})
  , entries_(uint64_t{0u})
  , overrun_(uint64_t{0u})
  , commit_overrun_(uint64_t{0u})
  , bytes_read_(uint64_t{0u})
  , oldest_event_ts_(0)
  , now_ts_(0)
  , dropped_events_(uint64_t{0u})
  , read_events_(uint64_t{0u}){}
struct FtraceCpuStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceCpuStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceCpuStatsDefaultTypeInternal() {}
  union {
    FtraceCpuStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceCpuStatsDefaultTypeInternal _FtraceCpuStats_default_instance_;
PROTOBUF_CONSTEXPR FtraceStats::FtraceStats(
    ::_pbi::ConstantInitialized)
  : cpu_stats_()
  , unknown_ftrace_events_()
  , failed_ftrace_events_()
  , atrace_errors_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , phase_(0)

  , kernel_symbols_parsed_(0u)
  , kernel_symbols_mem_kb_(0u)
  , preserve_ftrace_buffer_(false){}
struct FtraceStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceStatsDefaultTypeInternal() {}
  union {
    FtraceStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceStatsDefaultTypeInternal _FtraceStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool FtraceStats_Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FtraceStats_Phase_strings[3] = {};

static const char FtraceStats_Phase_names[] =
  "END_OF_TRACE"
  "START_OF_TRACE"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FtraceStats_Phase_entries[] = {
  { {FtraceStats_Phase_names + 0, 12}, 2 },
  { {FtraceStats_Phase_names + 12, 14}, 1 },
  { {FtraceStats_Phase_names + 26, 11}, 0 },
};

static const int FtraceStats_Phase_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  1, // 1 -> START_OF_TRACE
  0, // 2 -> END_OF_TRACE
};

const std::string& FtraceStats_Phase_Name(
    FtraceStats_Phase value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FtraceStats_Phase_entries,
          FtraceStats_Phase_entries_by_number,
          3, FtraceStats_Phase_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FtraceStats_Phase_entries,
      FtraceStats_Phase_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FtraceStats_Phase_strings[idx].get();
}
bool FtraceStats_Phase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FtraceStats_Phase* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FtraceStats_Phase_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<FtraceStats_Phase>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FtraceStats_Phase FtraceStats::UNSPECIFIED;
constexpr FtraceStats_Phase FtraceStats::START_OF_TRACE;
constexpr FtraceStats_Phase FtraceStats::END_OF_TRACE;
constexpr FtraceStats_Phase FtraceStats::Phase_MIN;
constexpr FtraceStats_Phase FtraceStats::Phase_MAX;
constexpr int FtraceStats::Phase_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FtraceCpuStats::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceCpuStats>()._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overrun(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_commit_overrun(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bytes_read(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_oldest_event_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_now_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dropped_events(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_read_events(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

FtraceCpuStats::FtraceCpuStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceCpuStats)
}
FtraceCpuStats::FtraceCpuStats(const FtraceCpuStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&cpu_, &from.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_events_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(read_events_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceCpuStats)
}

inline void FtraceCpuStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&read_events_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(read_events_));
}

FtraceCpuStats::~FtraceCpuStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceCpuStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceCpuStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FtraceCpuStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtraceCpuStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceCpuStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dropped_events_) -
        reinterpret_cast<char*>(&cpu_)) + sizeof(dropped_events_));
  }
  read_events_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceCpuStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entries(&has_bits);
          entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 overrun = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_overrun(&has_bits);
          overrun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 commit_overrun = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_commit_overrun(&has_bits);
          commit_overrun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_read = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bytes_read(&has_bits);
          bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double oldest_event_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_oldest_event_ts(&has_bits);
          oldest_event_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double now_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_now_ts(&has_bits);
          now_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 dropped_events = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_dropped_events(&has_bits);
          dropped_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 read_events = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_read_events(&has_bits);
          read_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtraceCpuStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceCpuStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cpu(), target);
  }

  // optional uint64 entries = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_entries(), target);
  }

  // optional uint64 overrun = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_overrun(), target);
  }

  // optional uint64 commit_overrun = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_commit_overrun(), target);
  }

  // optional uint64 bytes_read = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bytes_read(), target);
  }

  // optional double oldest_event_ts = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_oldest_event_ts(), target);
  }

  // optional double now_ts = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_now_ts(), target);
  }

  // optional uint64 dropped_events = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_dropped_events(), target);
  }

  // optional uint64 read_events = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_read_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceCpuStats)
  return target;
}

size_t FtraceCpuStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceCpuStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 cpu = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cpu());
    }

    // optional uint64 entries = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_entries());
    }

    // optional uint64 overrun = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_overrun());
    }

    // optional uint64 commit_overrun = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_commit_overrun());
    }

    // optional uint64 bytes_read = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_read());
    }

    // optional double oldest_event_ts = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double now_ts = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint64 dropped_events = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dropped_events());
    }

  }
  // optional uint64 read_events = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_read_events());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceCpuStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FtraceCpuStats*>(
      &from));
}

void FtraceCpuStats::MergeFrom(const FtraceCpuStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceCpuStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000002u) {
      entries_ = from.entries_;
    }
    if (cached_has_bits & 0x00000004u) {
      overrun_ = from.overrun_;
    }
    if (cached_has_bits & 0x00000008u) {
      commit_overrun_ = from.commit_overrun_;
    }
    if (cached_has_bits & 0x00000010u) {
      bytes_read_ = from.bytes_read_;
    }
    if (cached_has_bits & 0x00000020u) {
      oldest_event_ts_ = from.oldest_event_ts_;
    }
    if (cached_has_bits & 0x00000040u) {
      now_ts_ = from.now_ts_;
    }
    if (cached_has_bits & 0x00000080u) {
      dropped_events_ = from.dropped_events_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_read_events(from._internal_read_events());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FtraceCpuStats::CopyFrom(const FtraceCpuStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceCpuStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceCpuStats::IsInitialized() const {
  return true;
}

void FtraceCpuStats::InternalSwap(FtraceCpuStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtraceCpuStats, read_events_)
      + sizeof(FtraceCpuStats::read_events_)
      - PROTOBUF_FIELD_OFFSET(FtraceCpuStats, cpu_)>(
          reinterpret_cast<char*>(&cpu_),
          reinterpret_cast<char*>(&other->cpu_));
}

std::string FtraceCpuStats::GetTypeName() const {
  return "perfetto.protos.FtraceCpuStats";
}


// ===================================================================

class FtraceStats::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceStats>()._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kernel_symbols_parsed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kernel_symbols_mem_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_atrace_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preserve_ftrace_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FtraceStats::FtraceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  cpu_stats_(arena),
  unknown_ftrace_events_(arena),
  failed_ftrace_events_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceStats)
}
FtraceStats::FtraceStats(const FtraceStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      cpu_stats_(from.cpu_stats_),
      unknown_ftrace_events_(from.unknown_ftrace_events_),
      failed_ftrace_events_(from.failed_ftrace_events_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  atrace_errors_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    atrace_errors_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_atrace_errors()) {
    atrace_errors_.Set(from._internal_atrace_errors(), 
      GetArenaForAllocation());
  }
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_ftrace_buffer_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(preserve_ftrace_buffer_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceStats)
}

inline void FtraceStats::SharedCtor() {
atrace_errors_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  atrace_errors_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phase_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_ftrace_buffer_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(preserve_ftrace_buffer_));
}

FtraceStats::~FtraceStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  atrace_errors_.Destroy();
}

void FtraceStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtraceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_stats_.Clear();
  unknown_ftrace_events_.Clear();
  failed_ftrace_events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    atrace_errors_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_ftrace_buffer_) -
        reinterpret_cast<char*>(&phase_)) + sizeof(preserve_ftrace_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.FtraceStats.Phase phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FtraceStats_Phase_IsValid(val))) {
            _internal_set_phase(static_cast<::perfetto::protos::FtraceStats_Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpu_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kernel_symbols_parsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kernel_symbols_parsed(&has_bits);
          kernel_symbols_parsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kernel_symbols_mem_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kernel_symbols_mem_kb(&has_bits);
          kernel_symbols_mem_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string atrace_errors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_atrace_errors();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string unknown_ftrace_events = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unknown_ftrace_events();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string failed_ftrace_events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failed_ftrace_events();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_ftrace_buffer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_preserve_ftrace_buffer(&has_bits);
          preserve_ftrace_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtraceStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.FtraceStats.Phase phase = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cpu_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_cpu_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 kernel_symbols_parsed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kernel_symbols_parsed(), target);
  }

  // optional uint32 kernel_symbols_mem_kb = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kernel_symbols_mem_kb(), target);
  }

  // optional string atrace_errors = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_atrace_errors(), target);
  }

  // repeated string unknown_ftrace_events = 6;
  for (int i = 0, n = this->_internal_unknown_ftrace_events_size(); i < n; i++) {
    const auto& s = this->_internal_unknown_ftrace_events(i);
    target = stream->WriteString(6, s, target);
  }

  // repeated string failed_ftrace_events = 7;
  for (int i = 0, n = this->_internal_failed_ftrace_events_size(); i < n; i++) {
    const auto& s = this->_internal_failed_ftrace_events(i);
    target = stream->WriteString(7, s, target);
  }

  // optional bool preserve_ftrace_buffer = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_preserve_ftrace_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceStats)
  return target;
}

size_t FtraceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
  total_size += 1UL * this->_internal_cpu_stats_size();
  for (const auto& msg : this->cpu_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string unknown_ftrace_events = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unknown_ftrace_events_.size());
  for (int i = 0, n = unknown_ftrace_events_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      unknown_ftrace_events_.Get(i));
  }

  // repeated string failed_ftrace_events = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(failed_ftrace_events_.size());
  for (int i = 0, n = failed_ftrace_events_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      failed_ftrace_events_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string atrace_errors = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_atrace_errors());
    }

    // optional .perfetto.protos.FtraceStats.Phase phase = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_phase());
    }

    // optional uint32 kernel_symbols_parsed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kernel_symbols_parsed());
    }

    // optional uint32 kernel_symbols_mem_kb = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kernel_symbols_mem_kb());
    }

    // optional bool preserve_ftrace_buffer = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FtraceStats*>(
      &from));
}

void FtraceStats::MergeFrom(const FtraceStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cpu_stats_.MergeFrom(from.cpu_stats_);
  unknown_ftrace_events_.MergeFrom(from.unknown_ftrace_events_);
  failed_ftrace_events_.MergeFrom(from.failed_ftrace_events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_atrace_errors(from._internal_atrace_errors());
    }
    if (cached_has_bits & 0x00000002u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000004u) {
      kernel_symbols_parsed_ = from.kernel_symbols_parsed_;
    }
    if (cached_has_bits & 0x00000008u) {
      kernel_symbols_mem_kb_ = from.kernel_symbols_mem_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      preserve_ftrace_buffer_ = from.preserve_ftrace_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FtraceStats::CopyFrom(const FtraceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceStats::IsInitialized() const {
  return true;
}

void FtraceStats::InternalSwap(FtraceStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cpu_stats_.InternalSwap(&other->cpu_stats_);
  unknown_ftrace_events_.InternalSwap(&other->unknown_ftrace_events_);
  failed_ftrace_events_.InternalSwap(&other->failed_ftrace_events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &atrace_errors_, lhs_arena,
      &other->atrace_errors_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtraceStats, preserve_ftrace_buffer_)
      + sizeof(FtraceStats::preserve_ftrace_buffer_)
      - PROTOBUF_FIELD_OFFSET(FtraceStats, phase_)>(
          reinterpret_cast<char*>(&phase_),
          reinterpret_cast<char*>(&other->phase_));
}

std::string FtraceStats::GetTypeName() const {
  return "perfetto.protos.FtraceStats";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceCpuStats*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceCpuStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceCpuStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceStats*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
