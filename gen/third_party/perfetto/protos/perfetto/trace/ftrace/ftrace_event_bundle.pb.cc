// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event_bundle.proto

#include "protos/perfetto/trace/ftrace/ftrace_event_bundle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(
    ::_pbi::ConstantInitialized)
  : switch_timestamp_()
  , _switch_timestamp_cached_byte_size_(0)
  , switch_prev_state_()
  , _switch_prev_state_cached_byte_size_(0)
  , switch_next_pid_()
  , _switch_next_pid_cached_byte_size_(0)
  , switch_next_prio_()
  , _switch_next_prio_cached_byte_size_(0)
  , intern_table_()
  , switch_next_comm_index_()
  , _switch_next_comm_index_cached_byte_size_(0)
  , waking_timestamp_()
  , _waking_timestamp_cached_byte_size_(0)
  , waking_pid_()
  , _waking_pid_cached_byte_size_(0)
  , waking_target_cpu_()
  , _waking_target_cpu_cached_byte_size_(0)
  , waking_prio_()
  , _waking_prio_cached_byte_size_(0)
  , waking_comm_index_()
  , _waking_comm_index_cached_byte_size_(0)
  , waking_common_flags_()
  , _waking_common_flags_cached_byte_size_(0){}
struct FtraceEventBundle_CompactSchedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceEventBundle_CompactSchedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceEventBundle_CompactSchedDefaultTypeInternal() {}
  union {
    FtraceEventBundle_CompactSched _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceEventBundle_CompactSchedDefaultTypeInternal _FtraceEventBundle_CompactSched_default_instance_;
PROTOBUF_CONSTEXPR FtraceEventBundle::FtraceEventBundle(
    ::_pbi::ConstantInitialized)
  : event_()
  , compact_sched_(nullptr)
  , cpu_(0u)
  , lost_events_(false)
  , ftrace_timestamp_(int64_t{0})
  , boot_timestamp_(int64_t{0})
  , ftrace_clock_(0)
{}
struct FtraceEventBundleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceEventBundleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceEventBundleDefaultTypeInternal() {}
  union {
    FtraceEventBundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceEventBundleDefaultTypeInternal _FtraceEventBundle_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool FtraceClock_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FtraceClock_strings[5] = {};

static const char FtraceClock_names[] =
  "FTRACE_CLOCK_GLOBAL"
  "FTRACE_CLOCK_LOCAL"
  "FTRACE_CLOCK_MONO_RAW"
  "FTRACE_CLOCK_UNKNOWN"
  "FTRACE_CLOCK_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FtraceClock_entries[] = {
  { {FtraceClock_names + 0, 19}, 2 },
  { {FtraceClock_names + 19, 18}, 3 },
  { {FtraceClock_names + 37, 21}, 4 },
  { {FtraceClock_names + 58, 20}, 1 },
  { {FtraceClock_names + 78, 24}, 0 },
};

static const int FtraceClock_entries_by_number[] = {
  4, // 0 -> FTRACE_CLOCK_UNSPECIFIED
  3, // 1 -> FTRACE_CLOCK_UNKNOWN
  0, // 2 -> FTRACE_CLOCK_GLOBAL
  1, // 3 -> FTRACE_CLOCK_LOCAL
  2, // 4 -> FTRACE_CLOCK_MONO_RAW
};

const std::string& FtraceClock_Name(
    FtraceClock value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FtraceClock_entries,
          FtraceClock_entries_by_number,
          5, FtraceClock_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FtraceClock_entries,
      FtraceClock_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FtraceClock_strings[idx].get();
}
bool FtraceClock_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FtraceClock* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FtraceClock_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<FtraceClock>(int_value);
  }
  return success;
}

// ===================================================================

class FtraceEventBundle_CompactSched::_Internal {
 public:
};

FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  switch_timestamp_(arena),
  switch_prev_state_(arena),
  switch_next_pid_(arena),
  switch_next_prio_(arena),
  intern_table_(arena),
  switch_next_comm_index_(arena),
  waking_timestamp_(arena),
  waking_pid_(arena),
  waking_target_cpu_(arena),
  waking_prio_(arena),
  waking_comm_index_(arena),
  waking_common_flags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceEventBundle.CompactSched)
}
FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(const FtraceEventBundle_CompactSched& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      switch_timestamp_(from.switch_timestamp_),
      switch_prev_state_(from.switch_prev_state_),
      switch_next_pid_(from.switch_next_pid_),
      switch_next_prio_(from.switch_next_prio_),
      intern_table_(from.intern_table_),
      switch_next_comm_index_(from.switch_next_comm_index_),
      waking_timestamp_(from.waking_timestamp_),
      waking_pid_(from.waking_pid_),
      waking_target_cpu_(from.waking_target_cpu_),
      waking_prio_(from.waking_prio_),
      waking_comm_index_(from.waking_comm_index_),
      waking_common_flags_(from.waking_common_flags_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceEventBundle.CompactSched)
}

inline void FtraceEventBundle_CompactSched::SharedCtor() {
}

FtraceEventBundle_CompactSched::~FtraceEventBundle_CompactSched() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceEventBundle.CompactSched)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceEventBundle_CompactSched::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FtraceEventBundle_CompactSched::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtraceEventBundle_CompactSched::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceEventBundle.CompactSched)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch_timestamp_.Clear();
  switch_prev_state_.Clear();
  switch_next_pid_.Clear();
  switch_next_prio_.Clear();
  intern_table_.Clear();
  switch_next_comm_index_.Clear();
  waking_timestamp_.Clear();
  waking_pid_.Clear();
  waking_target_cpu_.Clear();
  waking_prio_.Clear();
  waking_comm_index_.Clear();
  waking_common_flags_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceEventBundle_CompactSched::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 switch_timestamp = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_switch_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_switch_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 switch_prev_state = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_switch_prev_state(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_switch_prev_state(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 switch_next_pid = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_switch_next_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_switch_next_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 switch_next_prio = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_switch_next_prio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_switch_next_prio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string intern_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_intern_table();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 switch_next_comm_index = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_switch_next_comm_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_switch_next_comm_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 waking_timestamp = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_waking_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_waking_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 waking_pid = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_waking_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_waking_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 waking_target_cpu = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_waking_target_cpu(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_waking_target_cpu(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 waking_prio = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_waking_prio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_waking_prio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 waking_comm_index = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_waking_comm_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_waking_comm_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 waking_common_flags = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_waking_common_flags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_waking_common_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtraceEventBundle_CompactSched::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceEventBundle.CompactSched)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 switch_timestamp = 1 [packed = true];
  {
    int byte_size = _switch_timestamp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_switch_timestamp(), byte_size, target);
    }
  }

  // repeated int64 switch_prev_state = 2 [packed = true];
  {
    int byte_size = _switch_prev_state_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_switch_prev_state(), byte_size, target);
    }
  }

  // repeated int32 switch_next_pid = 3 [packed = true];
  {
    int byte_size = _switch_next_pid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_switch_next_pid(), byte_size, target);
    }
  }

  // repeated int32 switch_next_prio = 4 [packed = true];
  {
    int byte_size = _switch_next_prio_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_switch_next_prio(), byte_size, target);
    }
  }

  // repeated string intern_table = 5;
  for (int i = 0, n = this->_internal_intern_table_size(); i < n; i++) {
    const auto& s = this->_internal_intern_table(i);
    target = stream->WriteString(5, s, target);
  }

  // repeated uint32 switch_next_comm_index = 6 [packed = true];
  {
    int byte_size = _switch_next_comm_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_switch_next_comm_index(), byte_size, target);
    }
  }

  // repeated uint64 waking_timestamp = 7 [packed = true];
  {
    int byte_size = _waking_timestamp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_waking_timestamp(), byte_size, target);
    }
  }

  // repeated int32 waking_pid = 8 [packed = true];
  {
    int byte_size = _waking_pid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_waking_pid(), byte_size, target);
    }
  }

  // repeated int32 waking_target_cpu = 9 [packed = true];
  {
    int byte_size = _waking_target_cpu_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_waking_target_cpu(), byte_size, target);
    }
  }

  // repeated int32 waking_prio = 10 [packed = true];
  {
    int byte_size = _waking_prio_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_waking_prio(), byte_size, target);
    }
  }

  // repeated uint32 waking_comm_index = 11 [packed = true];
  {
    int byte_size = _waking_comm_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_waking_comm_index(), byte_size, target);
    }
  }

  // repeated uint32 waking_common_flags = 12 [packed = true];
  {
    int byte_size = _waking_common_flags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_waking_common_flags(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceEventBundle.CompactSched)
  return target;
}

size_t FtraceEventBundle_CompactSched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceEventBundle.CompactSched)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 switch_timestamp = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->switch_timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _switch_timestamp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 switch_prev_state = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->switch_prev_state_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _switch_prev_state_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 switch_next_pid = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->switch_next_pid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _switch_next_pid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 switch_next_prio = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->switch_next_prio_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _switch_next_prio_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string intern_table = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(intern_table_.size());
  for (int i = 0, n = intern_table_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      intern_table_.Get(i));
  }

  // repeated uint32 switch_next_comm_index = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->switch_next_comm_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _switch_next_comm_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 waking_timestamp = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->waking_timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _waking_timestamp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 waking_pid = 8 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->waking_pid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _waking_pid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 waking_target_cpu = 9 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->waking_target_cpu_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _waking_target_cpu_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 waking_prio = 10 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->waking_prio_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _waking_prio_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 waking_comm_index = 11 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->waking_comm_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _waking_comm_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 waking_common_flags = 12 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->waking_common_flags_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _waking_common_flags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceEventBundle_CompactSched::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FtraceEventBundle_CompactSched*>(
      &from));
}

void FtraceEventBundle_CompactSched::MergeFrom(const FtraceEventBundle_CompactSched& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceEventBundle.CompactSched)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch_timestamp_.MergeFrom(from.switch_timestamp_);
  switch_prev_state_.MergeFrom(from.switch_prev_state_);
  switch_next_pid_.MergeFrom(from.switch_next_pid_);
  switch_next_prio_.MergeFrom(from.switch_next_prio_);
  intern_table_.MergeFrom(from.intern_table_);
  switch_next_comm_index_.MergeFrom(from.switch_next_comm_index_);
  waking_timestamp_.MergeFrom(from.waking_timestamp_);
  waking_pid_.MergeFrom(from.waking_pid_);
  waking_target_cpu_.MergeFrom(from.waking_target_cpu_);
  waking_prio_.MergeFrom(from.waking_prio_);
  waking_comm_index_.MergeFrom(from.waking_comm_index_);
  waking_common_flags_.MergeFrom(from.waking_common_flags_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FtraceEventBundle_CompactSched::CopyFrom(const FtraceEventBundle_CompactSched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceEventBundle.CompactSched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceEventBundle_CompactSched::IsInitialized() const {
  return true;
}

void FtraceEventBundle_CompactSched::InternalSwap(FtraceEventBundle_CompactSched* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  switch_timestamp_.InternalSwap(&other->switch_timestamp_);
  switch_prev_state_.InternalSwap(&other->switch_prev_state_);
  switch_next_pid_.InternalSwap(&other->switch_next_pid_);
  switch_next_prio_.InternalSwap(&other->switch_next_prio_);
  intern_table_.InternalSwap(&other->intern_table_);
  switch_next_comm_index_.InternalSwap(&other->switch_next_comm_index_);
  waking_timestamp_.InternalSwap(&other->waking_timestamp_);
  waking_pid_.InternalSwap(&other->waking_pid_);
  waking_target_cpu_.InternalSwap(&other->waking_target_cpu_);
  waking_prio_.InternalSwap(&other->waking_prio_);
  waking_comm_index_.InternalSwap(&other->waking_comm_index_);
  waking_common_flags_.InternalSwap(&other->waking_common_flags_);
}

std::string FtraceEventBundle_CompactSched::GetTypeName() const {
  return "perfetto.protos.FtraceEventBundle.CompactSched";
}


// ===================================================================

class FtraceEventBundle::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceEventBundle>()._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lost_events(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::FtraceEventBundle_CompactSched& compact_sched(const FtraceEventBundle* msg);
  static void set_has_compact_sched(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ftrace_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ftrace_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_boot_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::perfetto::protos::FtraceEventBundle_CompactSched&
FtraceEventBundle::_Internal::compact_sched(const FtraceEventBundle* msg) {
  return *msg->compact_sched_;
}
void FtraceEventBundle::clear_event() {
  event_.Clear();
}
FtraceEventBundle::FtraceEventBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  event_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceEventBundle)
}
FtraceEventBundle::FtraceEventBundle(const FtraceEventBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      event_(from.event_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_compact_sched()) {
    compact_sched_ = new ::perfetto::protos::FtraceEventBundle_CompactSched(*from.compact_sched_);
  } else {
    compact_sched_ = nullptr;
  }
  ::memcpy(&cpu_, &from.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&ftrace_clock_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(ftrace_clock_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceEventBundle)
}

inline void FtraceEventBundle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compact_sched_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ftrace_clock_) -
    reinterpret_cast<char*>(&compact_sched_)) + sizeof(ftrace_clock_));
}

FtraceEventBundle::~FtraceEventBundle() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceEventBundle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceEventBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete compact_sched_;
}

void FtraceEventBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtraceEventBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceEventBundle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(compact_sched_ != nullptr);
    compact_sched_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ftrace_clock_) -
        reinterpret_cast<char*>(&cpu_)) + sizeof(ftrace_clock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceEventBundle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.FtraceEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool lost_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lost_events(&has_bits);
          lost_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compact_sched(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceClock ftrace_clock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FtraceClock_IsValid(val))) {
            _internal_set_ftrace_clock(static_cast<::perfetto::protos::FtraceClock>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 ftrace_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ftrace_timestamp(&has_bits);
          ftrace_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 boot_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_boot_timestamp(&has_bits);
          boot_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtraceEventBundle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceEventBundle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cpu = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cpu(), target);
  }

  // repeated .perfetto.protos.FtraceEvent event = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool lost_events = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_lost_events(), target);
  }

  // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::compact_sched(this),
        _Internal::compact_sched(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.FtraceClock ftrace_clock = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ftrace_clock(), target);
  }

  // optional int64 ftrace_timestamp = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_ftrace_timestamp(), target);
  }

  // optional int64 boot_timestamp = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_boot_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceEventBundle)
  return target;
}

size_t FtraceEventBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceEventBundle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceEvent event = 2;
  total_size += 1UL * this->_internal_event_size();
  for (const auto& msg : this->event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compact_sched_);
    }

    // optional uint32 cpu = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpu());
    }

    // optional bool lost_events = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int64 ftrace_timestamp = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ftrace_timestamp());
    }

    // optional int64 boot_timestamp = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_boot_timestamp());
    }

    // optional .perfetto.protos.FtraceClock ftrace_clock = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ftrace_clock());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceEventBundle::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FtraceEventBundle*>(
      &from));
}

void FtraceEventBundle::MergeFrom(const FtraceEventBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceEventBundle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  event_.MergeFrom(from.event_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_compact_sched()->::perfetto::protos::FtraceEventBundle_CompactSched::MergeFrom(from._internal_compact_sched());
    }
    if (cached_has_bits & 0x00000002u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      lost_events_ = from.lost_events_;
    }
    if (cached_has_bits & 0x00000008u) {
      ftrace_timestamp_ = from.ftrace_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      boot_timestamp_ = from.boot_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      ftrace_clock_ = from.ftrace_clock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FtraceEventBundle::CopyFrom(const FtraceEventBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceEventBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceEventBundle::IsInitialized() const {
  return true;
}

void FtraceEventBundle::InternalSwap(FtraceEventBundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_.InternalSwap(&other->event_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtraceEventBundle, ftrace_clock_)
      + sizeof(FtraceEventBundle::ftrace_clock_)
      - PROTOBUF_FIELD_OFFSET(FtraceEventBundle, compact_sched_)>(
          reinterpret_cast<char*>(&compact_sched_),
          reinterpret_cast<char*>(&other->compact_sched_));
}

std::string FtraceEventBundle::GetTypeName() const {
  return "perfetto.protos.FtraceEventBundle";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceEventBundle_CompactSched*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceEventBundle_CompactSched >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceEventBundle_CompactSched >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceEventBundle*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceEventBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceEventBundle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
