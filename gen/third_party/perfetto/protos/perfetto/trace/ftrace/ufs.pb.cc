// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ufs.proto

#include "protos/perfetto/trace/ftrace/ufs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR UfshcdCommandFtraceEvent::UfshcdCommandFtraceEvent(
    ::_pbi::ConstantInitialized)
  : dev_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , doorbell_(0u)
  , intr_(0u)
  , lba_(uint64_t{0u})
  , opcode_(0u)
  , tag_(0u)
  , transfer_len_(0)
  , group_id_(0u)
  , str_t_(0u){}
struct UfshcdCommandFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UfshcdCommandFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UfshcdCommandFtraceEventDefaultTypeInternal() {}
  union {
    UfshcdCommandFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UfshcdCommandFtraceEventDefaultTypeInternal _UfshcdCommandFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR UfshcdClkGatingFtraceEvent::UfshcdClkGatingFtraceEvent(
    ::_pbi::ConstantInitialized)
  : dev_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , state_(0){}
struct UfshcdClkGatingFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UfshcdClkGatingFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UfshcdClkGatingFtraceEventDefaultTypeInternal() {}
  union {
    UfshcdClkGatingFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UfshcdClkGatingFtraceEventDefaultTypeInternal _UfshcdClkGatingFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class UfshcdCommandFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<UfshcdCommandFtraceEvent>()._has_bits_);
  static void set_has_dev_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_doorbell(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_intr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lba(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_transfer_len(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_str_t(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

UfshcdCommandFtraceEvent::UfshcdCommandFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.UfshcdCommandFtraceEvent)
}
UfshcdCommandFtraceEvent::UfshcdCommandFtraceEvent(const UfshcdCommandFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  dev_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dev_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dev_name()) {
    dev_name_.Set(from._internal_dev_name(), 
      GetArenaForAllocation());
  }
  str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str()) {
    str_.Set(from._internal_str(), 
      GetArenaForAllocation());
  }
  ::memcpy(&doorbell_, &from.doorbell_,
    static_cast<size_t>(reinterpret_cast<char*>(&str_t_) -
    reinterpret_cast<char*>(&doorbell_)) + sizeof(str_t_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.UfshcdCommandFtraceEvent)
}

inline void UfshcdCommandFtraceEvent::SharedCtor() {
dev_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dev_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&doorbell_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&str_t_) -
    reinterpret_cast<char*>(&doorbell_)) + sizeof(str_t_));
}

UfshcdCommandFtraceEvent::~UfshcdCommandFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.UfshcdCommandFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UfshcdCommandFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dev_name_.Destroy();
  str_.Destroy();
}

void UfshcdCommandFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UfshcdCommandFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.UfshcdCommandFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dev_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      str_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&doorbell_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transfer_len_) -
        reinterpret_cast<char*>(&doorbell_)) + sizeof(transfer_len_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&str_t_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(str_t_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UfshcdCommandFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string dev_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 doorbell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_doorbell(&has_bits);
          doorbell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 intr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_intr(&has_bits);
          intr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lba = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_lba(&has_bits);
          lba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 opcode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_opcode(&has_bits);
          opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string str = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tag(&has_bits);
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 transfer_len = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_transfer_len(&has_bits);
          transfer_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 group_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 str_t = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_str_t(&has_bits);
          str_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UfshcdCommandFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.UfshcdCommandFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string dev_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_name(), target);
  }

  // optional uint32 doorbell = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_doorbell(), target);
  }

  // optional uint32 intr = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_intr(), target);
  }

  // optional uint64 lba = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lba(), target);
  }

  // optional uint32 opcode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_opcode(), target);
  }

  // optional string str = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_str(), target);
  }

  // optional uint32 tag = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tag(), target);
  }

  // optional int32 transfer_len = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_transfer_len(), target);
  }

  // optional uint32 group_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_group_id(), target);
  }

  // optional uint32 str_t = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_str_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.UfshcdCommandFtraceEvent)
  return target;
}

size_t UfshcdCommandFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.UfshcdCommandFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string dev_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dev_name());
    }

    // optional string str = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str());
    }

    // optional uint32 doorbell = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_doorbell());
    }

    // optional uint32 intr = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_intr());
    }

    // optional uint64 lba = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lba());
    }

    // optional uint32 opcode = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_opcode());
    }

    // optional uint32 tag = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag());
    }

    // optional int32 transfer_len = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_transfer_len());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 group_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
    }

    // optional uint32 str_t = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_str_t());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UfshcdCommandFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UfshcdCommandFtraceEvent*>(
      &from));
}

void UfshcdCommandFtraceEvent::MergeFrom(const UfshcdCommandFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.UfshcdCommandFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_dev_name(from._internal_dev_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_str(from._internal_str());
    }
    if (cached_has_bits & 0x00000004u) {
      doorbell_ = from.doorbell_;
    }
    if (cached_has_bits & 0x00000008u) {
      intr_ = from.intr_;
    }
    if (cached_has_bits & 0x00000010u) {
      lba_ = from.lba_;
    }
    if (cached_has_bits & 0x00000020u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000040u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000080u) {
      transfer_len_ = from.transfer_len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      str_t_ = from.str_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UfshcdCommandFtraceEvent::CopyFrom(const UfshcdCommandFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.UfshcdCommandFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UfshcdCommandFtraceEvent::IsInitialized() const {
  return true;
}

void UfshcdCommandFtraceEvent::InternalSwap(UfshcdCommandFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &dev_name_, lhs_arena,
      &other->dev_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UfshcdCommandFtraceEvent, str_t_)
      + sizeof(UfshcdCommandFtraceEvent::str_t_)
      - PROTOBUF_FIELD_OFFSET(UfshcdCommandFtraceEvent, doorbell_)>(
          reinterpret_cast<char*>(&doorbell_),
          reinterpret_cast<char*>(&other->doorbell_));
}

std::string UfshcdCommandFtraceEvent::GetTypeName() const {
  return "perfetto.protos.UfshcdCommandFtraceEvent";
}


// ===================================================================

class UfshcdClkGatingFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<UfshcdClkGatingFtraceEvent>()._has_bits_);
  static void set_has_dev_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UfshcdClkGatingFtraceEvent::UfshcdClkGatingFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.UfshcdClkGatingFtraceEvent)
}
UfshcdClkGatingFtraceEvent::UfshcdClkGatingFtraceEvent(const UfshcdClkGatingFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  dev_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dev_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dev_name()) {
    dev_name_.Set(from._internal_dev_name(), 
      GetArenaForAllocation());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.UfshcdClkGatingFtraceEvent)
}

inline void UfshcdClkGatingFtraceEvent::SharedCtor() {
dev_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dev_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
state_ = 0;
}

UfshcdClkGatingFtraceEvent::~UfshcdClkGatingFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.UfshcdClkGatingFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UfshcdClkGatingFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dev_name_.Destroy();
}

void UfshcdClkGatingFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UfshcdClkGatingFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.UfshcdClkGatingFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    dev_name_.ClearNonDefaultToEmpty();
  }
  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UfshcdClkGatingFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string dev_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UfshcdClkGatingFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.UfshcdClkGatingFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string dev_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_name(), target);
  }

  // optional int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.UfshcdClkGatingFtraceEvent)
  return target;
}

size_t UfshcdClkGatingFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.UfshcdClkGatingFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string dev_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dev_name());
    }

    // optional int32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UfshcdClkGatingFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UfshcdClkGatingFtraceEvent*>(
      &from));
}

void UfshcdClkGatingFtraceEvent::MergeFrom(const UfshcdClkGatingFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.UfshcdClkGatingFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_dev_name(from._internal_dev_name());
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UfshcdClkGatingFtraceEvent::CopyFrom(const UfshcdClkGatingFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.UfshcdClkGatingFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UfshcdClkGatingFtraceEvent::IsInitialized() const {
  return true;
}

void UfshcdClkGatingFtraceEvent::InternalSwap(UfshcdClkGatingFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &dev_name_, lhs_arena,
      &other->dev_name_, rhs_arena
  );
  swap(state_, other->state_);
}

std::string UfshcdClkGatingFtraceEvent::GetTypeName() const {
  return "perfetto.protos.UfshcdClkGatingFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::UfshcdCommandFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::UfshcdCommandFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::UfshcdCommandFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::UfshcdClkGatingFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::UfshcdClkGatingFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::UfshcdClkGatingFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
