#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/panel.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

DsiTxFtraceEvent::DsiTxFtraceEvent() = default;
DsiTxFtraceEvent::~DsiTxFtraceEvent() = default;
DsiTxFtraceEvent::DsiTxFtraceEvent(const DsiTxFtraceEvent&) = default;
DsiTxFtraceEvent& DsiTxFtraceEvent::operator=(const DsiTxFtraceEvent&) = default;
DsiTxFtraceEvent::DsiTxFtraceEvent(DsiTxFtraceEvent&&) noexcept = default;
DsiTxFtraceEvent& DsiTxFtraceEvent::operator=(DsiTxFtraceEvent&&) = default;

bool DsiTxFtraceEvent::operator==(const DsiTxFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(last_, other.last_)
   && ::protozero::internal::gen_helpers::EqualsField(tx_buf_, other.tx_buf_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_);
}

bool DsiTxFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* last */:
        field.get(&last_);
        break;
      case 2 /* tx_buf */:
        field.get(&tx_buf_);
        break;
      case 3 /* type */:
        field.get(&type_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DsiTxFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DsiTxFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DsiTxFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: last
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, last_, msg);
  }

  // Field 2: tx_buf
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, tx_buf_, msg);
  }

  // Field 3: type
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, type_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DsiRxFtraceEvent::DsiRxFtraceEvent() = default;
DsiRxFtraceEvent::~DsiRxFtraceEvent() = default;
DsiRxFtraceEvent::DsiRxFtraceEvent(const DsiRxFtraceEvent&) = default;
DsiRxFtraceEvent& DsiRxFtraceEvent::operator=(const DsiRxFtraceEvent&) = default;
DsiRxFtraceEvent::DsiRxFtraceEvent(DsiRxFtraceEvent&&) noexcept = default;
DsiRxFtraceEvent& DsiRxFtraceEvent::operator=(DsiRxFtraceEvent&&) = default;

bool DsiRxFtraceEvent::operator==(const DsiRxFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cmd_, other.cmd_)
   && ::protozero::internal::gen_helpers::EqualsField(rx_buf_, other.rx_buf_);
}

bool DsiRxFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cmd */:
        field.get(&cmd_);
        break;
      case 2 /* rx_buf */:
        field.get(&rx_buf_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DsiRxFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DsiRxFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DsiRxFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cmd
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cmd_, msg);
  }

  // Field 2: rx_buf
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, rx_buf_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DsiCmdFifoStatusFtraceEvent::DsiCmdFifoStatusFtraceEvent() = default;
DsiCmdFifoStatusFtraceEvent::~DsiCmdFifoStatusFtraceEvent() = default;
DsiCmdFifoStatusFtraceEvent::DsiCmdFifoStatusFtraceEvent(const DsiCmdFifoStatusFtraceEvent&) = default;
DsiCmdFifoStatusFtraceEvent& DsiCmdFifoStatusFtraceEvent::operator=(const DsiCmdFifoStatusFtraceEvent&) = default;
DsiCmdFifoStatusFtraceEvent::DsiCmdFifoStatusFtraceEvent(DsiCmdFifoStatusFtraceEvent&&) noexcept = default;
DsiCmdFifoStatusFtraceEvent& DsiCmdFifoStatusFtraceEvent::operator=(DsiCmdFifoStatusFtraceEvent&&) = default;

bool DsiCmdFifoStatusFtraceEvent::operator==(const DsiCmdFifoStatusFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(header_, other.header_)
   && ::protozero::internal::gen_helpers::EqualsField(payload_, other.payload_);
}

bool DsiCmdFifoStatusFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* header */:
        field.get(&header_);
        break;
      case 2 /* payload */:
        field.get(&payload_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DsiCmdFifoStatusFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DsiCmdFifoStatusFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DsiCmdFifoStatusFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: header
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, header_, msg);
  }

  // Field 2: payload
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, payload_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
