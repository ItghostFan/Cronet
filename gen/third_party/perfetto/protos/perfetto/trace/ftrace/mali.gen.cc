#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/mali.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent() = default;
MaliMaliCSFINTERRUPTENDFtraceEvent::~MaliMaliCSFINTERRUPTENDFtraceEvent() = default;
MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(const MaliMaliCSFINTERRUPTENDFtraceEvent&) = default;
MaliMaliCSFINTERRUPTENDFtraceEvent& MaliMaliCSFINTERRUPTENDFtraceEvent::operator=(const MaliMaliCSFINTERRUPTENDFtraceEvent&) = default;
MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(MaliMaliCSFINTERRUPTENDFtraceEvent&&) noexcept = default;
MaliMaliCSFINTERRUPTENDFtraceEvent& MaliMaliCSFINTERRUPTENDFtraceEvent::operator=(MaliMaliCSFINTERRUPTENDFtraceEvent&&) = default;

bool MaliMaliCSFINTERRUPTENDFtraceEvent::operator==(const MaliMaliCSFINTERRUPTENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliCSFINTERRUPTENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliCSFINTERRUPTENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliCSFINTERRUPTENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent() = default;
MaliMaliCSFINTERRUPTSTARTFtraceEvent::~MaliMaliCSFINTERRUPTSTARTFtraceEvent() = default;
MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(const MaliMaliCSFINTERRUPTSTARTFtraceEvent&) = default;
MaliMaliCSFINTERRUPTSTARTFtraceEvent& MaliMaliCSFINTERRUPTSTARTFtraceEvent::operator=(const MaliMaliCSFINTERRUPTSTARTFtraceEvent&) = default;
MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(MaliMaliCSFINTERRUPTSTARTFtraceEvent&&) noexcept = default;
MaliMaliCSFINTERRUPTSTARTFtraceEvent& MaliMaliCSFINTERRUPTSTARTFtraceEvent::operator=(MaliMaliCSFINTERRUPTSTARTFtraceEvent&&) = default;

bool MaliMaliCSFINTERRUPTSTARTFtraceEvent::operator==(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliCSFINTERRUPTSTARTFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliCSFINTERRUPTSTARTFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliCSFINTERRUPTSTARTFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent() = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent::~MaliMaliKCPUFENCEWAITENDFtraceEvent() = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(const MaliMaliKCPUFENCEWAITENDFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent& MaliMaliKCPUFENCEWAITENDFtraceEvent::operator=(const MaliMaliKCPUFENCEWAITENDFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(MaliMaliKCPUFENCEWAITENDFtraceEvent&&) noexcept = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent& MaliMaliKCPUFENCEWAITENDFtraceEvent::operator=(MaliMaliKCPUFENCEWAITENDFtraceEvent&&) = default;

bool MaliMaliKCPUFENCEWAITENDFtraceEvent::operator==(const MaliMaliKCPUFENCEWAITENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_);
}

bool MaliMaliKCPUFENCEWAITENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 2 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 3 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* id */:
        field.get(&id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUFENCEWAITENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUFENCEWAITENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: info_val1
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, info_val1_, msg);
  }

  // Field 2: info_val2
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val2_, msg);
  }

  // Field 3: kctx_tgid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, kctx_tgid_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: id
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent() = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::~MaliMaliKCPUFENCEWAITSTARTFtraceEvent() = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent& MaliMaliKCPUFENCEWAITSTARTFtraceEvent::operator=(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(MaliMaliKCPUFENCEWAITSTARTFtraceEvent&&) noexcept = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent& MaliMaliKCPUFENCEWAITSTARTFtraceEvent::operator=(MaliMaliKCPUFENCEWAITSTARTFtraceEvent&&) = default;

bool MaliMaliKCPUFENCEWAITSTARTFtraceEvent::operator==(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_);
}

bool MaliMaliKCPUFENCEWAITSTARTFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 2 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 3 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* id */:
        field.get(&id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: info_val1
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, info_val1_, msg);
  }

  // Field 2: info_val2
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val2_, msg);
  }

  // Field 3: kctx_tgid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, kctx_tgid_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: id
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent() = default;
MaliMaliKCPUFENCESIGNALFtraceEvent::~MaliMaliKCPUFENCESIGNALFtraceEvent() = default;
MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(const MaliMaliKCPUFENCESIGNALFtraceEvent&) = default;
MaliMaliKCPUFENCESIGNALFtraceEvent& MaliMaliKCPUFENCESIGNALFtraceEvent::operator=(const MaliMaliKCPUFENCESIGNALFtraceEvent&) = default;
MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(MaliMaliKCPUFENCESIGNALFtraceEvent&&) noexcept = default;
MaliMaliKCPUFENCESIGNALFtraceEvent& MaliMaliKCPUFENCESIGNALFtraceEvent::operator=(MaliMaliKCPUFENCESIGNALFtraceEvent&&) = default;

bool MaliMaliKCPUFENCESIGNALFtraceEvent::operator==(const MaliMaliKCPUFENCESIGNALFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_);
}

bool MaliMaliKCPUFENCESIGNALFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 2 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 3 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* id */:
        field.get(&id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUFENCESIGNALFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUFENCESIGNALFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: info_val1
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, info_val1_, msg);
  }

  // Field 2: info_val2
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val2_, msg);
  }

  // Field 3: kctx_tgid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, kctx_tgid_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: id
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent() = default;
MaliMaliKCPUCQSWAITENDFtraceEvent::~MaliMaliKCPUCQSWAITENDFtraceEvent() = default;
MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(const MaliMaliKCPUCQSWAITENDFtraceEvent&) = default;
MaliMaliKCPUCQSWAITENDFtraceEvent& MaliMaliKCPUCQSWAITENDFtraceEvent::operator=(const MaliMaliKCPUCQSWAITENDFtraceEvent&) = default;
MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(MaliMaliKCPUCQSWAITENDFtraceEvent&&) noexcept = default;
MaliMaliKCPUCQSWAITENDFtraceEvent& MaliMaliKCPUCQSWAITENDFtraceEvent::operator=(MaliMaliKCPUCQSWAITENDFtraceEvent&&) = default;

bool MaliMaliKCPUCQSWAITENDFtraceEvent::operator==(const MaliMaliKCPUCQSWAITENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_);
}

bool MaliMaliKCPUCQSWAITENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 3 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUCQSWAITENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUCQSWAITENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: info_val1
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val1_, msg);
  }

  // Field 3: info_val2
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val2_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: kctx_tgid
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, kctx_tgid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent() = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent::~MaliMaliKCPUCQSWAITSTARTFtraceEvent() = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(const MaliMaliKCPUCQSWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent& MaliMaliKCPUCQSWAITSTARTFtraceEvent::operator=(const MaliMaliKCPUCQSWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(MaliMaliKCPUCQSWAITSTARTFtraceEvent&&) noexcept = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent& MaliMaliKCPUCQSWAITSTARTFtraceEvent::operator=(MaliMaliKCPUCQSWAITSTARTFtraceEvent&&) = default;

bool MaliMaliKCPUCQSWAITSTARTFtraceEvent::operator==(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_);
}

bool MaliMaliKCPUCQSWAITSTARTFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 3 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUCQSWAITSTARTFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUCQSWAITSTARTFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: info_val1
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val1_, msg);
  }

  // Field 3: info_val2
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val2_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: kctx_tgid
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, kctx_tgid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent() = default;
MaliMaliKCPUCQSSETFtraceEvent::~MaliMaliKCPUCQSSETFtraceEvent() = default;
MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(const MaliMaliKCPUCQSSETFtraceEvent&) = default;
MaliMaliKCPUCQSSETFtraceEvent& MaliMaliKCPUCQSSETFtraceEvent::operator=(const MaliMaliKCPUCQSSETFtraceEvent&) = default;
MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(MaliMaliKCPUCQSSETFtraceEvent&&) noexcept = default;
MaliMaliKCPUCQSSETFtraceEvent& MaliMaliKCPUCQSSETFtraceEvent::operator=(MaliMaliKCPUCQSSETFtraceEvent&&) = default;

bool MaliMaliKCPUCQSSETFtraceEvent::operator==(const MaliMaliKCPUCQSSETFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_);
}

bool MaliMaliKCPUCQSSETFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 3 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUCQSSETFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUCQSSETFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUCQSSETFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: info_val1
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val1_, msg);
  }

  // Field 3: info_val2
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val2_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: kctx_tgid
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, kctx_tgid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent() = default;
MaliTracingMarkWriteFtraceEvent::~MaliTracingMarkWriteFtraceEvent() = default;
MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(const MaliTracingMarkWriteFtraceEvent&) = default;
MaliTracingMarkWriteFtraceEvent& MaliTracingMarkWriteFtraceEvent::operator=(const MaliTracingMarkWriteFtraceEvent&) = default;
MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(MaliTracingMarkWriteFtraceEvent&&) noexcept = default;
MaliTracingMarkWriteFtraceEvent& MaliTracingMarkWriteFtraceEvent::operator=(MaliTracingMarkWriteFtraceEvent&&) = default;

bool MaliTracingMarkWriteFtraceEvent::operator==(const MaliTracingMarkWriteFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool MaliTracingMarkWriteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* pid */:
        field.get(&pid_);
        break;
      case 3 /* type */:
        field.get(&type_);
        break;
      case 4 /* value */:
        field.get(&value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliTracingMarkWriteFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliTracingMarkWriteFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliTracingMarkWriteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: pid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, pid_, msg);
  }

  // Field 3: type
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, type_, msg);
  }

  // Field 4: value
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
