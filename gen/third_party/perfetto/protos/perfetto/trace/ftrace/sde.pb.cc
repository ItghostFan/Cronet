// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/sde.proto

#include "protos/perfetto/trace/ftrace/sde.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(
    ::_pbi::ConstantInitialized)
  : trace_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(0)
  , trace_type_(0u)
  , value_(0)
  , trace_begin_(0u){}
struct SdeTracingMarkWriteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeTracingMarkWriteFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeTracingMarkWriteFtraceEventDefaultTypeInternal() {}
  union {
    SdeTracingMarkWriteFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeTracingMarkWriteFtraceEventDefaultTypeInternal _SdeTracingMarkWriteFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent(
    ::_pbi::ConstantInitialized)
  : evtlog_tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(0)
  , tag_id_(0u){}
struct SdeSdeEvtlogFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeSdeEvtlogFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeSdeEvtlogFtraceEventDefaultTypeInternal() {}
  union {
    SdeSdeEvtlogFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeSdeEvtlogFtraceEventDefaultTypeInternal _SdeSdeEvtlogFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent(
    ::_pbi::ConstantInitialized)
  : bw_ctl_ebi_(uint64_t{0u})
  , bw_ctl_llcc_(uint64_t{0u})
  , bw_ctl_mnoc_(uint64_t{0u})
  , core_clk_rate_(0u)
  , crtc_(0u)
  , ib_ebi_(uint64_t{0u})
  , ib_llcc_(uint64_t{0u})
  , ib_mnoc_(uint64_t{0u}){}
struct SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal() {}
  union {
    SdeSdePerfCalcCrtcFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal _SdeSdePerfCalcCrtcFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent(
    ::_pbi::ConstantInitialized)
  : bw_ctl_ebi_(uint64_t{0u})
  , bw_ctl_llcc_(uint64_t{0u})
  , bw_ctl_mnoc_(uint64_t{0u})
  , core_clk_rate_(0u)
  , crtc_(0u)
  , per_pipe_ib_ebi_(uint64_t{0u})
  , per_pipe_ib_llcc_(uint64_t{0u})
  , params_(0)
  , stop_req_(0u)
  , per_pipe_ib_mnoc_(uint64_t{0u})
  , update_bus_(0u)
  , update_clk_(0u){}
struct SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal() {}
  union {
    SdeSdePerfCrtcUpdateFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal _SdeSdePerfCrtcUpdateFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent(
    ::_pbi::ConstantInitialized)
  : fl_(0u)
  , fmt_(0u)
  , lut_(uint64_t{0u})
  , lut_usage_(0u)
  , pnum_(0u)
  , rt_(0u){}
struct SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal() {}
  union {
    SdeSdePerfSetQosLutsFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal _SdeSdePerfSetQosLutsFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent(
    ::_pbi::ConstantInitialized)
  : ab_quota_(uint64_t{0u})
  , bus_id_(0u)
  , client_(0)
  , ib_quota_(uint64_t{0u}){}
struct SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal() {}
  union {
    SdeSdePerfUpdateBusFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal _SdeSdePerfUpdateBusFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class SdeTracingMarkWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeTracingMarkWriteFtraceEvent>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trace_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trace_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trace_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
}
SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(const SdeTracingMarkWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  trace_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trace_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trace_name()) {
    trace_name_.Set(from._internal_trace_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_begin_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(trace_begin_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
}

inline void SdeTracingMarkWriteFtraceEvent::SharedCtor() {
trace_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trace_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trace_begin_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(trace_begin_));
}

SdeTracingMarkWriteFtraceEvent::~SdeTracingMarkWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeTracingMarkWriteFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trace_name_.Destroy();
}

void SdeTracingMarkWriteFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SdeTracingMarkWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    trace_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trace_begin_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(trace_begin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SdeTracingMarkWriteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string trace_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trace_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trace_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_trace_type(&has_bits);
          trace_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trace_begin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_trace_begin(&has_bits);
          trace_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SdeTracingMarkWriteFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // optional string trace_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trace_name(), target);
  }

  // optional uint32 trace_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_trace_type(), target);
  }

  // optional int32 value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_value(), target);
  }

  // optional uint32 trace_begin = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_trace_begin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  return target;
}

size_t SdeTracingMarkWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string trace_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trace_name());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 trace_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trace_type());
    }

    // optional int32 value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
    }

    // optional uint32 trace_begin = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trace_begin());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeTracingMarkWriteFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SdeTracingMarkWriteFtraceEvent*>(
      &from));
}

void SdeTracingMarkWriteFtraceEvent::MergeFrom(const SdeTracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_trace_name(from._internal_trace_name());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      trace_type_ = from.trace_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      trace_begin_ = from.trace_begin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SdeTracingMarkWriteFtraceEvent::CopyFrom(const SdeTracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeTracingMarkWriteFtraceEvent::IsInitialized() const {
  return true;
}

void SdeTracingMarkWriteFtraceEvent::InternalSwap(SdeTracingMarkWriteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trace_name_, lhs_arena,
      &other->trace_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeTracingMarkWriteFtraceEvent, trace_begin_)
      + sizeof(SdeTracingMarkWriteFtraceEvent::trace_begin_)
      - PROTOBUF_FIELD_OFFSET(SdeTracingMarkWriteFtraceEvent, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

std::string SdeTracingMarkWriteFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeTracingMarkWriteFtraceEvent";
}


// ===================================================================

class SdeSdeEvtlogFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdeEvtlogFtraceEvent>()._has_bits_);
  static void set_has_evtlog_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tag_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeSdeEvtlogFtraceEvent)
}
SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent(const SdeSdeEvtlogFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  evtlog_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    evtlog_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_evtlog_tag()) {
    evtlog_tag_.Set(from._internal_evtlog_tag(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_id_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(tag_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdeEvtlogFtraceEvent)
}

inline void SdeSdeEvtlogFtraceEvent::SharedCtor() {
evtlog_tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  evtlog_tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tag_id_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(tag_id_));
}

SdeSdeEvtlogFtraceEvent::~SdeSdeEvtlogFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeSdeEvtlogFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  evtlog_tag_.Destroy();
}

void SdeSdeEvtlogFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SdeSdeEvtlogFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    evtlog_tag_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tag_id_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(tag_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SdeSdeEvtlogFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string evtlog_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_evtlog_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tag_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tag_id(&has_bits);
          tag_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SdeSdeEvtlogFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string evtlog_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_evtlog_tag(), target);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pid(), target);
  }

  // optional uint32 tag_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tag_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  return target;
}

size_t SdeSdeEvtlogFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string evtlog_tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_evtlog_tag());
    }

    // optional int32 pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 tag_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeSdeEvtlogFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SdeSdeEvtlogFtraceEvent*>(
      &from));
}

void SdeSdeEvtlogFtraceEvent::MergeFrom(const SdeSdeEvtlogFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_evtlog_tag(from._internal_evtlog_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tag_id_ = from.tag_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SdeSdeEvtlogFtraceEvent::CopyFrom(const SdeSdeEvtlogFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdeEvtlogFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdeEvtlogFtraceEvent::InternalSwap(SdeSdeEvtlogFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &evtlog_tag_, lhs_arena,
      &other->evtlog_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeSdeEvtlogFtraceEvent, tag_id_)
      + sizeof(SdeSdeEvtlogFtraceEvent::tag_id_)
      - PROTOBUF_FIELD_OFFSET(SdeSdeEvtlogFtraceEvent, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

std::string SdeSdeEvtlogFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeSdeEvtlogFtraceEvent";
}


// ===================================================================

class SdeSdePerfCalcCrtcFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfCalcCrtcFtraceEvent>()._has_bits_);
  static void set_has_bw_ctl_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bw_ctl_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bw_ctl_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_core_clk_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crtc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ib_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ib_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ib_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
}
SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent(const SdeSdePerfCalcCrtcFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&bw_ctl_ebi_, &from.bw_ctl_ebi_,
    static_cast<size_t>(reinterpret_cast<char*>(&ib_mnoc_) -
    reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(ib_mnoc_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
}

inline void SdeSdePerfCalcCrtcFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bw_ctl_ebi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ib_mnoc_) -
    reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(ib_mnoc_));
}

SdeSdePerfCalcCrtcFtraceEvent::~SdeSdePerfCalcCrtcFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeSdePerfCalcCrtcFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SdeSdePerfCalcCrtcFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SdeSdePerfCalcCrtcFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bw_ctl_ebi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ib_mnoc_) -
        reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(ib_mnoc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SdeSdePerfCalcCrtcFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 bw_ctl_ebi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bw_ctl_ebi(&has_bits);
          bw_ctl_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bw_ctl_llcc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bw_ctl_llcc(&has_bits);
          bw_ctl_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bw_ctl_mnoc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bw_ctl_mnoc(&has_bits);
          bw_ctl_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 core_clk_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_core_clk_rate(&has_bits);
          core_clk_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crtc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_crtc(&has_bits);
          crtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ib_ebi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ib_ebi(&has_bits);
          ib_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ib_llcc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ib_llcc(&has_bits);
          ib_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ib_mnoc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_ib_mnoc(&has_bits);
          ib_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SdeSdePerfCalcCrtcFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bw_ctl_ebi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bw_ctl_ebi(), target);
  }

  // optional uint64 bw_ctl_llcc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bw_ctl_llcc(), target);
  }

  // optional uint64 bw_ctl_mnoc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bw_ctl_mnoc(), target);
  }

  // optional uint32 core_clk_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_core_clk_rate(), target);
  }

  // optional uint32 crtc = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_crtc(), target);
  }

  // optional uint64 ib_ebi = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_ib_ebi(), target);
  }

  // optional uint64 ib_llcc = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_ib_llcc(), target);
  }

  // optional uint64 ib_mnoc = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_ib_mnoc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  return target;
}

size_t SdeSdePerfCalcCrtcFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bw_ctl_ebi = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bw_ctl_ebi());
    }

    // optional uint64 bw_ctl_llcc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bw_ctl_llcc());
    }

    // optional uint64 bw_ctl_mnoc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bw_ctl_mnoc());
    }

    // optional uint32 core_clk_rate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_core_clk_rate());
    }

    // optional uint32 crtc = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crtc());
    }

    // optional uint64 ib_ebi = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ib_ebi());
    }

    // optional uint64 ib_llcc = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ib_llcc());
    }

    // optional uint64 ib_mnoc = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ib_mnoc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeSdePerfCalcCrtcFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SdeSdePerfCalcCrtcFtraceEvent*>(
      &from));
}

void SdeSdePerfCalcCrtcFtraceEvent::MergeFrom(const SdeSdePerfCalcCrtcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bw_ctl_ebi_ = from.bw_ctl_ebi_;
    }
    if (cached_has_bits & 0x00000002u) {
      bw_ctl_llcc_ = from.bw_ctl_llcc_;
    }
    if (cached_has_bits & 0x00000004u) {
      bw_ctl_mnoc_ = from.bw_ctl_mnoc_;
    }
    if (cached_has_bits & 0x00000008u) {
      core_clk_rate_ = from.core_clk_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      crtc_ = from.crtc_;
    }
    if (cached_has_bits & 0x00000020u) {
      ib_ebi_ = from.ib_ebi_;
    }
    if (cached_has_bits & 0x00000040u) {
      ib_llcc_ = from.ib_llcc_;
    }
    if (cached_has_bits & 0x00000080u) {
      ib_mnoc_ = from.ib_mnoc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SdeSdePerfCalcCrtcFtraceEvent::CopyFrom(const SdeSdePerfCalcCrtcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfCalcCrtcFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfCalcCrtcFtraceEvent::InternalSwap(SdeSdePerfCalcCrtcFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeSdePerfCalcCrtcFtraceEvent, ib_mnoc_)
      + sizeof(SdeSdePerfCalcCrtcFtraceEvent::ib_mnoc_)
      - PROTOBUF_FIELD_OFFSET(SdeSdePerfCalcCrtcFtraceEvent, bw_ctl_ebi_)>(
          reinterpret_cast<char*>(&bw_ctl_ebi_),
          reinterpret_cast<char*>(&other->bw_ctl_ebi_));
}

std::string SdeSdePerfCalcCrtcFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent";
}


// ===================================================================

class SdeSdePerfCrtcUpdateFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfCrtcUpdateFtraceEvent>()._has_bits_);
  static void set_has_bw_ctl_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bw_ctl_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bw_ctl_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_core_clk_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crtc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_per_pipe_ib_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_per_pipe_ib_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_per_pipe_ib_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_stop_req(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_update_bus(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_update_clk(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
}
SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent(const SdeSdePerfCrtcUpdateFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&bw_ctl_ebi_, &from.bw_ctl_ebi_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_clk_) -
    reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(update_clk_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
}

inline void SdeSdePerfCrtcUpdateFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bw_ctl_ebi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_clk_) -
    reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(update_clk_));
}

SdeSdePerfCrtcUpdateFtraceEvent::~SdeSdePerfCrtcUpdateFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeSdePerfCrtcUpdateFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SdeSdePerfCrtcUpdateFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SdeSdePerfCrtcUpdateFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bw_ctl_ebi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&params_) -
        reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(params_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&stop_req_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_clk_) -
        reinterpret_cast<char*>(&stop_req_)) + sizeof(update_clk_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SdeSdePerfCrtcUpdateFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 bw_ctl_ebi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bw_ctl_ebi(&has_bits);
          bw_ctl_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bw_ctl_llcc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bw_ctl_llcc(&has_bits);
          bw_ctl_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bw_ctl_mnoc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bw_ctl_mnoc(&has_bits);
          bw_ctl_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 core_clk_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_core_clk_rate(&has_bits);
          core_clk_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crtc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_crtc(&has_bits);
          crtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_params(&has_bits);
          params_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 per_pipe_ib_ebi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_per_pipe_ib_ebi(&has_bits);
          per_pipe_ib_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 per_pipe_ib_llcc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_per_pipe_ib_llcc(&has_bits);
          per_pipe_ib_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 per_pipe_ib_mnoc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_per_pipe_ib_mnoc(&has_bits);
          per_pipe_ib_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stop_req = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_stop_req(&has_bits);
          stop_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 update_bus = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_update_bus(&has_bits);
          update_bus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 update_clk = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_update_clk(&has_bits);
          update_clk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SdeSdePerfCrtcUpdateFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bw_ctl_ebi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bw_ctl_ebi(), target);
  }

  // optional uint64 bw_ctl_llcc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bw_ctl_llcc(), target);
  }

  // optional uint64 bw_ctl_mnoc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bw_ctl_mnoc(), target);
  }

  // optional uint32 core_clk_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_core_clk_rate(), target);
  }

  // optional uint32 crtc = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_crtc(), target);
  }

  // optional int32 params = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_params(), target);
  }

  // optional uint64 per_pipe_ib_ebi = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_per_pipe_ib_ebi(), target);
  }

  // optional uint64 per_pipe_ib_llcc = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_per_pipe_ib_llcc(), target);
  }

  // optional uint64 per_pipe_ib_mnoc = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_per_pipe_ib_mnoc(), target);
  }

  // optional uint32 stop_req = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_stop_req(), target);
  }

  // optional uint32 update_bus = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_update_bus(), target);
  }

  // optional uint32 update_clk = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_update_clk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  return target;
}

size_t SdeSdePerfCrtcUpdateFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bw_ctl_ebi = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bw_ctl_ebi());
    }

    // optional uint64 bw_ctl_llcc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bw_ctl_llcc());
    }

    // optional uint64 bw_ctl_mnoc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bw_ctl_mnoc());
    }

    // optional uint32 core_clk_rate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_core_clk_rate());
    }

    // optional uint32 crtc = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crtc());
    }

    // optional uint64 per_pipe_ib_ebi = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_per_pipe_ib_ebi());
    }

    // optional uint64 per_pipe_ib_llcc = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_per_pipe_ib_llcc());
    }

    // optional int32 params = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_params());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 stop_req = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stop_req());
    }

    // optional uint64 per_pipe_ib_mnoc = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_per_pipe_ib_mnoc());
    }

    // optional uint32 update_bus = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_update_bus());
    }

    // optional uint32 update_clk = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_update_clk());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeSdePerfCrtcUpdateFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SdeSdePerfCrtcUpdateFtraceEvent*>(
      &from));
}

void SdeSdePerfCrtcUpdateFtraceEvent::MergeFrom(const SdeSdePerfCrtcUpdateFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bw_ctl_ebi_ = from.bw_ctl_ebi_;
    }
    if (cached_has_bits & 0x00000002u) {
      bw_ctl_llcc_ = from.bw_ctl_llcc_;
    }
    if (cached_has_bits & 0x00000004u) {
      bw_ctl_mnoc_ = from.bw_ctl_mnoc_;
    }
    if (cached_has_bits & 0x00000008u) {
      core_clk_rate_ = from.core_clk_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      crtc_ = from.crtc_;
    }
    if (cached_has_bits & 0x00000020u) {
      per_pipe_ib_ebi_ = from.per_pipe_ib_ebi_;
    }
    if (cached_has_bits & 0x00000040u) {
      per_pipe_ib_llcc_ = from.per_pipe_ib_llcc_;
    }
    if (cached_has_bits & 0x00000080u) {
      params_ = from.params_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      stop_req_ = from.stop_req_;
    }
    if (cached_has_bits & 0x00000200u) {
      per_pipe_ib_mnoc_ = from.per_pipe_ib_mnoc_;
    }
    if (cached_has_bits & 0x00000400u) {
      update_bus_ = from.update_bus_;
    }
    if (cached_has_bits & 0x00000800u) {
      update_clk_ = from.update_clk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SdeSdePerfCrtcUpdateFtraceEvent::CopyFrom(const SdeSdePerfCrtcUpdateFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfCrtcUpdateFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfCrtcUpdateFtraceEvent::InternalSwap(SdeSdePerfCrtcUpdateFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeSdePerfCrtcUpdateFtraceEvent, update_clk_)
      + sizeof(SdeSdePerfCrtcUpdateFtraceEvent::update_clk_)
      - PROTOBUF_FIELD_OFFSET(SdeSdePerfCrtcUpdateFtraceEvent, bw_ctl_ebi_)>(
          reinterpret_cast<char*>(&bw_ctl_ebi_),
          reinterpret_cast<char*>(&other->bw_ctl_ebi_));
}

std::string SdeSdePerfCrtcUpdateFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent";
}


// ===================================================================

class SdeSdePerfSetQosLutsFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfSetQosLutsFtraceEvent>()._has_bits_);
  static void set_has_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fmt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lut(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lut_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pnum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
}
SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent(const SdeSdePerfSetQosLutsFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&fl_, &from.fl_,
    static_cast<size_t>(reinterpret_cast<char*>(&rt_) -
    reinterpret_cast<char*>(&fl_)) + sizeof(rt_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
}

inline void SdeSdePerfSetQosLutsFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rt_) -
    reinterpret_cast<char*>(&fl_)) + sizeof(rt_));
}

SdeSdePerfSetQosLutsFtraceEvent::~SdeSdePerfSetQosLutsFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeSdePerfSetQosLutsFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SdeSdePerfSetQosLutsFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SdeSdePerfSetQosLutsFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&fl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rt_) -
        reinterpret_cast<char*>(&fl_)) + sizeof(rt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SdeSdePerfSetQosLutsFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fl(&has_bits);
          fl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fmt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fmt(&has_bits);
          fmt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lut = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lut(&has_bits);
          lut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lut_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_lut_usage(&has_bits);
          lut_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pnum(&has_bits);
          pnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rt(&has_bits);
          rt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SdeSdePerfSetQosLutsFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fl(), target);
  }

  // optional uint32 fmt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fmt(), target);
  }

  // optional uint64 lut = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lut(), target);
  }

  // optional uint32 lut_usage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lut_usage(), target);
  }

  // optional uint32 pnum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pnum(), target);
  }

  // optional uint32 rt = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  return target;
}

size_t SdeSdePerfSetQosLutsFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 fl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fl());
    }

    // optional uint32 fmt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fmt());
    }

    // optional uint64 lut = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lut());
    }

    // optional uint32 lut_usage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lut_usage());
    }

    // optional uint32 pnum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pnum());
    }

    // optional uint32 rt = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rt());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeSdePerfSetQosLutsFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SdeSdePerfSetQosLutsFtraceEvent*>(
      &from));
}

void SdeSdePerfSetQosLutsFtraceEvent::MergeFrom(const SdeSdePerfSetQosLutsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      fl_ = from.fl_;
    }
    if (cached_has_bits & 0x00000002u) {
      fmt_ = from.fmt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lut_ = from.lut_;
    }
    if (cached_has_bits & 0x00000008u) {
      lut_usage_ = from.lut_usage_;
    }
    if (cached_has_bits & 0x00000010u) {
      pnum_ = from.pnum_;
    }
    if (cached_has_bits & 0x00000020u) {
      rt_ = from.rt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SdeSdePerfSetQosLutsFtraceEvent::CopyFrom(const SdeSdePerfSetQosLutsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfSetQosLutsFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfSetQosLutsFtraceEvent::InternalSwap(SdeSdePerfSetQosLutsFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeSdePerfSetQosLutsFtraceEvent, rt_)
      + sizeof(SdeSdePerfSetQosLutsFtraceEvent::rt_)
      - PROTOBUF_FIELD_OFFSET(SdeSdePerfSetQosLutsFtraceEvent, fl_)>(
          reinterpret_cast<char*>(&fl_),
          reinterpret_cast<char*>(&other->fl_));
}

std::string SdeSdePerfSetQosLutsFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent";
}


// ===================================================================

class SdeSdePerfUpdateBusFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfUpdateBusFtraceEvent>()._has_bits_);
  static void set_has_ab_quota(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bus_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ib_quota(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
}
SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent(const SdeSdePerfUpdateBusFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&ab_quota_, &from.ab_quota_,
    static_cast<size_t>(reinterpret_cast<char*>(&ib_quota_) -
    reinterpret_cast<char*>(&ab_quota_)) + sizeof(ib_quota_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
}

inline void SdeSdePerfUpdateBusFtraceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ab_quota_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ib_quota_) -
    reinterpret_cast<char*>(&ab_quota_)) + sizeof(ib_quota_));
}

SdeSdePerfUpdateBusFtraceEvent::~SdeSdePerfUpdateBusFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeSdePerfUpdateBusFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SdeSdePerfUpdateBusFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SdeSdePerfUpdateBusFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ab_quota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ib_quota_) -
        reinterpret_cast<char*>(&ab_quota_)) + sizeof(ib_quota_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SdeSdePerfUpdateBusFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 ab_quota = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ab_quota(&has_bits);
          ab_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bus_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bus_id(&has_bits);
          bus_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_client(&has_bits);
          client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ib_quota = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ib_quota(&has_bits);
          ib_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SdeSdePerfUpdateBusFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ab_quota = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ab_quota(), target);
  }

  // optional uint32 bus_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bus_id(), target);
  }

  // optional int32 client = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_client(), target);
  }

  // optional uint64 ib_quota = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ib_quota(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  return target;
}

size_t SdeSdePerfUpdateBusFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 ab_quota = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ab_quota());
    }

    // optional uint32 bus_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bus_id());
    }

    // optional int32 client = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client());
    }

    // optional uint64 ib_quota = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ib_quota());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeSdePerfUpdateBusFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SdeSdePerfUpdateBusFtraceEvent*>(
      &from));
}

void SdeSdePerfUpdateBusFtraceEvent::MergeFrom(const SdeSdePerfUpdateBusFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ab_quota_ = from.ab_quota_;
    }
    if (cached_has_bits & 0x00000002u) {
      bus_id_ = from.bus_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_ = from.client_;
    }
    if (cached_has_bits & 0x00000008u) {
      ib_quota_ = from.ib_quota_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SdeSdePerfUpdateBusFtraceEvent::CopyFrom(const SdeSdePerfUpdateBusFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfUpdateBusFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfUpdateBusFtraceEvent::InternalSwap(SdeSdePerfUpdateBusFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeSdePerfUpdateBusFtraceEvent, ib_quota_)
      + sizeof(SdeSdePerfUpdateBusFtraceEvent::ib_quota_)
      - PROTOBUF_FIELD_OFFSET(SdeSdePerfUpdateBusFtraceEvent, ab_quota_)>(
          reinterpret_cast<char*>(&ab_quota_),
          reinterpret_cast<char*>(&other->ab_quota_));
}

std::string SdeSdePerfUpdateBusFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeSdePerfUpdateBusFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeTracingMarkWriteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeTracingMarkWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeTracingMarkWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdeEvtlogFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdeEvtlogFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeSdeEvtlogFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
