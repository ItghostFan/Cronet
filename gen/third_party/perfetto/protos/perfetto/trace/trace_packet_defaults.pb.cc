// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/trace_packet_defaults.proto

#include "protos/perfetto/trace/trace_packet_defaults.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR TracePacketDefaults::TracePacketDefaults(
    ::_pbi::ConstantInitialized)
  : track_event_defaults_(nullptr)
  , perf_sample_defaults_(nullptr)
  , timestamp_clock_id_(0u){}
struct TracePacketDefaultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TracePacketDefaultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TracePacketDefaultsDefaultTypeInternal() {}
  union {
    TracePacketDefaults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TracePacketDefaultsDefaultTypeInternal _TracePacketDefaults_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class TracePacketDefaults::_Internal {
 public:
  using HasBits = decltype(std::declval<TracePacketDefaults>()._has_bits_);
  static void set_has_timestamp_clock_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::TrackEventDefaults& track_event_defaults(const TracePacketDefaults* msg);
  static void set_has_track_event_defaults(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::PerfSampleDefaults& perf_sample_defaults(const TracePacketDefaults* msg);
  static void set_has_perf_sample_defaults(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::TrackEventDefaults&
TracePacketDefaults::_Internal::track_event_defaults(const TracePacketDefaults* msg) {
  return *msg->track_event_defaults_;
}
const ::perfetto::protos::PerfSampleDefaults&
TracePacketDefaults::_Internal::perf_sample_defaults(const TracePacketDefaults* msg) {
  return *msg->perf_sample_defaults_;
}
void TracePacketDefaults::clear_track_event_defaults() {
  if (track_event_defaults_ != nullptr) track_event_defaults_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TracePacketDefaults::clear_perf_sample_defaults() {
  if (perf_sample_defaults_ != nullptr) perf_sample_defaults_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TracePacketDefaults::TracePacketDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TracePacketDefaults)
}
TracePacketDefaults::TracePacketDefaults(const TracePacketDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_track_event_defaults()) {
    track_event_defaults_ = new ::perfetto::protos::TrackEventDefaults(*from.track_event_defaults_);
  } else {
    track_event_defaults_ = nullptr;
  }
  if (from._internal_has_perf_sample_defaults()) {
    perf_sample_defaults_ = new ::perfetto::protos::PerfSampleDefaults(*from.perf_sample_defaults_);
  } else {
    perf_sample_defaults_ = nullptr;
  }
  timestamp_clock_id_ = from.timestamp_clock_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracePacketDefaults)
}

inline void TracePacketDefaults::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&track_event_defaults_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_clock_id_) -
    reinterpret_cast<char*>(&track_event_defaults_)) + sizeof(timestamp_clock_id_));
}

TracePacketDefaults::~TracePacketDefaults() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracePacketDefaults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TracePacketDefaults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete track_event_defaults_;
  if (this != internal_default_instance()) delete perf_sample_defaults_;
}

void TracePacketDefaults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TracePacketDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracePacketDefaults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(track_event_defaults_ != nullptr);
      track_event_defaults_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(perf_sample_defaults_ != nullptr);
      perf_sample_defaults_->Clear();
    }
  }
  timestamp_clock_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TracePacketDefaults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.TrackEventDefaults track_event_defaults = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_event_defaults(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfSampleDefaults perf_sample_defaults = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_perf_sample_defaults(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp_clock_id = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_timestamp_clock_id(&has_bits);
          timestamp_clock_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TracePacketDefaults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TracePacketDefaults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.TrackEventDefaults track_event_defaults = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::track_event_defaults(this),
        _Internal::track_event_defaults(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.PerfSampleDefaults perf_sample_defaults = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::perf_sample_defaults(this),
        _Internal::perf_sample_defaults(this).GetCachedSize(), target, stream);
  }

  // optional uint32 timestamp_clock_id = 58;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(58, this->_internal_timestamp_clock_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TracePacketDefaults)
  return target;
}

size_t TracePacketDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracePacketDefaults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.TrackEventDefaults track_event_defaults = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *track_event_defaults_);
    }

    // optional .perfetto.protos.PerfSampleDefaults perf_sample_defaults = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perf_sample_defaults_);
    }

    // optional uint32 timestamp_clock_id = 58;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_timestamp_clock_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracePacketDefaults::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TracePacketDefaults*>(
      &from));
}

void TracePacketDefaults::MergeFrom(const TracePacketDefaults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracePacketDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_track_event_defaults()->::perfetto::protos::TrackEventDefaults::MergeFrom(from._internal_track_event_defaults());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_perf_sample_defaults()->::perfetto::protos::PerfSampleDefaults::MergeFrom(from._internal_perf_sample_defaults());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_clock_id_ = from.timestamp_clock_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TracePacketDefaults::CopyFrom(const TracePacketDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracePacketDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracePacketDefaults::IsInitialized() const {
  return true;
}

void TracePacketDefaults::InternalSwap(TracePacketDefaults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracePacketDefaults, timestamp_clock_id_)
      + sizeof(TracePacketDefaults::timestamp_clock_id_)
      - PROTOBUF_FIELD_OFFSET(TracePacketDefaults, track_event_defaults_)>(
          reinterpret_cast<char*>(&track_event_defaults_),
          reinterpret_cast<char*>(&other->track_event_defaults_));
}

std::string TracePacketDefaults::GetTypeName() const {
  return "perfetto.protos.TracePacketDefaults";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracePacketDefaults*
Arena::CreateMaybeMessage< ::perfetto::protos::TracePacketDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TracePacketDefaults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
