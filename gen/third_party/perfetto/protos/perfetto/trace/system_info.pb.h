// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/system_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class SystemInfo;
struct SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
class Utsname;
struct UtsnameDefaultTypeInternal;
extern UtsnameDefaultTypeInternal _Utsname_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SystemInfo* Arena::CreateMaybeMessage<::perfetto::protos::SystemInfo>(Arena*);
template<> ::perfetto::protos::Utsname* Arena::CreateMaybeMessage<::perfetto::protos::Utsname>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class Utsname final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Utsname) */ {
 public:
  inline Utsname() : Utsname(nullptr) {}
  ~Utsname() override;
  explicit PROTOBUF_CONSTEXPR Utsname(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Utsname(const Utsname& from);
  Utsname(Utsname&& from) noexcept
    : Utsname() {
    *this = ::std::move(from);
  }

  inline Utsname& operator=(const Utsname& from) {
    CopyFrom(from);
    return *this;
  }
  inline Utsname& operator=(Utsname&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Utsname& default_instance() {
    return *internal_default_instance();
  }
  static inline const Utsname* internal_default_instance() {
    return reinterpret_cast<const Utsname*>(
               &_Utsname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Utsname& a, Utsname& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Utsname* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Utsname* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Utsname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Utsname>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Utsname& from);
  void MergeFrom(const Utsname& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Utsname* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Utsname";
  }
  protected:
  explicit Utsname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSysnameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kReleaseFieldNumber = 3,
    kMachineFieldNumber = 4,
  };
  // optional string sysname = 1;
  bool has_sysname() const;
  private:
  bool _internal_has_sysname() const;
  public:
  void clear_sysname();
  const std::string& sysname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sysname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sysname();
  PROTOBUF_NODISCARD std::string* release_sysname();
  void set_allocated_sysname(std::string* sysname);
  private:
  const std::string& _internal_sysname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sysname(const std::string& value);
  std::string* _internal_mutable_sysname();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string release = 3;
  bool has_release() const;
  private:
  bool _internal_has_release() const;
  public:
  void clear_release();
  const std::string& release() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_release(ArgT0&& arg0, ArgT... args);
  std::string* mutable_release();
  PROTOBUF_NODISCARD std::string* release_release();
  void set_allocated_release(std::string* release);
  private:
  const std::string& _internal_release() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_release(const std::string& value);
  std::string* _internal_mutable_release();
  public:

  // optional string machine = 4;
  bool has_machine() const;
  private:
  bool _internal_has_machine() const;
  public:
  void clear_machine();
  const std::string& machine() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine();
  PROTOBUF_NODISCARD std::string* release_machine();
  void set_allocated_machine(std::string* machine);
  private:
  const std::string& _internal_machine() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine(const std::string& value);
  std::string* _internal_mutable_machine();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.Utsname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sysname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr release_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto;
};
// -------------------------------------------------------------------

class SystemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SystemInfo) */ {
 public:
  inline SystemInfo() : SystemInfo(nullptr) {}
  ~SystemInfo() override;
  explicit PROTOBUF_CONSTEXPR SystemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfo(const SystemInfo& from);
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SystemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SystemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SystemInfo& from);
  void MergeFrom(const SystemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SystemInfo";
  }
  protected:
  explicit SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAndroidBuildFingerprintFieldNumber = 2,
    kTracingServiceVersionFieldNumber = 4,
    kUtsnameFieldNumber = 1,
    kHzFieldNumber = 3,
    kAndroidSdkVersionFieldNumber = 5,
    kPageSizeFieldNumber = 6,
  };
  // optional string android_build_fingerprint = 2;
  bool has_android_build_fingerprint() const;
  private:
  bool _internal_has_android_build_fingerprint() const;
  public:
  void clear_android_build_fingerprint();
  const std::string& android_build_fingerprint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_android_build_fingerprint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_android_build_fingerprint();
  PROTOBUF_NODISCARD std::string* release_android_build_fingerprint();
  void set_allocated_android_build_fingerprint(std::string* android_build_fingerprint);
  private:
  const std::string& _internal_android_build_fingerprint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_android_build_fingerprint(const std::string& value);
  std::string* _internal_mutable_android_build_fingerprint();
  public:

  // optional string tracing_service_version = 4;
  bool has_tracing_service_version() const;
  private:
  bool _internal_has_tracing_service_version() const;
  public:
  void clear_tracing_service_version();
  const std::string& tracing_service_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tracing_service_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tracing_service_version();
  PROTOBUF_NODISCARD std::string* release_tracing_service_version();
  void set_allocated_tracing_service_version(std::string* tracing_service_version);
  private:
  const std::string& _internal_tracing_service_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracing_service_version(const std::string& value);
  std::string* _internal_mutable_tracing_service_version();
  public:

  // optional .perfetto.protos.Utsname utsname = 1;
  bool has_utsname() const;
  private:
  bool _internal_has_utsname() const;
  public:
  void clear_utsname();
  const ::perfetto::protos::Utsname& utsname() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Utsname* release_utsname();
  ::perfetto::protos::Utsname* mutable_utsname();
  void set_allocated_utsname(::perfetto::protos::Utsname* utsname);
  private:
  const ::perfetto::protos::Utsname& _internal_utsname() const;
  ::perfetto::protos::Utsname* _internal_mutable_utsname();
  public:
  void unsafe_arena_set_allocated_utsname(
      ::perfetto::protos::Utsname* utsname);
  ::perfetto::protos::Utsname* unsafe_arena_release_utsname();

  // optional int64 hz = 3;
  bool has_hz() const;
  private:
  bool _internal_has_hz() const;
  public:
  void clear_hz();
  int64_t hz() const;
  void set_hz(int64_t value);
  private:
  int64_t _internal_hz() const;
  void _internal_set_hz(int64_t value);
  public:

  // optional uint64 android_sdk_version = 5;
  bool has_android_sdk_version() const;
  private:
  bool _internal_has_android_sdk_version() const;
  public:
  void clear_android_sdk_version();
  uint64_t android_sdk_version() const;
  void set_android_sdk_version(uint64_t value);
  private:
  uint64_t _internal_android_sdk_version() const;
  void _internal_set_android_sdk_version(uint64_t value);
  public:

  // optional uint32 page_size = 6;
  bool has_page_size() const;
  private:
  bool _internal_has_page_size() const;
  public:
  void clear_page_size();
  uint32_t page_size() const;
  void set_page_size(uint32_t value);
  private:
  uint32_t _internal_page_size() const;
  void _internal_set_page_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SystemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr android_build_fingerprint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracing_service_version_;
  ::perfetto::protos::Utsname* utsname_;
  int64_t hz_;
  uint64_t android_sdk_version_;
  uint32_t page_size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Utsname

// optional string sysname = 1;
inline bool Utsname::_internal_has_sysname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Utsname::has_sysname() const {
  return _internal_has_sysname();
}
inline void Utsname::clear_sysname() {
  sysname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Utsname::sysname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Utsname.sysname)
  return _internal_sysname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Utsname::set_sysname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sysname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.Utsname.sysname)
}
inline std::string* Utsname::mutable_sysname() {
  std::string* _s = _internal_mutable_sysname();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Utsname.sysname)
  return _s;
}
inline const std::string& Utsname::_internal_sysname() const {
  return sysname_.Get();
}
inline void Utsname::_internal_set_sysname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sysname_.Set(value, GetArenaForAllocation());
}
inline std::string* Utsname::_internal_mutable_sysname() {
  _has_bits_[0] |= 0x00000001u;
  return sysname_.Mutable(GetArenaForAllocation());
}
inline std::string* Utsname::release_sysname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Utsname.sysname)
  if (!_internal_has_sysname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sysname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sysname_.IsDefault()) {
    sysname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Utsname::set_allocated_sysname(std::string* sysname) {
  if (sysname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sysname_.SetAllocated(sysname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sysname_.IsDefault()) {
    sysname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Utsname.sysname)
}

// optional string version = 2;
inline bool Utsname::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Utsname::has_version() const {
  return _internal_has_version();
}
inline void Utsname::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Utsname::version() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Utsname.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Utsname::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.Utsname.version)
}
inline std::string* Utsname::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Utsname.version)
  return _s;
}
inline const std::string& Utsname::_internal_version() const {
  return version_.Get();
}
inline void Utsname::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* Utsname::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* Utsname::release_version() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Utsname.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Utsname::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Utsname.version)
}

// optional string release = 3;
inline bool Utsname::_internal_has_release() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Utsname::has_release() const {
  return _internal_has_release();
}
inline void Utsname::clear_release() {
  release_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Utsname::release() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Utsname.release)
  return _internal_release();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Utsname::set_release(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 release_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.Utsname.release)
}
inline std::string* Utsname::mutable_release() {
  std::string* _s = _internal_mutable_release();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Utsname.release)
  return _s;
}
inline const std::string& Utsname::_internal_release() const {
  return release_.Get();
}
inline void Utsname::_internal_set_release(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  release_.Set(value, GetArenaForAllocation());
}
inline std::string* Utsname::_internal_mutable_release() {
  _has_bits_[0] |= 0x00000004u;
  return release_.Mutable(GetArenaForAllocation());
}
inline std::string* Utsname::release_release() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Utsname.release)
  if (!_internal_has_release()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = release_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (release_.IsDefault()) {
    release_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Utsname::set_allocated_release(std::string* release) {
  if (release != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  release_.SetAllocated(release, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (release_.IsDefault()) {
    release_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Utsname.release)
}

// optional string machine = 4;
inline bool Utsname::_internal_has_machine() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Utsname::has_machine() const {
  return _internal_has_machine();
}
inline void Utsname::clear_machine() {
  machine_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Utsname::machine() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Utsname.machine)
  return _internal_machine();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Utsname::set_machine(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 machine_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.Utsname.machine)
}
inline std::string* Utsname::mutable_machine() {
  std::string* _s = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Utsname.machine)
  return _s;
}
inline const std::string& Utsname::_internal_machine() const {
  return machine_.Get();
}
inline void Utsname::_internal_set_machine(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  machine_.Set(value, GetArenaForAllocation());
}
inline std::string* Utsname::_internal_mutable_machine() {
  _has_bits_[0] |= 0x00000008u;
  return machine_.Mutable(GetArenaForAllocation());
}
inline std::string* Utsname::release_machine() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Utsname.machine)
  if (!_internal_has_machine()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = machine_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_.IsDefault()) {
    machine_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Utsname::set_allocated_machine(std::string* machine) {
  if (machine != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  machine_.SetAllocated(machine, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_.IsDefault()) {
    machine_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Utsname.machine)
}

// -------------------------------------------------------------------

// SystemInfo

// optional .perfetto.protos.Utsname utsname = 1;
inline bool SystemInfo::_internal_has_utsname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || utsname_ != nullptr);
  return value;
}
inline bool SystemInfo::has_utsname() const {
  return _internal_has_utsname();
}
inline void SystemInfo::clear_utsname() {
  if (utsname_ != nullptr) utsname_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::Utsname& SystemInfo::_internal_utsname() const {
  const ::perfetto::protos::Utsname* p = utsname_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::Utsname&>(
      ::perfetto::protos::_Utsname_default_instance_);
}
inline const ::perfetto::protos::Utsname& SystemInfo::utsname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.utsname)
  return _internal_utsname();
}
inline void SystemInfo::unsafe_arena_set_allocated_utsname(
    ::perfetto::protos::Utsname* utsname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utsname_);
  }
  utsname_ = utsname;
  if (utsname) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.SystemInfo.utsname)
}
inline ::perfetto::protos::Utsname* SystemInfo::release_utsname() {
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::Utsname* temp = utsname_;
  utsname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::Utsname* SystemInfo::unsafe_arena_release_utsname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SystemInfo.utsname)
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::Utsname* temp = utsname_;
  utsname_ = nullptr;
  return temp;
}
inline ::perfetto::protos::Utsname* SystemInfo::_internal_mutable_utsname() {
  _has_bits_[0] |= 0x00000004u;
  if (utsname_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::Utsname>(GetArenaForAllocation());
    utsname_ = p;
  }
  return utsname_;
}
inline ::perfetto::protos::Utsname* SystemInfo::mutable_utsname() {
  ::perfetto::protos::Utsname* _msg = _internal_mutable_utsname();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SystemInfo.utsname)
  return _msg;
}
inline void SystemInfo::set_allocated_utsname(::perfetto::protos::Utsname* utsname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete utsname_;
  }
  if (utsname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(utsname);
    if (message_arena != submessage_arena) {
      utsname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utsname, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  utsname_ = utsname;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SystemInfo.utsname)
}

// optional string android_build_fingerprint = 2;
inline bool SystemInfo::_internal_has_android_build_fingerprint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SystemInfo::has_android_build_fingerprint() const {
  return _internal_has_android_build_fingerprint();
}
inline void SystemInfo::clear_android_build_fingerprint() {
  android_build_fingerprint_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemInfo::android_build_fingerprint() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.android_build_fingerprint)
  return _internal_android_build_fingerprint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_android_build_fingerprint(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 android_build_fingerprint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SystemInfo.android_build_fingerprint)
}
inline std::string* SystemInfo::mutable_android_build_fingerprint() {
  std::string* _s = _internal_mutable_android_build_fingerprint();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SystemInfo.android_build_fingerprint)
  return _s;
}
inline const std::string& SystemInfo::_internal_android_build_fingerprint() const {
  return android_build_fingerprint_.Get();
}
inline void SystemInfo::_internal_set_android_build_fingerprint(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  android_build_fingerprint_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_android_build_fingerprint() {
  _has_bits_[0] |= 0x00000001u;
  return android_build_fingerprint_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemInfo::release_android_build_fingerprint() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SystemInfo.android_build_fingerprint)
  if (!_internal_has_android_build_fingerprint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = android_build_fingerprint_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (android_build_fingerprint_.IsDefault()) {
    android_build_fingerprint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SystemInfo::set_allocated_android_build_fingerprint(std::string* android_build_fingerprint) {
  if (android_build_fingerprint != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  android_build_fingerprint_.SetAllocated(android_build_fingerprint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (android_build_fingerprint_.IsDefault()) {
    android_build_fingerprint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SystemInfo.android_build_fingerprint)
}

// optional int64 hz = 3;
inline bool SystemInfo::_internal_has_hz() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SystemInfo::has_hz() const {
  return _internal_has_hz();
}
inline void SystemInfo::clear_hz() {
  hz_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t SystemInfo::_internal_hz() const {
  return hz_;
}
inline int64_t SystemInfo::hz() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.hz)
  return _internal_hz();
}
inline void SystemInfo::_internal_set_hz(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  hz_ = value;
}
inline void SystemInfo::set_hz(int64_t value) {
  _internal_set_hz(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SystemInfo.hz)
}

// optional string tracing_service_version = 4;
inline bool SystemInfo::_internal_has_tracing_service_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SystemInfo::has_tracing_service_version() const {
  return _internal_has_tracing_service_version();
}
inline void SystemInfo::clear_tracing_service_version() {
  tracing_service_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemInfo::tracing_service_version() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.tracing_service_version)
  return _internal_tracing_service_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_tracing_service_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 tracing_service_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SystemInfo.tracing_service_version)
}
inline std::string* SystemInfo::mutable_tracing_service_version() {
  std::string* _s = _internal_mutable_tracing_service_version();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SystemInfo.tracing_service_version)
  return _s;
}
inline const std::string& SystemInfo::_internal_tracing_service_version() const {
  return tracing_service_version_.Get();
}
inline void SystemInfo::_internal_set_tracing_service_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tracing_service_version_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_tracing_service_version() {
  _has_bits_[0] |= 0x00000002u;
  return tracing_service_version_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemInfo::release_tracing_service_version() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SystemInfo.tracing_service_version)
  if (!_internal_has_tracing_service_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = tracing_service_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tracing_service_version_.IsDefault()) {
    tracing_service_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SystemInfo::set_allocated_tracing_service_version(std::string* tracing_service_version) {
  if (tracing_service_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tracing_service_version_.SetAllocated(tracing_service_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tracing_service_version_.IsDefault()) {
    tracing_service_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SystemInfo.tracing_service_version)
}

// optional uint64 android_sdk_version = 5;
inline bool SystemInfo::_internal_has_android_sdk_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SystemInfo::has_android_sdk_version() const {
  return _internal_has_android_sdk_version();
}
inline void SystemInfo::clear_android_sdk_version() {
  android_sdk_version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t SystemInfo::_internal_android_sdk_version() const {
  return android_sdk_version_;
}
inline uint64_t SystemInfo::android_sdk_version() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.android_sdk_version)
  return _internal_android_sdk_version();
}
inline void SystemInfo::_internal_set_android_sdk_version(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  android_sdk_version_ = value;
}
inline void SystemInfo::set_android_sdk_version(uint64_t value) {
  _internal_set_android_sdk_version(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SystemInfo.android_sdk_version)
}

// optional uint32 page_size = 6;
inline bool SystemInfo::_internal_has_page_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SystemInfo::has_page_size() const {
  return _internal_has_page_size();
}
inline void SystemInfo::clear_page_size() {
  page_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t SystemInfo::_internal_page_size() const {
  return page_size_;
}
inline uint32_t SystemInfo::page_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.page_size)
  return _internal_page_size();
}
inline void SystemInfo::_internal_set_page_size(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  page_size_ = value;
}
inline void SystemInfo::set_page_size(uint32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SystemInfo.page_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto
