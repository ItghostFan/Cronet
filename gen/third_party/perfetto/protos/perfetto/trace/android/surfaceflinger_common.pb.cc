// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/surfaceflinger_common.proto

#include "protos/perfetto/trace/android/surfaceflinger_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR RegionProto::RegionProto(
    ::_pbi::ConstantInitialized)
  : rect_(){}
struct RegionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionProtoDefaultTypeInternal() {}
  union {
    RegionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionProtoDefaultTypeInternal _RegionProto_default_instance_;
PROTOBUF_CONSTEXPR RectProto::RectProto(
    ::_pbi::ConstantInitialized)
  : left_(0)
  , top_(0)
  , right_(0)
  , bottom_(0){}
struct RectProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RectProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RectProtoDefaultTypeInternal() {}
  union {
    RectProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RectProtoDefaultTypeInternal _RectProto_default_instance_;
PROTOBUF_CONSTEXPR SizeProto::SizeProto(
    ::_pbi::ConstantInitialized)
  : w_(0)
  , h_(0){}
struct SizeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SizeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SizeProtoDefaultTypeInternal() {}
  union {
    SizeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SizeProtoDefaultTypeInternal _SizeProto_default_instance_;
PROTOBUF_CONSTEXPR TransformProto::TransformProto(
    ::_pbi::ConstantInitialized)
  : dsdx_(0)
  , dtdx_(0)
  , dsdy_(0)
  , dtdy_(0)
  , type_(0){}
struct TransformProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformProtoDefaultTypeInternal() {}
  union {
    TransformProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformProtoDefaultTypeInternal _TransformProto_default_instance_;
PROTOBUF_CONSTEXPR ColorProto::ColorProto(
    ::_pbi::ConstantInitialized)
  : r_(0)
  , g_(0)
  , b_(0)
  , a_(0){}
struct ColorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorProtoDefaultTypeInternal() {}
  union {
    ColorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorProtoDefaultTypeInternal _ColorProto_default_instance_;
PROTOBUF_CONSTEXPR InputWindowInfoProto::InputWindowInfoProto(
    ::_pbi::ConstantInitialized)
  : frame_(nullptr)
  , touchable_region_(nullptr)
  , touchable_region_crop_(nullptr)
  , transform_(nullptr)
  , layout_params_flags_(0u)
  , layout_params_type_(0)
  , surface_inset_(0)
  , visible_(false)
  , can_receive_keys_(false)
  , focusable_(false)
  , has_wallpaper_(false)
  , global_scale_factor_(0)
  , window_x_scale_(0)
  , window_y_scale_(0)
  , crop_layer_id_(0)
  , replace_touchable_region_with_crop_(false)
  , input_config_(0u){}
struct InputWindowInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputWindowInfoProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputWindowInfoProtoDefaultTypeInternal() {}
  union {
    InputWindowInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputWindowInfoProtoDefaultTypeInternal _InputWindowInfoProto_default_instance_;
PROTOBUF_CONSTEXPR BlurRegion::BlurRegion(
    ::_pbi::ConstantInitialized)
  : blur_radius_(0u)
  , corner_radius_tl_(0u)
  , corner_radius_tr_(0u)
  , corner_radius_bl_(0u)
  , corner_radius_br_(0)
  , alpha_(0)
  , left_(0)
  , top_(0)
  , right_(0)
  , bottom_(0){}
struct BlurRegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlurRegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlurRegionDefaultTypeInternal() {}
  union {
    BlurRegion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlurRegionDefaultTypeInternal _BlurRegion_default_instance_;
PROTOBUF_CONSTEXPR ColorTransformProto::ColorTransformProto(
    ::_pbi::ConstantInitialized)
  : val_(){}
struct ColorTransformProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorTransformProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorTransformProtoDefaultTypeInternal() {}
  union {
    ColorTransformProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorTransformProtoDefaultTypeInternal _ColorTransformProto_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class RegionProto::_Internal {
 public:
};

RegionProto::RegionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  rect_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.RegionProto)
}
RegionProto::RegionProto(const RegionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      rect_(from.rect_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.RegionProto)
}

inline void RegionProto::SharedCtor() {
}

RegionProto::~RegionProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.RegionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.RegionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rect_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RegionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.RectProto rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.RegionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.RectProto rect = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rect_size()); i < n; i++) {
    const auto& repfield = this->_internal_rect(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.RegionProto)
  return target;
}

size_t RegionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.RegionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.RectProto rect = 2;
  total_size += 1UL * this->_internal_rect_size();
  for (const auto& msg : this->rect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RegionProto*>(
      &from));
}

void RegionProto::MergeFrom(const RegionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.RegionProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rect_.MergeFrom(from.rect_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RegionProto::CopyFrom(const RegionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.RegionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionProto::IsInitialized() const {
  return true;
}

void RegionProto::InternalSwap(RegionProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rect_.InternalSwap(&other->rect_);
}

std::string RegionProto::GetTypeName() const {
  return "perfetto.protos.RegionProto";
}


// ===================================================================

class RectProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RectProto>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RectProto::RectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.RectProto)
}
RectProto::RectProto(const RectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.RectProto)
}

inline void RectProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
}

RectProto::~RectProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.RectProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RectProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RectProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.RectProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottom_) -
        reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RectProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RectProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.RectProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_left(), target);
  }

  // optional int32 top = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_top(), target);
  }

  // optional int32 right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_right(), target);
  }

  // optional int32 bottom = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.RectProto)
  return target;
}

size_t RectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.RectProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_left());
    }

    // optional int32 top = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_top());
    }

    // optional int32 right = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_right());
    }

    // optional int32 bottom = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bottom());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RectProto*>(
      &from));
}

void RectProto::MergeFrom(const RectProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.RectProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000004u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000008u) {
      bottom_ = from.bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RectProto::CopyFrom(const RectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.RectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectProto::IsInitialized() const {
  return true;
}

void RectProto::InternalSwap(RectProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectProto, bottom_)
      + sizeof(RectProto::bottom_)
      - PROTOBUF_FIELD_OFFSET(RectProto, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

std::string RectProto::GetTypeName() const {
  return "perfetto.protos.RectProto";
}


// ===================================================================

class SizeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SizeProto>()._has_bits_);
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SizeProto::SizeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SizeProto)
}
SizeProto::SizeProto(const SizeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SizeProto)
}

inline void SizeProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_)) + sizeof(h_));
}

SizeProto::~SizeProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SizeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SizeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SizeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SizeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SizeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&w_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SizeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SizeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SizeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 w = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_w(), target);
  }

  // optional int32 h = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SizeProto)
  return target;
}

size_t SizeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SizeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 w = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_w());
    }

    // optional int32 h = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_h());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SizeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SizeProto*>(
      &from));
}

void SizeProto::MergeFrom(const SizeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SizeProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000002u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SizeProto::CopyFrom(const SizeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SizeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeProto::IsInitialized() const {
  return true;
}

void SizeProto::InternalSwap(SizeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SizeProto, h_)
      + sizeof(SizeProto::h_)
      - PROTOBUF_FIELD_OFFSET(SizeProto, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

std::string SizeProto::GetTypeName() const {
  return "perfetto.protos.SizeProto";
}


// ===================================================================

class TransformProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TransformProto>()._has_bits_);
  static void set_has_dsdx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dtdx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dsdy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dtdy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TransformProto::TransformProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TransformProto)
}
TransformProto::TransformProto(const TransformProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&dsdx_, &from.dsdx_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&dsdx_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TransformProto)
}

inline void TransformProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dsdx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&dsdx_)) + sizeof(type_));
}

TransformProto::~TransformProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TransformProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransformProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransformProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransformProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TransformProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&dsdx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&dsdx_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TransformProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float dsdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_dsdx(&has_bits);
          dsdx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dtdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_dtdx(&has_bits);
          dtdx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dsdy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_dsdy(&has_bits);
          dsdy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dtdy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_dtdy(&has_bits);
          dtdy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransformProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TransformProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dsdx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_dsdx(), target);
  }

  // optional float dtdx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_dtdx(), target);
  }

  // optional float dsdy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_dsdy(), target);
  }

  // optional float dtdy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_dtdy(), target);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TransformProto)
  return target;
}

size_t TransformProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TransformProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float dsdx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float dtdx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float dsdy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float dtdy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TransformProto*>(
      &from));
}

void TransformProto::MergeFrom(const TransformProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TransformProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      dsdx_ = from.dsdx_;
    }
    if (cached_has_bits & 0x00000002u) {
      dtdx_ = from.dtdx_;
    }
    if (cached_has_bits & 0x00000004u) {
      dsdy_ = from.dsdy_;
    }
    if (cached_has_bits & 0x00000008u) {
      dtdy_ = from.dtdy_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TransformProto::CopyFrom(const TransformProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TransformProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformProto::IsInitialized() const {
  return true;
}

void TransformProto::InternalSwap(TransformProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransformProto, type_)
      + sizeof(TransformProto::type_)
      - PROTOBUF_FIELD_OFFSET(TransformProto, dsdx_)>(
          reinterpret_cast<char*>(&dsdx_),
          reinterpret_cast<char*>(&other->dsdx_));
}

std::string TransformProto::GetTypeName() const {
  return "perfetto.protos.TransformProto";
}


// ===================================================================

class ColorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorProto>()._has_bits_);
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ColorProto::ColorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ColorProto)
}
ColorProto::ColorProto(const ColorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ColorProto)
}

inline void ColorProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

ColorProto::~ColorProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ColorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ColorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a_) -
        reinterpret_cast<char*>(&r_)) + sizeof(a_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ColorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ColorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // optional float g = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // optional float b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // optional float a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ColorProto)
  return target;
}

size_t ColorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ColorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float r = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float g = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float b = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float a = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ColorProto*>(
      &from));
}

void ColorProto::MergeFrom(const ColorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ColorProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ColorProto::CopyFrom(const ColorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ColorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorProto::IsInitialized() const {
  return true;
}

void ColorProto::InternalSwap(ColorProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorProto, a_)
      + sizeof(ColorProto::a_)
      - PROTOBUF_FIELD_OFFSET(ColorProto, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

std::string ColorProto::GetTypeName() const {
  return "perfetto.protos.ColorProto";
}


// ===================================================================

class InputWindowInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<InputWindowInfoProto>()._has_bits_);
  static void set_has_layout_params_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_layout_params_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::RectProto& frame(const InputWindowInfoProto* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::RegionProto& touchable_region(const InputWindowInfoProto* msg);
  static void set_has_touchable_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_surface_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_receive_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_focusable(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_has_wallpaper(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_global_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_window_x_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_window_y_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_crop_layer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_replace_touchable_region_with_crop(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::perfetto::protos::RectProto& touchable_region_crop(const InputWindowInfoProto* msg);
  static void set_has_touchable_region_crop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::TransformProto& transform(const InputWindowInfoProto* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_config(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::perfetto::protos::RectProto&
InputWindowInfoProto::_Internal::frame(const InputWindowInfoProto* msg) {
  return *msg->frame_;
}
const ::perfetto::protos::RegionProto&
InputWindowInfoProto::_Internal::touchable_region(const InputWindowInfoProto* msg) {
  return *msg->touchable_region_;
}
const ::perfetto::protos::RectProto&
InputWindowInfoProto::_Internal::touchable_region_crop(const InputWindowInfoProto* msg) {
  return *msg->touchable_region_crop_;
}
const ::perfetto::protos::TransformProto&
InputWindowInfoProto::_Internal::transform(const InputWindowInfoProto* msg) {
  return *msg->transform_;
}
InputWindowInfoProto::InputWindowInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.InputWindowInfoProto)
}
InputWindowInfoProto::InputWindowInfoProto(const InputWindowInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_frame()) {
    frame_ = new ::perfetto::protos::RectProto(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  if (from._internal_has_touchable_region()) {
    touchable_region_ = new ::perfetto::protos::RegionProto(*from.touchable_region_);
  } else {
    touchable_region_ = nullptr;
  }
  if (from._internal_has_touchable_region_crop()) {
    touchable_region_crop_ = new ::perfetto::protos::RectProto(*from.touchable_region_crop_);
  } else {
    touchable_region_crop_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::perfetto::protos::TransformProto(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&layout_params_flags_, &from.layout_params_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_config_) -
    reinterpret_cast<char*>(&layout_params_flags_)) + sizeof(input_config_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InputWindowInfoProto)
}

inline void InputWindowInfoProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_config_) -
    reinterpret_cast<char*>(&frame_)) + sizeof(input_config_));
}

InputWindowInfoProto::~InputWindowInfoProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InputWindowInfoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputWindowInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete touchable_region_;
  if (this != internal_default_instance()) delete touchable_region_crop_;
  if (this != internal_default_instance()) delete transform_;
}

void InputWindowInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputWindowInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InputWindowInfoProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(frame_ != nullptr);
      frame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(touchable_region_ != nullptr);
      touchable_region_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(touchable_region_crop_ != nullptr);
      touchable_region_crop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(transform_ != nullptr);
      transform_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&layout_params_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visible_) -
        reinterpret_cast<char*>(&layout_params_flags_)) + sizeof(visible_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&can_receive_keys_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replace_touchable_region_with_crop_) -
        reinterpret_cast<char*>(&can_receive_keys_)) + sizeof(replace_touchable_region_with_crop_));
  }
  input_config_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputWindowInfoProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 layout_params_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_layout_params_flags(&has_bits);
          layout_params_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 layout_params_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_layout_params_type(&has_bits);
          layout_params_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegionProto touchable_region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_touchable_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 surface_inset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_surface_inset(&has_bits);
          surface_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool visible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_receive_keys = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_can_receive_keys(&has_bits);
          can_receive_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool focusable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_focusable(&has_bits);
          focusable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_wallpaper = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_has_wallpaper(&has_bits);
          has_wallpaper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float global_scale_factor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_global_scale_factor(&has_bits);
          global_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float window_x_scale = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_window_x_scale(&has_bits);
          window_x_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float window_y_scale = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_window_y_scale(&has_bits);
          window_y_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 crop_layer_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_crop_layer_id(&has_bits);
          crop_layer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool replace_touchable_region_with_crop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_replace_touchable_region_with_crop(&has_bits);
          replace_touchable_region_with_crop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto touchable_region_crop = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_touchable_region_crop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TransformProto transform = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 input_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_input_config(&has_bits);
          input_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputWindowInfoProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.InputWindowInfoProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 layout_params_flags = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_layout_params_flags(), target);
  }

  // optional int32 layout_params_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_layout_params_type(), target);
  }

  // optional .perfetto.protos.RectProto frame = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::frame(this),
        _Internal::frame(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.RegionProto touchable_region = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::touchable_region(this),
        _Internal::touchable_region(this).GetCachedSize(), target, stream);
  }

  // optional int32 surface_inset = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_surface_inset(), target);
  }

  // optional bool visible = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_visible(), target);
  }

  // optional bool can_receive_keys = 7 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_can_receive_keys(), target);
  }

  // optional bool focusable = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_focusable(), target);
  }

  // optional bool has_wallpaper = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_has_wallpaper(), target);
  }

  // optional float global_scale_factor = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_global_scale_factor(), target);
  }

  // optional float window_x_scale = 11 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_window_x_scale(), target);
  }

  // optional float window_y_scale = 12 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_window_y_scale(), target);
  }

  // optional int32 crop_layer_id = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_crop_layer_id(), target);
  }

  // optional bool replace_touchable_region_with_crop = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_replace_touchable_region_with_crop(), target);
  }

  // optional .perfetto.protos.RectProto touchable_region_crop = 15;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::touchable_region_crop(this),
        _Internal::touchable_region_crop(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TransformProto transform = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // optional uint32 input_config = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_input_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.InputWindowInfoProto)
  return target;
}

size_t InputWindowInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InputWindowInfoProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.RectProto frame = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_);
    }

    // optional .perfetto.protos.RegionProto touchable_region = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touchable_region_);
    }

    // optional .perfetto.protos.RectProto touchable_region_crop = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touchable_region_crop_);
    }

    // optional .perfetto.protos.TransformProto transform = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transform_);
    }

    // optional uint32 layout_params_flags = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layout_params_flags());
    }

    // optional int32 layout_params_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_layout_params_type());
    }

    // optional int32 surface_inset = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_surface_inset());
    }

    // optional bool visible = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool can_receive_keys = 7 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool focusable = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool has_wallpaper = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional float global_scale_factor = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float window_x_scale = 11 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float window_y_scale = 12 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional int32 crop_layer_id = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_crop_layer_id());
    }

    // optional bool replace_touchable_region_with_crop = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 input_config = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_input_config());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputWindowInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InputWindowInfoProto*>(
      &from));
}

void InputWindowInfoProto::MergeFrom(const InputWindowInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InputWindowInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_frame()->::perfetto::protos::RectProto::MergeFrom(from._internal_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_touchable_region()->::perfetto::protos::RegionProto::MergeFrom(from._internal_touchable_region());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_touchable_region_crop()->::perfetto::protos::RectProto::MergeFrom(from._internal_touchable_region_crop());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_transform()->::perfetto::protos::TransformProto::MergeFrom(from._internal_transform());
    }
    if (cached_has_bits & 0x00000010u) {
      layout_params_flags_ = from.layout_params_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      layout_params_type_ = from.layout_params_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      surface_inset_ = from.surface_inset_;
    }
    if (cached_has_bits & 0x00000080u) {
      visible_ = from.visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      can_receive_keys_ = from.can_receive_keys_;
    }
    if (cached_has_bits & 0x00000200u) {
      focusable_ = from.focusable_;
    }
    if (cached_has_bits & 0x00000400u) {
      has_wallpaper_ = from.has_wallpaper_;
    }
    if (cached_has_bits & 0x00000800u) {
      global_scale_factor_ = from.global_scale_factor_;
    }
    if (cached_has_bits & 0x00001000u) {
      window_x_scale_ = from.window_x_scale_;
    }
    if (cached_has_bits & 0x00002000u) {
      window_y_scale_ = from.window_y_scale_;
    }
    if (cached_has_bits & 0x00004000u) {
      crop_layer_id_ = from.crop_layer_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      replace_touchable_region_with_crop_ = from.replace_touchable_region_with_crop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_input_config(from._internal_input_config());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InputWindowInfoProto::CopyFrom(const InputWindowInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InputWindowInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputWindowInfoProto::IsInitialized() const {
  return true;
}

void InputWindowInfoProto::InternalSwap(InputWindowInfoProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputWindowInfoProto, input_config_)
      + sizeof(InputWindowInfoProto::input_config_)
      - PROTOBUF_FIELD_OFFSET(InputWindowInfoProto, frame_)>(
          reinterpret_cast<char*>(&frame_),
          reinterpret_cast<char*>(&other->frame_));
}

std::string InputWindowInfoProto::GetTypeName() const {
  return "perfetto.protos.InputWindowInfoProto";
}


// ===================================================================

class BlurRegion::_Internal {
 public:
  using HasBits = decltype(std::declval<BlurRegion>()._has_bits_);
  static void set_has_blur_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_corner_radius_tl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_corner_radius_tr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_corner_radius_bl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_corner_radius_br(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

BlurRegion::BlurRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlurRegion)
}
BlurRegion::BlurRegion(const BlurRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&blur_radius_, &from.blur_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&blur_radius_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlurRegion)
}

inline void BlurRegion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blur_radius_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&blur_radius_)) + sizeof(bottom_));
}

BlurRegion::~BlurRegion() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlurRegion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlurRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlurRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlurRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlurRegion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&blur_radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&top_) -
        reinterpret_cast<char*>(&blur_radius_)) + sizeof(top_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottom_) -
        reinterpret_cast<char*>(&right_)) + sizeof(bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlurRegion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 blur_radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_blur_radius(&has_bits);
          blur_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 corner_radius_tl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_corner_radius_tl(&has_bits);
          corner_radius_tl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 corner_radius_tr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_corner_radius_tr(&has_bits);
          corner_radius_tr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 corner_radius_bl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_corner_radius_bl(&has_bits);
          corner_radius_bl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float corner_radius_br = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_corner_radius_br(&has_bits);
          corner_radius_br_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float alpha = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 left = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 top = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 right = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bottom = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlurRegion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlurRegion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 blur_radius = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_blur_radius(), target);
  }

  // optional uint32 corner_radius_tl = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_corner_radius_tl(), target);
  }

  // optional uint32 corner_radius_tr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_corner_radius_tr(), target);
  }

  // optional uint32 corner_radius_bl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_corner_radius_bl(), target);
  }

  // optional float corner_radius_br = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_corner_radius_br(), target);
  }

  // optional float alpha = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_alpha(), target);
  }

  // optional int32 left = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_left(), target);
  }

  // optional int32 top = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_top(), target);
  }

  // optional int32 right = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_right(), target);
  }

  // optional int32 bottom = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlurRegion)
  return target;
}

size_t BlurRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlurRegion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 blur_radius = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blur_radius());
    }

    // optional uint32 corner_radius_tl = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_corner_radius_tl());
    }

    // optional uint32 corner_radius_tr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_corner_radius_tr());
    }

    // optional uint32 corner_radius_bl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_corner_radius_bl());
    }

    // optional float corner_radius_br = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float alpha = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 left = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_left());
    }

    // optional int32 top = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_top());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 right = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_right());
    }

    // optional int32 bottom = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bottom());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlurRegion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlurRegion*>(
      &from));
}

void BlurRegion::MergeFrom(const BlurRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlurRegion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      blur_radius_ = from.blur_radius_;
    }
    if (cached_has_bits & 0x00000002u) {
      corner_radius_tl_ = from.corner_radius_tl_;
    }
    if (cached_has_bits & 0x00000004u) {
      corner_radius_tr_ = from.corner_radius_tr_;
    }
    if (cached_has_bits & 0x00000008u) {
      corner_radius_bl_ = from.corner_radius_bl_;
    }
    if (cached_has_bits & 0x00000010u) {
      corner_radius_br_ = from.corner_radius_br_;
    }
    if (cached_has_bits & 0x00000020u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000040u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000080u) {
      top_ = from.top_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000200u) {
      bottom_ = from.bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlurRegion::CopyFrom(const BlurRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlurRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlurRegion::IsInitialized() const {
  return true;
}

void BlurRegion::InternalSwap(BlurRegion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlurRegion, bottom_)
      + sizeof(BlurRegion::bottom_)
      - PROTOBUF_FIELD_OFFSET(BlurRegion, blur_radius_)>(
          reinterpret_cast<char*>(&blur_radius_),
          reinterpret_cast<char*>(&other->blur_radius_));
}

std::string BlurRegion::GetTypeName() const {
  return "perfetto.protos.BlurRegion";
}


// ===================================================================

class ColorTransformProto::_Internal {
 public:
};

ColorTransformProto::ColorTransformProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  val_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ColorTransformProto)
}
ColorTransformProto::ColorTransformProto(const ColorTransformProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      val_(from.val_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ColorTransformProto)
}

inline void ColorTransformProto::SharedCtor() {
}

ColorTransformProto::~ColorTransformProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ColorTransformProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColorTransformProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorTransformProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorTransformProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ColorTransformProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ColorTransformProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float val = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorTransformProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ColorTransformProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float val = 1 [packed = true];
  if (this->_internal_val_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ColorTransformProto)
  return target;
}

size_t ColorTransformProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ColorTransformProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float val = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorTransformProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ColorTransformProto*>(
      &from));
}

void ColorTransformProto::MergeFrom(const ColorTransformProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ColorTransformProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ColorTransformProto::CopyFrom(const ColorTransformProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ColorTransformProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorTransformProto::IsInitialized() const {
  return true;
}

void ColorTransformProto::InternalSwap(ColorTransformProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  val_.InternalSwap(&other->val_);
}

std::string ColorTransformProto::GetTypeName() const {
  return "perfetto.protos.ColorTransformProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::RegionProto*
Arena::CreateMaybeMessage< ::perfetto::protos::RegionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::RegionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::RectProto*
Arena::CreateMaybeMessage< ::perfetto::protos::RectProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::RectProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SizeProto*
Arena::CreateMaybeMessage< ::perfetto::protos::SizeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SizeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TransformProto*
Arena::CreateMaybeMessage< ::perfetto::protos::TransformProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TransformProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ColorProto*
Arena::CreateMaybeMessage< ::perfetto::protos::ColorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ColorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::InputWindowInfoProto*
Arena::CreateMaybeMessage< ::perfetto::protos::InputWindowInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::InputWindowInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlurRegion*
Arena::CreateMaybeMessage< ::perfetto::protos::BlurRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlurRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ColorTransformProto*
Arena::CreateMaybeMessage< ::perfetto::protos::ColorTransformProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ColorTransformProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
