// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/surfaceflinger_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class BlurRegion;
struct BlurRegionDefaultTypeInternal;
extern BlurRegionDefaultTypeInternal _BlurRegion_default_instance_;
class ColorProto;
struct ColorProtoDefaultTypeInternal;
extern ColorProtoDefaultTypeInternal _ColorProto_default_instance_;
class ColorTransformProto;
struct ColorTransformProtoDefaultTypeInternal;
extern ColorTransformProtoDefaultTypeInternal _ColorTransformProto_default_instance_;
class InputWindowInfoProto;
struct InputWindowInfoProtoDefaultTypeInternal;
extern InputWindowInfoProtoDefaultTypeInternal _InputWindowInfoProto_default_instance_;
class RectProto;
struct RectProtoDefaultTypeInternal;
extern RectProtoDefaultTypeInternal _RectProto_default_instance_;
class RegionProto;
struct RegionProtoDefaultTypeInternal;
extern RegionProtoDefaultTypeInternal _RegionProto_default_instance_;
class SizeProto;
struct SizeProtoDefaultTypeInternal;
extern SizeProtoDefaultTypeInternal _SizeProto_default_instance_;
class TransformProto;
struct TransformProtoDefaultTypeInternal;
extern TransformProtoDefaultTypeInternal _TransformProto_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::BlurRegion* Arena::CreateMaybeMessage<::perfetto::protos::BlurRegion>(Arena*);
template<> ::perfetto::protos::ColorProto* Arena::CreateMaybeMessage<::perfetto::protos::ColorProto>(Arena*);
template<> ::perfetto::protos::ColorTransformProto* Arena::CreateMaybeMessage<::perfetto::protos::ColorTransformProto>(Arena*);
template<> ::perfetto::protos::InputWindowInfoProto* Arena::CreateMaybeMessage<::perfetto::protos::InputWindowInfoProto>(Arena*);
template<> ::perfetto::protos::RectProto* Arena::CreateMaybeMessage<::perfetto::protos::RectProto>(Arena*);
template<> ::perfetto::protos::RegionProto* Arena::CreateMaybeMessage<::perfetto::protos::RegionProto>(Arena*);
template<> ::perfetto::protos::SizeProto* Arena::CreateMaybeMessage<::perfetto::protos::SizeProto>(Arena*);
template<> ::perfetto::protos::TransformProto* Arena::CreateMaybeMessage<::perfetto::protos::TransformProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class RegionProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegionProto) */ {
 public:
  inline RegionProto() : RegionProto(nullptr) {}
  ~RegionProto() override;
  explicit PROTOBUF_CONSTEXPR RegionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionProto(const RegionProto& from);
  RegionProto(RegionProto&& from) noexcept
    : RegionProto() {
    *this = ::std::move(from);
  }

  inline RegionProto& operator=(const RegionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionProto& operator=(RegionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionProto* internal_default_instance() {
    return reinterpret_cast<const RegionProto*>(
               &_RegionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegionProto& a, RegionProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RegionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegionProto& from);
  void MergeFrom(const RegionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegionProto";
  }
  protected:
  explicit RegionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectFieldNumber = 2,
  };
  // repeated .perfetto.protos.RectProto rect = 2;
  int rect_size() const;
  private:
  int _internal_rect_size() const;
  public:
  void clear_rect();
  ::perfetto::protos::RectProto* mutable_rect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::RectProto >*
      mutable_rect();
  private:
  const ::perfetto::protos::RectProto& _internal_rect(int index) const;
  ::perfetto::protos::RectProto* _internal_add_rect();
  public:
  const ::perfetto::protos::RectProto& rect(int index) const;
  ::perfetto::protos::RectProto* add_rect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::RectProto >&
      rect() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::RectProto > rect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class RectProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RectProto) */ {
 public:
  inline RectProto() : RectProto(nullptr) {}
  ~RectProto() override;
  explicit PROTOBUF_CONSTEXPR RectProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RectProto(const RectProto& from);
  RectProto(RectProto&& from) noexcept
    : RectProto() {
    *this = ::std::move(from);
  }

  inline RectProto& operator=(const RectProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectProto& operator=(RectProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RectProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RectProto* internal_default_instance() {
    return reinterpret_cast<const RectProto*>(
               &_RectProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RectProto& a, RectProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RectProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RectProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RectProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RectProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RectProto& from);
  void MergeFrom(const RectProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RectProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RectProto";
  }
  protected:
  explicit RectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kRightFieldNumber = 3,
    kBottomFieldNumber = 4,
  };
  // optional int32 left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  int32_t left() const;
  void set_left(int32_t value);
  private:
  int32_t _internal_left() const;
  void _internal_set_left(int32_t value);
  public:

  // optional int32 top = 2;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  int32_t top() const;
  void set_top(int32_t value);
  private:
  int32_t _internal_top() const;
  void _internal_set_top(int32_t value);
  public:

  // optional int32 right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  int32_t right() const;
  void set_right(int32_t value);
  private:
  int32_t _internal_right() const;
  void _internal_set_right(int32_t value);
  public:

  // optional int32 bottom = 4;
  bool has_bottom() const;
  private:
  bool _internal_has_bottom() const;
  public:
  void clear_bottom();
  int32_t bottom() const;
  void set_bottom(int32_t value);
  private:
  int32_t _internal_bottom() const;
  void _internal_set_bottom(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.RectProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t left_;
  int32_t top_;
  int32_t right_;
  int32_t bottom_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SizeProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SizeProto) */ {
 public:
  inline SizeProto() : SizeProto(nullptr) {}
  ~SizeProto() override;
  explicit PROTOBUF_CONSTEXPR SizeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SizeProto(const SizeProto& from);
  SizeProto(SizeProto&& from) noexcept
    : SizeProto() {
    *this = ::std::move(from);
  }

  inline SizeProto& operator=(const SizeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SizeProto& operator=(SizeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SizeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SizeProto* internal_default_instance() {
    return reinterpret_cast<const SizeProto*>(
               &_SizeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SizeProto& a, SizeProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SizeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SizeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SizeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SizeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SizeProto& from);
  void MergeFrom(const SizeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SizeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SizeProto";
  }
  protected:
  explicit SizeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // optional int32 w = 1;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  int32_t w() const;
  void set_w(int32_t value);
  private:
  int32_t _internal_w() const;
  void _internal_set_w(int32_t value);
  public:

  // optional int32 h = 2;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  int32_t h() const;
  void set_h(int32_t value);
  private:
  int32_t _internal_h() const;
  void _internal_set_h(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SizeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t w_;
  int32_t h_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class TransformProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TransformProto) */ {
 public:
  inline TransformProto() : TransformProto(nullptr) {}
  ~TransformProto() override;
  explicit PROTOBUF_CONSTEXPR TransformProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformProto(const TransformProto& from);
  TransformProto(TransformProto&& from) noexcept
    : TransformProto() {
    *this = ::std::move(from);
  }

  inline TransformProto& operator=(const TransformProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformProto& operator=(TransformProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TransformProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformProto* internal_default_instance() {
    return reinterpret_cast<const TransformProto*>(
               &_TransformProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransformProto& a, TransformProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TransformProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TransformProto& from);
  void MergeFrom(const TransformProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransformProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TransformProto";
  }
  protected:
  explicit TransformProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDsdxFieldNumber = 1,
    kDtdxFieldNumber = 2,
    kDsdyFieldNumber = 3,
    kDtdyFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // optional float dsdx = 1;
  bool has_dsdx() const;
  private:
  bool _internal_has_dsdx() const;
  public:
  void clear_dsdx();
  float dsdx() const;
  void set_dsdx(float value);
  private:
  float _internal_dsdx() const;
  void _internal_set_dsdx(float value);
  public:

  // optional float dtdx = 2;
  bool has_dtdx() const;
  private:
  bool _internal_has_dtdx() const;
  public:
  void clear_dtdx();
  float dtdx() const;
  void set_dtdx(float value);
  private:
  float _internal_dtdx() const;
  void _internal_set_dtdx(float value);
  public:

  // optional float dsdy = 3;
  bool has_dsdy() const;
  private:
  bool _internal_has_dsdy() const;
  public:
  void clear_dsdy();
  float dsdy() const;
  void set_dsdy(float value);
  private:
  float _internal_dsdy() const;
  void _internal_set_dsdy(float value);
  public:

  // optional float dtdy = 4;
  bool has_dtdy() const;
  private:
  bool _internal_has_dtdy() const;
  public:
  void clear_dtdy();
  float dtdy() const;
  void set_dtdy(float value);
  private:
  float _internal_dtdy() const;
  void _internal_set_dtdy(float value);
  public:

  // optional int32 type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TransformProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float dsdx_;
  float dtdx_;
  float dsdy_;
  float dtdy_;
  int32_t type_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ColorProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ColorProto) */ {
 public:
  inline ColorProto() : ColorProto(nullptr) {}
  ~ColorProto() override;
  explicit PROTOBUF_CONSTEXPR ColorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorProto(const ColorProto& from);
  ColorProto(ColorProto&& from) noexcept
    : ColorProto() {
    *this = ::std::move(from);
  }

  inline ColorProto& operator=(const ColorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorProto& operator=(ColorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ColorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorProto* internal_default_instance() {
    return reinterpret_cast<const ColorProto*>(
               &_ColorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ColorProto& a, ColorProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ColorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ColorProto& from);
  void MergeFrom(const ColorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ColorProto";
  }
  protected:
  explicit ColorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // optional float r = 1;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // optional float g = 2;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // optional float b = 3;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // optional float a = 4;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ColorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float r_;
  float g_;
  float b_;
  float a_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class InputWindowInfoProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.InputWindowInfoProto) */ {
 public:
  inline InputWindowInfoProto() : InputWindowInfoProto(nullptr) {}
  ~InputWindowInfoProto() override;
  explicit PROTOBUF_CONSTEXPR InputWindowInfoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputWindowInfoProto(const InputWindowInfoProto& from);
  InputWindowInfoProto(InputWindowInfoProto&& from) noexcept
    : InputWindowInfoProto() {
    *this = ::std::move(from);
  }

  inline InputWindowInfoProto& operator=(const InputWindowInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputWindowInfoProto& operator=(InputWindowInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InputWindowInfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputWindowInfoProto* internal_default_instance() {
    return reinterpret_cast<const InputWindowInfoProto*>(
               &_InputWindowInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InputWindowInfoProto& a, InputWindowInfoProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(InputWindowInfoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputWindowInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputWindowInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputWindowInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InputWindowInfoProto& from);
  void MergeFrom(const InputWindowInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputWindowInfoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.InputWindowInfoProto";
  }
  protected:
  explicit InputWindowInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 3,
    kTouchableRegionFieldNumber = 4,
    kTouchableRegionCropFieldNumber = 15,
    kTransformFieldNumber = 16,
    kLayoutParamsFlagsFieldNumber = 1,
    kLayoutParamsTypeFieldNumber = 2,
    kSurfaceInsetFieldNumber = 5,
    kVisibleFieldNumber = 6,
    kCanReceiveKeysFieldNumber = 7,
    kFocusableFieldNumber = 8,
    kHasWallpaperFieldNumber = 9,
    kGlobalScaleFactorFieldNumber = 10,
    kWindowXScaleFieldNumber = 11,
    kWindowYScaleFieldNumber = 12,
    kCropLayerIdFieldNumber = 13,
    kReplaceTouchableRegionWithCropFieldNumber = 14,
    kInputConfigFieldNumber = 17,
  };
  // optional .perfetto.protos.RectProto frame = 3;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::perfetto::protos::RectProto& frame() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_frame();
  ::perfetto::protos::RectProto* mutable_frame();
  void set_allocated_frame(::perfetto::protos::RectProto* frame);
  private:
  const ::perfetto::protos::RectProto& _internal_frame() const;
  ::perfetto::protos::RectProto* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::perfetto::protos::RectProto* frame);
  ::perfetto::protos::RectProto* unsafe_arena_release_frame();

  // optional .perfetto.protos.RegionProto touchable_region = 4;
  bool has_touchable_region() const;
  private:
  bool _internal_has_touchable_region() const;
  public:
  void clear_touchable_region();
  const ::perfetto::protos::RegionProto& touchable_region() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegionProto* release_touchable_region();
  ::perfetto::protos::RegionProto* mutable_touchable_region();
  void set_allocated_touchable_region(::perfetto::protos::RegionProto* touchable_region);
  private:
  const ::perfetto::protos::RegionProto& _internal_touchable_region() const;
  ::perfetto::protos::RegionProto* _internal_mutable_touchable_region();
  public:
  void unsafe_arena_set_allocated_touchable_region(
      ::perfetto::protos::RegionProto* touchable_region);
  ::perfetto::protos::RegionProto* unsafe_arena_release_touchable_region();

  // optional .perfetto.protos.RectProto touchable_region_crop = 15;
  bool has_touchable_region_crop() const;
  private:
  bool _internal_has_touchable_region_crop() const;
  public:
  void clear_touchable_region_crop();
  const ::perfetto::protos::RectProto& touchable_region_crop() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_touchable_region_crop();
  ::perfetto::protos::RectProto* mutable_touchable_region_crop();
  void set_allocated_touchable_region_crop(::perfetto::protos::RectProto* touchable_region_crop);
  private:
  const ::perfetto::protos::RectProto& _internal_touchable_region_crop() const;
  ::perfetto::protos::RectProto* _internal_mutable_touchable_region_crop();
  public:
  void unsafe_arena_set_allocated_touchable_region_crop(
      ::perfetto::protos::RectProto* touchable_region_crop);
  ::perfetto::protos::RectProto* unsafe_arena_release_touchable_region_crop();

  // optional .perfetto.protos.TransformProto transform = 16;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::perfetto::protos::TransformProto& transform() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TransformProto* release_transform();
  ::perfetto::protos::TransformProto* mutable_transform();
  void set_allocated_transform(::perfetto::protos::TransformProto* transform);
  private:
  const ::perfetto::protos::TransformProto& _internal_transform() const;
  ::perfetto::protos::TransformProto* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::perfetto::protos::TransformProto* transform);
  ::perfetto::protos::TransformProto* unsafe_arena_release_transform();

  // optional uint32 layout_params_flags = 1;
  bool has_layout_params_flags() const;
  private:
  bool _internal_has_layout_params_flags() const;
  public:
  void clear_layout_params_flags();
  uint32_t layout_params_flags() const;
  void set_layout_params_flags(uint32_t value);
  private:
  uint32_t _internal_layout_params_flags() const;
  void _internal_set_layout_params_flags(uint32_t value);
  public:

  // optional int32 layout_params_type = 2;
  bool has_layout_params_type() const;
  private:
  bool _internal_has_layout_params_type() const;
  public:
  void clear_layout_params_type();
  int32_t layout_params_type() const;
  void set_layout_params_type(int32_t value);
  private:
  int32_t _internal_layout_params_type() const;
  void _internal_set_layout_params_type(int32_t value);
  public:

  // optional int32 surface_inset = 5;
  bool has_surface_inset() const;
  private:
  bool _internal_has_surface_inset() const;
  public:
  void clear_surface_inset();
  int32_t surface_inset() const;
  void set_surface_inset(int32_t value);
  private:
  int32_t _internal_surface_inset() const;
  void _internal_set_surface_inset(int32_t value);
  public:

  // optional bool visible = 6;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // optional bool can_receive_keys = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_can_receive_keys() const;
  private:
  bool _internal_has_can_receive_keys() const;
  public:
  PROTOBUF_DEPRECATED void clear_can_receive_keys();
  PROTOBUF_DEPRECATED bool can_receive_keys() const;
  PROTOBUF_DEPRECATED void set_can_receive_keys(bool value);
  private:
  bool _internal_can_receive_keys() const;
  void _internal_set_can_receive_keys(bool value);
  public:

  // optional bool focusable = 8;
  bool has_focusable() const;
  private:
  bool _internal_has_focusable() const;
  public:
  void clear_focusable();
  bool focusable() const;
  void set_focusable(bool value);
  private:
  bool _internal_focusable() const;
  void _internal_set_focusable(bool value);
  public:

  // optional bool has_wallpaper = 9;
  bool has_has_wallpaper() const;
  private:
  bool _internal_has_has_wallpaper() const;
  public:
  void clear_has_wallpaper();
  bool has_wallpaper() const;
  void set_has_wallpaper(bool value);
  private:
  bool _internal_has_wallpaper() const;
  void _internal_set_has_wallpaper(bool value);
  public:

  // optional float global_scale_factor = 10;
  bool has_global_scale_factor() const;
  private:
  bool _internal_has_global_scale_factor() const;
  public:
  void clear_global_scale_factor();
  float global_scale_factor() const;
  void set_global_scale_factor(float value);
  private:
  float _internal_global_scale_factor() const;
  void _internal_set_global_scale_factor(float value);
  public:

  // optional float window_x_scale = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_window_x_scale() const;
  private:
  bool _internal_has_window_x_scale() const;
  public:
  PROTOBUF_DEPRECATED void clear_window_x_scale();
  PROTOBUF_DEPRECATED float window_x_scale() const;
  PROTOBUF_DEPRECATED void set_window_x_scale(float value);
  private:
  float _internal_window_x_scale() const;
  void _internal_set_window_x_scale(float value);
  public:

  // optional float window_y_scale = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_window_y_scale() const;
  private:
  bool _internal_has_window_y_scale() const;
  public:
  PROTOBUF_DEPRECATED void clear_window_y_scale();
  PROTOBUF_DEPRECATED float window_y_scale() const;
  PROTOBUF_DEPRECATED void set_window_y_scale(float value);
  private:
  float _internal_window_y_scale() const;
  void _internal_set_window_y_scale(float value);
  public:

  // optional int32 crop_layer_id = 13;
  bool has_crop_layer_id() const;
  private:
  bool _internal_has_crop_layer_id() const;
  public:
  void clear_crop_layer_id();
  int32_t crop_layer_id() const;
  void set_crop_layer_id(int32_t value);
  private:
  int32_t _internal_crop_layer_id() const;
  void _internal_set_crop_layer_id(int32_t value);
  public:

  // optional bool replace_touchable_region_with_crop = 14;
  bool has_replace_touchable_region_with_crop() const;
  private:
  bool _internal_has_replace_touchable_region_with_crop() const;
  public:
  void clear_replace_touchable_region_with_crop();
  bool replace_touchable_region_with_crop() const;
  void set_replace_touchable_region_with_crop(bool value);
  private:
  bool _internal_replace_touchable_region_with_crop() const;
  void _internal_set_replace_touchable_region_with_crop(bool value);
  public:

  // optional uint32 input_config = 17;
  bool has_input_config() const;
  private:
  bool _internal_has_input_config() const;
  public:
  void clear_input_config();
  uint32_t input_config() const;
  void set_input_config(uint32_t value);
  private:
  uint32_t _internal_input_config() const;
  void _internal_set_input_config(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.InputWindowInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::RectProto* frame_;
  ::perfetto::protos::RegionProto* touchable_region_;
  ::perfetto::protos::RectProto* touchable_region_crop_;
  ::perfetto::protos::TransformProto* transform_;
  uint32_t layout_params_flags_;
  int32_t layout_params_type_;
  int32_t surface_inset_;
  bool visible_;
  bool can_receive_keys_;
  bool focusable_;
  bool has_wallpaper_;
  float global_scale_factor_;
  float window_x_scale_;
  float window_y_scale_;
  int32_t crop_layer_id_;
  bool replace_touchable_region_with_crop_;
  uint32_t input_config_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class BlurRegion final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlurRegion) */ {
 public:
  inline BlurRegion() : BlurRegion(nullptr) {}
  ~BlurRegion() override;
  explicit PROTOBUF_CONSTEXPR BlurRegion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlurRegion(const BlurRegion& from);
  BlurRegion(BlurRegion&& from) noexcept
    : BlurRegion() {
    *this = ::std::move(from);
  }

  inline BlurRegion& operator=(const BlurRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlurRegion& operator=(BlurRegion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BlurRegion& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlurRegion* internal_default_instance() {
    return reinterpret_cast<const BlurRegion*>(
               &_BlurRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BlurRegion& a, BlurRegion& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BlurRegion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlurRegion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlurRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlurRegion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BlurRegion& from);
  void MergeFrom(const BlurRegion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlurRegion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlurRegion";
  }
  protected:
  explicit BlurRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlurRadiusFieldNumber = 1,
    kCornerRadiusTlFieldNumber = 2,
    kCornerRadiusTrFieldNumber = 3,
    kCornerRadiusBlFieldNumber = 4,
    kCornerRadiusBrFieldNumber = 5,
    kAlphaFieldNumber = 6,
    kLeftFieldNumber = 7,
    kTopFieldNumber = 8,
    kRightFieldNumber = 9,
    kBottomFieldNumber = 10,
  };
  // optional uint32 blur_radius = 1;
  bool has_blur_radius() const;
  private:
  bool _internal_has_blur_radius() const;
  public:
  void clear_blur_radius();
  uint32_t blur_radius() const;
  void set_blur_radius(uint32_t value);
  private:
  uint32_t _internal_blur_radius() const;
  void _internal_set_blur_radius(uint32_t value);
  public:

  // optional uint32 corner_radius_tl = 2;
  bool has_corner_radius_tl() const;
  private:
  bool _internal_has_corner_radius_tl() const;
  public:
  void clear_corner_radius_tl();
  uint32_t corner_radius_tl() const;
  void set_corner_radius_tl(uint32_t value);
  private:
  uint32_t _internal_corner_radius_tl() const;
  void _internal_set_corner_radius_tl(uint32_t value);
  public:

  // optional uint32 corner_radius_tr = 3;
  bool has_corner_radius_tr() const;
  private:
  bool _internal_has_corner_radius_tr() const;
  public:
  void clear_corner_radius_tr();
  uint32_t corner_radius_tr() const;
  void set_corner_radius_tr(uint32_t value);
  private:
  uint32_t _internal_corner_radius_tr() const;
  void _internal_set_corner_radius_tr(uint32_t value);
  public:

  // optional uint32 corner_radius_bl = 4;
  bool has_corner_radius_bl() const;
  private:
  bool _internal_has_corner_radius_bl() const;
  public:
  void clear_corner_radius_bl();
  uint32_t corner_radius_bl() const;
  void set_corner_radius_bl(uint32_t value);
  private:
  uint32_t _internal_corner_radius_bl() const;
  void _internal_set_corner_radius_bl(uint32_t value);
  public:

  // optional float corner_radius_br = 5;
  bool has_corner_radius_br() const;
  private:
  bool _internal_has_corner_radius_br() const;
  public:
  void clear_corner_radius_br();
  float corner_radius_br() const;
  void set_corner_radius_br(float value);
  private:
  float _internal_corner_radius_br() const;
  void _internal_set_corner_radius_br(float value);
  public:

  // optional float alpha = 6;
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // optional int32 left = 7;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  int32_t left() const;
  void set_left(int32_t value);
  private:
  int32_t _internal_left() const;
  void _internal_set_left(int32_t value);
  public:

  // optional int32 top = 8;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  int32_t top() const;
  void set_top(int32_t value);
  private:
  int32_t _internal_top() const;
  void _internal_set_top(int32_t value);
  public:

  // optional int32 right = 9;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  int32_t right() const;
  void set_right(int32_t value);
  private:
  int32_t _internal_right() const;
  void _internal_set_right(int32_t value);
  public:

  // optional int32 bottom = 10;
  bool has_bottom() const;
  private:
  bool _internal_has_bottom() const;
  public:
  void clear_bottom();
  int32_t bottom() const;
  void set_bottom(int32_t value);
  private:
  int32_t _internal_bottom() const;
  void _internal_set_bottom(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlurRegion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t blur_radius_;
  uint32_t corner_radius_tl_;
  uint32_t corner_radius_tr_;
  uint32_t corner_radius_bl_;
  float corner_radius_br_;
  float alpha_;
  int32_t left_;
  int32_t top_;
  int32_t right_;
  int32_t bottom_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ColorTransformProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ColorTransformProto) */ {
 public:
  inline ColorTransformProto() : ColorTransformProto(nullptr) {}
  ~ColorTransformProto() override;
  explicit PROTOBUF_CONSTEXPR ColorTransformProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorTransformProto(const ColorTransformProto& from);
  ColorTransformProto(ColorTransformProto&& from) noexcept
    : ColorTransformProto() {
    *this = ::std::move(from);
  }

  inline ColorTransformProto& operator=(const ColorTransformProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorTransformProto& operator=(ColorTransformProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ColorTransformProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorTransformProto* internal_default_instance() {
    return reinterpret_cast<const ColorTransformProto*>(
               &_ColorTransformProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ColorTransformProto& a, ColorTransformProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ColorTransformProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorTransformProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorTransformProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorTransformProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ColorTransformProto& from);
  void MergeFrom(const ColorTransformProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColorTransformProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ColorTransformProto";
  }
  protected:
  explicit ColorTransformProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // repeated float val = 1 [packed = true];
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  private:
  float _internal_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_val() const;
  void _internal_add_val(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_val();
  public:
  float val(int index) const;
  void set_val(int index, float value);
  void add_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:perfetto.protos.ColorTransformProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegionProto

// repeated .perfetto.protos.RectProto rect = 2;
inline int RegionProto::_internal_rect_size() const {
  return rect_.size();
}
inline int RegionProto::rect_size() const {
  return _internal_rect_size();
}
inline void RegionProto::clear_rect() {
  rect_.Clear();
}
inline ::perfetto::protos::RectProto* RegionProto::mutable_rect(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegionProto.rect)
  return rect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::RectProto >*
RegionProto::mutable_rect() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.RegionProto.rect)
  return &rect_;
}
inline const ::perfetto::protos::RectProto& RegionProto::_internal_rect(int index) const {
  return rect_.Get(index);
}
inline const ::perfetto::protos::RectProto& RegionProto::rect(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegionProto.rect)
  return _internal_rect(index);
}
inline ::perfetto::protos::RectProto* RegionProto::_internal_add_rect() {
  return rect_.Add();
}
inline ::perfetto::protos::RectProto* RegionProto::add_rect() {
  ::perfetto::protos::RectProto* _add = _internal_add_rect();
  // @@protoc_insertion_point(field_add:perfetto.protos.RegionProto.rect)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::RectProto >&
RegionProto::rect() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.RegionProto.rect)
  return rect_;
}

// -------------------------------------------------------------------

// RectProto

// optional int32 left = 1;
inline bool RectProto::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RectProto::has_left() const {
  return _internal_has_left();
}
inline void RectProto::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t RectProto::_internal_left() const {
  return left_;
}
inline int32_t RectProto::left() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RectProto.left)
  return _internal_left();
}
inline void RectProto::_internal_set_left(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void RectProto::set_left(int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RectProto.left)
}

// optional int32 top = 2;
inline bool RectProto::_internal_has_top() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RectProto::has_top() const {
  return _internal_has_top();
}
inline void RectProto::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t RectProto::_internal_top() const {
  return top_;
}
inline int32_t RectProto::top() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RectProto.top)
  return _internal_top();
}
inline void RectProto::_internal_set_top(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  top_ = value;
}
inline void RectProto::set_top(int32_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RectProto.top)
}

// optional int32 right = 3;
inline bool RectProto::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RectProto::has_right() const {
  return _internal_has_right();
}
inline void RectProto::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t RectProto::_internal_right() const {
  return right_;
}
inline int32_t RectProto::right() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RectProto.right)
  return _internal_right();
}
inline void RectProto::_internal_set_right(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  right_ = value;
}
inline void RectProto::set_right(int32_t value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RectProto.right)
}

// optional int32 bottom = 4;
inline bool RectProto::_internal_has_bottom() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RectProto::has_bottom() const {
  return _internal_has_bottom();
}
inline void RectProto::clear_bottom() {
  bottom_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t RectProto::_internal_bottom() const {
  return bottom_;
}
inline int32_t RectProto::bottom() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RectProto.bottom)
  return _internal_bottom();
}
inline void RectProto::_internal_set_bottom(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  bottom_ = value;
}
inline void RectProto::set_bottom(int32_t value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RectProto.bottom)
}

// -------------------------------------------------------------------

// SizeProto

// optional int32 w = 1;
inline bool SizeProto::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SizeProto::has_w() const {
  return _internal_has_w();
}
inline void SizeProto::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SizeProto::_internal_w() const {
  return w_;
}
inline int32_t SizeProto::w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SizeProto.w)
  return _internal_w();
}
inline void SizeProto::_internal_set_w(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  w_ = value;
}
inline void SizeProto::set_w(int32_t value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SizeProto.w)
}

// optional int32 h = 2;
inline bool SizeProto::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SizeProto::has_h() const {
  return _internal_has_h();
}
inline void SizeProto::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SizeProto::_internal_h() const {
  return h_;
}
inline int32_t SizeProto::h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SizeProto.h)
  return _internal_h();
}
inline void SizeProto::_internal_set_h(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  h_ = value;
}
inline void SizeProto::set_h(int32_t value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SizeProto.h)
}

// -------------------------------------------------------------------

// TransformProto

// optional float dsdx = 1;
inline bool TransformProto::_internal_has_dsdx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransformProto::has_dsdx() const {
  return _internal_has_dsdx();
}
inline void TransformProto::clear_dsdx() {
  dsdx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TransformProto::_internal_dsdx() const {
  return dsdx_;
}
inline float TransformProto::dsdx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransformProto.dsdx)
  return _internal_dsdx();
}
inline void TransformProto::_internal_set_dsdx(float value) {
  _has_bits_[0] |= 0x00000001u;
  dsdx_ = value;
}
inline void TransformProto::set_dsdx(float value) {
  _internal_set_dsdx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransformProto.dsdx)
}

// optional float dtdx = 2;
inline bool TransformProto::_internal_has_dtdx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransformProto::has_dtdx() const {
  return _internal_has_dtdx();
}
inline void TransformProto::clear_dtdx() {
  dtdx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TransformProto::_internal_dtdx() const {
  return dtdx_;
}
inline float TransformProto::dtdx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransformProto.dtdx)
  return _internal_dtdx();
}
inline void TransformProto::_internal_set_dtdx(float value) {
  _has_bits_[0] |= 0x00000002u;
  dtdx_ = value;
}
inline void TransformProto::set_dtdx(float value) {
  _internal_set_dtdx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransformProto.dtdx)
}

// optional float dsdy = 3;
inline bool TransformProto::_internal_has_dsdy() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransformProto::has_dsdy() const {
  return _internal_has_dsdy();
}
inline void TransformProto::clear_dsdy() {
  dsdy_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TransformProto::_internal_dsdy() const {
  return dsdy_;
}
inline float TransformProto::dsdy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransformProto.dsdy)
  return _internal_dsdy();
}
inline void TransformProto::_internal_set_dsdy(float value) {
  _has_bits_[0] |= 0x00000004u;
  dsdy_ = value;
}
inline void TransformProto::set_dsdy(float value) {
  _internal_set_dsdy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransformProto.dsdy)
}

// optional float dtdy = 4;
inline bool TransformProto::_internal_has_dtdy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TransformProto::has_dtdy() const {
  return _internal_has_dtdy();
}
inline void TransformProto::clear_dtdy() {
  dtdy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TransformProto::_internal_dtdy() const {
  return dtdy_;
}
inline float TransformProto::dtdy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransformProto.dtdy)
  return _internal_dtdy();
}
inline void TransformProto::_internal_set_dtdy(float value) {
  _has_bits_[0] |= 0x00000008u;
  dtdy_ = value;
}
inline void TransformProto::set_dtdy(float value) {
  _internal_set_dtdy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransformProto.dtdy)
}

// optional int32 type = 5;
inline bool TransformProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TransformProto::has_type() const {
  return _internal_has_type();
}
inline void TransformProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t TransformProto::_internal_type() const {
  return type_;
}
inline int32_t TransformProto::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransformProto.type)
  return _internal_type();
}
inline void TransformProto::_internal_set_type(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void TransformProto::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransformProto.type)
}

// -------------------------------------------------------------------

// ColorProto

// optional float r = 1;
inline bool ColorProto::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColorProto::has_r() const {
  return _internal_has_r();
}
inline void ColorProto::clear_r() {
  r_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ColorProto::_internal_r() const {
  return r_;
}
inline float ColorProto::r() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ColorProto.r)
  return _internal_r();
}
inline void ColorProto::_internal_set_r(float value) {
  _has_bits_[0] |= 0x00000001u;
  r_ = value;
}
inline void ColorProto::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ColorProto.r)
}

// optional float g = 2;
inline bool ColorProto::_internal_has_g() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColorProto::has_g() const {
  return _internal_has_g();
}
inline void ColorProto::clear_g() {
  g_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ColorProto::_internal_g() const {
  return g_;
}
inline float ColorProto::g() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ColorProto.g)
  return _internal_g();
}
inline void ColorProto::_internal_set_g(float value) {
  _has_bits_[0] |= 0x00000002u;
  g_ = value;
}
inline void ColorProto::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ColorProto.g)
}

// optional float b = 3;
inline bool ColorProto::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ColorProto::has_b() const {
  return _internal_has_b();
}
inline void ColorProto::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ColorProto::_internal_b() const {
  return b_;
}
inline float ColorProto::b() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ColorProto.b)
  return _internal_b();
}
inline void ColorProto::_internal_set_b(float value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void ColorProto::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ColorProto.b)
}

// optional float a = 4;
inline bool ColorProto::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ColorProto::has_a() const {
  return _internal_has_a();
}
inline void ColorProto::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ColorProto::_internal_a() const {
  return a_;
}
inline float ColorProto::a() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ColorProto.a)
  return _internal_a();
}
inline void ColorProto::_internal_set_a(float value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void ColorProto::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ColorProto.a)
}

// -------------------------------------------------------------------

// InputWindowInfoProto

// optional uint32 layout_params_flags = 1;
inline bool InputWindowInfoProto::_internal_has_layout_params_flags() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_layout_params_flags() const {
  return _internal_has_layout_params_flags();
}
inline void InputWindowInfoProto::clear_layout_params_flags() {
  layout_params_flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t InputWindowInfoProto::_internal_layout_params_flags() const {
  return layout_params_flags_;
}
inline uint32_t InputWindowInfoProto::layout_params_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.layout_params_flags)
  return _internal_layout_params_flags();
}
inline void InputWindowInfoProto::_internal_set_layout_params_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  layout_params_flags_ = value;
}
inline void InputWindowInfoProto::set_layout_params_flags(uint32_t value) {
  _internal_set_layout_params_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.layout_params_flags)
}

// optional int32 layout_params_type = 2;
inline bool InputWindowInfoProto::_internal_has_layout_params_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_layout_params_type() const {
  return _internal_has_layout_params_type();
}
inline void InputWindowInfoProto::clear_layout_params_type() {
  layout_params_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t InputWindowInfoProto::_internal_layout_params_type() const {
  return layout_params_type_;
}
inline int32_t InputWindowInfoProto::layout_params_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.layout_params_type)
  return _internal_layout_params_type();
}
inline void InputWindowInfoProto::_internal_set_layout_params_type(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  layout_params_type_ = value;
}
inline void InputWindowInfoProto::set_layout_params_type(int32_t value) {
  _internal_set_layout_params_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.layout_params_type)
}

// optional .perfetto.protos.RectProto frame = 3;
inline bool InputWindowInfoProto::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || frame_ != nullptr);
  return value;
}
inline bool InputWindowInfoProto::has_frame() const {
  return _internal_has_frame();
}
inline void InputWindowInfoProto::clear_frame() {
  if (frame_ != nullptr) frame_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::RectProto& InputWindowInfoProto::_internal_frame() const {
  const ::perfetto::protos::RectProto* p = frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& InputWindowInfoProto::frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.frame)
  return _internal_frame();
}
inline void InputWindowInfoProto::unsafe_arena_set_allocated_frame(
    ::perfetto::protos::RectProto* frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  frame_ = frame;
  if (frame) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.InputWindowInfoProto.frame)
}
inline ::perfetto::protos::RectProto* InputWindowInfoProto::release_frame() {
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::RectProto* temp = frame_;
  frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* InputWindowInfoProto::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InputWindowInfoProto.frame)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::RectProto* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* InputWindowInfoProto::_internal_mutable_frame() {
  _has_bits_[0] |= 0x00000001u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    frame_ = p;
  }
  return frame_;
}
inline ::perfetto::protos::RectProto* InputWindowInfoProto::mutable_frame() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_frame();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InputWindowInfoProto.frame)
  return _msg;
}
inline void InputWindowInfoProto::set_allocated_frame(::perfetto::protos::RectProto* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete frame_;
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(frame);
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InputWindowInfoProto.frame)
}

// optional .perfetto.protos.RegionProto touchable_region = 4;
inline bool InputWindowInfoProto::_internal_has_touchable_region() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || touchable_region_ != nullptr);
  return value;
}
inline bool InputWindowInfoProto::has_touchable_region() const {
  return _internal_has_touchable_region();
}
inline void InputWindowInfoProto::clear_touchable_region() {
  if (touchable_region_ != nullptr) touchable_region_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::RegionProto& InputWindowInfoProto::_internal_touchable_region() const {
  const ::perfetto::protos::RegionProto* p = touchable_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RegionProto&>(
      ::perfetto::protos::_RegionProto_default_instance_);
}
inline const ::perfetto::protos::RegionProto& InputWindowInfoProto::touchable_region() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.touchable_region)
  return _internal_touchable_region();
}
inline void InputWindowInfoProto::unsafe_arena_set_allocated_touchable_region(
    ::perfetto::protos::RegionProto* touchable_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touchable_region_);
  }
  touchable_region_ = touchable_region;
  if (touchable_region) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.InputWindowInfoProto.touchable_region)
}
inline ::perfetto::protos::RegionProto* InputWindowInfoProto::release_touchable_region() {
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::RegionProto* temp = touchable_region_;
  touchable_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RegionProto* InputWindowInfoProto::unsafe_arena_release_touchable_region() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InputWindowInfoProto.touchable_region)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::RegionProto* temp = touchable_region_;
  touchable_region_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RegionProto* InputWindowInfoProto::_internal_mutable_touchable_region() {
  _has_bits_[0] |= 0x00000002u;
  if (touchable_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RegionProto>(GetArenaForAllocation());
    touchable_region_ = p;
  }
  return touchable_region_;
}
inline ::perfetto::protos::RegionProto* InputWindowInfoProto::mutable_touchable_region() {
  ::perfetto::protos::RegionProto* _msg = _internal_mutable_touchable_region();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InputWindowInfoProto.touchable_region)
  return _msg;
}
inline void InputWindowInfoProto::set_allocated_touchable_region(::perfetto::protos::RegionProto* touchable_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete touchable_region_;
  }
  if (touchable_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(touchable_region);
    if (message_arena != submessage_arena) {
      touchable_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touchable_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  touchable_region_ = touchable_region;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InputWindowInfoProto.touchable_region)
}

// optional int32 surface_inset = 5;
inline bool InputWindowInfoProto::_internal_has_surface_inset() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_surface_inset() const {
  return _internal_has_surface_inset();
}
inline void InputWindowInfoProto::clear_surface_inset() {
  surface_inset_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t InputWindowInfoProto::_internal_surface_inset() const {
  return surface_inset_;
}
inline int32_t InputWindowInfoProto::surface_inset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.surface_inset)
  return _internal_surface_inset();
}
inline void InputWindowInfoProto::_internal_set_surface_inset(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  surface_inset_ = value;
}
inline void InputWindowInfoProto::set_surface_inset(int32_t value) {
  _internal_set_surface_inset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.surface_inset)
}

// optional bool visible = 6;
inline bool InputWindowInfoProto::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_visible() const {
  return _internal_has_visible();
}
inline void InputWindowInfoProto::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool InputWindowInfoProto::_internal_visible() const {
  return visible_;
}
inline bool InputWindowInfoProto::visible() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.visible)
  return _internal_visible();
}
inline void InputWindowInfoProto::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000080u;
  visible_ = value;
}
inline void InputWindowInfoProto::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.visible)
}

// optional bool can_receive_keys = 7 [deprecated = true];
inline bool InputWindowInfoProto::_internal_has_can_receive_keys() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_can_receive_keys() const {
  return _internal_has_can_receive_keys();
}
inline void InputWindowInfoProto::clear_can_receive_keys() {
  can_receive_keys_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool InputWindowInfoProto::_internal_can_receive_keys() const {
  return can_receive_keys_;
}
inline bool InputWindowInfoProto::can_receive_keys() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.can_receive_keys)
  return _internal_can_receive_keys();
}
inline void InputWindowInfoProto::_internal_set_can_receive_keys(bool value) {
  _has_bits_[0] |= 0x00000100u;
  can_receive_keys_ = value;
}
inline void InputWindowInfoProto::set_can_receive_keys(bool value) {
  _internal_set_can_receive_keys(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.can_receive_keys)
}

// optional bool focusable = 8;
inline bool InputWindowInfoProto::_internal_has_focusable() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_focusable() const {
  return _internal_has_focusable();
}
inline void InputWindowInfoProto::clear_focusable() {
  focusable_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool InputWindowInfoProto::_internal_focusable() const {
  return focusable_;
}
inline bool InputWindowInfoProto::focusable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.focusable)
  return _internal_focusable();
}
inline void InputWindowInfoProto::_internal_set_focusable(bool value) {
  _has_bits_[0] |= 0x00000200u;
  focusable_ = value;
}
inline void InputWindowInfoProto::set_focusable(bool value) {
  _internal_set_focusable(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.focusable)
}

// optional bool has_wallpaper = 9;
inline bool InputWindowInfoProto::_internal_has_has_wallpaper() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_has_wallpaper() const {
  return _internal_has_has_wallpaper();
}
inline void InputWindowInfoProto::clear_has_wallpaper() {
  has_wallpaper_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool InputWindowInfoProto::_internal_has_wallpaper() const {
  return has_wallpaper_;
}
inline bool InputWindowInfoProto::has_wallpaper() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.has_wallpaper)
  return _internal_has_wallpaper();
}
inline void InputWindowInfoProto::_internal_set_has_wallpaper(bool value) {
  _has_bits_[0] |= 0x00000400u;
  has_wallpaper_ = value;
}
inline void InputWindowInfoProto::set_has_wallpaper(bool value) {
  _internal_set_has_wallpaper(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.has_wallpaper)
}

// optional float global_scale_factor = 10;
inline bool InputWindowInfoProto::_internal_has_global_scale_factor() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_global_scale_factor() const {
  return _internal_has_global_scale_factor();
}
inline void InputWindowInfoProto::clear_global_scale_factor() {
  global_scale_factor_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float InputWindowInfoProto::_internal_global_scale_factor() const {
  return global_scale_factor_;
}
inline float InputWindowInfoProto::global_scale_factor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.global_scale_factor)
  return _internal_global_scale_factor();
}
inline void InputWindowInfoProto::_internal_set_global_scale_factor(float value) {
  _has_bits_[0] |= 0x00000800u;
  global_scale_factor_ = value;
}
inline void InputWindowInfoProto::set_global_scale_factor(float value) {
  _internal_set_global_scale_factor(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.global_scale_factor)
}

// optional float window_x_scale = 11 [deprecated = true];
inline bool InputWindowInfoProto::_internal_has_window_x_scale() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_window_x_scale() const {
  return _internal_has_window_x_scale();
}
inline void InputWindowInfoProto::clear_window_x_scale() {
  window_x_scale_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float InputWindowInfoProto::_internal_window_x_scale() const {
  return window_x_scale_;
}
inline float InputWindowInfoProto::window_x_scale() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.window_x_scale)
  return _internal_window_x_scale();
}
inline void InputWindowInfoProto::_internal_set_window_x_scale(float value) {
  _has_bits_[0] |= 0x00001000u;
  window_x_scale_ = value;
}
inline void InputWindowInfoProto::set_window_x_scale(float value) {
  _internal_set_window_x_scale(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.window_x_scale)
}

// optional float window_y_scale = 12 [deprecated = true];
inline bool InputWindowInfoProto::_internal_has_window_y_scale() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_window_y_scale() const {
  return _internal_has_window_y_scale();
}
inline void InputWindowInfoProto::clear_window_y_scale() {
  window_y_scale_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float InputWindowInfoProto::_internal_window_y_scale() const {
  return window_y_scale_;
}
inline float InputWindowInfoProto::window_y_scale() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.window_y_scale)
  return _internal_window_y_scale();
}
inline void InputWindowInfoProto::_internal_set_window_y_scale(float value) {
  _has_bits_[0] |= 0x00002000u;
  window_y_scale_ = value;
}
inline void InputWindowInfoProto::set_window_y_scale(float value) {
  _internal_set_window_y_scale(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.window_y_scale)
}

// optional int32 crop_layer_id = 13;
inline bool InputWindowInfoProto::_internal_has_crop_layer_id() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_crop_layer_id() const {
  return _internal_has_crop_layer_id();
}
inline void InputWindowInfoProto::clear_crop_layer_id() {
  crop_layer_id_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline int32_t InputWindowInfoProto::_internal_crop_layer_id() const {
  return crop_layer_id_;
}
inline int32_t InputWindowInfoProto::crop_layer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.crop_layer_id)
  return _internal_crop_layer_id();
}
inline void InputWindowInfoProto::_internal_set_crop_layer_id(int32_t value) {
  _has_bits_[0] |= 0x00004000u;
  crop_layer_id_ = value;
}
inline void InputWindowInfoProto::set_crop_layer_id(int32_t value) {
  _internal_set_crop_layer_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.crop_layer_id)
}

// optional bool replace_touchable_region_with_crop = 14;
inline bool InputWindowInfoProto::_internal_has_replace_touchable_region_with_crop() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_replace_touchable_region_with_crop() const {
  return _internal_has_replace_touchable_region_with_crop();
}
inline void InputWindowInfoProto::clear_replace_touchable_region_with_crop() {
  replace_touchable_region_with_crop_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool InputWindowInfoProto::_internal_replace_touchable_region_with_crop() const {
  return replace_touchable_region_with_crop_;
}
inline bool InputWindowInfoProto::replace_touchable_region_with_crop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.replace_touchable_region_with_crop)
  return _internal_replace_touchable_region_with_crop();
}
inline void InputWindowInfoProto::_internal_set_replace_touchable_region_with_crop(bool value) {
  _has_bits_[0] |= 0x00008000u;
  replace_touchable_region_with_crop_ = value;
}
inline void InputWindowInfoProto::set_replace_touchable_region_with_crop(bool value) {
  _internal_set_replace_touchable_region_with_crop(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.replace_touchable_region_with_crop)
}

// optional .perfetto.protos.RectProto touchable_region_crop = 15;
inline bool InputWindowInfoProto::_internal_has_touchable_region_crop() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || touchable_region_crop_ != nullptr);
  return value;
}
inline bool InputWindowInfoProto::has_touchable_region_crop() const {
  return _internal_has_touchable_region_crop();
}
inline void InputWindowInfoProto::clear_touchable_region_crop() {
  if (touchable_region_crop_ != nullptr) touchable_region_crop_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::RectProto& InputWindowInfoProto::_internal_touchable_region_crop() const {
  const ::perfetto::protos::RectProto* p = touchable_region_crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& InputWindowInfoProto::touchable_region_crop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.touchable_region_crop)
  return _internal_touchable_region_crop();
}
inline void InputWindowInfoProto::unsafe_arena_set_allocated_touchable_region_crop(
    ::perfetto::protos::RectProto* touchable_region_crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touchable_region_crop_);
  }
  touchable_region_crop_ = touchable_region_crop;
  if (touchable_region_crop) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.InputWindowInfoProto.touchable_region_crop)
}
inline ::perfetto::protos::RectProto* InputWindowInfoProto::release_touchable_region_crop() {
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::RectProto* temp = touchable_region_crop_;
  touchable_region_crop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* InputWindowInfoProto::unsafe_arena_release_touchable_region_crop() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InputWindowInfoProto.touchable_region_crop)
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::RectProto* temp = touchable_region_crop_;
  touchable_region_crop_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* InputWindowInfoProto::_internal_mutable_touchable_region_crop() {
  _has_bits_[0] |= 0x00000004u;
  if (touchable_region_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    touchable_region_crop_ = p;
  }
  return touchable_region_crop_;
}
inline ::perfetto::protos::RectProto* InputWindowInfoProto::mutable_touchable_region_crop() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_touchable_region_crop();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InputWindowInfoProto.touchable_region_crop)
  return _msg;
}
inline void InputWindowInfoProto::set_allocated_touchable_region_crop(::perfetto::protos::RectProto* touchable_region_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete touchable_region_crop_;
  }
  if (touchable_region_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(touchable_region_crop);
    if (message_arena != submessage_arena) {
      touchable_region_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touchable_region_crop, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  touchable_region_crop_ = touchable_region_crop;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InputWindowInfoProto.touchable_region_crop)
}

// optional .perfetto.protos.TransformProto transform = 16;
inline bool InputWindowInfoProto::_internal_has_transform() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || transform_ != nullptr);
  return value;
}
inline bool InputWindowInfoProto::has_transform() const {
  return _internal_has_transform();
}
inline void InputWindowInfoProto::clear_transform() {
  if (transform_ != nullptr) transform_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::perfetto::protos::TransformProto& InputWindowInfoProto::_internal_transform() const {
  const ::perfetto::protos::TransformProto* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TransformProto&>(
      ::perfetto::protos::_TransformProto_default_instance_);
}
inline const ::perfetto::protos::TransformProto& InputWindowInfoProto::transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.transform)
  return _internal_transform();
}
inline void InputWindowInfoProto::unsafe_arena_set_allocated_transform(
    ::perfetto::protos::TransformProto* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.InputWindowInfoProto.transform)
}
inline ::perfetto::protos::TransformProto* InputWindowInfoProto::release_transform() {
  _has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::TransformProto* temp = transform_;
  transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TransformProto* InputWindowInfoProto::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InputWindowInfoProto.transform)
  _has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::TransformProto* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TransformProto* InputWindowInfoProto::_internal_mutable_transform() {
  _has_bits_[0] |= 0x00000008u;
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TransformProto>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::perfetto::protos::TransformProto* InputWindowInfoProto::mutable_transform() {
  ::perfetto::protos::TransformProto* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InputWindowInfoProto.transform)
  return _msg;
}
inline void InputWindowInfoProto::set_allocated_transform(::perfetto::protos::TransformProto* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InputWindowInfoProto.transform)
}

// optional uint32 input_config = 17;
inline bool InputWindowInfoProto::_internal_has_input_config() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool InputWindowInfoProto::has_input_config() const {
  return _internal_has_input_config();
}
inline void InputWindowInfoProto::clear_input_config() {
  input_config_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t InputWindowInfoProto::_internal_input_config() const {
  return input_config_;
}
inline uint32_t InputWindowInfoProto::input_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InputWindowInfoProto.input_config)
  return _internal_input_config();
}
inline void InputWindowInfoProto::_internal_set_input_config(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  input_config_ = value;
}
inline void InputWindowInfoProto::set_input_config(uint32_t value) {
  _internal_set_input_config(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InputWindowInfoProto.input_config)
}

// -------------------------------------------------------------------

// BlurRegion

// optional uint32 blur_radius = 1;
inline bool BlurRegion::_internal_has_blur_radius() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlurRegion::has_blur_radius() const {
  return _internal_has_blur_radius();
}
inline void BlurRegion::clear_blur_radius() {
  blur_radius_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t BlurRegion::_internal_blur_radius() const {
  return blur_radius_;
}
inline uint32_t BlurRegion::blur_radius() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlurRegion.blur_radius)
  return _internal_blur_radius();
}
inline void BlurRegion::_internal_set_blur_radius(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  blur_radius_ = value;
}
inline void BlurRegion::set_blur_radius(uint32_t value) {
  _internal_set_blur_radius(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlurRegion.blur_radius)
}

// optional uint32 corner_radius_tl = 2;
inline bool BlurRegion::_internal_has_corner_radius_tl() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlurRegion::has_corner_radius_tl() const {
  return _internal_has_corner_radius_tl();
}
inline void BlurRegion::clear_corner_radius_tl() {
  corner_radius_tl_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t BlurRegion::_internal_corner_radius_tl() const {
  return corner_radius_tl_;
}
inline uint32_t BlurRegion::corner_radius_tl() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlurRegion.corner_radius_tl)
  return _internal_corner_radius_tl();
}
inline void BlurRegion::_internal_set_corner_radius_tl(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  corner_radius_tl_ = value;
}
inline void BlurRegion::set_corner_radius_tl(uint32_t value) {
  _internal_set_corner_radius_tl(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlurRegion.corner_radius_tl)
}

// optional uint32 corner_radius_tr = 3;
inline bool BlurRegion::_internal_has_corner_radius_tr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlurRegion::has_corner_radius_tr() const {
  return _internal_has_corner_radius_tr();
}
inline void BlurRegion::clear_corner_radius_tr() {
  corner_radius_tr_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BlurRegion::_internal_corner_radius_tr() const {
  return corner_radius_tr_;
}
inline uint32_t BlurRegion::corner_radius_tr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlurRegion.corner_radius_tr)
  return _internal_corner_radius_tr();
}
inline void BlurRegion::_internal_set_corner_radius_tr(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  corner_radius_tr_ = value;
}
inline void BlurRegion::set_corner_radius_tr(uint32_t value) {
  _internal_set_corner_radius_tr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlurRegion.corner_radius_tr)
}

// optional uint32 corner_radius_bl = 4;
inline bool BlurRegion::_internal_has_corner_radius_bl() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlurRegion::has_corner_radius_bl() const {
  return _internal_has_corner_radius_bl();
}
inline void BlurRegion::clear_corner_radius_bl() {
  corner_radius_bl_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t BlurRegion::_internal_corner_radius_bl() const {
  return corner_radius_bl_;
}
inline uint32_t BlurRegion::corner_radius_bl() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlurRegion.corner_radius_bl)
  return _internal_corner_radius_bl();
}
inline void BlurRegion::_internal_set_corner_radius_bl(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  corner_radius_bl_ = value;
}
inline void BlurRegion::set_corner_radius_bl(uint32_t value) {
  _internal_set_corner_radius_bl(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlurRegion.corner_radius_bl)
}

// optional float corner_radius_br = 5;
inline bool BlurRegion::_internal_has_corner_radius_br() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BlurRegion::has_corner_radius_br() const {
  return _internal_has_corner_radius_br();
}
inline void BlurRegion::clear_corner_radius_br() {
  corner_radius_br_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float BlurRegion::_internal_corner_radius_br() const {
  return corner_radius_br_;
}
inline float BlurRegion::corner_radius_br() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlurRegion.corner_radius_br)
  return _internal_corner_radius_br();
}
inline void BlurRegion::_internal_set_corner_radius_br(float value) {
  _has_bits_[0] |= 0x00000010u;
  corner_radius_br_ = value;
}
inline void BlurRegion::set_corner_radius_br(float value) {
  _internal_set_corner_radius_br(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlurRegion.corner_radius_br)
}

// optional float alpha = 6;
inline bool BlurRegion::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BlurRegion::has_alpha() const {
  return _internal_has_alpha();
}
inline void BlurRegion::clear_alpha() {
  alpha_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float BlurRegion::_internal_alpha() const {
  return alpha_;
}
inline float BlurRegion::alpha() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlurRegion.alpha)
  return _internal_alpha();
}
inline void BlurRegion::_internal_set_alpha(float value) {
  _has_bits_[0] |= 0x00000020u;
  alpha_ = value;
}
inline void BlurRegion::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlurRegion.alpha)
}

// optional int32 left = 7;
inline bool BlurRegion::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BlurRegion::has_left() const {
  return _internal_has_left();
}
inline void BlurRegion::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t BlurRegion::_internal_left() const {
  return left_;
}
inline int32_t BlurRegion::left() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlurRegion.left)
  return _internal_left();
}
inline void BlurRegion::_internal_set_left(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  left_ = value;
}
inline void BlurRegion::set_left(int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlurRegion.left)
}

// optional int32 top = 8;
inline bool BlurRegion::_internal_has_top() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BlurRegion::has_top() const {
  return _internal_has_top();
}
inline void BlurRegion::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t BlurRegion::_internal_top() const {
  return top_;
}
inline int32_t BlurRegion::top() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlurRegion.top)
  return _internal_top();
}
inline void BlurRegion::_internal_set_top(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  top_ = value;
}
inline void BlurRegion::set_top(int32_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlurRegion.top)
}

// optional int32 right = 9;
inline bool BlurRegion::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BlurRegion::has_right() const {
  return _internal_has_right();
}
inline void BlurRegion::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t BlurRegion::_internal_right() const {
  return right_;
}
inline int32_t BlurRegion::right() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlurRegion.right)
  return _internal_right();
}
inline void BlurRegion::_internal_set_right(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  right_ = value;
}
inline void BlurRegion::set_right(int32_t value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlurRegion.right)
}

// optional int32 bottom = 10;
inline bool BlurRegion::_internal_has_bottom() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BlurRegion::has_bottom() const {
  return _internal_has_bottom();
}
inline void BlurRegion::clear_bottom() {
  bottom_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t BlurRegion::_internal_bottom() const {
  return bottom_;
}
inline int32_t BlurRegion::bottom() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlurRegion.bottom)
  return _internal_bottom();
}
inline void BlurRegion::_internal_set_bottom(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  bottom_ = value;
}
inline void BlurRegion::set_bottom(int32_t value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlurRegion.bottom)
}

// -------------------------------------------------------------------

// ColorTransformProto

// repeated float val = 1 [packed = true];
inline int ColorTransformProto::_internal_val_size() const {
  return val_.size();
}
inline int ColorTransformProto::val_size() const {
  return _internal_val_size();
}
inline void ColorTransformProto::clear_val() {
  val_.Clear();
}
inline float ColorTransformProto::_internal_val(int index) const {
  return val_.Get(index);
}
inline float ColorTransformProto::val(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ColorTransformProto.val)
  return _internal_val(index);
}
inline void ColorTransformProto::set_val(int index, float value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ColorTransformProto.val)
}
inline void ColorTransformProto::_internal_add_val(float value) {
  val_.Add(value);
}
inline void ColorTransformProto::add_val(float value) {
  _internal_add_val(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ColorTransformProto.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransformProto::_internal_val() const {
  return val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransformProto::val() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ColorTransformProto.val)
  return _internal_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransformProto::_internal_mutable_val() {
  return &val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransformProto::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ColorTransformProto.val)
  return _internal_mutable_val();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5fcommon_2eproto
