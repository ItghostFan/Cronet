// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/surfaceflinger_transactions.proto

#include "protos/perfetto/trace/android/surfaceflinger_transactions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR TransactionTraceFile::TransactionTraceFile(
    ::_pbi::ConstantInitialized)
  : entry_()
  , magic_number_(uint64_t{0u})
  , real_to_elapsed_time_offset_nanos_(uint64_t{0u})
  , version_(0u){}
struct TransactionTraceFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionTraceFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionTraceFileDefaultTypeInternal() {}
  union {
    TransactionTraceFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionTraceFileDefaultTypeInternal _TransactionTraceFile_default_instance_;
PROTOBUF_CONSTEXPR TransactionTraceEntry::TransactionTraceEntry(
    ::_pbi::ConstantInitialized)
  : transactions_()
  , added_layers_()
  , destroyed_layers_()
  , added_displays_()
  , removed_displays_()
  , destroyed_layer_handles_()
  , displays_()
  , elapsed_realtime_nanos_(int64_t{0})
  , vsync_id_(int64_t{0})
  , displays_changed_(false){}
struct TransactionTraceEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionTraceEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionTraceEntryDefaultTypeInternal() {}
  union {
    TransactionTraceEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionTraceEntryDefaultTypeInternal _TransactionTraceEntry_default_instance_;
PROTOBUF_CONSTEXPR DisplayInfo::DisplayInfo(
    ::_pbi::ConstantInitialized)
  : transform_inverse_(nullptr)
  , transform_(nullptr)
  , layer_stack_(0u)
  , display_id_(0)
  , logical_width_(0)
  , logical_height_(0)
  , receives_input_(false)
  , is_secure_(false)
  , is_primary_(false)
  , is_virtual_(false)
  , rotation_flags_(0)
  , transform_hint_(0){}
struct DisplayInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisplayInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisplayInfoDefaultTypeInternal() {}
  union {
    DisplayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisplayInfoDefaultTypeInternal _DisplayInfo_default_instance_;
PROTOBUF_CONSTEXPR LayerCreationArgs::LayerCreationArgs(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , layer_id_(0u)
  , flags_(0u)
  , parent_id_(0u)
  , mirror_from_id_(0u)
  , add_to_root_(false)
  , layer_stack_to_mirror_(0u){}
struct LayerCreationArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerCreationArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerCreationArgsDefaultTypeInternal() {}
  union {
    LayerCreationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerCreationArgsDefaultTypeInternal _LayerCreationArgs_default_instance_;
PROTOBUF_CONSTEXPR Transform::Transform(
    ::_pbi::ConstantInitialized)
  : dsdx_(0)
  , dtdx_(0)
  , dtdy_(0)
  , dsdy_(0)
  , tx_(0)
  , ty_(0){}
struct TransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformDefaultTypeInternal _Transform_default_instance_;
PROTOBUF_CONSTEXPR TransactionState::TransactionState(
    ::_pbi::ConstantInitialized)
  : layer_changes_()
  , display_changes_()
  , merged_transaction_ids_()
  , pid_(0)
  , uid_(0)
  , vsync_id_(int64_t{0})
  , post_time_(int64_t{0})
  , transaction_id_(uint64_t{0u})
  , input_event_id_(0){}
struct TransactionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionStateDefaultTypeInternal() {}
  union {
    TransactionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionStateDefaultTypeInternal _TransactionState_default_instance_;
PROTOBUF_CONSTEXPR LayerState_Matrix22::LayerState_Matrix22(
    ::_pbi::ConstantInitialized)
  : dsdx_(0)
  , dtdx_(0)
  , dtdy_(0)
  , dsdy_(0){}
struct LayerState_Matrix22DefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerState_Matrix22DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerState_Matrix22DefaultTypeInternal() {}
  union {
    LayerState_Matrix22 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerState_Matrix22DefaultTypeInternal _LayerState_Matrix22_default_instance_;
PROTOBUF_CONSTEXPR LayerState_Color3::LayerState_Color3(
    ::_pbi::ConstantInitialized)
  : r_(0)
  , g_(0)
  , b_(0){}
struct LayerState_Color3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerState_Color3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerState_Color3DefaultTypeInternal() {}
  union {
    LayerState_Color3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerState_Color3DefaultTypeInternal _LayerState_Color3_default_instance_;
PROTOBUF_CONSTEXPR LayerState_BufferData::LayerState_BufferData(
    ::_pbi::ConstantInitialized)
  : buffer_id_(uint64_t{0u})
  , width_(0u)
  , height_(0u)
  , frame_number_(uint64_t{0u})
  , cached_buffer_id_(uint64_t{0u})
  , flags_(0u)
  , pixel_format_(0)

  , usage_(uint64_t{0u}){}
struct LayerState_BufferDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerState_BufferDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerState_BufferDataDefaultTypeInternal() {}
  union {
    LayerState_BufferData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerState_BufferDataDefaultTypeInternal _LayerState_BufferData_default_instance_;
PROTOBUF_CONSTEXPR LayerState_WindowInfo::LayerState_WindowInfo(
    ::_pbi::ConstantInitialized)
  : touchable_region_(nullptr)
  , touchable_region_crop_(nullptr)
  , transform_(nullptr)
  , layout_params_flags_(0u)
  , layout_params_type_(0)
  , surface_inset_(0)
  , focusable_(false)
  , has_wallpaper_(false)
  , replace_touchable_region_with_crop_(false)
  , global_scale_factor_(0)
  , crop_layer_id_(0u)
  , input_config_(0u){}
struct LayerState_WindowInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerState_WindowInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerState_WindowInfoDefaultTypeInternal() {}
  union {
    LayerState_WindowInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerState_WindowInfoDefaultTypeInternal _LayerState_WindowInfo_default_instance_;
PROTOBUF_CONSTEXPR LayerState::LayerState(
    ::_pbi::ConstantInitialized)
  : blur_regions_()
  , matrix_(nullptr)
  , color_(nullptr)
  , transparent_region_(nullptr)
  , crop_(nullptr)
  , buffer_data_(nullptr)
  , color_transform_(nullptr)
  , window_info_handle_(nullptr)
  , buffer_crop_(nullptr)
  , destination_frame_(nullptr)
  , what_(uint64_t{0u})
  , layer_id_(0u)
  , x_(0)
  , y_(0)
  , z_(0)
  , w_(0u)
  , h_(0u)
  , layer_stack_(0u)
  , flags_(0u)
  , mask_(0u)
  , corner_radius_(0)
  , background_blur_radius_(0u)
  , parent_id_(0u)
  , relative_parent_id_(0u)
  , alpha_(0)
  , transform_(0u)
  , api_(0)
  , bg_color_alpha_(0)
  , transform_to_display_inverse_(false)
  , has_sideband_stream_(false)
  , color_space_agnostic_(false)
  , auto_refresh_(false)
  , bg_color_dataspace_(0)
  , shadow_radius_(0)
  , frame_rate_selection_priority_(0)
  , frame_rate_(0)
  , frame_rate_compatibility_(0)
  , change_frame_rate_strategy_(0)
  , frame_number_(uint64_t{0u})
  , fixed_transform_hint_(0u)
  , is_trusted_overlay_(false)
  , drop_input_mode_(0)
{}
struct LayerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerStateDefaultTypeInternal() {}
  union {
    LayerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerStateDefaultTypeInternal _LayerState_default_instance_;
PROTOBUF_CONSTEXPR DisplayState::DisplayState(
    ::_pbi::ConstantInitialized)
  : layer_stack_space_rect_(nullptr)
  , oriented_display_space_rect_(nullptr)
  , id_(0)
  , what_(0u)
  , flags_(0u)
  , layer_stack_(0u)
  , orientation_(0u)
  , width_(0u)
  , height_(0u){}
struct DisplayStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisplayStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisplayStateDefaultTypeInternal() {}
  union {
    DisplayState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisplayStateDefaultTypeInternal _DisplayState_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool TransactionTraceFile_MagicNumber_IsValid(int value) {
  switch (value) {
    case 0:
    case 1162035538:
    case 1415073364:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransactionTraceFile_MagicNumber_strings[3] = {};

static const char TransactionTraceFile_MagicNumber_names[] =
  "INVALID"
  "MAGIC_NUMBER_H"
  "MAGIC_NUMBER_L";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransactionTraceFile_MagicNumber_entries[] = {
  { {TransactionTraceFile_MagicNumber_names + 0, 7}, 0 },
  { {TransactionTraceFile_MagicNumber_names + 7, 14}, 1162035538 },
  { {TransactionTraceFile_MagicNumber_names + 21, 14}, 1415073364 },
};

static const int TransactionTraceFile_MagicNumber_entries_by_number[] = {
  0, // 0 -> INVALID
  1, // 1162035538 -> MAGIC_NUMBER_H
  2, // 1415073364 -> MAGIC_NUMBER_L
};

const std::string& TransactionTraceFile_MagicNumber_Name(
    TransactionTraceFile_MagicNumber value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransactionTraceFile_MagicNumber_entries,
          TransactionTraceFile_MagicNumber_entries_by_number,
          3, TransactionTraceFile_MagicNumber_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransactionTraceFile_MagicNumber_entries,
      TransactionTraceFile_MagicNumber_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransactionTraceFile_MagicNumber_strings[idx].get();
}
bool TransactionTraceFile_MagicNumber_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransactionTraceFile_MagicNumber* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransactionTraceFile_MagicNumber_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TransactionTraceFile_MagicNumber>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionTraceFile_MagicNumber TransactionTraceFile::INVALID;
constexpr TransactionTraceFile_MagicNumber TransactionTraceFile::MAGIC_NUMBER_L;
constexpr TransactionTraceFile_MagicNumber TransactionTraceFile::MAGIC_NUMBER_H;
constexpr TransactionTraceFile_MagicNumber TransactionTraceFile::MagicNumber_MIN;
constexpr TransactionTraceFile_MagicNumber TransactionTraceFile::MagicNumber_MAX;
constexpr int TransactionTraceFile::MagicNumber_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LayerState_BufferData_BufferDataChange_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayerState_BufferData_BufferDataChange_strings[4] = {};

static const char LayerState_BufferData_BufferDataChange_names[] =
  "BufferDataChangeNone"
  "cachedBufferChanged"
  "fenceChanged"
  "frameNumberChanged";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayerState_BufferData_BufferDataChange_entries[] = {
  { {LayerState_BufferData_BufferDataChange_names + 0, 20}, 0 },
  { {LayerState_BufferData_BufferDataChange_names + 20, 19}, 4 },
  { {LayerState_BufferData_BufferDataChange_names + 39, 12}, 1 },
  { {LayerState_BufferData_BufferDataChange_names + 51, 18}, 2 },
};

static const int LayerState_BufferData_BufferDataChange_entries_by_number[] = {
  0, // 0 -> BufferDataChangeNone
  2, // 1 -> fenceChanged
  3, // 2 -> frameNumberChanged
  1, // 4 -> cachedBufferChanged
};

const std::string& LayerState_BufferData_BufferDataChange_Name(
    LayerState_BufferData_BufferDataChange value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayerState_BufferData_BufferDataChange_entries,
          LayerState_BufferData_BufferDataChange_entries_by_number,
          4, LayerState_BufferData_BufferDataChange_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayerState_BufferData_BufferDataChange_entries,
      LayerState_BufferData_BufferDataChange_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayerState_BufferData_BufferDataChange_strings[idx].get();
}
bool LayerState_BufferData_BufferDataChange_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_BufferData_BufferDataChange* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayerState_BufferData_BufferDataChange_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<LayerState_BufferData_BufferDataChange>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LayerState_BufferData_BufferDataChange LayerState_BufferData::BufferDataChangeNone;
constexpr LayerState_BufferData_BufferDataChange LayerState_BufferData::fenceChanged;
constexpr LayerState_BufferData_BufferDataChange LayerState_BufferData::frameNumberChanged;
constexpr LayerState_BufferData_BufferDataChange LayerState_BufferData::cachedBufferChanged;
constexpr LayerState_BufferData_BufferDataChange LayerState_BufferData::BufferDataChange_MIN;
constexpr LayerState_BufferData_BufferDataChange LayerState_BufferData::BufferDataChange_MAX;
constexpr int LayerState_BufferData::BufferDataChange_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LayerState_BufferData_PixelFormat_IsValid(int value) {
  switch (value) {
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 22:
    case 43:
    case 56:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayerState_BufferData_PixelFormat_strings[15] = {};

static const char LayerState_BufferData_PixelFormat_names[] =
  "PIXEL_FORMAT_BGRA_8888"
  "PIXEL_FORMAT_CUSTOM"
  "PIXEL_FORMAT_OPAQUE"
  "PIXEL_FORMAT_RGBA_1010102"
  "PIXEL_FORMAT_RGBA_4444"
  "PIXEL_FORMAT_RGBA_5551"
  "PIXEL_FORMAT_RGBA_8888"
  "PIXEL_FORMAT_RGBA_FP16"
  "PIXEL_FORMAT_RGBX_8888"
  "PIXEL_FORMAT_RGB_565"
  "PIXEL_FORMAT_RGB_888"
  "PIXEL_FORMAT_R_8"
  "PIXEL_FORMAT_TRANSLUCENT"
  "PIXEL_FORMAT_TRANSPARENT"
  "PIXEL_FORMAT_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayerState_BufferData_PixelFormat_entries[] = {
  { {LayerState_BufferData_PixelFormat_names + 0, 22}, 5 },
  { {LayerState_BufferData_PixelFormat_names + 22, 19}, -4 },
  { {LayerState_BufferData_PixelFormat_names + 41, 19}, -1 },
  { {LayerState_BufferData_PixelFormat_names + 60, 25}, 43 },
  { {LayerState_BufferData_PixelFormat_names + 85, 22}, 7 },
  { {LayerState_BufferData_PixelFormat_names + 107, 22}, 6 },
  { {LayerState_BufferData_PixelFormat_names + 129, 22}, 1 },
  { {LayerState_BufferData_PixelFormat_names + 151, 22}, 22 },
  { {LayerState_BufferData_PixelFormat_names + 173, 22}, 2 },
  { {LayerState_BufferData_PixelFormat_names + 195, 20}, 4 },
  { {LayerState_BufferData_PixelFormat_names + 215, 20}, 3 },
  { {LayerState_BufferData_PixelFormat_names + 235, 16}, 56 },
  { {LayerState_BufferData_PixelFormat_names + 251, 24}, -3 },
  { {LayerState_BufferData_PixelFormat_names + 275, 24}, -2 },
  { {LayerState_BufferData_PixelFormat_names + 299, 20}, 0 },
};

static const int LayerState_BufferData_PixelFormat_entries_by_number[] = {
  1, // -4 -> PIXEL_FORMAT_CUSTOM
  12, // -3 -> PIXEL_FORMAT_TRANSLUCENT
  13, // -2 -> PIXEL_FORMAT_TRANSPARENT
  2, // -1 -> PIXEL_FORMAT_OPAQUE
  14, // 0 -> PIXEL_FORMAT_UNKNOWN
  6, // 1 -> PIXEL_FORMAT_RGBA_8888
  8, // 2 -> PIXEL_FORMAT_RGBX_8888
  10, // 3 -> PIXEL_FORMAT_RGB_888
  9, // 4 -> PIXEL_FORMAT_RGB_565
  0, // 5 -> PIXEL_FORMAT_BGRA_8888
  5, // 6 -> PIXEL_FORMAT_RGBA_5551
  4, // 7 -> PIXEL_FORMAT_RGBA_4444
  7, // 22 -> PIXEL_FORMAT_RGBA_FP16
  3, // 43 -> PIXEL_FORMAT_RGBA_1010102
  11, // 56 -> PIXEL_FORMAT_R_8
};

const std::string& LayerState_BufferData_PixelFormat_Name(
    LayerState_BufferData_PixelFormat value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayerState_BufferData_PixelFormat_entries,
          LayerState_BufferData_PixelFormat_entries_by_number,
          15, LayerState_BufferData_PixelFormat_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayerState_BufferData_PixelFormat_entries,
      LayerState_BufferData_PixelFormat_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayerState_BufferData_PixelFormat_strings[idx].get();
}
bool LayerState_BufferData_PixelFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_BufferData_PixelFormat* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayerState_BufferData_PixelFormat_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<LayerState_BufferData_PixelFormat>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_UNKNOWN;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_CUSTOM;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_TRANSLUCENT;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_TRANSPARENT;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_OPAQUE;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_RGBA_8888;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_RGBX_8888;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_RGB_888;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_RGB_565;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_BGRA_8888;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_RGBA_5551;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_RGBA_4444;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_RGBA_FP16;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_RGBA_1010102;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PIXEL_FORMAT_R_8;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PixelFormat_MIN;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData::PixelFormat_MAX;
constexpr int LayerState_BufferData::PixelFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LayerState_ChangesLsb_IsValid(int value) {
  switch (value) {
    case -2147483647 - 1:
    case 0:
    case 1:
    case 2:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 1024:
    case 2048:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayerState_ChangesLsb_strings[28] = {};

static const char LayerState_ChangesLsb_names[] =
  "eAcquireFenceChanged"
  "eAlphaChanged"
  "eApiChanged"
  "eBufferChanged"
  "eBufferCropChanged"
  "eBufferTransformChanged"
  "eChangesLsbNone"
  "eColorChanged"
  "eColorTransformChanged"
  "eCornerRadiusChanged"
  "eCropChanged"
  "eDataspaceChanged"
  "eFlagsChanged"
  "eHasListenerCallbacksChanged"
  "eHdrMetadataChanged"
  "eInputInfoChanged"
  "eLayerChanged"
  "eLayerStackChanged"
  "eMatrixChanged"
  "ePositionChanged"
  "eRelativeLayerChanged"
  "eReleaseBufferListenerChanged"
  "eReparent"
  "eShadowRadiusChanged"
  "eSidebandStreamChanged"
  "eSurfaceDamageRegionChanged"
  "eTransformToDisplayInverseChanged"
  "eTransparentRegionChanged";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayerState_ChangesLsb_entries[] = {
  { {LayerState_ChangesLsb_names + 0, 20}, 4194304 },
  { {LayerState_ChangesLsb_names + 20, 13}, 8 },
  { {LayerState_ChangesLsb_names + 33, 11}, 67108864 },
  { {LayerState_ChangesLsb_names + 44, 14}, 2097152 },
  { {LayerState_ChangesLsb_names + 58, 18}, 8192 },
  { {LayerState_ChangesLsb_names + 76, 23}, 262144 },
  { {LayerState_ChangesLsb_names + 99, 15}, 0 },
  { {LayerState_ChangesLsb_names + 114, 13}, 65536 },
  { {LayerState_ChangesLsb_names + 127, 22}, 268435456 },
  { {LayerState_ChangesLsb_names + 149, 20}, -2147483648 },
  { {LayerState_ChangesLsb_names + 169, 12}, 1048576 },
  { {LayerState_ChangesLsb_names + 181, 17}, 8388608 },
  { {LayerState_ChangesLsb_names + 198, 13}, 64 },
  { {LayerState_ChangesLsb_names + 211, 28}, 536870912 },
  { {LayerState_ChangesLsb_names + 239, 19}, 16777216 },
  { {LayerState_ChangesLsb_names + 258, 17}, 1073741824 },
  { {LayerState_ChangesLsb_names + 275, 13}, 2 },
  { {LayerState_ChangesLsb_names + 288, 18}, 128 },
  { {LayerState_ChangesLsb_names + 306, 14}, 16 },
  { {LayerState_ChangesLsb_names + 320, 16}, 1 },
  { {LayerState_ChangesLsb_names + 336, 21}, 16384 },
  { {LayerState_ChangesLsb_names + 357, 29}, 1024 },
  { {LayerState_ChangesLsb_names + 386, 9}, 32768 },
  { {LayerState_ChangesLsb_names + 395, 20}, 2048 },
  { {LayerState_ChangesLsb_names + 415, 22}, 134217728 },
  { {LayerState_ChangesLsb_names + 437, 27}, 33554432 },
  { {LayerState_ChangesLsb_names + 464, 33}, 524288 },
  { {LayerState_ChangesLsb_names + 497, 25}, 32 },
};

static const int LayerState_ChangesLsb_entries_by_number[] = {
  9, // -2147483648 -> eCornerRadiusChanged
  6, // 0 -> eChangesLsbNone
  19, // 1 -> ePositionChanged
  16, // 2 -> eLayerChanged
  1, // 8 -> eAlphaChanged
  18, // 16 -> eMatrixChanged
  27, // 32 -> eTransparentRegionChanged
  12, // 64 -> eFlagsChanged
  17, // 128 -> eLayerStackChanged
  21, // 1024 -> eReleaseBufferListenerChanged
  23, // 2048 -> eShadowRadiusChanged
  4, // 8192 -> eBufferCropChanged
  20, // 16384 -> eRelativeLayerChanged
  22, // 32768 -> eReparent
  7, // 65536 -> eColorChanged
  5, // 262144 -> eBufferTransformChanged
  26, // 524288 -> eTransformToDisplayInverseChanged
  10, // 1048576 -> eCropChanged
  3, // 2097152 -> eBufferChanged
  0, // 4194304 -> eAcquireFenceChanged
  11, // 8388608 -> eDataspaceChanged
  14, // 16777216 -> eHdrMetadataChanged
  25, // 33554432 -> eSurfaceDamageRegionChanged
  2, // 67108864 -> eApiChanged
  24, // 134217728 -> eSidebandStreamChanged
  8, // 268435456 -> eColorTransformChanged
  13, // 536870912 -> eHasListenerCallbacksChanged
  15, // 1073741824 -> eInputInfoChanged
};

const std::string& LayerState_ChangesLsb_Name(
    LayerState_ChangesLsb value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayerState_ChangesLsb_entries,
          LayerState_ChangesLsb_entries_by_number,
          28, LayerState_ChangesLsb_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayerState_ChangesLsb_entries,
      LayerState_ChangesLsb_entries_by_number,
      28, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayerState_ChangesLsb_strings[idx].get();
}
bool LayerState_ChangesLsb_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_ChangesLsb* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayerState_ChangesLsb_entries, 28, name, &int_value);
  if (success) {
    *value = static_cast<LayerState_ChangesLsb>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LayerState_ChangesLsb LayerState::eChangesLsbNone;
constexpr LayerState_ChangesLsb LayerState::ePositionChanged;
constexpr LayerState_ChangesLsb LayerState::eLayerChanged;
constexpr LayerState_ChangesLsb LayerState::eAlphaChanged;
constexpr LayerState_ChangesLsb LayerState::eMatrixChanged;
constexpr LayerState_ChangesLsb LayerState::eTransparentRegionChanged;
constexpr LayerState_ChangesLsb LayerState::eFlagsChanged;
constexpr LayerState_ChangesLsb LayerState::eLayerStackChanged;
constexpr LayerState_ChangesLsb LayerState::eReleaseBufferListenerChanged;
constexpr LayerState_ChangesLsb LayerState::eShadowRadiusChanged;
constexpr LayerState_ChangesLsb LayerState::eBufferCropChanged;
constexpr LayerState_ChangesLsb LayerState::eRelativeLayerChanged;
constexpr LayerState_ChangesLsb LayerState::eReparent;
constexpr LayerState_ChangesLsb LayerState::eColorChanged;
constexpr LayerState_ChangesLsb LayerState::eBufferTransformChanged;
constexpr LayerState_ChangesLsb LayerState::eTransformToDisplayInverseChanged;
constexpr LayerState_ChangesLsb LayerState::eCropChanged;
constexpr LayerState_ChangesLsb LayerState::eBufferChanged;
constexpr LayerState_ChangesLsb LayerState::eAcquireFenceChanged;
constexpr LayerState_ChangesLsb LayerState::eDataspaceChanged;
constexpr LayerState_ChangesLsb LayerState::eHdrMetadataChanged;
constexpr LayerState_ChangesLsb LayerState::eSurfaceDamageRegionChanged;
constexpr LayerState_ChangesLsb LayerState::eApiChanged;
constexpr LayerState_ChangesLsb LayerState::eSidebandStreamChanged;
constexpr LayerState_ChangesLsb LayerState::eColorTransformChanged;
constexpr LayerState_ChangesLsb LayerState::eHasListenerCallbacksChanged;
constexpr LayerState_ChangesLsb LayerState::eInputInfoChanged;
constexpr LayerState_ChangesLsb LayerState::eCornerRadiusChanged;
constexpr LayerState_ChangesLsb LayerState::ChangesLsb_MIN;
constexpr LayerState_ChangesLsb LayerState::ChangesLsb_MAX;
constexpr int LayerState::ChangesLsb_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LayerState_ChangesMsb_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayerState_ChangesMsb_strings[17] = {};

static const char LayerState_ChangesMsb_names[] =
  "eAutoRefreshChanged"
  "eBackgroundBlurRadiusChanged"
  "eBackgroundColorChanged"
  "eBlurRegionsChanged"
  "eCachedBufferChanged"
  "eChangesMsbNone"
  "eColorSpaceAgnosticChanged"
  "eDestinationFrameChanged"
  "eDropInputModeChanged"
  "eFixedTransformHintChanged"
  "eFrameNumberChanged"
  "eFrameRateChanged"
  "eFrameRateSelectionPriority"
  "eMetadataChanged"
  "eProducerDisconnect"
  "eStretchChanged"
  "eTrustedOverlayChanged";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayerState_ChangesMsb_entries[] = {
  { {LayerState_ChangesMsb_names + 0, 19}, 4096 },
  { {LayerState_ChangesMsb_names + 19, 28}, 128 },
  { {LayerState_ChangesMsb_names + 47, 23}, 4 },
  { {LayerState_ChangesMsb_names + 70, 19}, 2048 },
  { {LayerState_ChangesMsb_names + 89, 20}, 2 },
  { {LayerState_ChangesMsb_names + 109, 15}, 0 },
  { {LayerState_ChangesMsb_names + 124, 26}, 16 },
  { {LayerState_ChangesMsb_names + 150, 24}, 1 },
  { {LayerState_ChangesMsb_names + 174, 21}, 32768 },
  { {LayerState_ChangesMsb_names + 195, 26}, 512 },
  { {LayerState_ChangesMsb_names + 221, 19}, 1024 },
  { {LayerState_ChangesMsb_names + 240, 17}, 64 },
  { {LayerState_ChangesMsb_names + 257, 27}, 32 },
  { {LayerState_ChangesMsb_names + 284, 16}, 8 },
  { {LayerState_ChangesMsb_names + 300, 19}, 256 },
  { {LayerState_ChangesMsb_names + 319, 15}, 8192 },
  { {LayerState_ChangesMsb_names + 334, 22}, 16384 },
};

static const int LayerState_ChangesMsb_entries_by_number[] = {
  5, // 0 -> eChangesMsbNone
  7, // 1 -> eDestinationFrameChanged
  4, // 2 -> eCachedBufferChanged
  2, // 4 -> eBackgroundColorChanged
  13, // 8 -> eMetadataChanged
  6, // 16 -> eColorSpaceAgnosticChanged
  12, // 32 -> eFrameRateSelectionPriority
  11, // 64 -> eFrameRateChanged
  1, // 128 -> eBackgroundBlurRadiusChanged
  14, // 256 -> eProducerDisconnect
  9, // 512 -> eFixedTransformHintChanged
  10, // 1024 -> eFrameNumberChanged
  3, // 2048 -> eBlurRegionsChanged
  0, // 4096 -> eAutoRefreshChanged
  15, // 8192 -> eStretchChanged
  16, // 16384 -> eTrustedOverlayChanged
  8, // 32768 -> eDropInputModeChanged
};

const std::string& LayerState_ChangesMsb_Name(
    LayerState_ChangesMsb value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayerState_ChangesMsb_entries,
          LayerState_ChangesMsb_entries_by_number,
          17, LayerState_ChangesMsb_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayerState_ChangesMsb_entries,
      LayerState_ChangesMsb_entries_by_number,
      17, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayerState_ChangesMsb_strings[idx].get();
}
bool LayerState_ChangesMsb_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_ChangesMsb* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayerState_ChangesMsb_entries, 17, name, &int_value);
  if (success) {
    *value = static_cast<LayerState_ChangesMsb>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LayerState_ChangesMsb LayerState::eChangesMsbNone;
constexpr LayerState_ChangesMsb LayerState::eDestinationFrameChanged;
constexpr LayerState_ChangesMsb LayerState::eCachedBufferChanged;
constexpr LayerState_ChangesMsb LayerState::eBackgroundColorChanged;
constexpr LayerState_ChangesMsb LayerState::eMetadataChanged;
constexpr LayerState_ChangesMsb LayerState::eColorSpaceAgnosticChanged;
constexpr LayerState_ChangesMsb LayerState::eFrameRateSelectionPriority;
constexpr LayerState_ChangesMsb LayerState::eFrameRateChanged;
constexpr LayerState_ChangesMsb LayerState::eBackgroundBlurRadiusChanged;
constexpr LayerState_ChangesMsb LayerState::eProducerDisconnect;
constexpr LayerState_ChangesMsb LayerState::eFixedTransformHintChanged;
constexpr LayerState_ChangesMsb LayerState::eFrameNumberChanged;
constexpr LayerState_ChangesMsb LayerState::eBlurRegionsChanged;
constexpr LayerState_ChangesMsb LayerState::eAutoRefreshChanged;
constexpr LayerState_ChangesMsb LayerState::eStretchChanged;
constexpr LayerState_ChangesMsb LayerState::eTrustedOverlayChanged;
constexpr LayerState_ChangesMsb LayerState::eDropInputModeChanged;
constexpr LayerState_ChangesMsb LayerState::ChangesMsb_MIN;
constexpr LayerState_ChangesMsb LayerState::ChangesMsb_MAX;
constexpr int LayerState::ChangesMsb_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LayerState_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 64:
    case 128:
    case 256:
    case 512:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayerState_Flags_strings[7] = {};

static const char LayerState_Flags_names[] =
  "eEnableBackpressure"
  "eFlagsNone"
  "eLayerHidden"
  "eLayerIsDisplayDecoration"
  "eLayerOpaque"
  "eLayerSecure"
  "eLayerSkipScreenshot";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayerState_Flags_entries[] = {
  { {LayerState_Flags_names + 0, 19}, 256 },
  { {LayerState_Flags_names + 19, 10}, 0 },
  { {LayerState_Flags_names + 29, 12}, 1 },
  { {LayerState_Flags_names + 41, 25}, 512 },
  { {LayerState_Flags_names + 66, 12}, 2 },
  { {LayerState_Flags_names + 78, 12}, 128 },
  { {LayerState_Flags_names + 90, 20}, 64 },
};

static const int LayerState_Flags_entries_by_number[] = {
  1, // 0 -> eFlagsNone
  2, // 1 -> eLayerHidden
  4, // 2 -> eLayerOpaque
  6, // 64 -> eLayerSkipScreenshot
  5, // 128 -> eLayerSecure
  0, // 256 -> eEnableBackpressure
  3, // 512 -> eLayerIsDisplayDecoration
};

const std::string& LayerState_Flags_Name(
    LayerState_Flags value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayerState_Flags_entries,
          LayerState_Flags_entries_by_number,
          7, LayerState_Flags_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayerState_Flags_entries,
      LayerState_Flags_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayerState_Flags_strings[idx].get();
}
bool LayerState_Flags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_Flags* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayerState_Flags_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<LayerState_Flags>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LayerState_Flags LayerState::eFlagsNone;
constexpr LayerState_Flags LayerState::eLayerHidden;
constexpr LayerState_Flags LayerState::eLayerOpaque;
constexpr LayerState_Flags LayerState::eLayerSkipScreenshot;
constexpr LayerState_Flags LayerState::eLayerSecure;
constexpr LayerState_Flags LayerState::eEnableBackpressure;
constexpr LayerState_Flags LayerState::eLayerIsDisplayDecoration;
constexpr LayerState_Flags LayerState::Flags_MIN;
constexpr LayerState_Flags LayerState::Flags_MAX;
constexpr int LayerState::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LayerState_DropInputMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayerState_DropInputMode_strings[3] = {};

static const char LayerState_DropInputMode_names[] =
  "ALL"
  "NONE"
  "OBSCURED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayerState_DropInputMode_entries[] = {
  { {LayerState_DropInputMode_names + 0, 3}, 1 },
  { {LayerState_DropInputMode_names + 3, 4}, 0 },
  { {LayerState_DropInputMode_names + 7, 8}, 2 },
};

static const int LayerState_DropInputMode_entries_by_number[] = {
  1, // 0 -> NONE
  0, // 1 -> ALL
  2, // 2 -> OBSCURED
};

const std::string& LayerState_DropInputMode_Name(
    LayerState_DropInputMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayerState_DropInputMode_entries,
          LayerState_DropInputMode_entries_by_number,
          3, LayerState_DropInputMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayerState_DropInputMode_entries,
      LayerState_DropInputMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayerState_DropInputMode_strings[idx].get();
}
bool LayerState_DropInputMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_DropInputMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayerState_DropInputMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LayerState_DropInputMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LayerState_DropInputMode LayerState::NONE;
constexpr LayerState_DropInputMode LayerState::ALL;
constexpr LayerState_DropInputMode LayerState::OBSCURED;
constexpr LayerState_DropInputMode LayerState::DropInputMode_MIN;
constexpr LayerState_DropInputMode LayerState::DropInputMode_MAX;
constexpr int LayerState::DropInputMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DisplayState_Changes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DisplayState_Changes_strings[6] = {};

static const char DisplayState_Changes_names[] =
  "eChangesNone"
  "eDisplayProjectionChanged"
  "eDisplaySizeChanged"
  "eFlagsChanged"
  "eLayerStackChanged"
  "eSurfaceChanged";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DisplayState_Changes_entries[] = {
  { {DisplayState_Changes_names + 0, 12}, 0 },
  { {DisplayState_Changes_names + 12, 25}, 4 },
  { {DisplayState_Changes_names + 37, 19}, 8 },
  { {DisplayState_Changes_names + 56, 13}, 16 },
  { {DisplayState_Changes_names + 69, 18}, 2 },
  { {DisplayState_Changes_names + 87, 15}, 1 },
};

static const int DisplayState_Changes_entries_by_number[] = {
  0, // 0 -> eChangesNone
  5, // 1 -> eSurfaceChanged
  4, // 2 -> eLayerStackChanged
  1, // 4 -> eDisplayProjectionChanged
  2, // 8 -> eDisplaySizeChanged
  3, // 16 -> eFlagsChanged
};

const std::string& DisplayState_Changes_Name(
    DisplayState_Changes value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DisplayState_Changes_entries,
          DisplayState_Changes_entries_by_number,
          6, DisplayState_Changes_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DisplayState_Changes_entries,
      DisplayState_Changes_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DisplayState_Changes_strings[idx].get();
}
bool DisplayState_Changes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DisplayState_Changes* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DisplayState_Changes_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<DisplayState_Changes>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DisplayState_Changes DisplayState::eChangesNone;
constexpr DisplayState_Changes DisplayState::eSurfaceChanged;
constexpr DisplayState_Changes DisplayState::eLayerStackChanged;
constexpr DisplayState_Changes DisplayState::eDisplayProjectionChanged;
constexpr DisplayState_Changes DisplayState::eDisplaySizeChanged;
constexpr DisplayState_Changes DisplayState::eFlagsChanged;
constexpr DisplayState_Changes DisplayState::Changes_MIN;
constexpr DisplayState_Changes DisplayState::Changes_MAX;
constexpr int DisplayState::Changes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TransactionTraceFile::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionTraceFile>()._has_bits_);
  static void set_has_magic_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_real_to_elapsed_time_offset_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TransactionTraceFile::TransactionTraceFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  entry_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TransactionTraceFile)
}
TransactionTraceFile::TransactionTraceFile(const TransactionTraceFile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&magic_number_, &from.magic_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&magic_number_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TransactionTraceFile)
}

inline void TransactionTraceFile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&magic_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&magic_number_)) + sizeof(version_));
}

TransactionTraceFile::~TransactionTraceFile() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TransactionTraceFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionTraceFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionTraceFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionTraceFile::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TransactionTraceFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&magic_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&magic_number_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TransactionTraceFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 magic_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_magic_number(&has_bits);
          magic_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TransactionTraceEntry entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 real_to_elapsed_time_offset_nanos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_real_to_elapsed_time_offset_nanos(&has_bits);
          real_to_elapsed_time_offset_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionTraceFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TransactionTraceFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 magic_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_magic_number(), target);
  }

  // repeated .perfetto.protos.TransactionTraceEntry entry = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed64 real_to_elapsed_time_offset_nanos = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_real_to_elapsed_time_offset_nanos(), target);
  }

  // optional uint32 version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TransactionTraceFile)
  return target;
}

size_t TransactionTraceFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TransactionTraceFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TransactionTraceEntry entry = 2;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 magic_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 real_to_elapsed_time_offset_nanos = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionTraceFile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TransactionTraceFile*>(
      &from));
}

void TransactionTraceFile::MergeFrom(const TransactionTraceFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TransactionTraceFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      magic_number_ = from.magic_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      real_to_elapsed_time_offset_nanos_ = from.real_to_elapsed_time_offset_nanos_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TransactionTraceFile::CopyFrom(const TransactionTraceFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TransactionTraceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionTraceFile::IsInitialized() const {
  return true;
}

void TransactionTraceFile::InternalSwap(TransactionTraceFile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entry_.InternalSwap(&other->entry_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionTraceFile, version_)
      + sizeof(TransactionTraceFile::version_)
      - PROTOBUF_FIELD_OFFSET(TransactionTraceFile, magic_number_)>(
          reinterpret_cast<char*>(&magic_number_),
          reinterpret_cast<char*>(&other->magic_number_));
}

std::string TransactionTraceFile::GetTypeName() const {
  return "perfetto.protos.TransactionTraceFile";
}


// ===================================================================

class TransactionTraceEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionTraceEntry>()._has_bits_);
  static void set_has_elapsed_realtime_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vsync_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_displays_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TransactionTraceEntry::TransactionTraceEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  transactions_(arena),
  added_layers_(arena),
  destroyed_layers_(arena),
  added_displays_(arena),
  removed_displays_(arena),
  destroyed_layer_handles_(arena),
  displays_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TransactionTraceEntry)
}
TransactionTraceEntry::TransactionTraceEntry(const TransactionTraceEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      transactions_(from.transactions_),
      added_layers_(from.added_layers_),
      destroyed_layers_(from.destroyed_layers_),
      added_displays_(from.added_displays_),
      removed_displays_(from.removed_displays_),
      destroyed_layer_handles_(from.destroyed_layer_handles_),
      displays_(from.displays_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&elapsed_realtime_nanos_, &from.elapsed_realtime_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&displays_changed_) -
    reinterpret_cast<char*>(&elapsed_realtime_nanos_)) + sizeof(displays_changed_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TransactionTraceEntry)
}

inline void TransactionTraceEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&elapsed_realtime_nanos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&displays_changed_) -
    reinterpret_cast<char*>(&elapsed_realtime_nanos_)) + sizeof(displays_changed_));
}

TransactionTraceEntry::~TransactionTraceEntry() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TransactionTraceEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionTraceEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionTraceEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionTraceEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TransactionTraceEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  added_layers_.Clear();
  destroyed_layers_.Clear();
  added_displays_.Clear();
  removed_displays_.Clear();
  destroyed_layer_handles_.Clear();
  displays_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&elapsed_realtime_nanos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&displays_changed_) -
        reinterpret_cast<char*>(&elapsed_realtime_nanos_)) + sizeof(displays_changed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TransactionTraceEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 elapsed_realtime_nanos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_elapsed_realtime_nanos(&has_bits);
          elapsed_realtime_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 vsync_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vsync_id(&has_bits);
          vsync_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TransactionState transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.LayerCreationArgs added_layers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_added_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 destroyed_layers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_destroyed_layers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_destroyed_layers(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.DisplayState added_displays = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_added_displays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 removed_displays = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_removed_displays(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_removed_displays(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 destroyed_layer_handles = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_destroyed_layer_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_destroyed_layer_handles(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool displays_changed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_displays_changed(&has_bits);
          displays_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.DisplayInfo displays = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_displays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionTraceEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TransactionTraceEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 elapsed_realtime_nanos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_elapsed_realtime_nanos(), target);
  }

  // optional int64 vsync_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_vsync_id(), target);
  }

  // repeated .perfetto.protos.TransactionState transactions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transactions_size()); i < n; i++) {
    const auto& repfield = this->_internal_transactions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.LayerCreationArgs added_layers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_added_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_added_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 destroyed_layers = 5;
  for (int i = 0, n = this->_internal_destroyed_layers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_destroyed_layers(i), target);
  }

  // repeated .perfetto.protos.DisplayState added_displays = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_added_displays_size()); i < n; i++) {
    const auto& repfield = this->_internal_added_displays(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 removed_displays = 7;
  for (int i = 0, n = this->_internal_removed_displays_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_removed_displays(i), target);
  }

  // repeated uint32 destroyed_layer_handles = 8;
  for (int i = 0, n = this->_internal_destroyed_layer_handles_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_destroyed_layer_handles(i), target);
  }

  // optional bool displays_changed = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_displays_changed(), target);
  }

  // repeated .perfetto.protos.DisplayInfo displays = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_displays_size()); i < n; i++) {
    const auto& repfield = this->_internal_displays(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TransactionTraceEntry)
  return target;
}

size_t TransactionTraceEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TransactionTraceEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TransactionState transactions = 3;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.LayerCreationArgs added_layers = 4;
  total_size += 1UL * this->_internal_added_layers_size();
  for (const auto& msg : this->added_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 destroyed_layers = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->destroyed_layers_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_destroyed_layers_size());
    total_size += data_size;
  }

  // repeated .perfetto.protos.DisplayState added_displays = 6;
  total_size += 1UL * this->_internal_added_displays_size();
  for (const auto& msg : this->added_displays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 removed_displays = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->removed_displays_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_removed_displays_size());
    total_size += data_size;
  }

  // repeated uint32 destroyed_layer_handles = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->destroyed_layer_handles_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_destroyed_layer_handles_size());
    total_size += data_size;
  }

  // repeated .perfetto.protos.DisplayInfo displays = 10;
  total_size += 1UL * this->_internal_displays_size();
  for (const auto& msg : this->displays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 elapsed_realtime_nanos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_elapsed_realtime_nanos());
    }

    // optional int64 vsync_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_vsync_id());
    }

    // optional bool displays_changed = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionTraceEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TransactionTraceEntry*>(
      &from));
}

void TransactionTraceEntry::MergeFrom(const TransactionTraceEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TransactionTraceEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  added_layers_.MergeFrom(from.added_layers_);
  destroyed_layers_.MergeFrom(from.destroyed_layers_);
  added_displays_.MergeFrom(from.added_displays_);
  removed_displays_.MergeFrom(from.removed_displays_);
  destroyed_layer_handles_.MergeFrom(from.destroyed_layer_handles_);
  displays_.MergeFrom(from.displays_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      elapsed_realtime_nanos_ = from.elapsed_realtime_nanos_;
    }
    if (cached_has_bits & 0x00000002u) {
      vsync_id_ = from.vsync_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      displays_changed_ = from.displays_changed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TransactionTraceEntry::CopyFrom(const TransactionTraceEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TransactionTraceEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionTraceEntry::IsInitialized() const {
  return true;
}

void TransactionTraceEntry::InternalSwap(TransactionTraceEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transactions_.InternalSwap(&other->transactions_);
  added_layers_.InternalSwap(&other->added_layers_);
  destroyed_layers_.InternalSwap(&other->destroyed_layers_);
  added_displays_.InternalSwap(&other->added_displays_);
  removed_displays_.InternalSwap(&other->removed_displays_);
  destroyed_layer_handles_.InternalSwap(&other->destroyed_layer_handles_);
  displays_.InternalSwap(&other->displays_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionTraceEntry, displays_changed_)
      + sizeof(TransactionTraceEntry::displays_changed_)
      - PROTOBUF_FIELD_OFFSET(TransactionTraceEntry, elapsed_realtime_nanos_)>(
          reinterpret_cast<char*>(&elapsed_realtime_nanos_),
          reinterpret_cast<char*>(&other->elapsed_realtime_nanos_));
}

std::string TransactionTraceEntry::GetTypeName() const {
  return "perfetto.protos.TransactionTraceEntry";
}


// ===================================================================

class DisplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayInfo>()._has_bits_);
  static void set_has_layer_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_logical_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_logical_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::Transform& transform_inverse(const DisplayInfo* msg);
  static void set_has_transform_inverse(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::Transform& transform(const DisplayInfo* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_receives_input(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_secure(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_virtual(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rotation_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_transform_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::perfetto::protos::Transform&
DisplayInfo::_Internal::transform_inverse(const DisplayInfo* msg) {
  return *msg->transform_inverse_;
}
const ::perfetto::protos::Transform&
DisplayInfo::_Internal::transform(const DisplayInfo* msg) {
  return *msg->transform_;
}
DisplayInfo::DisplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DisplayInfo)
}
DisplayInfo::DisplayInfo(const DisplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_transform_inverse()) {
    transform_inverse_ = new ::perfetto::protos::Transform(*from.transform_inverse_);
  } else {
    transform_inverse_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::perfetto::protos::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&layer_stack_, &from.layer_stack_,
    static_cast<size_t>(reinterpret_cast<char*>(&transform_hint_) -
    reinterpret_cast<char*>(&layer_stack_)) + sizeof(transform_hint_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DisplayInfo)
}

inline void DisplayInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_inverse_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transform_hint_) -
    reinterpret_cast<char*>(&transform_inverse_)) + sizeof(transform_hint_));
}

DisplayInfo::~DisplayInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DisplayInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transform_inverse_;
  if (this != internal_default_instance()) delete transform_;
}

void DisplayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DisplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DisplayInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(transform_inverse_ != nullptr);
      transform_inverse_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(transform_ != nullptr);
      transform_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&layer_stack_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_secure_) -
        reinterpret_cast<char*>(&layer_stack_)) + sizeof(is_secure_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&is_primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transform_hint_) -
        reinterpret_cast<char*>(&is_primary_)) + sizeof(transform_hint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisplayInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 layer_stack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_layer_stack(&has_bits);
          layer_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 display_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_display_id(&has_bits);
          display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 logical_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_logical_width(&has_bits);
          logical_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 logical_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_logical_height(&has_bits);
          logical_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.Transform transform_inverse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform_inverse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.Transform transform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool receives_input = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_receives_input(&has_bits);
          receives_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_secure = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_secure(&has_bits);
          is_secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_primary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_primary(&has_bits);
          is_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_virtual = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_virtual(&has_bits);
          is_virtual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rotation_flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_rotation_flags(&has_bits);
          rotation_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 transform_hint = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_transform_hint(&has_bits);
          transform_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisplayInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DisplayInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 layer_stack = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_layer_stack(), target);
  }

  // optional int32 display_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_display_id(), target);
  }

  // optional int32 logical_width = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_logical_width(), target);
  }

  // optional int32 logical_height = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_logical_height(), target);
  }

  // optional .perfetto.protos.Transform transform_inverse = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::transform_inverse(this),
        _Internal::transform_inverse(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.Transform transform = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // optional bool receives_input = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_receives_input(), target);
  }

  // optional bool is_secure = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_secure(), target);
  }

  // optional bool is_primary = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_primary(), target);
  }

  // optional bool is_virtual = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_virtual(), target);
  }

  // optional int32 rotation_flags = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_rotation_flags(), target);
  }

  // optional int32 transform_hint = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_transform_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DisplayInfo)
  return target;
}

size_t DisplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DisplayInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.Transform transform_inverse = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transform_inverse_);
    }

    // optional .perfetto.protos.Transform transform = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transform_);
    }

    // optional uint32 layer_stack = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layer_stack());
    }

    // optional int32 display_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());
    }

    // optional int32 logical_width = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logical_width());
    }

    // optional int32 logical_height = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logical_height());
    }

    // optional bool receives_input = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_secure = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_primary = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_virtual = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional int32 rotation_flags = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rotation_flags());
    }

    // optional int32 transform_hint = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_transform_hint());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisplayInfo*>(
      &from));
}

void DisplayInfo::MergeFrom(const DisplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DisplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_transform_inverse()->::perfetto::protos::Transform::MergeFrom(from._internal_transform_inverse());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_transform()->::perfetto::protos::Transform::MergeFrom(from._internal_transform());
    }
    if (cached_has_bits & 0x00000004u) {
      layer_stack_ = from.layer_stack_;
    }
    if (cached_has_bits & 0x00000008u) {
      display_id_ = from.display_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      logical_width_ = from.logical_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      logical_height_ = from.logical_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      receives_input_ = from.receives_input_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_secure_ = from.is_secure_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_primary_ = from.is_primary_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_virtual_ = from.is_virtual_;
    }
    if (cached_has_bits & 0x00000400u) {
      rotation_flags_ = from.rotation_flags_;
    }
    if (cached_has_bits & 0x00000800u) {
      transform_hint_ = from.transform_hint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisplayInfo::CopyFrom(const DisplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DisplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayInfo::IsInitialized() const {
  return true;
}

void DisplayInfo::InternalSwap(DisplayInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplayInfo, transform_hint_)
      + sizeof(DisplayInfo::transform_hint_)
      - PROTOBUF_FIELD_OFFSET(DisplayInfo, transform_inverse_)>(
          reinterpret_cast<char*>(&transform_inverse_),
          reinterpret_cast<char*>(&other->transform_inverse_));
}

std::string DisplayInfo::GetTypeName() const {
  return "perfetto.protos.DisplayInfo";
}


// ===================================================================

class LayerCreationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerCreationArgs>()._has_bits_);
  static void set_has_layer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mirror_from_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_add_to_root(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_layer_stack_to_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

LayerCreationArgs::LayerCreationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LayerCreationArgs)
}
LayerCreationArgs::LayerCreationArgs(const LayerCreationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&layer_id_, &from.layer_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&layer_stack_to_mirror_) -
    reinterpret_cast<char*>(&layer_id_)) + sizeof(layer_stack_to_mirror_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LayerCreationArgs)
}

inline void LayerCreationArgs::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&layer_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layer_stack_to_mirror_) -
    reinterpret_cast<char*>(&layer_id_)) + sizeof(layer_stack_to_mirror_));
}

LayerCreationArgs::~LayerCreationArgs() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LayerCreationArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerCreationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void LayerCreationArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayerCreationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LayerCreationArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&layer_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&layer_stack_to_mirror_) -
        reinterpret_cast<char*>(&layer_id_)) + sizeof(layer_stack_to_mirror_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LayerCreationArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 layer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_layer_id(&has_bits);
          layer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 parent_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_parent_id(&has_bits);
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mirror_from_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mirror_from_id(&has_bits);
          mirror_from_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool add_to_root = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_add_to_root(&has_bits);
          add_to_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 layer_stack_to_mirror = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_layer_stack_to_mirror(&has_bits);
          layer_stack_to_mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerCreationArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LayerCreationArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 layer_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_layer_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional uint32 parent_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_parent_id(), target);
  }

  // optional uint32 mirror_from_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mirror_from_id(), target);
  }

  // optional bool add_to_root = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_add_to_root(), target);
  }

  // optional uint32 layer_stack_to_mirror = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_layer_stack_to_mirror(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LayerCreationArgs)
  return target;
}

size_t LayerCreationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LayerCreationArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 layer_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layer_id());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 parent_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parent_id());
    }

    // optional uint32 mirror_from_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mirror_from_id());
    }

    // optional bool add_to_root = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 layer_stack_to_mirror = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layer_stack_to_mirror());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerCreationArgs::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LayerCreationArgs*>(
      &from));
}

void LayerCreationArgs::MergeFrom(const LayerCreationArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LayerCreationArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      layer_id_ = from.layer_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      parent_id_ = from.parent_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      mirror_from_id_ = from.mirror_from_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      add_to_root_ = from.add_to_root_;
    }
    if (cached_has_bits & 0x00000040u) {
      layer_stack_to_mirror_ = from.layer_stack_to_mirror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LayerCreationArgs::CopyFrom(const LayerCreationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LayerCreationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerCreationArgs::IsInitialized() const {
  return true;
}

void LayerCreationArgs::InternalSwap(LayerCreationArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayerCreationArgs, layer_stack_to_mirror_)
      + sizeof(LayerCreationArgs::layer_stack_to_mirror_)
      - PROTOBUF_FIELD_OFFSET(LayerCreationArgs, layer_id_)>(
          reinterpret_cast<char*>(&layer_id_),
          reinterpret_cast<char*>(&other->layer_id_));
}

std::string LayerCreationArgs::GetTypeName() const {
  return "perfetto.protos.LayerCreationArgs";
}


// ===================================================================

class Transform::_Internal {
 public:
  using HasBits = decltype(std::declval<Transform>()._has_bits_);
  static void set_has_dsdx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dtdx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dtdy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dsdy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ty(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&dsdx_, &from.dsdx_,
    static_cast<size_t>(reinterpret_cast<char*>(&ty_) -
    reinterpret_cast<char*>(&dsdx_)) + sizeof(ty_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Transform)
}

inline void Transform::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dsdx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ty_) -
    reinterpret_cast<char*>(&dsdx_)) + sizeof(ty_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Transform)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Transform)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&dsdx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ty_) -
        reinterpret_cast<char*>(&dsdx_)) + sizeof(ty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transform::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float dsdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_dsdx(&has_bits);
          dsdx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dtdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_dtdx(&has_bits);
          dtdx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dtdy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_dtdy(&has_bits);
          dtdy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dsdy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_dsdy(&has_bits);
          dsdy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_tx(&has_bits);
          tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ty = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_ty(&has_bits);
          ty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transform::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Transform)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dsdx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_dsdx(), target);
  }

  // optional float dtdx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_dtdx(), target);
  }

  // optional float dtdy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_dtdy(), target);
  }

  // optional float dsdy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_dsdy(), target);
  }

  // optional float tx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_tx(), target);
  }

  // optional float ty = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_ty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Transform)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float dsdx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float dtdx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float dtdy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float dsdy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float tx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float ty = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transform::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Transform*>(
      &from));
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      dsdx_ = from.dsdx_;
    }
    if (cached_has_bits & 0x00000002u) {
      dtdx_ = from.dtdx_;
    }
    if (cached_has_bits & 0x00000004u) {
      dtdy_ = from.dtdy_;
    }
    if (cached_has_bits & 0x00000008u) {
      dsdy_ = from.dsdy_;
    }
    if (cached_has_bits & 0x00000010u) {
      tx_ = from.tx_;
    }
    if (cached_has_bits & 0x00000020u) {
      ty_ = from.ty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, ty_)
      + sizeof(Transform::ty_)
      - PROTOBUF_FIELD_OFFSET(Transform, dsdx_)>(
          reinterpret_cast<char*>(&dsdx_),
          reinterpret_cast<char*>(&other->dsdx_));
}

std::string Transform::GetTypeName() const {
  return "perfetto.protos.Transform";
}


// ===================================================================

class TransactionState::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionState>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vsync_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_input_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_post_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TransactionState::TransactionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  layer_changes_(arena),
  display_changes_(arena),
  merged_transaction_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TransactionState)
}
TransactionState::TransactionState(const TransactionState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      layer_changes_(from.layer_changes_),
      display_changes_(from.display_changes_),
      merged_transaction_ids_(from.merged_transaction_ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_event_id_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(input_event_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TransactionState)
}

inline void TransactionState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_event_id_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(input_event_id_));
}

TransactionState::~TransactionState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TransactionState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TransactionState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_changes_.Clear();
  display_changes_.Clear();
  merged_transaction_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_event_id_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(input_event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TransactionState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 vsync_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_vsync_id(&has_bits);
          vsync_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 input_event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_input_event_id(&has_bits);
          input_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 post_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_post_time(&has_bits);
          post_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 transaction_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_transaction_id(&has_bits);
          transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.LayerState layer_changes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.DisplayState display_changes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 merged_transaction_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_merged_transaction_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_merged_transaction_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TransactionState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // optional int32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  // optional int64 vsync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_vsync_id(), target);
  }

  // optional int32 input_event_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_input_event_id(), target);
  }

  // optional int64 post_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_post_time(), target);
  }

  // optional uint64 transaction_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_transaction_id(), target);
  }

  // repeated .perfetto.protos.LayerState layer_changes = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layer_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_layer_changes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.DisplayState display_changes = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_display_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_display_changes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 merged_transaction_ids = 9;
  for (int i = 0, n = this->_internal_merged_transaction_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_merged_transaction_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TransactionState)
  return target;
}

size_t TransactionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TransactionState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.LayerState layer_changes = 7;
  total_size += 1UL * this->_internal_layer_changes_size();
  for (const auto& msg : this->layer_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.DisplayState display_changes = 8;
  total_size += 1UL * this->_internal_display_changes_size();
  for (const auto& msg : this->display_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 merged_transaction_ids = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->merged_transaction_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_merged_transaction_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional int32 uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
    }

    // optional int64 vsync_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_vsync_id());
    }

    // optional int64 post_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_post_time());
    }

    // optional uint64 transaction_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transaction_id());
    }

    // optional int32 input_event_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_input_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TransactionState*>(
      &from));
}

void TransactionState::MergeFrom(const TransactionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TransactionState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layer_changes_.MergeFrom(from.layer_changes_);
  display_changes_.MergeFrom(from.display_changes_);
  merged_transaction_ids_.MergeFrom(from.merged_transaction_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      vsync_id_ = from.vsync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      post_time_ = from.post_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      input_event_id_ = from.input_event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TransactionState::CopyFrom(const TransactionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TransactionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionState::IsInitialized() const {
  return true;
}

void TransactionState::InternalSwap(TransactionState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_changes_.InternalSwap(&other->layer_changes_);
  display_changes_.InternalSwap(&other->display_changes_);
  merged_transaction_ids_.InternalSwap(&other->merged_transaction_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionState, input_event_id_)
      + sizeof(TransactionState::input_event_id_)
      - PROTOBUF_FIELD_OFFSET(TransactionState, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

std::string TransactionState::GetTypeName() const {
  return "perfetto.protos.TransactionState";
}


// ===================================================================

class LayerState_Matrix22::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerState_Matrix22>()._has_bits_);
  static void set_has_dsdx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dtdx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dtdy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dsdy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LayerState_Matrix22::LayerState_Matrix22(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LayerState.Matrix22)
}
LayerState_Matrix22::LayerState_Matrix22(const LayerState_Matrix22& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&dsdx_, &from.dsdx_,
    static_cast<size_t>(reinterpret_cast<char*>(&dsdy_) -
    reinterpret_cast<char*>(&dsdx_)) + sizeof(dsdy_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LayerState.Matrix22)
}

inline void LayerState_Matrix22::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dsdx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dsdy_) -
    reinterpret_cast<char*>(&dsdx_)) + sizeof(dsdy_));
}

LayerState_Matrix22::~LayerState_Matrix22() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LayerState.Matrix22)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerState_Matrix22::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LayerState_Matrix22::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayerState_Matrix22::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LayerState.Matrix22)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dsdx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dsdy_) -
        reinterpret_cast<char*>(&dsdx_)) + sizeof(dsdy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LayerState_Matrix22::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float dsdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_dsdx(&has_bits);
          dsdx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dtdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_dtdx(&has_bits);
          dtdx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dtdy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_dtdy(&has_bits);
          dtdy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dsdy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_dsdy(&has_bits);
          dsdy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerState_Matrix22::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LayerState.Matrix22)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dsdx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_dsdx(), target);
  }

  // optional float dtdx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_dtdx(), target);
  }

  // optional float dtdy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_dtdy(), target);
  }

  // optional float dsdy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_dsdy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LayerState.Matrix22)
  return target;
}

size_t LayerState_Matrix22::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LayerState.Matrix22)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float dsdx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float dtdx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float dtdy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float dsdy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerState_Matrix22::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LayerState_Matrix22*>(
      &from));
}

void LayerState_Matrix22::MergeFrom(const LayerState_Matrix22& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LayerState.Matrix22)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dsdx_ = from.dsdx_;
    }
    if (cached_has_bits & 0x00000002u) {
      dtdx_ = from.dtdx_;
    }
    if (cached_has_bits & 0x00000004u) {
      dtdy_ = from.dtdy_;
    }
    if (cached_has_bits & 0x00000008u) {
      dsdy_ = from.dsdy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LayerState_Matrix22::CopyFrom(const LayerState_Matrix22& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LayerState.Matrix22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerState_Matrix22::IsInitialized() const {
  return true;
}

void LayerState_Matrix22::InternalSwap(LayerState_Matrix22* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayerState_Matrix22, dsdy_)
      + sizeof(LayerState_Matrix22::dsdy_)
      - PROTOBUF_FIELD_OFFSET(LayerState_Matrix22, dsdx_)>(
          reinterpret_cast<char*>(&dsdx_),
          reinterpret_cast<char*>(&other->dsdx_));
}

std::string LayerState_Matrix22::GetTypeName() const {
  return "perfetto.protos.LayerState.Matrix22";
}


// ===================================================================

class LayerState_Color3::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerState_Color3>()._has_bits_);
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LayerState_Color3::LayerState_Color3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LayerState.Color3)
}
LayerState_Color3::LayerState_Color3(const LayerState_Color3& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LayerState.Color3)
}

inline void LayerState_Color3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

LayerState_Color3::~LayerState_Color3() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LayerState.Color3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerState_Color3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LayerState_Color3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayerState_Color3::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LayerState.Color3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&r_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LayerState_Color3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerState_Color3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LayerState.Color3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // optional float g = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // optional float b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LayerState.Color3)
  return target;
}

size_t LayerState_Color3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LayerState.Color3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float r = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float g = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float b = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerState_Color3::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LayerState_Color3*>(
      &from));
}

void LayerState_Color3::MergeFrom(const LayerState_Color3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LayerState.Color3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LayerState_Color3::CopyFrom(const LayerState_Color3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LayerState.Color3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerState_Color3::IsInitialized() const {
  return true;
}

void LayerState_Color3::InternalSwap(LayerState_Color3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayerState_Color3, b_)
      + sizeof(LayerState_Color3::b_)
      - PROTOBUF_FIELD_OFFSET(LayerState_Color3, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

std::string LayerState_Color3::GetTypeName() const {
  return "perfetto.protos.LayerState.Color3";
}


// ===================================================================

class LayerState_BufferData::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerState_BufferData>()._has_bits_);
  static void set_has_buffer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cached_buffer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pixel_format(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

LayerState_BufferData::LayerState_BufferData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LayerState.BufferData)
}
LayerState_BufferData::LayerState_BufferData(const LayerState_BufferData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&buffer_id_, &from.buffer_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&usage_) -
    reinterpret_cast<char*>(&buffer_id_)) + sizeof(usage_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LayerState.BufferData)
}

inline void LayerState_BufferData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buffer_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&usage_) -
    reinterpret_cast<char*>(&buffer_id_)) + sizeof(usage_));
}

LayerState_BufferData::~LayerState_BufferData() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LayerState.BufferData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerState_BufferData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LayerState_BufferData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayerState_BufferData::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LayerState.BufferData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&buffer_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usage_) -
        reinterpret_cast<char*>(&buffer_id_)) + sizeof(usage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LayerState_BufferData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 buffer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_buffer_id(&has_bits);
          buffer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 frame_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_frame_number(&has_bits);
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cached_buffer_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cached_buffer_id(&has_bits);
          cached_buffer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.LayerState.BufferData.PixelFormat pixel_format = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::LayerState_BufferData_PixelFormat_IsValid(val))) {
            _internal_set_pixel_format(static_cast<::perfetto::protos::LayerState_BufferData_PixelFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 usage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_usage(&has_bits);
          usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerState_BufferData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LayerState.BufferData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 buffer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_buffer_id(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional uint64 frame_number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_frame_number(), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // optional uint64 cached_buffer_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_cached_buffer_id(), target);
  }

  // optional .perfetto.protos.LayerState.BufferData.PixelFormat pixel_format = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_pixel_format(), target);
  }

  // optional uint64 usage = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_usage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LayerState.BufferData)
  return target;
}

size_t LayerState_BufferData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LayerState.BufferData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 buffer_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_buffer_id());
    }

    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint64 frame_number = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_frame_number());
    }

    // optional uint64 cached_buffer_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cached_buffer_id());
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional .perfetto.protos.LayerState.BufferData.PixelFormat pixel_format = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pixel_format());
    }

    // optional uint64 usage = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_usage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerState_BufferData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LayerState_BufferData*>(
      &from));
}

void LayerState_BufferData::MergeFrom(const LayerState_BufferData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LayerState.BufferData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      buffer_id_ = from.buffer_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_number_ = from.frame_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      cached_buffer_id_ = from.cached_buffer_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      pixel_format_ = from.pixel_format_;
    }
    if (cached_has_bits & 0x00000080u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LayerState_BufferData::CopyFrom(const LayerState_BufferData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LayerState.BufferData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerState_BufferData::IsInitialized() const {
  return true;
}

void LayerState_BufferData::InternalSwap(LayerState_BufferData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayerState_BufferData, usage_)
      + sizeof(LayerState_BufferData::usage_)
      - PROTOBUF_FIELD_OFFSET(LayerState_BufferData, buffer_id_)>(
          reinterpret_cast<char*>(&buffer_id_),
          reinterpret_cast<char*>(&other->buffer_id_));
}

std::string LayerState_BufferData::GetTypeName() const {
  return "perfetto.protos.LayerState.BufferData";
}


// ===================================================================

class LayerState_WindowInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerState_WindowInfo>()._has_bits_);
  static void set_has_layout_params_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_layout_params_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::RegionProto& touchable_region(const LayerState_WindowInfo* msg);
  static void set_has_touchable_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_surface_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_focusable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_has_wallpaper(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_global_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_crop_layer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_replace_touchable_region_with_crop(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::RectProto& touchable_region_crop(const LayerState_WindowInfo* msg);
  static void set_has_touchable_region_crop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::Transform& transform(const LayerState_WindowInfo* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_input_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::perfetto::protos::RegionProto&
LayerState_WindowInfo::_Internal::touchable_region(const LayerState_WindowInfo* msg) {
  return *msg->touchable_region_;
}
const ::perfetto::protos::RectProto&
LayerState_WindowInfo::_Internal::touchable_region_crop(const LayerState_WindowInfo* msg) {
  return *msg->touchable_region_crop_;
}
const ::perfetto::protos::Transform&
LayerState_WindowInfo::_Internal::transform(const LayerState_WindowInfo* msg) {
  return *msg->transform_;
}
void LayerState_WindowInfo::clear_touchable_region() {
  if (touchable_region_ != nullptr) touchable_region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LayerState_WindowInfo::clear_touchable_region_crop() {
  if (touchable_region_crop_ != nullptr) touchable_region_crop_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
LayerState_WindowInfo::LayerState_WindowInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LayerState.WindowInfo)
}
LayerState_WindowInfo::LayerState_WindowInfo(const LayerState_WindowInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_touchable_region()) {
    touchable_region_ = new ::perfetto::protos::RegionProto(*from.touchable_region_);
  } else {
    touchable_region_ = nullptr;
  }
  if (from._internal_has_touchable_region_crop()) {
    touchable_region_crop_ = new ::perfetto::protos::RectProto(*from.touchable_region_crop_);
  } else {
    touchable_region_crop_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::perfetto::protos::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&layout_params_flags_, &from.layout_params_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_config_) -
    reinterpret_cast<char*>(&layout_params_flags_)) + sizeof(input_config_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LayerState.WindowInfo)
}

inline void LayerState_WindowInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&touchable_region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_config_) -
    reinterpret_cast<char*>(&touchable_region_)) + sizeof(input_config_));
}

LayerState_WindowInfo::~LayerState_WindowInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LayerState.WindowInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerState_WindowInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete touchable_region_;
  if (this != internal_default_instance()) delete touchable_region_crop_;
  if (this != internal_default_instance()) delete transform_;
}

void LayerState_WindowInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayerState_WindowInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LayerState.WindowInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(touchable_region_ != nullptr);
      touchable_region_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(touchable_region_crop_ != nullptr);
      touchable_region_crop_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transform_ != nullptr);
      transform_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&layout_params_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_wallpaper_) -
        reinterpret_cast<char*>(&layout_params_flags_)) + sizeof(has_wallpaper_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&replace_touchable_region_with_crop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_config_) -
        reinterpret_cast<char*>(&replace_touchable_region_with_crop_)) + sizeof(input_config_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LayerState_WindowInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 layout_params_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_layout_params_flags(&has_bits);
          layout_params_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 layout_params_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_layout_params_type(&has_bits);
          layout_params_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegionProto touchable_region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_touchable_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 surface_inset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_surface_inset(&has_bits);
          surface_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool focusable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_focusable(&has_bits);
          focusable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_wallpaper = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_has_wallpaper(&has_bits);
          has_wallpaper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float global_scale_factor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_global_scale_factor(&has_bits);
          global_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crop_layer_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_crop_layer_id(&has_bits);
          crop_layer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool replace_touchable_region_with_crop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_replace_touchable_region_with_crop(&has_bits);
          replace_touchable_region_with_crop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto touchable_region_crop = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_touchable_region_crop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.Transform transform = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 input_config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_input_config(&has_bits);
          input_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerState_WindowInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LayerState.WindowInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 layout_params_flags = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_layout_params_flags(), target);
  }

  // optional int32 layout_params_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_layout_params_type(), target);
  }

  // optional .perfetto.protos.RegionProto touchable_region = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::touchable_region(this),
        _Internal::touchable_region(this).GetCachedSize(), target, stream);
  }

  // optional int32 surface_inset = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_surface_inset(), target);
  }

  // optional bool focusable = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_focusable(), target);
  }

  // optional bool has_wallpaper = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_has_wallpaper(), target);
  }

  // optional float global_scale_factor = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_global_scale_factor(), target);
  }

  // optional uint32 crop_layer_id = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_crop_layer_id(), target);
  }

  // optional bool replace_touchable_region_with_crop = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_replace_touchable_region_with_crop(), target);
  }

  // optional .perfetto.protos.RectProto touchable_region_crop = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::touchable_region_crop(this),
        _Internal::touchable_region_crop(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.Transform transform = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // optional uint32 input_config = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_input_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LayerState.WindowInfo)
  return target;
}

size_t LayerState_WindowInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LayerState.WindowInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.RegionProto touchable_region = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touchable_region_);
    }

    // optional .perfetto.protos.RectProto touchable_region_crop = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touchable_region_crop_);
    }

    // optional .perfetto.protos.Transform transform = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transform_);
    }

    // optional uint32 layout_params_flags = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layout_params_flags());
    }

    // optional int32 layout_params_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_layout_params_type());
    }

    // optional int32 surface_inset = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_surface_inset());
    }

    // optional bool focusable = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool has_wallpaper = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool replace_touchable_region_with_crop = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional float global_scale_factor = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional uint32 crop_layer_id = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crop_layer_id());
    }

    // optional uint32 input_config = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_input_config());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerState_WindowInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LayerState_WindowInfo*>(
      &from));
}

void LayerState_WindowInfo::MergeFrom(const LayerState_WindowInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LayerState.WindowInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_touchable_region()->::perfetto::protos::RegionProto::MergeFrom(from._internal_touchable_region());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_touchable_region_crop()->::perfetto::protos::RectProto::MergeFrom(from._internal_touchable_region_crop());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_transform()->::perfetto::protos::Transform::MergeFrom(from._internal_transform());
    }
    if (cached_has_bits & 0x00000008u) {
      layout_params_flags_ = from.layout_params_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      layout_params_type_ = from.layout_params_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      surface_inset_ = from.surface_inset_;
    }
    if (cached_has_bits & 0x00000040u) {
      focusable_ = from.focusable_;
    }
    if (cached_has_bits & 0x00000080u) {
      has_wallpaper_ = from.has_wallpaper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      replace_touchable_region_with_crop_ = from.replace_touchable_region_with_crop_;
    }
    if (cached_has_bits & 0x00000200u) {
      global_scale_factor_ = from.global_scale_factor_;
    }
    if (cached_has_bits & 0x00000400u) {
      crop_layer_id_ = from.crop_layer_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      input_config_ = from.input_config_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LayerState_WindowInfo::CopyFrom(const LayerState_WindowInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LayerState.WindowInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerState_WindowInfo::IsInitialized() const {
  return true;
}

void LayerState_WindowInfo::InternalSwap(LayerState_WindowInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayerState_WindowInfo, input_config_)
      + sizeof(LayerState_WindowInfo::input_config_)
      - PROTOBUF_FIELD_OFFSET(LayerState_WindowInfo, touchable_region_)>(
          reinterpret_cast<char*>(&touchable_region_),
          reinterpret_cast<char*>(&other->touchable_region_));
}

std::string LayerState_WindowInfo::GetTypeName() const {
  return "perfetto.protos.LayerState.WindowInfo";
}


// ===================================================================

class LayerState::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerState>()._has_bits_);
  static void set_has_layer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_what(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_layer_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::perfetto::protos::LayerState_Matrix22& matrix(const LayerState* msg);
  static void set_has_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_corner_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_background_blur_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_relative_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::perfetto::protos::LayerState_Color3& color(const LayerState* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::RegionProto& transparent_region(const LayerState* msg);
  static void set_has_transparent_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_transform_to_display_inverse(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::perfetto::protos::RectProto& crop(const LayerState* msg);
  static void set_has_crop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::LayerState_BufferData& buffer_data(const LayerState* msg);
  static void set_has_buffer_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_api(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_has_sideband_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::perfetto::protos::ColorTransformProto& color_transform(const LayerState* msg);
  static void set_has_color_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::LayerState_WindowInfo& window_info_handle(const LayerState* msg);
  static void set_has_window_info_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bg_color_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_bg_color_dataspace(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_color_space_agnostic(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_shadow_radius(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_frame_rate_selection_priority(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_frame_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_frame_rate_compatibility(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_change_frame_rate_strategy(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_fixed_transform_hint(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_auto_refresh(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_is_trusted_overlay(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::perfetto::protos::RectProto& buffer_crop(const LayerState* msg);
  static void set_has_buffer_crop(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::perfetto::protos::RectProto& destination_frame(const LayerState* msg);
  static void set_has_destination_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_drop_input_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
};

const ::perfetto::protos::LayerState_Matrix22&
LayerState::_Internal::matrix(const LayerState* msg) {
  return *msg->matrix_;
}
const ::perfetto::protos::LayerState_Color3&
LayerState::_Internal::color(const LayerState* msg) {
  return *msg->color_;
}
const ::perfetto::protos::RegionProto&
LayerState::_Internal::transparent_region(const LayerState* msg) {
  return *msg->transparent_region_;
}
const ::perfetto::protos::RectProto&
LayerState::_Internal::crop(const LayerState* msg) {
  return *msg->crop_;
}
const ::perfetto::protos::LayerState_BufferData&
LayerState::_Internal::buffer_data(const LayerState* msg) {
  return *msg->buffer_data_;
}
const ::perfetto::protos::ColorTransformProto&
LayerState::_Internal::color_transform(const LayerState* msg) {
  return *msg->color_transform_;
}
const ::perfetto::protos::LayerState_WindowInfo&
LayerState::_Internal::window_info_handle(const LayerState* msg) {
  return *msg->window_info_handle_;
}
const ::perfetto::protos::RectProto&
LayerState::_Internal::buffer_crop(const LayerState* msg) {
  return *msg->buffer_crop_;
}
const ::perfetto::protos::RectProto&
LayerState::_Internal::destination_frame(const LayerState* msg) {
  return *msg->destination_frame_;
}
void LayerState::clear_transparent_region() {
  if (transparent_region_ != nullptr) transparent_region_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LayerState::clear_crop() {
  if (crop_ != nullptr) crop_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LayerState::clear_color_transform() {
  if (color_transform_ != nullptr) color_transform_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void LayerState::clear_blur_regions() {
  blur_regions_.Clear();
}
void LayerState::clear_buffer_crop() {
  if (buffer_crop_ != nullptr) buffer_crop_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void LayerState::clear_destination_frame() {
  if (destination_frame_ != nullptr) destination_frame_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
LayerState::LayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  blur_regions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LayerState)
}
LayerState::LayerState(const LayerState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      blur_regions_(from.blur_regions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_matrix()) {
    matrix_ = new ::perfetto::protos::LayerState_Matrix22(*from.matrix_);
  } else {
    matrix_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::perfetto::protos::LayerState_Color3(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_transparent_region()) {
    transparent_region_ = new ::perfetto::protos::RegionProto(*from.transparent_region_);
  } else {
    transparent_region_ = nullptr;
  }
  if (from._internal_has_crop()) {
    crop_ = new ::perfetto::protos::RectProto(*from.crop_);
  } else {
    crop_ = nullptr;
  }
  if (from._internal_has_buffer_data()) {
    buffer_data_ = new ::perfetto::protos::LayerState_BufferData(*from.buffer_data_);
  } else {
    buffer_data_ = nullptr;
  }
  if (from._internal_has_color_transform()) {
    color_transform_ = new ::perfetto::protos::ColorTransformProto(*from.color_transform_);
  } else {
    color_transform_ = nullptr;
  }
  if (from._internal_has_window_info_handle()) {
    window_info_handle_ = new ::perfetto::protos::LayerState_WindowInfo(*from.window_info_handle_);
  } else {
    window_info_handle_ = nullptr;
  }
  if (from._internal_has_buffer_crop()) {
    buffer_crop_ = new ::perfetto::protos::RectProto(*from.buffer_crop_);
  } else {
    buffer_crop_ = nullptr;
  }
  if (from._internal_has_destination_frame()) {
    destination_frame_ = new ::perfetto::protos::RectProto(*from.destination_frame_);
  } else {
    destination_frame_ = nullptr;
  }
  ::memcpy(&what_, &from.what_,
    static_cast<size_t>(reinterpret_cast<char*>(&drop_input_mode_) -
    reinterpret_cast<char*>(&what_)) + sizeof(drop_input_mode_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LayerState)
}

inline void LayerState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matrix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drop_input_mode_) -
    reinterpret_cast<char*>(&matrix_)) + sizeof(drop_input_mode_));
}

LayerState::~LayerState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LayerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete matrix_;
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete transparent_region_;
  if (this != internal_default_instance()) delete crop_;
  if (this != internal_default_instance()) delete buffer_data_;
  if (this != internal_default_instance()) delete color_transform_;
  if (this != internal_default_instance()) delete window_info_handle_;
  if (this != internal_default_instance()) delete buffer_crop_;
  if (this != internal_default_instance()) delete destination_frame_;
}

void LayerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LayerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blur_regions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(matrix_ != nullptr);
      matrix_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transparent_region_ != nullptr);
      transparent_region_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(crop_ != nullptr);
      crop_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(buffer_data_ != nullptr);
      buffer_data_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(color_transform_ != nullptr);
      color_transform_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(window_info_handle_ != nullptr);
      window_info_handle_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(buffer_crop_ != nullptr);
      buffer_crop_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(destination_frame_ != nullptr);
    destination_frame_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&what_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&what_)) + sizeof(h_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&layer_stack_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alpha_) -
        reinterpret_cast<char*>(&layer_stack_)) + sizeof(alpha_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&transform_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bg_color_dataspace_) -
        reinterpret_cast<char*>(&transform_)) + sizeof(bg_color_dataspace_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&shadow_radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_trusted_overlay_) -
        reinterpret_cast<char*>(&shadow_radius_)) + sizeof(is_trusted_overlay_));
  }
  drop_input_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LayerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 layer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_layer_id(&_has_bits_);
          layer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 what = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_what(&_has_bits_);
          what_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_x(&_has_bits_);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_y(&_has_bits_);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_z(&_has_bits_);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 w = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_w(&_has_bits_);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 h = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_h(&_has_bits_);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 layer_stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_layer_stack(&_has_bits_);
          layer_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_flags(&_has_bits_);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mask = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_mask(&_has_bits_);
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.LayerState.Matrix22 matrix = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float corner_radius = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_corner_radius(&_has_bits_);
          corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 background_blur_radius = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_background_blur_radius(&_has_bits_);
          background_blur_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 parent_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_parent_id(&_has_bits_);
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 relative_parent_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_relative_parent_id(&_has_bits_);
          relative_parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float alpha = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_alpha(&_has_bits_);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.LayerState.Color3 color = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegionProto transparent_region = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_transparent_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 transform = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_transform(&_has_bits_);
          transform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool transform_to_display_inverse = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_transform_to_display_inverse(&_has_bits_);
          transform_to_display_inverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto crop = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_crop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.LayerState.BufferData buffer_data = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 api = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_api(&_has_bits_);
          api_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_sideband_stream = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_has_sideband_stream(&_has_bits_);
          has_sideband_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ColorTransformProto color_transform = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.BlurRegion blur_regions = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_blur_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.LayerState.WindowInfo window_info_handle = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_info_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float bg_color_alpha = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _Internal::set_has_bg_color_alpha(&_has_bits_);
          bg_color_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bg_color_dataspace = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_bg_color_dataspace(&_has_bits_);
          bg_color_dataspace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool color_space_agnostic = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_color_space_agnostic(&_has_bits_);
          color_space_agnostic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float shadow_radius = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_shadow_radius(&_has_bits_);
          shadow_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 frame_rate_selection_priority = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_frame_rate_selection_priority(&_has_bits_);
          frame_rate_selection_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float frame_rate = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_frame_rate(&_has_bits_);
          frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 frame_rate_compatibility = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_frame_rate_compatibility(&_has_bits_);
          frame_rate_compatibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 change_frame_rate_strategy = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_change_frame_rate_strategy(&_has_bits_);
          change_frame_rate_strategy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fixed_transform_hint = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_fixed_transform_hint(&_has_bits_);
          fixed_transform_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 frame_number = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_frame_number(&_has_bits_);
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_refresh = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_auto_refresh(&_has_bits_);
          auto_refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_trusted_overlay = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_trusted_overlay(&_has_bits_);
          is_trusted_overlay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto buffer_crop = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer_crop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto destination_frame = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.LayerState.DropInputMode drop_input_mode = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::LayerState_DropInputMode_IsValid(val))) {
            _internal_set_drop_input_mode(static_cast<::perfetto::protos::LayerState_DropInputMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(42, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LayerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 layer_id = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_layer_id(), target);
  }

  // optional uint64 what = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_what(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // optional int32 z = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_z(), target);
  }

  // optional uint32 w = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_w(), target);
  }

  // optional uint32 h = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_h(), target);
  }

  // optional uint32 layer_stack = 8;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_layer_stack(), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_flags(), target);
  }

  // optional uint32 mask = 10;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_mask(), target);
  }

  // optional .perfetto.protos.LayerState.Matrix22 matrix = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::matrix(this),
        _Internal::matrix(this).GetCachedSize(), target, stream);
  }

  // optional float corner_radius = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_corner_radius(), target);
  }

  // optional uint32 background_blur_radius = 13;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_background_blur_radius(), target);
  }

  // optional uint32 parent_id = 14;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_parent_id(), target);
  }

  // optional uint32 relative_parent_id = 15;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_relative_parent_id(), target);
  }

  // optional float alpha = 16;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_alpha(), target);
  }

  // optional .perfetto.protos.LayerState.Color3 color = 17;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.RegionProto transparent_region = 18;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::transparent_region(this),
        _Internal::transparent_region(this).GetCachedSize(), target, stream);
  }

  // optional uint32 transform = 19;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_transform(), target);
  }

  // optional bool transform_to_display_inverse = 20;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_transform_to_display_inverse(), target);
  }

  // optional .perfetto.protos.RectProto crop = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::crop(this),
        _Internal::crop(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.LayerState.BufferData buffer_data = 22;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::buffer_data(this),
        _Internal::buffer_data(this).GetCachedSize(), target, stream);
  }

  // optional int32 api = 23;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_api(), target);
  }

  // optional bool has_sideband_stream = 24;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_has_sideband_stream(), target);
  }

  // optional .perfetto.protos.ColorTransformProto color_transform = 25;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::color_transform(this),
        _Internal::color_transform(this).GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.BlurRegion blur_regions = 26;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blur_regions_size()); i < n; i++) {
    const auto& repfield = this->_internal_blur_regions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.LayerState.WindowInfo window_info_handle = 27;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::window_info_handle(this),
        _Internal::window_info_handle(this).GetCachedSize(), target, stream);
  }

  // optional float bg_color_alpha = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_bg_color_alpha(), target);
  }

  // optional int32 bg_color_dataspace = 29;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_bg_color_dataspace(), target);
  }

  // optional bool color_space_agnostic = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_color_space_agnostic(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float shadow_radius = 31;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_shadow_radius(), target);
  }

  // optional int32 frame_rate_selection_priority = 32;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_frame_rate_selection_priority(), target);
  }

  // optional float frame_rate = 33;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(33, this->_internal_frame_rate(), target);
  }

  // optional int32 frame_rate_compatibility = 34;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_frame_rate_compatibility(), target);
  }

  // optional int32 change_frame_rate_strategy = 35;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_change_frame_rate_strategy(), target);
  }

  // optional uint32 fixed_transform_hint = 36;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_fixed_transform_hint(), target);
  }

  // optional uint64 frame_number = 37;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(37, this->_internal_frame_number(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool auto_refresh = 38;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_auto_refresh(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_trusted_overlay = 39;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_is_trusted_overlay(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.RectProto buffer_crop = 40;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::buffer_crop(this),
        _Internal::buffer_crop(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.RectProto destination_frame = 41;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::destination_frame(this),
        _Internal::destination_frame(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .perfetto.protos.LayerState.DropInputMode drop_input_mode = 42;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      42, this->_internal_drop_input_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LayerState)
  return target;
}

size_t LayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LayerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.BlurRegion blur_regions = 26;
  total_size += 2UL * this->_internal_blur_regions_size();
  for (const auto& msg : this->blur_regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.LayerState.Matrix22 matrix = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *matrix_);
    }

    // optional .perfetto.protos.LayerState.Color3 color = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .perfetto.protos.RegionProto transparent_region = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transparent_region_);
    }

    // optional .perfetto.protos.RectProto crop = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crop_);
    }

    // optional .perfetto.protos.LayerState.BufferData buffer_data = 22;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *buffer_data_);
    }

    // optional .perfetto.protos.ColorTransformProto color_transform = 25;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_transform_);
    }

    // optional .perfetto.protos.LayerState.WindowInfo window_info_handle = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_info_handle_);
    }

    // optional .perfetto.protos.RectProto buffer_crop = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *buffer_crop_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .perfetto.protos.RectProto destination_frame = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *destination_frame_);
    }

    // optional uint64 what = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_what());
    }

    // optional uint32 layer_id = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layer_id());
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional int32 z = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
    }

    // optional uint32 w = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_w());
    }

    // optional uint32 h = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_h());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 layer_stack = 8;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layer_stack());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 mask = 10;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mask());
    }

    // optional float corner_radius = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional uint32 background_blur_radius = 13;
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_background_blur_radius());
    }

    // optional uint32 parent_id = 14;
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parent_id());
    }

    // optional uint32 relative_parent_id = 15;
    if (cached_has_bits & 0x00400000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_relative_parent_id());
    }

    // optional float alpha = 16;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 transform = 19;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_transform());
    }

    // optional int32 api = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_api());
    }

    // optional float bg_color_alpha = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional bool transform_to_display_inverse = 20;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool has_sideband_stream = 24;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool color_space_agnostic = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool auto_refresh = 38;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional int32 bg_color_dataspace = 29;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_bg_color_dataspace());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float shadow_radius = 31;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional int32 frame_rate_selection_priority = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_frame_rate_selection_priority());
    }

    // optional float frame_rate = 33;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional int32 frame_rate_compatibility = 34;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_frame_rate_compatibility());
    }

    // optional int32 change_frame_rate_strategy = 35;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_change_frame_rate_strategy());
    }

    // optional uint64 frame_number = 37;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_frame_number());
    }

    // optional uint32 fixed_transform_hint = 36;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_fixed_transform_hint());
    }

    // optional bool is_trusted_overlay = 39;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  // optional .perfetto.protos.LayerState.DropInputMode drop_input_mode = 42;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_drop_input_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LayerState*>(
      &from));
}

void LayerState::MergeFrom(const LayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LayerState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  blur_regions_.MergeFrom(from.blur_regions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_matrix()->::perfetto::protos::LayerState_Matrix22::MergeFrom(from._internal_matrix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_color()->::perfetto::protos::LayerState_Color3::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_transparent_region()->::perfetto::protos::RegionProto::MergeFrom(from._internal_transparent_region());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_crop()->::perfetto::protos::RectProto::MergeFrom(from._internal_crop());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_buffer_data()->::perfetto::protos::LayerState_BufferData::MergeFrom(from._internal_buffer_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_color_transform()->::perfetto::protos::ColorTransformProto::MergeFrom(from._internal_color_transform());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_window_info_handle()->::perfetto::protos::LayerState_WindowInfo::MergeFrom(from._internal_window_info_handle());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_buffer_crop()->::perfetto::protos::RectProto::MergeFrom(from._internal_buffer_crop());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_destination_frame()->::perfetto::protos::RectProto::MergeFrom(from._internal_destination_frame());
    }
    if (cached_has_bits & 0x00000200u) {
      what_ = from.what_;
    }
    if (cached_has_bits & 0x00000400u) {
      layer_id_ = from.layer_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00001000u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00002000u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00004000u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00008000u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      layer_stack_ = from.layer_stack_;
    }
    if (cached_has_bits & 0x00020000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00040000u) {
      mask_ = from.mask_;
    }
    if (cached_has_bits & 0x00080000u) {
      corner_radius_ = from.corner_radius_;
    }
    if (cached_has_bits & 0x00100000u) {
      background_blur_radius_ = from.background_blur_radius_;
    }
    if (cached_has_bits & 0x00200000u) {
      parent_id_ = from.parent_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      relative_parent_id_ = from.relative_parent_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      alpha_ = from.alpha_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      transform_ = from.transform_;
    }
    if (cached_has_bits & 0x02000000u) {
      api_ = from.api_;
    }
    if (cached_has_bits & 0x04000000u) {
      bg_color_alpha_ = from.bg_color_alpha_;
    }
    if (cached_has_bits & 0x08000000u) {
      transform_to_display_inverse_ = from.transform_to_display_inverse_;
    }
    if (cached_has_bits & 0x10000000u) {
      has_sideband_stream_ = from.has_sideband_stream_;
    }
    if (cached_has_bits & 0x20000000u) {
      color_space_agnostic_ = from.color_space_agnostic_;
    }
    if (cached_has_bits & 0x40000000u) {
      auto_refresh_ = from.auto_refresh_;
    }
    if (cached_has_bits & 0x80000000u) {
      bg_color_dataspace_ = from.bg_color_dataspace_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      shadow_radius_ = from.shadow_radius_;
    }
    if (cached_has_bits & 0x00000002u) {
      frame_rate_selection_priority_ = from.frame_rate_selection_priority_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_rate_ = from.frame_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_rate_compatibility_ = from.frame_rate_compatibility_;
    }
    if (cached_has_bits & 0x00000010u) {
      change_frame_rate_strategy_ = from.change_frame_rate_strategy_;
    }
    if (cached_has_bits & 0x00000020u) {
      frame_number_ = from.frame_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      fixed_transform_hint_ = from.fixed_transform_hint_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_trusted_overlay_ = from.is_trusted_overlay_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_drop_input_mode(from._internal_drop_input_mode());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LayerState::CopyFrom(const LayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerState::IsInitialized() const {
  return true;
}

void LayerState::InternalSwap(LayerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  blur_regions_.InternalSwap(&other->blur_regions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayerState, drop_input_mode_)
      + sizeof(LayerState::drop_input_mode_)
      - PROTOBUF_FIELD_OFFSET(LayerState, matrix_)>(
          reinterpret_cast<char*>(&matrix_),
          reinterpret_cast<char*>(&other->matrix_));
}

std::string LayerState::GetTypeName() const {
  return "perfetto.protos.LayerState";
}


// ===================================================================

class DisplayState::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayState>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_what(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_layer_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::perfetto::protos::RectProto& layer_stack_space_rect(const DisplayState* msg);
  static void set_has_layer_stack_space_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::RectProto& oriented_display_space_rect(const DisplayState* msg);
  static void set_has_oriented_display_space_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::perfetto::protos::RectProto&
DisplayState::_Internal::layer_stack_space_rect(const DisplayState* msg) {
  return *msg->layer_stack_space_rect_;
}
const ::perfetto::protos::RectProto&
DisplayState::_Internal::oriented_display_space_rect(const DisplayState* msg) {
  return *msg->oriented_display_space_rect_;
}
void DisplayState::clear_layer_stack_space_rect() {
  if (layer_stack_space_rect_ != nullptr) layer_stack_space_rect_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DisplayState::clear_oriented_display_space_rect() {
  if (oriented_display_space_rect_ != nullptr) oriented_display_space_rect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DisplayState::DisplayState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DisplayState)
}
DisplayState::DisplayState(const DisplayState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_layer_stack_space_rect()) {
    layer_stack_space_rect_ = new ::perfetto::protos::RectProto(*from.layer_stack_space_rect_);
  } else {
    layer_stack_space_rect_ = nullptr;
  }
  if (from._internal_has_oriented_display_space_rect()) {
    oriented_display_space_rect_ = new ::perfetto::protos::RectProto(*from.oriented_display_space_rect_);
  } else {
    oriented_display_space_rect_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DisplayState)
}

inline void DisplayState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&layer_stack_space_rect_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&layer_stack_space_rect_)) + sizeof(height_));
}

DisplayState::~DisplayState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DisplayState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisplayState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete layer_stack_space_rect_;
  if (this != internal_default_instance()) delete oriented_display_space_rect_;
}

void DisplayState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DisplayState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DisplayState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(layer_stack_space_rect_ != nullptr);
      layer_stack_space_rect_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(oriented_display_space_rect_ != nullptr);
      oriented_display_space_rect_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&id_)) + sizeof(width_));
  }
  height_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisplayState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 what = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_what(&has_bits);
          what_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 layer_stack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_layer_stack(&has_bits);
          layer_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto layer_stack_space_rect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_stack_space_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto oriented_display_space_rect = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_oriented_display_space_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisplayState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DisplayState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 what = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_what(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional uint32 layer_stack = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_layer_stack(), target);
  }

  // optional uint32 orientation = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_orientation(), target);
  }

  // optional .perfetto.protos.RectProto layer_stack_space_rect = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::layer_stack_space_rect(this),
        _Internal::layer_stack_space_rect(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.RectProto oriented_display_space_rect = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::oriented_display_space_rect(this),
        _Internal::oriented_display_space_rect(this).GetCachedSize(), target, stream);
  }

  // optional uint32 width = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_width(), target);
  }

  // optional uint32 height = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DisplayState)
  return target;
}

size_t DisplayState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DisplayState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.RectProto layer_stack_space_rect = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_stack_space_rect_);
    }

    // optional .perfetto.protos.RectProto oriented_display_space_rect = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oriented_display_space_rect_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional uint32 what = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_what());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 layer_stack = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layer_stack());
    }

    // optional uint32 orientation = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_orientation());
    }

    // optional uint32 width = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

  }
  // optional uint32 height = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisplayState*>(
      &from));
}

void DisplayState::MergeFrom(const DisplayState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DisplayState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_layer_stack_space_rect()->::perfetto::protos::RectProto::MergeFrom(from._internal_layer_stack_space_rect());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_oriented_display_space_rect()->::perfetto::protos::RectProto::MergeFrom(from._internal_oriented_display_space_rect());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      what_ = from.what_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      layer_stack_ = from.layer_stack_;
    }
    if (cached_has_bits & 0x00000040u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisplayState::CopyFrom(const DisplayState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DisplayState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayState::IsInitialized() const {
  return true;
}

void DisplayState::InternalSwap(DisplayState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplayState, height_)
      + sizeof(DisplayState::height_)
      - PROTOBUF_FIELD_OFFSET(DisplayState, layer_stack_space_rect_)>(
          reinterpret_cast<char*>(&layer_stack_space_rect_),
          reinterpret_cast<char*>(&other->layer_stack_space_rect_));
}

std::string DisplayState::GetTypeName() const {
  return "perfetto.protos.DisplayState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TransactionTraceFile*
Arena::CreateMaybeMessage< ::perfetto::protos::TransactionTraceFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TransactionTraceFile >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TransactionTraceEntry*
Arena::CreateMaybeMessage< ::perfetto::protos::TransactionTraceEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TransactionTraceEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DisplayInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::DisplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DisplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayerCreationArgs*
Arena::CreateMaybeMessage< ::perfetto::protos::LayerCreationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayerCreationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Transform*
Arena::CreateMaybeMessage< ::perfetto::protos::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TransactionState*
Arena::CreateMaybeMessage< ::perfetto::protos::TransactionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TransactionState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayerState_Matrix22*
Arena::CreateMaybeMessage< ::perfetto::protos::LayerState_Matrix22 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayerState_Matrix22 >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayerState_Color3*
Arena::CreateMaybeMessage< ::perfetto::protos::LayerState_Color3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayerState_Color3 >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayerState_BufferData*
Arena::CreateMaybeMessage< ::perfetto::protos::LayerState_BufferData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayerState_BufferData >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayerState_WindowInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::LayerState_WindowInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayerState_WindowInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayerState*
Arena::CreateMaybeMessage< ::perfetto::protos::LayerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayerState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DisplayState*
Arena::CreateMaybeMessage< ::perfetto::protos::DisplayState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DisplayState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
