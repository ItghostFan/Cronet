// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/data_source_config.proto

#include "protos/perfetto/config/data_source_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR DataSourceConfig::DataSourceConfig(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , legacy_config_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ftrace_config_(nullptr)
  , chrome_config_(nullptr)
  , inode_file_config_(nullptr)
  , process_stats_config_(nullptr)
  , sys_stats_config_(nullptr)
  , heapprofd_config_(nullptr)
  , android_power_config_(nullptr)
  , android_log_config_(nullptr)
  , gpu_counter_config_(nullptr)
  , packages_list_config_(nullptr)
  , java_hprof_config_(nullptr)
  , perf_event_config_(nullptr)
  , vulkan_memory_config_(nullptr)
  , track_event_config_(nullptr)
  , android_polled_state_config_(nullptr)
  , interceptor_config_(nullptr)
  , android_game_intervention_list_config_(nullptr)
  , statsd_tracing_config_(nullptr)
  , android_system_property_config_(nullptr)
  , system_info_config_(nullptr)
  , network_packet_trace_config_(nullptr)
  , surfaceflinger_layers_config_(nullptr)
  , surfaceflinger_transactions_config_(nullptr)
  , android_sdk_sysprop_guard_config_(nullptr)
  , for_testing_(nullptr)
  , target_buffer_(0u)
  , trace_duration_ms_(0u)
  , tracing_session_id_(uint64_t{0u})
  , stop_timeout_ms_(0u)
  , session_initiator_(0)

  , prefer_suspend_clock_for_duration_(false)
  , enable_extra_guardrails_(false){}
struct DataSourceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataSourceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataSourceConfigDefaultTypeInternal() {}
  union {
    DataSourceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataSourceConfigDefaultTypeInternal _DataSourceConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool DataSourceConfig_SessionInitiator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DataSourceConfig_SessionInitiator_strings[2] = {};

static const char DataSourceConfig_SessionInitiator_names[] =
  "SESSION_INITIATOR_TRUSTED_SYSTEM"
  "SESSION_INITIATOR_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DataSourceConfig_SessionInitiator_entries[] = {
  { {DataSourceConfig_SessionInitiator_names + 0, 32}, 1 },
  { {DataSourceConfig_SessionInitiator_names + 32, 29}, 0 },
};

static const int DataSourceConfig_SessionInitiator_entries_by_number[] = {
  1, // 0 -> SESSION_INITIATOR_UNSPECIFIED
  0, // 1 -> SESSION_INITIATOR_TRUSTED_SYSTEM
};

const std::string& DataSourceConfig_SessionInitiator_Name(
    DataSourceConfig_SessionInitiator value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DataSourceConfig_SessionInitiator_entries,
          DataSourceConfig_SessionInitiator_entries_by_number,
          2, DataSourceConfig_SessionInitiator_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DataSourceConfig_SessionInitiator_entries,
      DataSourceConfig_SessionInitiator_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DataSourceConfig_SessionInitiator_strings[idx].get();
}
bool DataSourceConfig_SessionInitiator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataSourceConfig_SessionInitiator* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DataSourceConfig_SessionInitiator_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<DataSourceConfig_SessionInitiator>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataSourceConfig_SessionInitiator DataSourceConfig::SESSION_INITIATOR_UNSPECIFIED;
constexpr DataSourceConfig_SessionInitiator DataSourceConfig::SESSION_INITIATOR_TRUSTED_SYSTEM;
constexpr DataSourceConfig_SessionInitiator DataSourceConfig::SessionInitiator_MIN;
constexpr DataSourceConfig_SessionInitiator DataSourceConfig::SessionInitiator_MAX;
constexpr int DataSourceConfig::SessionInitiator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DataSourceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSourceConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_trace_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_prefer_suspend_clock_for_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_stop_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_enable_extra_guardrails(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_session_initiator(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tracing_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::perfetto::protos::FtraceConfig& ftrace_config(const DataSourceConfig* msg);
  static void set_has_ftrace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::InodeFileConfig& inode_file_config(const DataSourceConfig* msg);
  static void set_has_inode_file_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::ProcessStatsConfig& process_stats_config(const DataSourceConfig* msg);
  static void set_has_process_stats_config(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::SysStatsConfig& sys_stats_config(const DataSourceConfig* msg);
  static void set_has_sys_stats_config(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::perfetto::protos::HeapprofdConfig& heapprofd_config(const DataSourceConfig* msg);
  static void set_has_heapprofd_config(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::perfetto::protos::JavaHprofConfig& java_hprof_config(const DataSourceConfig* msg);
  static void set_has_java_hprof_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::perfetto::protos::AndroidPowerConfig& android_power_config(const DataSourceConfig* msg);
  static void set_has_android_power_config(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::AndroidLogConfig& android_log_config(const DataSourceConfig* msg);
  static void set_has_android_log_config(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::GpuCounterConfig& gpu_counter_config(const DataSourceConfig* msg);
  static void set_has_gpu_counter_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::perfetto::protos::AndroidGameInterventionListConfig& android_game_intervention_list_config(const DataSourceConfig* msg);
  static void set_has_android_game_intervention_list_config(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::perfetto::protos::PackagesListConfig& packages_list_config(const DataSourceConfig* msg);
  static void set_has_packages_list_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::perfetto::protos::PerfEventConfig& perf_event_config(const DataSourceConfig* msg);
  static void set_has_perf_event_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::perfetto::protos::VulkanMemoryConfig& vulkan_memory_config(const DataSourceConfig* msg);
  static void set_has_vulkan_memory_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::perfetto::protos::TrackEventConfig& track_event_config(const DataSourceConfig* msg);
  static void set_has_track_event_config(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::perfetto::protos::AndroidPolledStateConfig& android_polled_state_config(const DataSourceConfig* msg);
  static void set_has_android_polled_state_config(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::perfetto::protos::AndroidSystemPropertyConfig& android_system_property_config(const DataSourceConfig* msg);
  static void set_has_android_system_property_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::perfetto::protos::StatsdTracingConfig& statsd_tracing_config(const DataSourceConfig* msg);
  static void set_has_statsd_tracing_config(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::perfetto::protos::SystemInfoConfig& system_info_config(const DataSourceConfig* msg);
  static void set_has_system_info_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::perfetto::protos::ChromeConfig& chrome_config(const DataSourceConfig* msg);
  static void set_has_chrome_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::InterceptorConfig& interceptor_config(const DataSourceConfig* msg);
  static void set_has_interceptor_config(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::perfetto::protos::NetworkPacketTraceConfig& network_packet_trace_config(const DataSourceConfig* msg);
  static void set_has_network_packet_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::perfetto::protos::SurfaceFlingerLayersConfig& surfaceflinger_layers_config(const DataSourceConfig* msg);
  static void set_has_surfaceflinger_layers_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::perfetto::protos::SurfaceFlingerTransactionsConfig& surfaceflinger_transactions_config(const DataSourceConfig* msg);
  static void set_has_surfaceflinger_transactions_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::perfetto::protos::AndroidSdkSyspropGuardConfig& android_sdk_sysprop_guard_config(const DataSourceConfig* msg);
  static void set_has_android_sdk_sysprop_guard_config(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_legacy_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::TestConfig& for_testing(const DataSourceConfig* msg);
  static void set_has_for_testing(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

const ::perfetto::protos::FtraceConfig&
DataSourceConfig::_Internal::ftrace_config(const DataSourceConfig* msg) {
  return *msg->ftrace_config_;
}
const ::perfetto::protos::InodeFileConfig&
DataSourceConfig::_Internal::inode_file_config(const DataSourceConfig* msg) {
  return *msg->inode_file_config_;
}
const ::perfetto::protos::ProcessStatsConfig&
DataSourceConfig::_Internal::process_stats_config(const DataSourceConfig* msg) {
  return *msg->process_stats_config_;
}
const ::perfetto::protos::SysStatsConfig&
DataSourceConfig::_Internal::sys_stats_config(const DataSourceConfig* msg) {
  return *msg->sys_stats_config_;
}
const ::perfetto::protos::HeapprofdConfig&
DataSourceConfig::_Internal::heapprofd_config(const DataSourceConfig* msg) {
  return *msg->heapprofd_config_;
}
const ::perfetto::protos::JavaHprofConfig&
DataSourceConfig::_Internal::java_hprof_config(const DataSourceConfig* msg) {
  return *msg->java_hprof_config_;
}
const ::perfetto::protos::AndroidPowerConfig&
DataSourceConfig::_Internal::android_power_config(const DataSourceConfig* msg) {
  return *msg->android_power_config_;
}
const ::perfetto::protos::AndroidLogConfig&
DataSourceConfig::_Internal::android_log_config(const DataSourceConfig* msg) {
  return *msg->android_log_config_;
}
const ::perfetto::protos::GpuCounterConfig&
DataSourceConfig::_Internal::gpu_counter_config(const DataSourceConfig* msg) {
  return *msg->gpu_counter_config_;
}
const ::perfetto::protos::AndroidGameInterventionListConfig&
DataSourceConfig::_Internal::android_game_intervention_list_config(const DataSourceConfig* msg) {
  return *msg->android_game_intervention_list_config_;
}
const ::perfetto::protos::PackagesListConfig&
DataSourceConfig::_Internal::packages_list_config(const DataSourceConfig* msg) {
  return *msg->packages_list_config_;
}
const ::perfetto::protos::PerfEventConfig&
DataSourceConfig::_Internal::perf_event_config(const DataSourceConfig* msg) {
  return *msg->perf_event_config_;
}
const ::perfetto::protos::VulkanMemoryConfig&
DataSourceConfig::_Internal::vulkan_memory_config(const DataSourceConfig* msg) {
  return *msg->vulkan_memory_config_;
}
const ::perfetto::protos::TrackEventConfig&
DataSourceConfig::_Internal::track_event_config(const DataSourceConfig* msg) {
  return *msg->track_event_config_;
}
const ::perfetto::protos::AndroidPolledStateConfig&
DataSourceConfig::_Internal::android_polled_state_config(const DataSourceConfig* msg) {
  return *msg->android_polled_state_config_;
}
const ::perfetto::protos::AndroidSystemPropertyConfig&
DataSourceConfig::_Internal::android_system_property_config(const DataSourceConfig* msg) {
  return *msg->android_system_property_config_;
}
const ::perfetto::protos::StatsdTracingConfig&
DataSourceConfig::_Internal::statsd_tracing_config(const DataSourceConfig* msg) {
  return *msg->statsd_tracing_config_;
}
const ::perfetto::protos::SystemInfoConfig&
DataSourceConfig::_Internal::system_info_config(const DataSourceConfig* msg) {
  return *msg->system_info_config_;
}
const ::perfetto::protos::ChromeConfig&
DataSourceConfig::_Internal::chrome_config(const DataSourceConfig* msg) {
  return *msg->chrome_config_;
}
const ::perfetto::protos::InterceptorConfig&
DataSourceConfig::_Internal::interceptor_config(const DataSourceConfig* msg) {
  return *msg->interceptor_config_;
}
const ::perfetto::protos::NetworkPacketTraceConfig&
DataSourceConfig::_Internal::network_packet_trace_config(const DataSourceConfig* msg) {
  return *msg->network_packet_trace_config_;
}
const ::perfetto::protos::SurfaceFlingerLayersConfig&
DataSourceConfig::_Internal::surfaceflinger_layers_config(const DataSourceConfig* msg) {
  return *msg->surfaceflinger_layers_config_;
}
const ::perfetto::protos::SurfaceFlingerTransactionsConfig&
DataSourceConfig::_Internal::surfaceflinger_transactions_config(const DataSourceConfig* msg) {
  return *msg->surfaceflinger_transactions_config_;
}
const ::perfetto::protos::AndroidSdkSyspropGuardConfig&
DataSourceConfig::_Internal::android_sdk_sysprop_guard_config(const DataSourceConfig* msg) {
  return *msg->android_sdk_sysprop_guard_config_;
}
const ::perfetto::protos::TestConfig&
DataSourceConfig::_Internal::for_testing(const DataSourceConfig* msg) {
  return *msg->for_testing_;
}
void DataSourceConfig::clear_ftrace_config() {
  if (ftrace_config_ != nullptr) ftrace_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void DataSourceConfig::clear_inode_file_config() {
  if (inode_file_config_ != nullptr) inode_file_config_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void DataSourceConfig::clear_process_stats_config() {
  if (process_stats_config_ != nullptr) process_stats_config_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void DataSourceConfig::clear_sys_stats_config() {
  if (sys_stats_config_ != nullptr) sys_stats_config_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void DataSourceConfig::clear_heapprofd_config() {
  if (heapprofd_config_ != nullptr) heapprofd_config_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void DataSourceConfig::clear_java_hprof_config() {
  if (java_hprof_config_ != nullptr) java_hprof_config_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void DataSourceConfig::clear_android_power_config() {
  if (android_power_config_ != nullptr) android_power_config_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void DataSourceConfig::clear_android_log_config() {
  if (android_log_config_ != nullptr) android_log_config_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void DataSourceConfig::clear_gpu_counter_config() {
  if (gpu_counter_config_ != nullptr) gpu_counter_config_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void DataSourceConfig::clear_android_game_intervention_list_config() {
  if (android_game_intervention_list_config_ != nullptr) android_game_intervention_list_config_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void DataSourceConfig::clear_packages_list_config() {
  if (packages_list_config_ != nullptr) packages_list_config_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void DataSourceConfig::clear_perf_event_config() {
  if (perf_event_config_ != nullptr) perf_event_config_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void DataSourceConfig::clear_vulkan_memory_config() {
  if (vulkan_memory_config_ != nullptr) vulkan_memory_config_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void DataSourceConfig::clear_track_event_config() {
  if (track_event_config_ != nullptr) track_event_config_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void DataSourceConfig::clear_android_polled_state_config() {
  if (android_polled_state_config_ != nullptr) android_polled_state_config_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void DataSourceConfig::clear_android_system_property_config() {
  if (android_system_property_config_ != nullptr) android_system_property_config_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void DataSourceConfig::clear_statsd_tracing_config() {
  if (statsd_tracing_config_ != nullptr) statsd_tracing_config_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void DataSourceConfig::clear_system_info_config() {
  if (system_info_config_ != nullptr) system_info_config_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void DataSourceConfig::clear_chrome_config() {
  if (chrome_config_ != nullptr) chrome_config_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void DataSourceConfig::clear_interceptor_config() {
  if (interceptor_config_ != nullptr) interceptor_config_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void DataSourceConfig::clear_network_packet_trace_config() {
  if (network_packet_trace_config_ != nullptr) network_packet_trace_config_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void DataSourceConfig::clear_surfaceflinger_layers_config() {
  if (surfaceflinger_layers_config_ != nullptr) surfaceflinger_layers_config_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void DataSourceConfig::clear_surfaceflinger_transactions_config() {
  if (surfaceflinger_transactions_config_ != nullptr) surfaceflinger_transactions_config_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void DataSourceConfig::clear_android_sdk_sysprop_guard_config() {
  if (android_sdk_sysprop_guard_config_ != nullptr) android_sdk_sysprop_guard_config_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void DataSourceConfig::clear_for_testing() {
  if (for_testing_ != nullptr) for_testing_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
DataSourceConfig::DataSourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DataSourceConfig)
}
DataSourceConfig::DataSourceConfig(const DataSourceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  legacy_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    legacy_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_legacy_config()) {
    legacy_config_.Set(from._internal_legacy_config(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ftrace_config()) {
    ftrace_config_ = new ::perfetto::protos::FtraceConfig(*from.ftrace_config_);
  } else {
    ftrace_config_ = nullptr;
  }
  if (from._internal_has_chrome_config()) {
    chrome_config_ = new ::perfetto::protos::ChromeConfig(*from.chrome_config_);
  } else {
    chrome_config_ = nullptr;
  }
  if (from._internal_has_inode_file_config()) {
    inode_file_config_ = new ::perfetto::protos::InodeFileConfig(*from.inode_file_config_);
  } else {
    inode_file_config_ = nullptr;
  }
  if (from._internal_has_process_stats_config()) {
    process_stats_config_ = new ::perfetto::protos::ProcessStatsConfig(*from.process_stats_config_);
  } else {
    process_stats_config_ = nullptr;
  }
  if (from._internal_has_sys_stats_config()) {
    sys_stats_config_ = new ::perfetto::protos::SysStatsConfig(*from.sys_stats_config_);
  } else {
    sys_stats_config_ = nullptr;
  }
  if (from._internal_has_heapprofd_config()) {
    heapprofd_config_ = new ::perfetto::protos::HeapprofdConfig(*from.heapprofd_config_);
  } else {
    heapprofd_config_ = nullptr;
  }
  if (from._internal_has_android_power_config()) {
    android_power_config_ = new ::perfetto::protos::AndroidPowerConfig(*from.android_power_config_);
  } else {
    android_power_config_ = nullptr;
  }
  if (from._internal_has_android_log_config()) {
    android_log_config_ = new ::perfetto::protos::AndroidLogConfig(*from.android_log_config_);
  } else {
    android_log_config_ = nullptr;
  }
  if (from._internal_has_gpu_counter_config()) {
    gpu_counter_config_ = new ::perfetto::protos::GpuCounterConfig(*from.gpu_counter_config_);
  } else {
    gpu_counter_config_ = nullptr;
  }
  if (from._internal_has_packages_list_config()) {
    packages_list_config_ = new ::perfetto::protos::PackagesListConfig(*from.packages_list_config_);
  } else {
    packages_list_config_ = nullptr;
  }
  if (from._internal_has_java_hprof_config()) {
    java_hprof_config_ = new ::perfetto::protos::JavaHprofConfig(*from.java_hprof_config_);
  } else {
    java_hprof_config_ = nullptr;
  }
  if (from._internal_has_perf_event_config()) {
    perf_event_config_ = new ::perfetto::protos::PerfEventConfig(*from.perf_event_config_);
  } else {
    perf_event_config_ = nullptr;
  }
  if (from._internal_has_vulkan_memory_config()) {
    vulkan_memory_config_ = new ::perfetto::protos::VulkanMemoryConfig(*from.vulkan_memory_config_);
  } else {
    vulkan_memory_config_ = nullptr;
  }
  if (from._internal_has_track_event_config()) {
    track_event_config_ = new ::perfetto::protos::TrackEventConfig(*from.track_event_config_);
  } else {
    track_event_config_ = nullptr;
  }
  if (from._internal_has_android_polled_state_config()) {
    android_polled_state_config_ = new ::perfetto::protos::AndroidPolledStateConfig(*from.android_polled_state_config_);
  } else {
    android_polled_state_config_ = nullptr;
  }
  if (from._internal_has_interceptor_config()) {
    interceptor_config_ = new ::perfetto::protos::InterceptorConfig(*from.interceptor_config_);
  } else {
    interceptor_config_ = nullptr;
  }
  if (from._internal_has_android_game_intervention_list_config()) {
    android_game_intervention_list_config_ = new ::perfetto::protos::AndroidGameInterventionListConfig(*from.android_game_intervention_list_config_);
  } else {
    android_game_intervention_list_config_ = nullptr;
  }
  if (from._internal_has_statsd_tracing_config()) {
    statsd_tracing_config_ = new ::perfetto::protos::StatsdTracingConfig(*from.statsd_tracing_config_);
  } else {
    statsd_tracing_config_ = nullptr;
  }
  if (from._internal_has_android_system_property_config()) {
    android_system_property_config_ = new ::perfetto::protos::AndroidSystemPropertyConfig(*from.android_system_property_config_);
  } else {
    android_system_property_config_ = nullptr;
  }
  if (from._internal_has_system_info_config()) {
    system_info_config_ = new ::perfetto::protos::SystemInfoConfig(*from.system_info_config_);
  } else {
    system_info_config_ = nullptr;
  }
  if (from._internal_has_network_packet_trace_config()) {
    network_packet_trace_config_ = new ::perfetto::protos::NetworkPacketTraceConfig(*from.network_packet_trace_config_);
  } else {
    network_packet_trace_config_ = nullptr;
  }
  if (from._internal_has_surfaceflinger_layers_config()) {
    surfaceflinger_layers_config_ = new ::perfetto::protos::SurfaceFlingerLayersConfig(*from.surfaceflinger_layers_config_);
  } else {
    surfaceflinger_layers_config_ = nullptr;
  }
  if (from._internal_has_surfaceflinger_transactions_config()) {
    surfaceflinger_transactions_config_ = new ::perfetto::protos::SurfaceFlingerTransactionsConfig(*from.surfaceflinger_transactions_config_);
  } else {
    surfaceflinger_transactions_config_ = nullptr;
  }
  if (from._internal_has_android_sdk_sysprop_guard_config()) {
    android_sdk_sysprop_guard_config_ = new ::perfetto::protos::AndroidSdkSyspropGuardConfig(*from.android_sdk_sysprop_guard_config_);
  } else {
    android_sdk_sysprop_guard_config_ = nullptr;
  }
  if (from._internal_has_for_testing()) {
    for_testing_ = new ::perfetto::protos::TestConfig(*from.for_testing_);
  } else {
    for_testing_ = nullptr;
  }
  ::memcpy(&target_buffer_, &from.target_buffer_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_extra_guardrails_) -
    reinterpret_cast<char*>(&target_buffer_)) + sizeof(enable_extra_guardrails_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DataSourceConfig)
}

inline void DataSourceConfig::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
legacy_config_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  legacy_config_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ftrace_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_extra_guardrails_) -
    reinterpret_cast<char*>(&ftrace_config_)) + sizeof(enable_extra_guardrails_));
}

DataSourceConfig::~DataSourceConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DataSourceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataSourceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  legacy_config_.Destroy();
  if (this != internal_default_instance()) delete ftrace_config_;
  if (this != internal_default_instance()) delete chrome_config_;
  if (this != internal_default_instance()) delete inode_file_config_;
  if (this != internal_default_instance()) delete process_stats_config_;
  if (this != internal_default_instance()) delete sys_stats_config_;
  if (this != internal_default_instance()) delete heapprofd_config_;
  if (this != internal_default_instance()) delete android_power_config_;
  if (this != internal_default_instance()) delete android_log_config_;
  if (this != internal_default_instance()) delete gpu_counter_config_;
  if (this != internal_default_instance()) delete packages_list_config_;
  if (this != internal_default_instance()) delete java_hprof_config_;
  if (this != internal_default_instance()) delete perf_event_config_;
  if (this != internal_default_instance()) delete vulkan_memory_config_;
  if (this != internal_default_instance()) delete track_event_config_;
  if (this != internal_default_instance()) delete android_polled_state_config_;
  if (this != internal_default_instance()) delete interceptor_config_;
  if (this != internal_default_instance()) delete android_game_intervention_list_config_;
  if (this != internal_default_instance()) delete statsd_tracing_config_;
  if (this != internal_default_instance()) delete android_system_property_config_;
  if (this != internal_default_instance()) delete system_info_config_;
  if (this != internal_default_instance()) delete network_packet_trace_config_;
  if (this != internal_default_instance()) delete surfaceflinger_layers_config_;
  if (this != internal_default_instance()) delete surfaceflinger_transactions_config_;
  if (this != internal_default_instance()) delete android_sdk_sysprop_guard_config_;
  if (this != internal_default_instance()) delete for_testing_;
}

void DataSourceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataSourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DataSourceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      legacy_config_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ftrace_config_ != nullptr);
      ftrace_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(chrome_config_ != nullptr);
      chrome_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(inode_file_config_ != nullptr);
      inode_file_config_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(process_stats_config_ != nullptr);
      process_stats_config_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sys_stats_config_ != nullptr);
      sys_stats_config_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(heapprofd_config_ != nullptr);
      heapprofd_config_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(android_power_config_ != nullptr);
      android_power_config_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(android_log_config_ != nullptr);
      android_log_config_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(gpu_counter_config_ != nullptr);
      gpu_counter_config_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(packages_list_config_ != nullptr);
      packages_list_config_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(java_hprof_config_ != nullptr);
      java_hprof_config_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(perf_event_config_ != nullptr);
      perf_event_config_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(vulkan_memory_config_ != nullptr);
      vulkan_memory_config_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(track_event_config_ != nullptr);
      track_event_config_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(android_polled_state_config_ != nullptr);
      android_polled_state_config_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(interceptor_config_ != nullptr);
      interceptor_config_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(android_game_intervention_list_config_ != nullptr);
      android_game_intervention_list_config_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(statsd_tracing_config_ != nullptr);
      statsd_tracing_config_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(android_system_property_config_ != nullptr);
      android_system_property_config_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(system_info_config_ != nullptr);
      system_info_config_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(network_packet_trace_config_ != nullptr);
      network_packet_trace_config_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(surfaceflinger_layers_config_ != nullptr);
      surfaceflinger_layers_config_->Clear();
    }
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(surfaceflinger_transactions_config_ != nullptr);
      surfaceflinger_transactions_config_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(android_sdk_sysprop_guard_config_ != nullptr);
      android_sdk_sysprop_guard_config_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(for_testing_ != nullptr);
      for_testing_->Clear();
    }
  }
  if (cached_has_bits & 0xf8000000u) {
    ::memset(&target_buffer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_initiator_) -
        reinterpret_cast<char*>(&target_buffer_)) + sizeof(session_initiator_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&prefer_suspend_clock_for_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_extra_guardrails_) -
        reinterpret_cast<char*>(&prefer_suspend_clock_for_duration_)) + sizeof(enable_extra_guardrails_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DataSourceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_buffer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_buffer(&_has_bits_);
          target_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trace_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_trace_duration_ms(&_has_bits_);
          trace_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tracing_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tracing_session_id(&_has_bits_);
          tracing_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_extra_guardrails = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enable_extra_guardrails(&_has_bits_);
          enable_extra_guardrails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stop_timeout_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_stop_timeout_ms(&_has_bits_);
          stop_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::DataSourceConfig_SessionInitiator_IsValid(val))) {
            _internal_set_session_initiator(static_cast<::perfetto::protos::DataSourceConfig_SessionInitiator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ftrace_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeConfig chrome_config = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_inode_file_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_stats_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_stats_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_heapprofd_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_power_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_log_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_counter_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_packages_list_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_java_hprof_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_perf_event_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_vulkan_memory_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_event_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_polled_state_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_interceptor_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_game_intervention_list_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_statsd_tracing_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_system_property_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.SystemInfoConfig system_info_config = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_info_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_packet_trace_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.SurfaceFlingerLayersConfig surfaceflinger_layers_config = 121 [lazy = true];
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_surfaceflinger_layers_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prefer_suspend_clock_for_duration = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_prefer_suspend_clock_for_duration(&_has_bits_);
          prefer_suspend_clock_for_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.SurfaceFlingerTransactionsConfig surfaceflinger_transactions_config = 123 [lazy = true];
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_surfaceflinger_transactions_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidSdkSyspropGuardConfig android_sdk_sysprop_guard_config = 124 [lazy = true];
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_sdk_sysprop_guard_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string legacy_config = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_legacy_config();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TestConfig for_testing = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_for_testing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataSourceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DataSourceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 target_buffer = 2;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_buffer(), target);
  }

  // optional uint32 trace_duration_ms = 3;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_trace_duration_ms(), target);
  }

  // optional uint64 tracing_session_id = 4;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_tracing_session_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool enable_extra_guardrails = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_extra_guardrails(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 stop_timeout_ms = 7;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stop_timeout_ms(), target);
  }

  // optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_session_initiator(), target);
  }

  // optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::ftrace_config(this),
        _Internal::ftrace_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeConfig chrome_config = 101;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::chrome_config(this),
        _Internal::chrome_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::inode_file_config(this),
        _Internal::inode_file_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::process_stats_config(this),
        _Internal::process_stats_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::sys_stats_config(this),
        _Internal::sys_stats_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(105, _Internal::heapprofd_config(this),
        _Internal::heapprofd_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(106, _Internal::android_power_config(this),
        _Internal::android_power_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, _Internal::android_log_config(this),
        _Internal::android_log_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(108, _Internal::gpu_counter_config(this),
        _Internal::gpu_counter_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(109, _Internal::packages_list_config(this),
        _Internal::packages_list_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(110, _Internal::java_hprof_config(this),
        _Internal::java_hprof_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(111, _Internal::perf_event_config(this),
        _Internal::perf_event_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(112, _Internal::vulkan_memory_config(this),
        _Internal::vulkan_memory_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(113, _Internal::track_event_config(this),
        _Internal::track_event_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(114, _Internal::android_polled_state_config(this),
        _Internal::android_polled_state_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(115, _Internal::interceptor_config(this),
        _Internal::interceptor_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(116, _Internal::android_game_intervention_list_config(this),
        _Internal::android_game_intervention_list_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(117, _Internal::statsd_tracing_config(this),
        _Internal::statsd_tracing_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(118, _Internal::android_system_property_config(this),
        _Internal::android_system_property_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.SystemInfoConfig system_info_config = 119;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(119, _Internal::system_info_config(this),
        _Internal::system_info_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(120, _Internal::network_packet_trace_config(this),
        _Internal::network_packet_trace_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.SurfaceFlingerLayersConfig surfaceflinger_layers_config = 121 [lazy = true];
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(121, _Internal::surfaceflinger_layers_config(this),
        _Internal::surfaceflinger_layers_config(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool prefer_suspend_clock_for_duration = 122;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(122, this->_internal_prefer_suspend_clock_for_duration(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.SurfaceFlingerTransactionsConfig surfaceflinger_transactions_config = 123 [lazy = true];
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(123, _Internal::surfaceflinger_transactions_config(this),
        _Internal::surfaceflinger_transactions_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.AndroidSdkSyspropGuardConfig android_sdk_sysprop_guard_config = 124 [lazy = true];
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(124, _Internal::android_sdk_sysprop_guard_config(this),
        _Internal::android_sdk_sysprop_guard_config(this).GetCachedSize(), target, stream);
  }

  // optional string legacy_config = 1000;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        1000, this->_internal_legacy_config(), target);
  }

  // optional .perfetto.protos.TestConfig for_testing = 1001;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1001, _Internal::for_testing(this),
        _Internal::for_testing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DataSourceConfig)
  return target;
}

size_t DataSourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DataSourceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string legacy_config = 1000;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_legacy_config());
    }

    // optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ftrace_config_);
    }

    // optional .perfetto.protos.ChromeConfig chrome_config = 101;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_config_);
    }

    // optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inode_file_config_);
    }

    // optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_stats_config_);
    }

    // optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sys_stats_config_);
    }

    // optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *heapprofd_config_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_power_config_);
    }

    // optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_log_config_);
    }

    // optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gpu_counter_config_);
    }

    // optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packages_list_config_);
    }

    // optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *java_hprof_config_);
    }

    // optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perf_event_config_);
    }

    // optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vulkan_memory_config_);
    }

    // optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *track_event_config_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_polled_state_config_);
    }

    // optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interceptor_config_);
    }

    // optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_game_intervention_list_config_);
    }

    // optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statsd_tracing_config_);
    }

    // optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_system_property_config_);
    }

    // optional .perfetto.protos.SystemInfoConfig system_info_config = 119;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_info_config_);
    }

    // optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_packet_trace_config_);
    }

    // optional .perfetto.protos.SurfaceFlingerLayersConfig surfaceflinger_layers_config = 121 [lazy = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *surfaceflinger_layers_config_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .perfetto.protos.SurfaceFlingerTransactionsConfig surfaceflinger_transactions_config = 123 [lazy = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *surfaceflinger_transactions_config_);
    }

    // optional .perfetto.protos.AndroidSdkSyspropGuardConfig android_sdk_sysprop_guard_config = 124 [lazy = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_sdk_sysprop_guard_config_);
    }

    // optional .perfetto.protos.TestConfig for_testing = 1001;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *for_testing_);
    }

    // optional uint32 target_buffer = 2;
    if (cached_has_bits & 0x08000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_buffer());
    }

    // optional uint32 trace_duration_ms = 3;
    if (cached_has_bits & 0x10000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trace_duration_ms());
    }

    // optional uint64 tracing_session_id = 4;
    if (cached_has_bits & 0x20000000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tracing_session_id());
    }

    // optional uint32 stop_timeout_ms = 7;
    if (cached_has_bits & 0x40000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stop_timeout_ms());
    }

    // optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_session_initiator());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    // optional bool prefer_suspend_clock_for_duration = 122;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool enable_extra_guardrails = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSourceConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DataSourceConfig*>(
      &from));
}

void DataSourceConfig::MergeFrom(const DataSourceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DataSourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_legacy_config(from._internal_legacy_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ftrace_config()->::perfetto::protos::FtraceConfig::MergeFrom(from._internal_ftrace_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_chrome_config()->::perfetto::protos::ChromeConfig::MergeFrom(from._internal_chrome_config());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_inode_file_config()->::perfetto::protos::InodeFileConfig::MergeFrom(from._internal_inode_file_config());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_process_stats_config()->::perfetto::protos::ProcessStatsConfig::MergeFrom(from._internal_process_stats_config());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_sys_stats_config()->::perfetto::protos::SysStatsConfig::MergeFrom(from._internal_sys_stats_config());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_heapprofd_config()->::perfetto::protos::HeapprofdConfig::MergeFrom(from._internal_heapprofd_config());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_android_power_config()->::perfetto::protos::AndroidPowerConfig::MergeFrom(from._internal_android_power_config());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_android_log_config()->::perfetto::protos::AndroidLogConfig::MergeFrom(from._internal_android_log_config());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_gpu_counter_config()->::perfetto::protos::GpuCounterConfig::MergeFrom(from._internal_gpu_counter_config());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_packages_list_config()->::perfetto::protos::PackagesListConfig::MergeFrom(from._internal_packages_list_config());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_java_hprof_config()->::perfetto::protos::JavaHprofConfig::MergeFrom(from._internal_java_hprof_config());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_perf_event_config()->::perfetto::protos::PerfEventConfig::MergeFrom(from._internal_perf_event_config());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_vulkan_memory_config()->::perfetto::protos::VulkanMemoryConfig::MergeFrom(from._internal_vulkan_memory_config());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_track_event_config()->::perfetto::protos::TrackEventConfig::MergeFrom(from._internal_track_event_config());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_android_polled_state_config()->::perfetto::protos::AndroidPolledStateConfig::MergeFrom(from._internal_android_polled_state_config());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_interceptor_config()->::perfetto::protos::InterceptorConfig::MergeFrom(from._internal_interceptor_config());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_android_game_intervention_list_config()->::perfetto::protos::AndroidGameInterventionListConfig::MergeFrom(from._internal_android_game_intervention_list_config());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_statsd_tracing_config()->::perfetto::protos::StatsdTracingConfig::MergeFrom(from._internal_statsd_tracing_config());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_android_system_property_config()->::perfetto::protos::AndroidSystemPropertyConfig::MergeFrom(from._internal_android_system_property_config());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_system_info_config()->::perfetto::protos::SystemInfoConfig::MergeFrom(from._internal_system_info_config());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_network_packet_trace_config()->::perfetto::protos::NetworkPacketTraceConfig::MergeFrom(from._internal_network_packet_trace_config());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_surfaceflinger_layers_config()->::perfetto::protos::SurfaceFlingerLayersConfig::MergeFrom(from._internal_surfaceflinger_layers_config());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_surfaceflinger_transactions_config()->::perfetto::protos::SurfaceFlingerTransactionsConfig::MergeFrom(from._internal_surfaceflinger_transactions_config());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_android_sdk_sysprop_guard_config()->::perfetto::protos::AndroidSdkSyspropGuardConfig::MergeFrom(from._internal_android_sdk_sysprop_guard_config());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_for_testing()->::perfetto::protos::TestConfig::MergeFrom(from._internal_for_testing());
    }
    if (cached_has_bits & 0x08000000u) {
      target_buffer_ = from.target_buffer_;
    }
    if (cached_has_bits & 0x10000000u) {
      trace_duration_ms_ = from.trace_duration_ms_;
    }
    if (cached_has_bits & 0x20000000u) {
      tracing_session_id_ = from.tracing_session_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      stop_timeout_ms_ = from.stop_timeout_ms_;
    }
    if (cached_has_bits & 0x80000000u) {
      session_initiator_ = from.session_initiator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      prefer_suspend_clock_for_duration_ = from.prefer_suspend_clock_for_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_extra_guardrails_ = from.enable_extra_guardrails_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DataSourceConfig::CopyFrom(const DataSourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DataSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceConfig::IsInitialized() const {
  return true;
}

void DataSourceConfig::InternalSwap(DataSourceConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &legacy_config_, lhs_arena,
      &other->legacy_config_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataSourceConfig, enable_extra_guardrails_)
      + sizeof(DataSourceConfig::enable_extra_guardrails_)
      - PROTOBUF_FIELD_OFFSET(DataSourceConfig, ftrace_config_)>(
          reinterpret_cast<char*>(&ftrace_config_),
          reinterpret_cast<char*>(&other->ftrace_config_));
}

std::string DataSourceConfig::GetTypeName() const {
  return "perfetto.protos.DataSourceConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::DataSourceConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::DataSourceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DataSourceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
