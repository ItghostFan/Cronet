// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/java_hprof_config.proto

#include "protos/perfetto/config/profiling/java_hprof_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR JavaHprofConfig_ContinuousDumpConfig::JavaHprofConfig_ContinuousDumpConfig(
    ::_pbi::ConstantInitialized)
  : dump_phase_ms_(0u)
  , dump_interval_ms_(0u)
  , scan_pids_only_on_start_(false){}
struct JavaHprofConfig_ContinuousDumpConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JavaHprofConfig_ContinuousDumpConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JavaHprofConfig_ContinuousDumpConfigDefaultTypeInternal() {}
  union {
    JavaHprofConfig_ContinuousDumpConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JavaHprofConfig_ContinuousDumpConfigDefaultTypeInternal _JavaHprofConfig_ContinuousDumpConfig_default_instance_;
PROTOBUF_CONSTEXPR JavaHprofConfig::JavaHprofConfig(
    ::_pbi::ConstantInitialized)
  : process_cmdline_()
  , pid_()
  , ignored_types_()
  , target_installed_by_()
  , continuous_dump_config_(nullptr)
  , min_anonymous_memory_kb_(0u)
  , dump_smaps_(false){}
struct JavaHprofConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JavaHprofConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JavaHprofConfigDefaultTypeInternal() {}
  union {
    JavaHprofConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JavaHprofConfigDefaultTypeInternal _JavaHprofConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class JavaHprofConfig_ContinuousDumpConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<JavaHprofConfig_ContinuousDumpConfig>()._has_bits_);
  static void set_has_dump_phase_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dump_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scan_pids_only_on_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

JavaHprofConfig_ContinuousDumpConfig::JavaHprofConfig_ContinuousDumpConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
}
JavaHprofConfig_ContinuousDumpConfig::JavaHprofConfig_ContinuousDumpConfig(const JavaHprofConfig_ContinuousDumpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&dump_phase_ms_, &from.dump_phase_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&scan_pids_only_on_start_) -
    reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(scan_pids_only_on_start_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
}

inline void JavaHprofConfig_ContinuousDumpConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dump_phase_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scan_pids_only_on_start_) -
    reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(scan_pids_only_on_start_));
}

JavaHprofConfig_ContinuousDumpConfig::~JavaHprofConfig_ContinuousDumpConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JavaHprofConfig_ContinuousDumpConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JavaHprofConfig_ContinuousDumpConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JavaHprofConfig_ContinuousDumpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&dump_phase_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scan_pids_only_on_start_) -
        reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(scan_pids_only_on_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* JavaHprofConfig_ContinuousDumpConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 dump_phase_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dump_phase_ms(&has_bits);
          dump_phase_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dump_interval_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_dump_interval_ms(&has_bits);
          dump_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool scan_pids_only_on_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_scan_pids_only_on_start(&has_bits);
          scan_pids_only_on_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JavaHprofConfig_ContinuousDumpConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dump_phase_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dump_phase_ms(), target);
  }

  // optional uint32 dump_interval_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dump_interval_ms(), target);
  }

  // optional bool scan_pids_only_on_start = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_scan_pids_only_on_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  return target;
}

size_t JavaHprofConfig_ContinuousDumpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 dump_phase_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dump_phase_ms());
    }

    // optional uint32 dump_interval_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dump_interval_ms());
    }

    // optional bool scan_pids_only_on_start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JavaHprofConfig_ContinuousDumpConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const JavaHprofConfig_ContinuousDumpConfig*>(
      &from));
}

void JavaHprofConfig_ContinuousDumpConfig::MergeFrom(const JavaHprofConfig_ContinuousDumpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      dump_phase_ms_ = from.dump_phase_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      dump_interval_ms_ = from.dump_interval_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      scan_pids_only_on_start_ = from.scan_pids_only_on_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void JavaHprofConfig_ContinuousDumpConfig::CopyFrom(const JavaHprofConfig_ContinuousDumpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JavaHprofConfig_ContinuousDumpConfig::IsInitialized() const {
  return true;
}

void JavaHprofConfig_ContinuousDumpConfig::InternalSwap(JavaHprofConfig_ContinuousDumpConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JavaHprofConfig_ContinuousDumpConfig, scan_pids_only_on_start_)
      + sizeof(JavaHprofConfig_ContinuousDumpConfig::scan_pids_only_on_start_)
      - PROTOBUF_FIELD_OFFSET(JavaHprofConfig_ContinuousDumpConfig, dump_phase_ms_)>(
          reinterpret_cast<char*>(&dump_phase_ms_),
          reinterpret_cast<char*>(&other->dump_phase_ms_));
}

std::string JavaHprofConfig_ContinuousDumpConfig::GetTypeName() const {
  return "perfetto.protos.JavaHprofConfig.ContinuousDumpConfig";
}


// ===================================================================

class JavaHprofConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<JavaHprofConfig>()._has_bits_);
  static const ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig& continuous_dump_config(const JavaHprofConfig* msg);
  static void set_has_continuous_dump_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_anonymous_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dump_smaps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig&
JavaHprofConfig::_Internal::continuous_dump_config(const JavaHprofConfig* msg) {
  return *msg->continuous_dump_config_;
}
JavaHprofConfig::JavaHprofConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  process_cmdline_(arena),
  pid_(arena),
  ignored_types_(arena),
  target_installed_by_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.JavaHprofConfig)
}
JavaHprofConfig::JavaHprofConfig(const JavaHprofConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      process_cmdline_(from.process_cmdline_),
      pid_(from.pid_),
      ignored_types_(from.ignored_types_),
      target_installed_by_(from.target_installed_by_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_continuous_dump_config()) {
    continuous_dump_config_ = new ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig(*from.continuous_dump_config_);
  } else {
    continuous_dump_config_ = nullptr;
  }
  ::memcpy(&min_anonymous_memory_kb_, &from.min_anonymous_memory_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&dump_smaps_) -
    reinterpret_cast<char*>(&min_anonymous_memory_kb_)) + sizeof(dump_smaps_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.JavaHprofConfig)
}

inline void JavaHprofConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&continuous_dump_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dump_smaps_) -
    reinterpret_cast<char*>(&continuous_dump_config_)) + sizeof(dump_smaps_));
}

JavaHprofConfig::~JavaHprofConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.JavaHprofConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JavaHprofConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete continuous_dump_config_;
}

void JavaHprofConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JavaHprofConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.JavaHprofConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_cmdline_.Clear();
  pid_.Clear();
  ignored_types_.Clear();
  target_installed_by_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(continuous_dump_config_ != nullptr);
    continuous_dump_config_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&min_anonymous_memory_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dump_smaps_) -
        reinterpret_cast<char*>(&min_anonymous_memory_kb_)) + sizeof(dump_smaps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* JavaHprofConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string process_cmdline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_process_cmdline();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuous_dump_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_anonymous_memory_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_min_anonymous_memory_kb(&has_bits);
          min_anonymous_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dump_smaps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_dump_smaps(&has_bits);
          dump_smaps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ignored_types = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ignored_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string target_installed_by = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_installed_by();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JavaHprofConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.JavaHprofConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string process_cmdline = 1;
  for (int i = 0, n = this->_internal_process_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_process_cmdline(i);
    target = stream->WriteString(1, s, target);
  }

  // repeated uint64 pid = 2;
  for (int i = 0, n = this->_internal_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pid(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::continuous_dump_config(this),
        _Internal::continuous_dump_config(this).GetCachedSize(), target, stream);
  }

  // optional uint32 min_anonymous_memory_kb = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_anonymous_memory_kb(), target);
  }

  // optional bool dump_smaps = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_dump_smaps(), target);
  }

  // repeated string ignored_types = 6;
  for (int i = 0, n = this->_internal_ignored_types_size(); i < n; i++) {
    const auto& s = this->_internal_ignored_types(i);
    target = stream->WriteString(6, s, target);
  }

  // repeated string target_installed_by = 7;
  for (int i = 0, n = this->_internal_target_installed_by_size(); i < n; i++) {
    const auto& s = this->_internal_target_installed_by(i);
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.JavaHprofConfig)
  return target;
}

size_t JavaHprofConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.JavaHprofConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string process_cmdline = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(process_cmdline_.size());
  for (int i = 0, n = process_cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      process_cmdline_.Get(i));
  }

  // repeated uint64 pid = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->pid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pid_size());
    total_size += data_size;
  }

  // repeated string ignored_types = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ignored_types_.size());
  for (int i = 0, n = ignored_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ignored_types_.Get(i));
  }

  // repeated string target_installed_by = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(target_installed_by_.size());
  for (int i = 0, n = target_installed_by_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      target_installed_by_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.JavaHprofConfig.ContinuousDumpConfig continuous_dump_config = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *continuous_dump_config_);
    }

    // optional uint32 min_anonymous_memory_kb = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_anonymous_memory_kb());
    }

    // optional bool dump_smaps = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JavaHprofConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const JavaHprofConfig*>(
      &from));
}

void JavaHprofConfig::MergeFrom(const JavaHprofConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.JavaHprofConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  process_cmdline_.MergeFrom(from.process_cmdline_);
  pid_.MergeFrom(from.pid_);
  ignored_types_.MergeFrom(from.ignored_types_);
  target_installed_by_.MergeFrom(from.target_installed_by_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_continuous_dump_config()->::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig::MergeFrom(from._internal_continuous_dump_config());
    }
    if (cached_has_bits & 0x00000002u) {
      min_anonymous_memory_kb_ = from.min_anonymous_memory_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      dump_smaps_ = from.dump_smaps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void JavaHprofConfig::CopyFrom(const JavaHprofConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.JavaHprofConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JavaHprofConfig::IsInitialized() const {
  return true;
}

void JavaHprofConfig::InternalSwap(JavaHprofConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  process_cmdline_.InternalSwap(&other->process_cmdline_);
  pid_.InternalSwap(&other->pid_);
  ignored_types_.InternalSwap(&other->ignored_types_);
  target_installed_by_.InternalSwap(&other->target_installed_by_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JavaHprofConfig, dump_smaps_)
      + sizeof(JavaHprofConfig::dump_smaps_)
      - PROTOBUF_FIELD_OFFSET(JavaHprofConfig, continuous_dump_config_)>(
          reinterpret_cast<char*>(&continuous_dump_config_),
          reinterpret_cast<char*>(&other->continuous_dump_config_));
}

std::string JavaHprofConfig::GetTypeName() const {
  return "perfetto.protos.JavaHprofConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::JavaHprofConfig_ContinuousDumpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::JavaHprofConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::JavaHprofConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::JavaHprofConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
