// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/ftrace/ftrace_config.proto

#include "protos/perfetto/config/ftrace/ftrace_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR FtraceConfig_CompactSchedConfig::FtraceConfig_CompactSchedConfig(
    ::_pbi::ConstantInitialized)
  : enabled_(false){}
struct FtraceConfig_CompactSchedConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceConfig_CompactSchedConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceConfig_CompactSchedConfigDefaultTypeInternal() {}
  union {
    FtraceConfig_CompactSchedConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceConfig_CompactSchedConfigDefaultTypeInternal _FtraceConfig_CompactSchedConfig_default_instance_;
PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter_Rule_AtraceMessage::FtraceConfig_PrintFilter_Rule_AtraceMessage(
    ::_pbi::ConstantInitialized)
  : type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , prefix_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct FtraceConfig_PrintFilter_Rule_AtraceMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter_Rule_AtraceMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceConfig_PrintFilter_Rule_AtraceMessageDefaultTypeInternal() {}
  union {
    FtraceConfig_PrintFilter_Rule_AtraceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceConfig_PrintFilter_Rule_AtraceMessageDefaultTypeInternal _FtraceConfig_PrintFilter_Rule_AtraceMessage_default_instance_;
PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter_Rule::FtraceConfig_PrintFilter_Rule(
    ::_pbi::ConstantInitialized)
  : allow_(false)
  , _oneof_case_{}{}
struct FtraceConfig_PrintFilter_RuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter_RuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceConfig_PrintFilter_RuleDefaultTypeInternal() {}
  union {
    FtraceConfig_PrintFilter_Rule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceConfig_PrintFilter_RuleDefaultTypeInternal _FtraceConfig_PrintFilter_Rule_default_instance_;
PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter::FtraceConfig_PrintFilter(
    ::_pbi::ConstantInitialized)
  : rules_(){}
struct FtraceConfig_PrintFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceConfig_PrintFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceConfig_PrintFilterDefaultTypeInternal() {}
  union {
    FtraceConfig_PrintFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceConfig_PrintFilterDefaultTypeInternal _FtraceConfig_PrintFilter_default_instance_;
PROTOBUF_CONSTEXPR FtraceConfig::FtraceConfig(
    ::_pbi::ConstantInitialized)
  : ftrace_events_()
  , atrace_categories_()
  , atrace_apps_()
  , syscall_events_()
  , function_filters_()
  , function_graph_roots_()
  , instance_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , compact_sched_(nullptr)
  , print_filter_(nullptr)
  , buffer_size_kb_(0u)
  , drain_period_ms_(0u)
  , symbolize_ksyms_(false)
  , initialize_ksyms_synchronously_for_testing_(false)
  , throttle_rss_stat_(false)
  , disable_generic_events_(false)
  , ksyms_mem_policy_(0)

  , enable_function_graph_(false)
  , preserve_ftrace_buffer_(false)
  , use_monotonic_raw_clock_(false){}
struct FtraceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceConfigDefaultTypeInternal() {}
  union {
    FtraceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceConfigDefaultTypeInternal _FtraceConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool FtraceConfig_KsymsMemPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FtraceConfig_KsymsMemPolicy_strings[3] = {};

static const char FtraceConfig_KsymsMemPolicy_names[] =
  "KSYMS_CLEANUP_ON_STOP"
  "KSYMS_RETAIN"
  "KSYMS_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FtraceConfig_KsymsMemPolicy_entries[] = {
  { {FtraceConfig_KsymsMemPolicy_names + 0, 21}, 1 },
  { {FtraceConfig_KsymsMemPolicy_names + 21, 12}, 2 },
  { {FtraceConfig_KsymsMemPolicy_names + 33, 17}, 0 },
};

static const int FtraceConfig_KsymsMemPolicy_entries_by_number[] = {
  2, // 0 -> KSYMS_UNSPECIFIED
  0, // 1 -> KSYMS_CLEANUP_ON_STOP
  1, // 2 -> KSYMS_RETAIN
};

const std::string& FtraceConfig_KsymsMemPolicy_Name(
    FtraceConfig_KsymsMemPolicy value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FtraceConfig_KsymsMemPolicy_entries,
          FtraceConfig_KsymsMemPolicy_entries_by_number,
          3, FtraceConfig_KsymsMemPolicy_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FtraceConfig_KsymsMemPolicy_entries,
      FtraceConfig_KsymsMemPolicy_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FtraceConfig_KsymsMemPolicy_strings[idx].get();
}
bool FtraceConfig_KsymsMemPolicy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FtraceConfig_KsymsMemPolicy* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FtraceConfig_KsymsMemPolicy_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<FtraceConfig_KsymsMemPolicy>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig::KSYMS_UNSPECIFIED;
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig::KSYMS_CLEANUP_ON_STOP;
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig::KSYMS_RETAIN;
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig::KsymsMemPolicy_MIN;
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig::KsymsMemPolicy_MAX;
constexpr int FtraceConfig::KsymsMemPolicy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FtraceConfig_CompactSchedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig_CompactSchedConfig>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FtraceConfig_CompactSchedConfig::FtraceConfig_CompactSchedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
}
FtraceConfig_CompactSchedConfig::FtraceConfig_CompactSchedConfig(const FtraceConfig_CompactSchedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
}

inline void FtraceConfig_CompactSchedConfig::SharedCtor() {
enabled_ = false;
}

FtraceConfig_CompactSchedConfig::~FtraceConfig_CompactSchedConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceConfig_CompactSchedConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FtraceConfig_CompactSchedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtraceConfig_CompactSchedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceConfig_CompactSchedConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtraceConfig_CompactSchedConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig.CompactSchedConfig)
  return target;
}

size_t FtraceConfig_CompactSchedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceConfig_CompactSchedConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FtraceConfig_CompactSchedConfig*>(
      &from));
}

void FtraceConfig_CompactSchedConfig::MergeFrom(const FtraceConfig_CompactSchedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FtraceConfig_CompactSchedConfig::CopyFrom(const FtraceConfig_CompactSchedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig_CompactSchedConfig::IsInitialized() const {
  return true;
}

void FtraceConfig_CompactSchedConfig::InternalSwap(FtraceConfig_CompactSchedConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string FtraceConfig_CompactSchedConfig::GetTypeName() const {
  return "perfetto.protos.FtraceConfig.CompactSchedConfig";
}


// ===================================================================

class FtraceConfig_PrintFilter_Rule_AtraceMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig_PrintFilter_Rule_AtraceMessage>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FtraceConfig_PrintFilter_Rule_AtraceMessage::FtraceConfig_PrintFilter_Rule_AtraceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
}
FtraceConfig_PrintFilter_Rule_AtraceMessage::FtraceConfig_PrintFilter_Rule_AtraceMessage(const FtraceConfig_PrintFilter_Rule_AtraceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prefix()) {
    prefix_.Set(from._internal_prefix(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
}

inline void FtraceConfig_PrintFilter_Rule_AtraceMessage::SharedCtor() {
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prefix_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FtraceConfig_PrintFilter_Rule_AtraceMessage::~FtraceConfig_PrintFilter_Rule_AtraceMessage() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceConfig_PrintFilter_Rule_AtraceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.Destroy();
  prefix_.Destroy();
}

void FtraceConfig_PrintFilter_Rule_AtraceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtraceConfig_PrintFilter_Rule_AtraceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      prefix_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceConfig_PrintFilter_Rule_AtraceMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtraceConfig_PrintFilter_Rule_AtraceMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string prefix = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  return target;
}

size_t FtraceConfig_PrintFilter_Rule_AtraceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string prefix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceConfig_PrintFilter_Rule_AtraceMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FtraceConfig_PrintFilter_Rule_AtraceMessage*>(
      &from));
}

void FtraceConfig_PrintFilter_Rule_AtraceMessage::MergeFrom(const FtraceConfig_PrintFilter_Rule_AtraceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_prefix(from._internal_prefix());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FtraceConfig_PrintFilter_Rule_AtraceMessage::CopyFrom(const FtraceConfig_PrintFilter_Rule_AtraceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig_PrintFilter_Rule_AtraceMessage::IsInitialized() const {
  return true;
}

void FtraceConfig_PrintFilter_Rule_AtraceMessage::InternalSwap(FtraceConfig_PrintFilter_Rule_AtraceMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
}

std::string FtraceConfig_PrintFilter_Rule_AtraceMessage::GetTypeName() const {
  return "perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage";
}


// ===================================================================

class FtraceConfig_PrintFilter_Rule::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig_PrintFilter_Rule>()._has_bits_);
  static const ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage& atrace_msg(const FtraceConfig_PrintFilter_Rule* msg);
  static void set_has_allow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage&
FtraceConfig_PrintFilter_Rule::_Internal::atrace_msg(const FtraceConfig_PrintFilter_Rule* msg) {
  return *msg->match_.atrace_msg_;
}
void FtraceConfig_PrintFilter_Rule::set_allocated_atrace_msg(::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* atrace_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_match();
  if (atrace_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(atrace_msg);
    if (message_arena != submessage_arena) {
      atrace_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, atrace_msg, submessage_arena);
    }
    set_has_atrace_msg();
    match_.atrace_msg_ = atrace_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceConfig.PrintFilter.Rule.atrace_msg)
}
FtraceConfig_PrintFilter_Rule::FtraceConfig_PrintFilter_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig.PrintFilter.Rule)
}
FtraceConfig_PrintFilter_Rule::FtraceConfig_PrintFilter_Rule(const FtraceConfig_PrintFilter_Rule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  allow_ = from.allow_;
  clear_has_match();
  switch (from.match_case()) {
    case kPrefix: {
      _internal_set_prefix(from._internal_prefix());
      break;
    }
    case kAtraceMsg: {
      _internal_mutable_atrace_msg()->::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage::MergeFrom(from._internal_atrace_msg());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig.PrintFilter.Rule)
}

inline void FtraceConfig_PrintFilter_Rule::SharedCtor() {
allow_ = false;
clear_has_match();
}

FtraceConfig_PrintFilter_Rule::~FtraceConfig_PrintFilter_Rule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceConfig_PrintFilter_Rule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_match()) {
    clear_match();
  }
}

void FtraceConfig_PrintFilter_Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtraceConfig_PrintFilter_Rule::clear_match() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  switch (match_case()) {
    case kPrefix: {
      match_.prefix_.Destroy();
      break;
    }
    case kAtraceMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete match_.atrace_msg_;
      }
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MATCH_NOT_SET;
}


void FtraceConfig_PrintFilter_Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_ = false;
  clear_match();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceConfig_PrintFilter_Rule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_allow(&has_bits);
          allow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage atrace_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_atrace_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtraceConfig_PrintFilter_Rule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (_internal_has_prefix()) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allow = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_allow(), target);
  }

  // .perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage atrace_msg = 3;
  if (_internal_has_atrace_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::atrace_msg(this),
        _Internal::atrace_msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  return target;
}

size_t FtraceConfig_PrintFilter_Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool allow = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  switch (match_case()) {
    // string prefix = 1;
    case kPrefix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix());
      break;
    }
    // .perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage atrace_msg = 3;
    case kAtraceMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_.atrace_msg_);
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceConfig_PrintFilter_Rule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FtraceConfig_PrintFilter_Rule*>(
      &from));
}

void FtraceConfig_PrintFilter_Rule::MergeFrom(const FtraceConfig_PrintFilter_Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_allow()) {
    _internal_set_allow(from._internal_allow());
  }
  switch (from.match_case()) {
    case kPrefix: {
      _internal_set_prefix(from._internal_prefix());
      break;
    }
    case kAtraceMsg: {
      _internal_mutable_atrace_msg()->::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage::MergeFrom(from._internal_atrace_msg());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FtraceConfig_PrintFilter_Rule::CopyFrom(const FtraceConfig_PrintFilter_Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig_PrintFilter_Rule::IsInitialized() const {
  return true;
}

void FtraceConfig_PrintFilter_Rule::InternalSwap(FtraceConfig_PrintFilter_Rule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(allow_, other->allow_);
  swap(match_, other->match_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string FtraceConfig_PrintFilter_Rule::GetTypeName() const {
  return "perfetto.protos.FtraceConfig.PrintFilter.Rule";
}


// ===================================================================

class FtraceConfig_PrintFilter::_Internal {
 public:
};

FtraceConfig_PrintFilter::FtraceConfig_PrintFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  rules_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig.PrintFilter)
}
FtraceConfig_PrintFilter::FtraceConfig_PrintFilter(const FtraceConfig_PrintFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig.PrintFilter)
}

inline void FtraceConfig_PrintFilter::SharedCtor() {
}

FtraceConfig_PrintFilter::~FtraceConfig_PrintFilter() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig.PrintFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceConfig_PrintFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FtraceConfig_PrintFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtraceConfig_PrintFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig.PrintFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceConfig_PrintFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.FtraceConfig.PrintFilter.Rule rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtraceConfig_PrintFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig.PrintFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceConfig.PrintFilter.Rule rules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig.PrintFilter)
  return target;
}

size_t FtraceConfig_PrintFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig.PrintFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceConfig.PrintFilter.Rule rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceConfig_PrintFilter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FtraceConfig_PrintFilter*>(
      &from));
}

void FtraceConfig_PrintFilter::MergeFrom(const FtraceConfig_PrintFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig.PrintFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FtraceConfig_PrintFilter::CopyFrom(const FtraceConfig_PrintFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig.PrintFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig_PrintFilter::IsInitialized() const {
  return true;
}

void FtraceConfig_PrintFilter::InternalSwap(FtraceConfig_PrintFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rules_.InternalSwap(&other->rules_);
}

std::string FtraceConfig_PrintFilter::GetTypeName() const {
  return "perfetto.protos.FtraceConfig.PrintFilter";
}


// ===================================================================

class FtraceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig>()._has_bits_);
  static void set_has_buffer_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_drain_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::FtraceConfig_CompactSchedConfig& compact_sched(const FtraceConfig* msg);
  static void set_has_compact_sched(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::FtraceConfig_PrintFilter& print_filter(const FtraceConfig* msg);
  static void set_has_print_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_symbolize_ksyms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ksyms_mem_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_initialize_ksyms_synchronously_for_testing(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_throttle_rss_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_disable_generic_events(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_enable_function_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_preserve_ftrace_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_use_monotonic_raw_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_instance_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::FtraceConfig_CompactSchedConfig&
FtraceConfig::_Internal::compact_sched(const FtraceConfig* msg) {
  return *msg->compact_sched_;
}
const ::perfetto::protos::FtraceConfig_PrintFilter&
FtraceConfig::_Internal::print_filter(const FtraceConfig* msg) {
  return *msg->print_filter_;
}
FtraceConfig::FtraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  ftrace_events_(arena),
  atrace_categories_(arena),
  atrace_apps_(arena),
  syscall_events_(arena),
  function_filters_(arena),
  function_graph_roots_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig)
}
FtraceConfig::FtraceConfig(const FtraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      ftrace_events_(from.ftrace_events_),
      atrace_categories_(from.atrace_categories_),
      atrace_apps_(from.atrace_apps_),
      syscall_events_(from.syscall_events_),
      function_filters_(from.function_filters_),
      function_graph_roots_(from.function_graph_roots_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instance_name()) {
    instance_name_.Set(from._internal_instance_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_compact_sched()) {
    compact_sched_ = new ::perfetto::protos::FtraceConfig_CompactSchedConfig(*from.compact_sched_);
  } else {
    compact_sched_ = nullptr;
  }
  if (from._internal_has_print_filter()) {
    print_filter_ = new ::perfetto::protos::FtraceConfig_PrintFilter(*from.print_filter_);
  } else {
    print_filter_ = nullptr;
  }
  ::memcpy(&buffer_size_kb_, &from.buffer_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_monotonic_raw_clock_) -
    reinterpret_cast<char*>(&buffer_size_kb_)) + sizeof(use_monotonic_raw_clock_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig)
}

inline void FtraceConfig::SharedCtor() {
instance_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instance_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compact_sched_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_monotonic_raw_clock_) -
    reinterpret_cast<char*>(&compact_sched_)) + sizeof(use_monotonic_raw_clock_));
}

FtraceConfig::~FtraceConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  instance_name_.Destroy();
  if (this != internal_default_instance()) delete compact_sched_;
  if (this != internal_default_instance()) delete print_filter_;
}

void FtraceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ftrace_events_.Clear();
  atrace_categories_.Clear();
  atrace_apps_.Clear();
  syscall_events_.Clear();
  function_filters_.Clear();
  function_graph_roots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      instance_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(compact_sched_ != nullptr);
      compact_sched_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(print_filter_ != nullptr);
      print_filter_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&buffer_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&throttle_rss_stat_) -
        reinterpret_cast<char*>(&buffer_size_kb_)) + sizeof(throttle_rss_stat_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&disable_generic_events_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_monotonic_raw_clock_) -
        reinterpret_cast<char*>(&disable_generic_events_)) + sizeof(use_monotonic_raw_clock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string ftrace_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ftrace_events();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string atrace_categories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_atrace_categories();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string atrace_apps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_atrace_apps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 buffer_size_kb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_buffer_size_kb(&has_bits);
          buffer_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 drain_period_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_drain_period_ms(&has_bits);
          drain_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_compact_sched(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool symbolize_ksyms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_symbolize_ksyms(&has_bits);
          symbolize_ksyms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool initialize_ksyms_synchronously_for_testing = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_initialize_ksyms_synchronously_for_testing(&has_bits);
          initialize_ksyms_synchronously_for_testing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool throttle_rss_stat = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_throttle_rss_stat(&has_bits);
          throttle_rss_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_generic_events = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_disable_generic_events(&has_bits);
          disable_generic_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceConfig.KsymsMemPolicy ksyms_mem_policy = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FtraceConfig_KsymsMemPolicy_IsValid(val))) {
            _internal_set_ksyms_mem_policy(static_cast<::perfetto::protos::FtraceConfig_KsymsMemPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string syscall_events = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_syscall_events();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_function_graph = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_enable_function_graph(&has_bits);
          enable_function_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string function_filters = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_function_filters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string function_graph_roots = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_function_graph_roots();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceConfig.PrintFilter print_filter = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_print_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_ftrace_buffer = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_preserve_ftrace_buffer(&has_bits);
          preserve_ftrace_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_monotonic_raw_clock = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_use_monotonic_raw_clock(&has_bits);
          use_monotonic_raw_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string instance_name = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtraceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ftrace_events = 1;
  for (int i = 0, n = this->_internal_ftrace_events_size(); i < n; i++) {
    const auto& s = this->_internal_ftrace_events(i);
    target = stream->WriteString(1, s, target);
  }

  // repeated string atrace_categories = 2;
  for (int i = 0, n = this->_internal_atrace_categories_size(); i < n; i++) {
    const auto& s = this->_internal_atrace_categories(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated string atrace_apps = 3;
  for (int i = 0, n = this->_internal_atrace_apps_size(); i < n; i++) {
    const auto& s = this->_internal_atrace_apps(i);
    target = stream->WriteString(3, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 buffer_size_kb = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_buffer_size_kb(), target);
  }

  // optional uint32 drain_period_ms = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_drain_period_ms(), target);
  }

  // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::compact_sched(this),
        _Internal::compact_sched(this).GetCachedSize(), target, stream);
  }

  // optional bool symbolize_ksyms = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_symbolize_ksyms(), target);
  }

  // optional bool initialize_ksyms_synchronously_for_testing = 14 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_initialize_ksyms_synchronously_for_testing(), target);
  }

  // optional bool throttle_rss_stat = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_throttle_rss_stat(), target);
  }

  // optional bool disable_generic_events = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_disable_generic_events(), target);
  }

  // optional .perfetto.protos.FtraceConfig.KsymsMemPolicy ksyms_mem_policy = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_ksyms_mem_policy(), target);
  }

  // repeated string syscall_events = 18;
  for (int i = 0, n = this->_internal_syscall_events_size(); i < n; i++) {
    const auto& s = this->_internal_syscall_events(i);
    target = stream->WriteString(18, s, target);
  }

  // optional bool enable_function_graph = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_enable_function_graph(), target);
  }

  // repeated string function_filters = 20;
  for (int i = 0, n = this->_internal_function_filters_size(); i < n; i++) {
    const auto& s = this->_internal_function_filters(i);
    target = stream->WriteString(20, s, target);
  }

  // repeated string function_graph_roots = 21;
  for (int i = 0, n = this->_internal_function_graph_roots_size(); i < n; i++) {
    const auto& s = this->_internal_function_graph_roots(i);
    target = stream->WriteString(21, s, target);
  }

  // optional .perfetto.protos.FtraceConfig.PrintFilter print_filter = 22;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::print_filter(this),
        _Internal::print_filter(this).GetCachedSize(), target, stream);
  }

  // optional bool preserve_ftrace_buffer = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_preserve_ftrace_buffer(), target);
  }

  // optional bool use_monotonic_raw_clock = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_use_monotonic_raw_clock(), target);
  }

  // optional string instance_name = 25;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_instance_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig)
  return target;
}

size_t FtraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ftrace_events = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ftrace_events_.size());
  for (int i = 0, n = ftrace_events_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ftrace_events_.Get(i));
  }

  // repeated string atrace_categories = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(atrace_categories_.size());
  for (int i = 0, n = atrace_categories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      atrace_categories_.Get(i));
  }

  // repeated string atrace_apps = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(atrace_apps_.size());
  for (int i = 0, n = atrace_apps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      atrace_apps_.Get(i));
  }

  // repeated string syscall_events = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(syscall_events_.size());
  for (int i = 0, n = syscall_events_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      syscall_events_.Get(i));
  }

  // repeated string function_filters = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(function_filters_.size());
  for (int i = 0, n = function_filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      function_filters_.Get(i));
  }

  // repeated string function_graph_roots = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(function_graph_roots_.size());
  for (int i = 0, n = function_graph_roots_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      function_graph_roots_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string instance_name = 25;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instance_name());
    }

    // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compact_sched_);
    }

    // optional .perfetto.protos.FtraceConfig.PrintFilter print_filter = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *print_filter_);
    }

    // optional uint32 buffer_size_kb = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buffer_size_kb());
    }

    // optional uint32 drain_period_ms = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_drain_period_ms());
    }

    // optional bool symbolize_ksyms = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool initialize_ksyms_synchronously_for_testing = 14 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool throttle_rss_stat = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool disable_generic_events = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional .perfetto.protos.FtraceConfig.KsymsMemPolicy ksyms_mem_policy = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ksyms_mem_policy());
    }

    // optional bool enable_function_graph = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool preserve_ftrace_buffer = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool use_monotonic_raw_clock = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FtraceConfig*>(
      &from));
}

void FtraceConfig::MergeFrom(const FtraceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ftrace_events_.MergeFrom(from.ftrace_events_);
  atrace_categories_.MergeFrom(from.atrace_categories_);
  atrace_apps_.MergeFrom(from.atrace_apps_);
  syscall_events_.MergeFrom(from.syscall_events_);
  function_filters_.MergeFrom(from.function_filters_);
  function_graph_roots_.MergeFrom(from.function_graph_roots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_instance_name(from._internal_instance_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_compact_sched()->::perfetto::protos::FtraceConfig_CompactSchedConfig::MergeFrom(from._internal_compact_sched());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_print_filter()->::perfetto::protos::FtraceConfig_PrintFilter::MergeFrom(from._internal_print_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      buffer_size_kb_ = from.buffer_size_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      drain_period_ms_ = from.drain_period_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      symbolize_ksyms_ = from.symbolize_ksyms_;
    }
    if (cached_has_bits & 0x00000040u) {
      initialize_ksyms_synchronously_for_testing_ = from.initialize_ksyms_synchronously_for_testing_;
    }
    if (cached_has_bits & 0x00000080u) {
      throttle_rss_stat_ = from.throttle_rss_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      disable_generic_events_ = from.disable_generic_events_;
    }
    if (cached_has_bits & 0x00000200u) {
      ksyms_mem_policy_ = from.ksyms_mem_policy_;
    }
    if (cached_has_bits & 0x00000400u) {
      enable_function_graph_ = from.enable_function_graph_;
    }
    if (cached_has_bits & 0x00000800u) {
      preserve_ftrace_buffer_ = from.preserve_ftrace_buffer_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_monotonic_raw_clock_ = from.use_monotonic_raw_clock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FtraceConfig::CopyFrom(const FtraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig::IsInitialized() const {
  return true;
}

void FtraceConfig::InternalSwap(FtraceConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ftrace_events_.InternalSwap(&other->ftrace_events_);
  atrace_categories_.InternalSwap(&other->atrace_categories_);
  atrace_apps_.InternalSwap(&other->atrace_apps_);
  syscall_events_.InternalSwap(&other->syscall_events_);
  function_filters_.InternalSwap(&other->function_filters_);
  function_graph_roots_.InternalSwap(&other->function_graph_roots_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instance_name_, lhs_arena,
      &other->instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtraceConfig, use_monotonic_raw_clock_)
      + sizeof(FtraceConfig::use_monotonic_raw_clock_)
      - PROTOBUF_FIELD_OFFSET(FtraceConfig, compact_sched_)>(
          reinterpret_cast<char*>(&compact_sched_),
          reinterpret_cast<char*>(&other->compact_sched_));
}

std::string FtraceConfig::GetTypeName() const {
  return "perfetto.protos.FtraceConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig_CompactSchedConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig_CompactSchedConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig_CompactSchedConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig_PrintFilter_Rule*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig_PrintFilter_Rule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig_PrintFilter_Rule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig_PrintFilter*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig_PrintFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig_PrintFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
