// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/chrome/scenario_config.proto

#include "protos/perfetto/config/chrome/scenario_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR TriggerRule_HistogramTrigger::TriggerRule_HistogramTrigger(
    ::_pbi::ConstantInitialized)
  : histogram_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , min_value_(int64_t{0})
  , max_value_(int64_t{0}){}
struct TriggerRule_HistogramTriggerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TriggerRule_HistogramTriggerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TriggerRule_HistogramTriggerDefaultTypeInternal() {}
  union {
    TriggerRule_HistogramTrigger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TriggerRule_HistogramTriggerDefaultTypeInternal _TriggerRule_HistogramTrigger_default_instance_;
PROTOBUF_CONSTEXPR TriggerRule_RepeatingInterval::TriggerRule_RepeatingInterval(
    ::_pbi::ConstantInitialized)
  : period_ms_(uint64_t{0u})
  , randomized_(false){}
struct TriggerRule_RepeatingIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TriggerRule_RepeatingIntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TriggerRule_RepeatingIntervalDefaultTypeInternal() {}
  union {
    TriggerRule_RepeatingInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TriggerRule_RepeatingIntervalDefaultTypeInternal _TriggerRule_RepeatingInterval_default_instance_;
PROTOBUF_CONSTEXPR TriggerRule::TriggerRule(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , delay_ms_(uint64_t{0u})
  , trigger_chance_(0)
  , _oneof_case_{}{}
struct TriggerRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TriggerRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TriggerRuleDefaultTypeInternal() {}
  union {
    TriggerRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TriggerRuleDefaultTypeInternal _TriggerRule_default_instance_;
PROTOBUF_CONSTEXPR NestedScenarioConfig::NestedScenarioConfig(
    ::_pbi::ConstantInitialized)
  : start_rules_()
  , stop_rules_()
  , upload_rules_()
  , scenario_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct NestedScenarioConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NestedScenarioConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NestedScenarioConfigDefaultTypeInternal() {}
  union {
    NestedScenarioConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NestedScenarioConfigDefaultTypeInternal _NestedScenarioConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioConfig::ScenarioConfig(
    ::_pbi::ConstantInitialized)
  : start_rules_()
  , stop_rules_()
  , upload_rules_()
  , setup_rules_()
  , nested_scenarios_()
  , scenario_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trace_config_(nullptr){}
struct ScenarioConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioConfigDefaultTypeInternal() {}
  union {
    ScenarioConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioConfigDefaultTypeInternal _ScenarioConfig_default_instance_;
PROTOBUF_CONSTEXPR ChromeFieldTracingConfig::ChromeFieldTracingConfig(
    ::_pbi::ConstantInitialized)
  : scenarios_(){}
struct ChromeFieldTracingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeFieldTracingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeFieldTracingConfigDefaultTypeInternal() {}
  union {
    ChromeFieldTracingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeFieldTracingConfigDefaultTypeInternal _ChromeFieldTracingConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class TriggerRule_HistogramTrigger::_Internal {
 public:
  using HasBits = decltype(std::declval<TriggerRule_HistogramTrigger>()._has_bits_);
  static void set_has_histogram_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TriggerRule_HistogramTrigger::TriggerRule_HistogramTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TriggerRule.HistogramTrigger)
}
TriggerRule_HistogramTrigger::TriggerRule_HistogramTrigger(const TriggerRule_HistogramTrigger& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  histogram_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    histogram_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_histogram_name()) {
    histogram_name_.Set(from._internal_histogram_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&min_value_, &from.min_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_value_) -
    reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TriggerRule.HistogramTrigger)
}

inline void TriggerRule_HistogramTrigger::SharedCtor() {
histogram_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  histogram_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_value_) -
    reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
}

TriggerRule_HistogramTrigger::~TriggerRule_HistogramTrigger() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TriggerRule.HistogramTrigger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TriggerRule_HistogramTrigger::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  histogram_name_.Destroy();
}

void TriggerRule_HistogramTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TriggerRule_HistogramTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TriggerRule.HistogramTrigger)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    histogram_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&min_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_value_) -
        reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TriggerRule_HistogramTrigger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string histogram_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_histogram_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 min_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_min_value(&has_bits);
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_value(&has_bits);
          max_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TriggerRule_HistogramTrigger::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TriggerRule.HistogramTrigger)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string histogram_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_histogram_name(), target);
  }

  // optional int64 min_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_min_value(), target);
  }

  // optional int64 max_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TriggerRule.HistogramTrigger)
  return target;
}

size_t TriggerRule_HistogramTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TriggerRule.HistogramTrigger)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string histogram_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_histogram_name());
    }

    // optional int64 min_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_min_value());
    }

    // optional int64 max_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerRule_HistogramTrigger::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TriggerRule_HistogramTrigger*>(
      &from));
}

void TriggerRule_HistogramTrigger::MergeFrom(const TriggerRule_HistogramTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TriggerRule.HistogramTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_histogram_name(from._internal_histogram_name());
    }
    if (cached_has_bits & 0x00000002u) {
      min_value_ = from.min_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_value_ = from.max_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TriggerRule_HistogramTrigger::CopyFrom(const TriggerRule_HistogramTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TriggerRule.HistogramTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerRule_HistogramTrigger::IsInitialized() const {
  return true;
}

void TriggerRule_HistogramTrigger::InternalSwap(TriggerRule_HistogramTrigger* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &histogram_name_, lhs_arena,
      &other->histogram_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TriggerRule_HistogramTrigger, max_value_)
      + sizeof(TriggerRule_HistogramTrigger::max_value_)
      - PROTOBUF_FIELD_OFFSET(TriggerRule_HistogramTrigger, min_value_)>(
          reinterpret_cast<char*>(&min_value_),
          reinterpret_cast<char*>(&other->min_value_));
}

std::string TriggerRule_HistogramTrigger::GetTypeName() const {
  return "perfetto.protos.TriggerRule.HistogramTrigger";
}


// ===================================================================

class TriggerRule_RepeatingInterval::_Internal {
 public:
  using HasBits = decltype(std::declval<TriggerRule_RepeatingInterval>()._has_bits_);
  static void set_has_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_randomized(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TriggerRule_RepeatingInterval::TriggerRule_RepeatingInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TriggerRule.RepeatingInterval)
}
TriggerRule_RepeatingInterval::TriggerRule_RepeatingInterval(const TriggerRule_RepeatingInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&period_ms_, &from.period_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&randomized_) -
    reinterpret_cast<char*>(&period_ms_)) + sizeof(randomized_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TriggerRule.RepeatingInterval)
}

inline void TriggerRule_RepeatingInterval::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&period_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&randomized_) -
    reinterpret_cast<char*>(&period_ms_)) + sizeof(randomized_));
}

TriggerRule_RepeatingInterval::~TriggerRule_RepeatingInterval() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TriggerRule.RepeatingInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TriggerRule_RepeatingInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TriggerRule_RepeatingInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TriggerRule_RepeatingInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TriggerRule.RepeatingInterval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&period_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&randomized_) -
        reinterpret_cast<char*>(&period_ms_)) + sizeof(randomized_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TriggerRule_RepeatingInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 period_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_period_ms(&has_bits);
          period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool randomized = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_randomized(&has_bits);
          randomized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TriggerRule_RepeatingInterval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TriggerRule.RepeatingInterval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 period_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_period_ms(), target);
  }

  // optional bool randomized = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_randomized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TriggerRule.RepeatingInterval)
  return target;
}

size_t TriggerRule_RepeatingInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TriggerRule.RepeatingInterval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 period_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_period_ms());
    }

    // optional bool randomized = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerRule_RepeatingInterval::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TriggerRule_RepeatingInterval*>(
      &from));
}

void TriggerRule_RepeatingInterval::MergeFrom(const TriggerRule_RepeatingInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TriggerRule.RepeatingInterval)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      period_ms_ = from.period_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      randomized_ = from.randomized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TriggerRule_RepeatingInterval::CopyFrom(const TriggerRule_RepeatingInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TriggerRule.RepeatingInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerRule_RepeatingInterval::IsInitialized() const {
  return true;
}

void TriggerRule_RepeatingInterval::InternalSwap(TriggerRule_RepeatingInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TriggerRule_RepeatingInterval, randomized_)
      + sizeof(TriggerRule_RepeatingInterval::randomized_)
      - PROTOBUF_FIELD_OFFSET(TriggerRule_RepeatingInterval, period_ms_)>(
          reinterpret_cast<char*>(&period_ms_),
          reinterpret_cast<char*>(&other->period_ms_));
}

std::string TriggerRule_RepeatingInterval::GetTypeName() const {
  return "perfetto.protos.TriggerRule.RepeatingInterval";
}


// ===================================================================

class TriggerRule::_Internal {
 public:
  using HasBits = decltype(std::declval<TriggerRule>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trigger_chance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::TriggerRule_HistogramTrigger& histogram(const TriggerRule* msg);
  static const ::perfetto::protos::TriggerRule_RepeatingInterval& repeating_interval(const TriggerRule* msg);
};

const ::perfetto::protos::TriggerRule_HistogramTrigger&
TriggerRule::_Internal::histogram(const TriggerRule* msg) {
  return *msg->trigger_.histogram_;
}
const ::perfetto::protos::TriggerRule_RepeatingInterval&
TriggerRule::_Internal::repeating_interval(const TriggerRule* msg) {
  return *msg->trigger_.repeating_interval_;
}
void TriggerRule::set_allocated_histogram(::perfetto::protos::TriggerRule_HistogramTrigger* histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_trigger();
  if (histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(histogram);
    if (message_arena != submessage_arena) {
      histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogram, submessage_arena);
    }
    set_has_histogram();
    trigger_.histogram_ = histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TriggerRule.histogram)
}
void TriggerRule::set_allocated_repeating_interval(::perfetto::protos::TriggerRule_RepeatingInterval* repeating_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_trigger();
  if (repeating_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(repeating_interval);
    if (message_arena != submessage_arena) {
      repeating_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeating_interval, submessage_arena);
    }
    set_has_repeating_interval();
    trigger_.repeating_interval_ = repeating_interval;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TriggerRule.repeating_interval)
}
TriggerRule::TriggerRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TriggerRule)
}
TriggerRule::TriggerRule(const TriggerRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&delay_ms_, &from.delay_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_chance_) -
    reinterpret_cast<char*>(&delay_ms_)) + sizeof(trigger_chance_));
  clear_has_trigger();
  switch (from.trigger_case()) {
    case kManualTriggerName: {
      _internal_set_manual_trigger_name(from._internal_manual_trigger_name());
      break;
    }
    case kHistogram: {
      _internal_mutable_histogram()->::perfetto::protos::TriggerRule_HistogramTrigger::MergeFrom(from._internal_histogram());
      break;
    }
    case kRepeatingInterval: {
      _internal_mutable_repeating_interval()->::perfetto::protos::TriggerRule_RepeatingInterval::MergeFrom(from._internal_repeating_interval());
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TriggerRule)
}

inline void TriggerRule::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&delay_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trigger_chance_) -
    reinterpret_cast<char*>(&delay_ms_)) + sizeof(trigger_chance_));
clear_has_trigger();
}

TriggerRule::~TriggerRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TriggerRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TriggerRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (has_trigger()) {
    clear_trigger();
  }
}

void TriggerRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TriggerRule::clear_trigger() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TriggerRule)
  switch (trigger_case()) {
    case kManualTriggerName: {
      trigger_.manual_trigger_name_.Destroy();
      break;
    }
    case kHistogram: {
      if (GetArenaForAllocation() == nullptr) {
        delete trigger_.histogram_;
      }
      break;
    }
    case kRepeatingInterval: {
      if (GetArenaForAllocation() == nullptr) {
        delete trigger_.repeating_interval_;
      }
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRIGGER_NOT_SET;
}


void TriggerRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TriggerRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&delay_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trigger_chance_) -
        reinterpret_cast<char*>(&delay_ms_)) + sizeof(trigger_chance_));
  }
  clear_trigger();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TriggerRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float trigger_chance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_trigger_chance(&has_bits);
          trigger_chance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 delay_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_delay_ms(&has_bits);
          delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string manual_trigger_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_manual_trigger_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogram(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeating_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TriggerRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TriggerRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional float trigger_chance = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_trigger_chance(), target);
  }

  // optional uint64 delay_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_delay_ms(), target);
  }

  switch (trigger_case()) {
    case kManualTriggerName: {
      target = stream->WriteStringMaybeAliased(
          4, this->_internal_manual_trigger_name(), target);
      break;
    }
    case kHistogram: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::histogram(this),
          _Internal::histogram(this).GetCachedSize(), target, stream);
      break;
    }
    case kRepeatingInterval: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::repeating_interval(this),
          _Internal::repeating_interval(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TriggerRule)
  return target;
}

size_t TriggerRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TriggerRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 delay_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_delay_ms());
    }

    // optional float trigger_chance = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  switch (trigger_case()) {
    // string manual_trigger_name = 4;
    case kManualTriggerName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manual_trigger_name());
      break;
    }
    // .perfetto.protos.TriggerRule.HistogramTrigger histogram = 5;
    case kHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trigger_.histogram_);
      break;
    }
    // .perfetto.protos.TriggerRule.RepeatingInterval repeating_interval = 6;
    case kRepeatingInterval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trigger_.repeating_interval_);
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TriggerRule*>(
      &from));
}

void TriggerRule::MergeFrom(const TriggerRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TriggerRule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      delay_ms_ = from.delay_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      trigger_chance_ = from.trigger_chance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.trigger_case()) {
    case kManualTriggerName: {
      _internal_set_manual_trigger_name(from._internal_manual_trigger_name());
      break;
    }
    case kHistogram: {
      _internal_mutable_histogram()->::perfetto::protos::TriggerRule_HistogramTrigger::MergeFrom(from._internal_histogram());
      break;
    }
    case kRepeatingInterval: {
      _internal_mutable_repeating_interval()->::perfetto::protos::TriggerRule_RepeatingInterval::MergeFrom(from._internal_repeating_interval());
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TriggerRule::CopyFrom(const TriggerRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TriggerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerRule::IsInitialized() const {
  return true;
}

void TriggerRule::InternalSwap(TriggerRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TriggerRule, trigger_chance_)
      + sizeof(TriggerRule::trigger_chance_)
      - PROTOBUF_FIELD_OFFSET(TriggerRule, delay_ms_)>(
          reinterpret_cast<char*>(&delay_ms_),
          reinterpret_cast<char*>(&other->delay_ms_));
  swap(trigger_, other->trigger_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TriggerRule::GetTypeName() const {
  return "perfetto.protos.TriggerRule";
}


// ===================================================================

class NestedScenarioConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NestedScenarioConfig>()._has_bits_);
  static void set_has_scenario_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NestedScenarioConfig::NestedScenarioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  start_rules_(arena),
  stop_rules_(arena),
  upload_rules_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.NestedScenarioConfig)
}
NestedScenarioConfig::NestedScenarioConfig(const NestedScenarioConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      start_rules_(from.start_rules_),
      stop_rules_(from.stop_rules_),
      upload_rules_(from.upload_rules_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  scenario_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    scenario_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scenario_name()) {
    scenario_name_.Set(from._internal_scenario_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.NestedScenarioConfig)
}

inline void NestedScenarioConfig::SharedCtor() {
scenario_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  scenario_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NestedScenarioConfig::~NestedScenarioConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.NestedScenarioConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NestedScenarioConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  scenario_name_.Destroy();
}

void NestedScenarioConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NestedScenarioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.NestedScenarioConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_rules_.Clear();
  stop_rules_.Clear();
  upload_rules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    scenario_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NestedScenarioConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string scenario_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_scenario_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TriggerRule start_rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TriggerRule stop_rules = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TriggerRule upload_rules = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upload_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NestedScenarioConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.NestedScenarioConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scenario_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scenario_name(), target);
  }

  // repeated .perfetto.protos.TriggerRule start_rules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_start_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_start_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.TriggerRule stop_rules = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.TriggerRule upload_rules = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_upload_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_upload_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.NestedScenarioConfig)
  return target;
}

size_t NestedScenarioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.NestedScenarioConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TriggerRule start_rules = 2;
  total_size += 1UL * this->_internal_start_rules_size();
  for (const auto& msg : this->start_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TriggerRule stop_rules = 3;
  total_size += 1UL * this->_internal_stop_rules_size();
  for (const auto& msg : this->stop_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TriggerRule upload_rules = 4;
  total_size += 1UL * this->_internal_upload_rules_size();
  for (const auto& msg : this->upload_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string scenario_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scenario_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NestedScenarioConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NestedScenarioConfig*>(
      &from));
}

void NestedScenarioConfig::MergeFrom(const NestedScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.NestedScenarioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  start_rules_.MergeFrom(from.start_rules_);
  stop_rules_.MergeFrom(from.stop_rules_);
  upload_rules_.MergeFrom(from.upload_rules_);
  if (from._internal_has_scenario_name()) {
    _internal_set_scenario_name(from._internal_scenario_name());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NestedScenarioConfig::CopyFrom(const NestedScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.NestedScenarioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedScenarioConfig::IsInitialized() const {
  return true;
}

void NestedScenarioConfig::InternalSwap(NestedScenarioConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_rules_.InternalSwap(&other->start_rules_);
  stop_rules_.InternalSwap(&other->stop_rules_);
  upload_rules_.InternalSwap(&other->upload_rules_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &scenario_name_, lhs_arena,
      &other->scenario_name_, rhs_arena
  );
}

std::string NestedScenarioConfig::GetTypeName() const {
  return "perfetto.protos.NestedScenarioConfig";
}


// ===================================================================

class ScenarioConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioConfig>()._has_bits_);
  static void set_has_scenario_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::TraceConfig& trace_config(const ScenarioConfig* msg);
  static void set_has_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::TraceConfig&
ScenarioConfig::_Internal::trace_config(const ScenarioConfig* msg) {
  return *msg->trace_config_;
}
void ScenarioConfig::clear_trace_config() {
  if (trace_config_ != nullptr) trace_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ScenarioConfig::ScenarioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  start_rules_(arena),
  stop_rules_(arena),
  upload_rules_(arena),
  setup_rules_(arena),
  nested_scenarios_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ScenarioConfig)
}
ScenarioConfig::ScenarioConfig(const ScenarioConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      start_rules_(from.start_rules_),
      stop_rules_(from.stop_rules_),
      upload_rules_(from.upload_rules_),
      setup_rules_(from.setup_rules_),
      nested_scenarios_(from.nested_scenarios_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  scenario_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    scenario_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scenario_name()) {
    scenario_name_.Set(from._internal_scenario_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_trace_config()) {
    trace_config_ = new ::perfetto::protos::TraceConfig(*from.trace_config_);
  } else {
    trace_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ScenarioConfig)
}

inline void ScenarioConfig::SharedCtor() {
scenario_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  scenario_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trace_config_ = nullptr;
}

ScenarioConfig::~ScenarioConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ScenarioConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  scenario_name_.Destroy();
  if (this != internal_default_instance()) delete trace_config_;
}

void ScenarioConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScenarioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ScenarioConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_rules_.Clear();
  stop_rules_.Clear();
  upload_rules_.Clear();
  setup_rules_.Clear();
  nested_scenarios_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      scenario_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trace_config_ != nullptr);
      trace_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ScenarioConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string scenario_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_scenario_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TriggerRule start_rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TriggerRule stop_rules = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TriggerRule upload_rules = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upload_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TriggerRule setup_rules = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_setup_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig trace_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nested_scenarios(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ScenarioConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scenario_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scenario_name(), target);
  }

  // repeated .perfetto.protos.TriggerRule start_rules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_start_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_start_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.TriggerRule stop_rules = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.TriggerRule upload_rules = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_upload_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_upload_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.TriggerRule setup_rules = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_setup_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_setup_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TraceConfig trace_config = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::trace_config(this),
        _Internal::trace_config(this).GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nested_scenarios_size()); i < n; i++) {
    const auto& repfield = this->_internal_nested_scenarios(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ScenarioConfig)
  return target;
}

size_t ScenarioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ScenarioConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TriggerRule start_rules = 2;
  total_size += 1UL * this->_internal_start_rules_size();
  for (const auto& msg : this->start_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TriggerRule stop_rules = 3;
  total_size += 1UL * this->_internal_stop_rules_size();
  for (const auto& msg : this->stop_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TriggerRule upload_rules = 4;
  total_size += 1UL * this->_internal_upload_rules_size();
  for (const auto& msg : this->upload_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TriggerRule setup_rules = 5;
  total_size += 1UL * this->_internal_setup_rules_size();
  for (const auto& msg : this->setup_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.NestedScenarioConfig nested_scenarios = 7;
  total_size += 1UL * this->_internal_nested_scenarios_size();
  for (const auto& msg : this->nested_scenarios_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string scenario_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scenario_name());
    }

    // optional .perfetto.protos.TraceConfig trace_config = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trace_config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ScenarioConfig*>(
      &from));
}

void ScenarioConfig::MergeFrom(const ScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ScenarioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  start_rules_.MergeFrom(from.start_rules_);
  stop_rules_.MergeFrom(from.stop_rules_);
  upload_rules_.MergeFrom(from.upload_rules_);
  setup_rules_.MergeFrom(from.setup_rules_);
  nested_scenarios_.MergeFrom(from.nested_scenarios_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_scenario_name(from._internal_scenario_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_trace_config()->::perfetto::protos::TraceConfig::MergeFrom(from._internal_trace_config());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ScenarioConfig::CopyFrom(const ScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ScenarioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioConfig::IsInitialized() const {
  return true;
}

void ScenarioConfig::InternalSwap(ScenarioConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_rules_.InternalSwap(&other->start_rules_);
  stop_rules_.InternalSwap(&other->stop_rules_);
  upload_rules_.InternalSwap(&other->upload_rules_);
  setup_rules_.InternalSwap(&other->setup_rules_);
  nested_scenarios_.InternalSwap(&other->nested_scenarios_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &scenario_name_, lhs_arena,
      &other->scenario_name_, rhs_arena
  );
  swap(trace_config_, other->trace_config_);
}

std::string ScenarioConfig::GetTypeName() const {
  return "perfetto.protos.ScenarioConfig";
}


// ===================================================================

class ChromeFieldTracingConfig::_Internal {
 public:
};

ChromeFieldTracingConfig::ChromeFieldTracingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  scenarios_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeFieldTracingConfig)
}
ChromeFieldTracingConfig::ChromeFieldTracingConfig(const ChromeFieldTracingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      scenarios_(from.scenarios_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeFieldTracingConfig)
}

inline void ChromeFieldTracingConfig::SharedCtor() {
}

ChromeFieldTracingConfig::~ChromeFieldTracingConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeFieldTracingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeFieldTracingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeFieldTracingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeFieldTracingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeFieldTracingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scenarios_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeFieldTracingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ScenarioConfig scenarios = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scenarios(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeFieldTracingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeFieldTracingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ScenarioConfig scenarios = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scenarios_size()); i < n; i++) {
    const auto& repfield = this->_internal_scenarios(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeFieldTracingConfig)
  return target;
}

size_t ChromeFieldTracingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeFieldTracingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ScenarioConfig scenarios = 1;
  total_size += 1UL * this->_internal_scenarios_size();
  for (const auto& msg : this->scenarios_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeFieldTracingConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeFieldTracingConfig*>(
      &from));
}

void ChromeFieldTracingConfig::MergeFrom(const ChromeFieldTracingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeFieldTracingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scenarios_.MergeFrom(from.scenarios_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeFieldTracingConfig::CopyFrom(const ChromeFieldTracingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeFieldTracingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeFieldTracingConfig::IsInitialized() const {
  return true;
}

void ChromeFieldTracingConfig::InternalSwap(ChromeFieldTracingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scenarios_.InternalSwap(&other->scenarios_);
}

std::string ChromeFieldTracingConfig::GetTypeName() const {
  return "perfetto.protos.ChromeFieldTracingConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TriggerRule_HistogramTrigger*
Arena::CreateMaybeMessage< ::perfetto::protos::TriggerRule_HistogramTrigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TriggerRule_HistogramTrigger >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TriggerRule_RepeatingInterval*
Arena::CreateMaybeMessage< ::perfetto::protos::TriggerRule_RepeatingInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TriggerRule_RepeatingInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TriggerRule*
Arena::CreateMaybeMessage< ::perfetto::protos::TriggerRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TriggerRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::NestedScenarioConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::NestedScenarioConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::NestedScenarioConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ScenarioConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::ScenarioConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ScenarioConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeFieldTracingConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeFieldTracingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeFieldTracingConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
