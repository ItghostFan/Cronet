// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: send_algorithm_test_result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_send_5falgorithm_5ftest_5fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_send_5falgorithm_5ftest_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include "net/base/net_export.h"
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_send_5falgorithm_5ftest_5fresult_2eproto NET_EXPORT_PRIVATE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct NET_EXPORT_PRIVATE TableStruct_send_5falgorithm_5ftest_5fresult_2eproto {
static const uint32_t offsets[];
};
namespace quic {
class SendAlgorithmTestResult;
struct SendAlgorithmTestResultDefaultTypeInternal;
NET_EXPORT_PRIVATE extern SendAlgorithmTestResultDefaultTypeInternal _SendAlgorithmTestResult_default_instance_;
}  // namespace quic
PROTOBUF_NAMESPACE_OPEN
template<> NET_EXPORT_PRIVATE ::quic::SendAlgorithmTestResult* Arena::CreateMaybeMessage<::quic::SendAlgorithmTestResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace quic {

// ===================================================================

class NET_EXPORT_PRIVATE SendAlgorithmTestResult final :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:quic.SendAlgorithmTestResult) */ {
public:
inline SendAlgorithmTestResult() : SendAlgorithmTestResult(nullptr) {}
~SendAlgorithmTestResult() override;
explicit PROTOBUF_CONSTEXPR SendAlgorithmTestResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

SendAlgorithmTestResult(const SendAlgorithmTestResult& from);
SendAlgorithmTestResult(SendAlgorithmTestResult&& from) noexcept
: SendAlgorithmTestResult() {
*this = ::std::move(from);
}

inline SendAlgorithmTestResult& operator=(const SendAlgorithmTestResult& from) {
CopyFrom(from);
return *this;
}
inline SendAlgorithmTestResult& operator=(SendAlgorithmTestResult&& from) noexcept {
if (this == &from) return *this;
if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields<std::string>();
}

static const SendAlgorithmTestResult& default_instance() {
return *internal_default_instance();
}
static inline const SendAlgorithmTestResult* internal_default_instance() {
return reinterpret_cast<const SendAlgorithmTestResult*>(
&_SendAlgorithmTestResult_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

friend void swap(SendAlgorithmTestResult& a, SendAlgorithmTestResult& b) {
a.Swap(&b);
}
PROTOBUF_NOINLINE void Swap(SendAlgorithmTestResult* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetOwningArena() != nullptr &&
GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(SendAlgorithmTestResult* other) {
if (other == this) return;
GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

SendAlgorithmTestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
return CreateMaybeMessage<SendAlgorithmTestResult>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
void CopyFrom(const SendAlgorithmTestResult& from);
void MergeFrom(const SendAlgorithmTestResult& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
uint8_t* _InternalSerialize(
uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(SendAlgorithmTestResult* other);

private:
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "quic.SendAlgorithmTestResult";
}
protected:
explicit SendAlgorithmTestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
bool is_message_owned = false);
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

enum : int {
kTestNameFieldNumber = 1,
kRandomSeedFieldNumber = 2,
kSimulatedDurationMicrosFieldNumber = 3,
};
// optional string test_name = 1;
bool has_test_name() const;
private:
bool _internal_has_test_name() const;
public:
void clear_test_name();
const std::string& test_name() const;
template <typename ArgT0 = const std::string&, typename... ArgT>
void set_test_name(ArgT0&& arg0, ArgT... args);
std::string* mutable_test_name();
PROTOBUF_NODISCARD std::string* release_test_name();
void set_allocated_test_name(std::string* test_name);
private:
const std::string& _internal_test_name() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_test_name(const std::string& value);
std::string* _internal_mutable_test_name();
public:

// optional uint64 random_seed = 2;
bool has_random_seed() const;
private:
bool _internal_has_random_seed() const;
public:
void clear_random_seed();
uint64_t random_seed() const;
void set_random_seed(uint64_t value);
private:
uint64_t _internal_random_seed() const;
void _internal_set_random_seed(uint64_t value);
public:

// optional int64 simulated_duration_micros = 3;
bool has_simulated_duration_micros() const;
private:
bool _internal_has_simulated_duration_micros() const;
public:
void clear_simulated_duration_micros();
int64_t simulated_duration_micros() const;
void set_simulated_duration_micros(int64_t value);
private:
int64_t _internal_simulated_duration_micros() const;
void _internal_set_simulated_duration_micros(int64_t value);
public:

// @@protoc_insertion_point(class_scope:quic.SendAlgorithmTestResult)
private:
class _Internal;

template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
typedef void InternalArenaConstructable_;
typedef void DestructorSkippable_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_name_;
uint64_t random_seed_;
int64_t simulated_duration_micros_;
friend struct ::TableStruct_send_5falgorithm_5ftest_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendAlgorithmTestResult

// optional string test_name = 1;
inline bool SendAlgorithmTestResult::_internal_has_test_name() const {
bool value = (_has_bits_[0] & 0x00000001u) != 0;
return value;
}
inline bool SendAlgorithmTestResult::has_test_name() const {
return _internal_has_test_name();
}
inline void SendAlgorithmTestResult::clear_test_name() {
test_name_.ClearToEmpty();
_has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SendAlgorithmTestResult::test_name() const {
// @@protoc_insertion_point(field_get:quic.SendAlgorithmTestResult.test_name)
return _internal_test_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendAlgorithmTestResult::set_test_name(ArgT0&& arg0, ArgT... args) {
_has_bits_[0] |= 0x00000001u;
test_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
// @@protoc_insertion_point(field_set:quic.SendAlgorithmTestResult.test_name)
}
inline std::string* SendAlgorithmTestResult::mutable_test_name() {
std::string* _s = _internal_mutable_test_name();
// @@protoc_insertion_point(field_mutable:quic.SendAlgorithmTestResult.test_name)
return _s;
}
inline const std::string& SendAlgorithmTestResult::_internal_test_name() const {
return test_name_.Get();
}
inline void SendAlgorithmTestResult::_internal_set_test_name(const std::string& value) {
_has_bits_[0] |= 0x00000001u;
test_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SendAlgorithmTestResult::_internal_mutable_test_name() {
_has_bits_[0] |= 0x00000001u;
return test_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SendAlgorithmTestResult::release_test_name() {
// @@protoc_insertion_point(field_release:quic.SendAlgorithmTestResult.test_name)
if (!_internal_has_test_name()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000001u;
auto* p = test_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (test_name_.IsDefault()) {
test_name_.Set("", GetArenaForAllocation());
}
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
return p;
}
inline void SendAlgorithmTestResult::set_allocated_test_name(std::string* test_name) {
if (test_name != nullptr) {
_has_bits_[0] |= 0x00000001u;
} else {
_has_bits_[0] &= ~0x00000001u;
}
test_name_.SetAllocated(test_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (test_name_.IsDefault()) {
test_name_.Set("", GetArenaForAllocation());
}
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:quic.SendAlgorithmTestResult.test_name)
}

// optional uint64 random_seed = 2;
inline bool SendAlgorithmTestResult::_internal_has_random_seed() const {
bool value = (_has_bits_[0] & 0x00000002u) != 0;
return value;
}
inline bool SendAlgorithmTestResult::has_random_seed() const {
return _internal_has_random_seed();
}
inline void SendAlgorithmTestResult::clear_random_seed() {
random_seed_ = uint64_t{0u};
_has_bits_[0] &= ~0x00000002u;
}
inline uint64_t SendAlgorithmTestResult::_internal_random_seed() const {
return random_seed_;
}
inline uint64_t SendAlgorithmTestResult::random_seed() const {
// @@protoc_insertion_point(field_get:quic.SendAlgorithmTestResult.random_seed)
return _internal_random_seed();
}
inline void SendAlgorithmTestResult::_internal_set_random_seed(uint64_t value) {
_has_bits_[0] |= 0x00000002u;
random_seed_ = value;
}
inline void SendAlgorithmTestResult::set_random_seed(uint64_t value) {
_internal_set_random_seed(value);
// @@protoc_insertion_point(field_set:quic.SendAlgorithmTestResult.random_seed)
}

// optional int64 simulated_duration_micros = 3;
inline bool SendAlgorithmTestResult::_internal_has_simulated_duration_micros() const {
bool value = (_has_bits_[0] & 0x00000004u) != 0;
return value;
}
inline bool SendAlgorithmTestResult::has_simulated_duration_micros() const {
return _internal_has_simulated_duration_micros();
}
inline void SendAlgorithmTestResult::clear_simulated_duration_micros() {
simulated_duration_micros_ = int64_t{0};
_has_bits_[0] &= ~0x00000004u;
}
inline int64_t SendAlgorithmTestResult::_internal_simulated_duration_micros() const {
return simulated_duration_micros_;
}
inline int64_t SendAlgorithmTestResult::simulated_duration_micros() const {
// @@protoc_insertion_point(field_get:quic.SendAlgorithmTestResult.simulated_duration_micros)
return _internal_simulated_duration_micros();
}
inline void SendAlgorithmTestResult::_internal_set_simulated_duration_micros(int64_t value) {
_has_bits_[0] |= 0x00000004u;
simulated_duration_micros_ = value;
}
inline void SendAlgorithmTestResult::set_simulated_duration_micros(int64_t value) {
_internal_set_simulated_duration_micros(value);
// @@protoc_insertion_point(field_set:quic.SendAlgorithmTestResult.simulated_duration_micros)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace quic

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_send_5falgorithm_5ftest_5fresult_2eproto
