// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: isolation_info.proto

#include "isolation_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace net {
namespace proto {
PROTOBUF_CONSTEXPR IsolationInfo_PartyContext::IsolationInfo_PartyContext(
    ::_pbi::ConstantInitialized)
  : site_(){}
struct IsolationInfo_PartyContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsolationInfo_PartyContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsolationInfo_PartyContextDefaultTypeInternal() {}
  union {
    IsolationInfo_PartyContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsolationInfo_PartyContextDefaultTypeInternal _IsolationInfo_PartyContext_default_instance_;
PROTOBUF_CONSTEXPR IsolationInfo::IsolationInfo(
    ::_pbi::ConstantInitialized)
  : top_frame_origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , frame_origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , site_for_cookies_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , party_context_(nullptr)
  , request_type_(0){}
struct IsolationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsolationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsolationInfoDefaultTypeInternal() {}
  union {
    IsolationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsolationInfoDefaultTypeInternal _IsolationInfo_default_instance_;
}  // namespace proto
}  // namespace net
namespace net {
namespace proto {

// ===================================================================

class IsolationInfo_PartyContext::_Internal {
 public:
};

IsolationInfo_PartyContext::IsolationInfo_PartyContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  site_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:net.proto.IsolationInfo.PartyContext)
}
IsolationInfo_PartyContext::IsolationInfo_PartyContext(const IsolationInfo_PartyContext& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      site_(from.site_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:net.proto.IsolationInfo.PartyContext)
}

inline void IsolationInfo_PartyContext::SharedCtor() {
}

IsolationInfo_PartyContext::~IsolationInfo_PartyContext() {
  // @@protoc_insertion_point(destructor:net.proto.IsolationInfo.PartyContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsolationInfo_PartyContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsolationInfo_PartyContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IsolationInfo_PartyContext::Clear() {
// @@protoc_insertion_point(message_clear_start:net.proto.IsolationInfo.PartyContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IsolationInfo_PartyContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string site = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_site();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsolationInfo_PartyContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.proto.IsolationInfo.PartyContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string site = 1;
  for (int i = 0, n = this->_internal_site_size(); i < n; i++) {
    const auto& s = this->_internal_site(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.proto.IsolationInfo.PartyContext)
  return target;
}

size_t IsolationInfo_PartyContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.proto.IsolationInfo.PartyContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string site = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(site_.size());
  for (int i = 0, n = site_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      site_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsolationInfo_PartyContext::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IsolationInfo_PartyContext*>(
      &from));
}

void IsolationInfo_PartyContext::MergeFrom(const IsolationInfo_PartyContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.proto.IsolationInfo.PartyContext)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  site_.MergeFrom(from.site_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IsolationInfo_PartyContext::CopyFrom(const IsolationInfo_PartyContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.proto.IsolationInfo.PartyContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolationInfo_PartyContext::IsInitialized() const {
  return true;
}

void IsolationInfo_PartyContext::InternalSwap(IsolationInfo_PartyContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  site_.InternalSwap(&other->site_);
}

std::string IsolationInfo_PartyContext::GetTypeName() const {
  return "net.proto.IsolationInfo.PartyContext";
}


// ===================================================================

class IsolationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<IsolationInfo>()._has_bits_);
  static void set_has_request_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_top_frame_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_site_for_cookies(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::net::proto::IsolationInfo_PartyContext& party_context(const IsolationInfo* msg);
  static void set_has_party_context(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::net::proto::IsolationInfo_PartyContext&
IsolationInfo::_Internal::party_context(const IsolationInfo* msg) {
  return *msg->party_context_;
}
IsolationInfo::IsolationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:net.proto.IsolationInfo)
}
IsolationInfo::IsolationInfo(const IsolationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  top_frame_origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    top_frame_origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_top_frame_origin()) {
    top_frame_origin_.Set(from._internal_top_frame_origin(), 
      GetArenaForAllocation());
  }
  frame_origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_origin()) {
    frame_origin_.Set(from._internal_frame_origin(), 
      GetArenaForAllocation());
  }
  site_for_cookies_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    site_for_cookies_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_site_for_cookies()) {
    site_for_cookies_.Set(from._internal_site_for_cookies(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_party_context()) {
    party_context_ = new ::net::proto::IsolationInfo_PartyContext(*from.party_context_);
  } else {
    party_context_ = nullptr;
  }
  request_type_ = from.request_type_;
  // @@protoc_insertion_point(copy_constructor:net.proto.IsolationInfo)
}

inline void IsolationInfo::SharedCtor() {
top_frame_origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  top_frame_origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
frame_origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
site_for_cookies_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  site_for_cookies_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&party_context_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_type_) -
    reinterpret_cast<char*>(&party_context_)) + sizeof(request_type_));
}

IsolationInfo::~IsolationInfo() {
  // @@protoc_insertion_point(destructor:net.proto.IsolationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsolationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  top_frame_origin_.Destroy();
  frame_origin_.Destroy();
  site_for_cookies_.Destroy();
  if (this != internal_default_instance()) delete party_context_;
}

void IsolationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IsolationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net.proto.IsolationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      top_frame_origin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      frame_origin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      site_for_cookies_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(party_context_ != nullptr);
      party_context_->Clear();
    }
  }
  request_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IsolationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 request_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_request_type(&has_bits);
          request_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string top_frame_origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_top_frame_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string frame_origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_frame_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string site_for_cookies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_site_for_cookies();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .net.proto.IsolationInfo.PartyContext party_context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsolationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.proto.IsolationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 request_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_request_type(), target);
  }

  // optional string top_frame_origin = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_top_frame_origin(), target);
  }

  // optional string frame_origin = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame_origin(), target);
  }

  // optional string site_for_cookies = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_site_for_cookies(), target);
  }

  // optional .net.proto.IsolationInfo.PartyContext party_context = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::party_context(this),
        _Internal::party_context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.proto.IsolationInfo)
  return target;
}

size_t IsolationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.proto.IsolationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string top_frame_origin = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top_frame_origin());
    }

    // optional string frame_origin = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_origin());
    }

    // optional string site_for_cookies = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_site_for_cookies());
    }

    // optional .net.proto.IsolationInfo.PartyContext party_context = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *party_context_);
    }

    // optional int32 request_type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsolationInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IsolationInfo*>(
      &from));
}

void IsolationInfo::MergeFrom(const IsolationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.proto.IsolationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_top_frame_origin(from._internal_top_frame_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_frame_origin(from._internal_frame_origin());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_site_for_cookies(from._internal_site_for_cookies());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_party_context()->::net::proto::IsolationInfo_PartyContext::MergeFrom(from._internal_party_context());
    }
    if (cached_has_bits & 0x00000010u) {
      request_type_ = from.request_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IsolationInfo::CopyFrom(const IsolationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.proto.IsolationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolationInfo::IsInitialized() const {
  return true;
}

void IsolationInfo::InternalSwap(IsolationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &top_frame_origin_, lhs_arena,
      &other->top_frame_origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame_origin_, lhs_arena,
      &other->frame_origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &site_for_cookies_, lhs_arena,
      &other->site_for_cookies_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IsolationInfo, request_type_)
      + sizeof(IsolationInfo::request_type_)
      - PROTOBUF_FIELD_OFFSET(IsolationInfo, party_context_)>(
          reinterpret_cast<char*>(&party_context_),
          reinterpret_cast<char*>(&other->party_context_));
}

std::string IsolationInfo::GetTypeName() const {
  return "net.proto.IsolationInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::net::proto::IsolationInfo_PartyContext*
Arena::CreateMaybeMessage< ::net::proto::IsolationInfo_PartyContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::proto::IsolationInfo_PartyContext >(arena);
}
template<> PROTOBUF_NOINLINE ::net::proto::IsolationInfo*
Arena::CreateMaybeMessage< ::net::proto::IsolationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::proto::IsolationInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
